; Segment CODE
00001C00: mov dx, 0x1ab5
00001C03: mov word ptr cs:[0x291], dx
00001C08: mov ah, 0x30
00001C0A: int 0x21
00001C0C: mov bp, word ptr [2]
00001C10: mov bx, word ptr [0x2c]
00001C14: mov ds, dx
00001C16: mov word ptr [0x7d], ax
00001C19: mov word ptr [0x7b], es
00001C1D: mov word ptr [0x77], bx
00001C21: mov word ptr [0x91], bp
00001C25: call 0x1d7d
00001C28: mov ax, word ptr [0x77]
00001C2B: mov es, ax
00001C2D: xor ax, ax
00001C2F: mov bx, ax
00001C31: mov di, ax
00001C33: mov cx, 0x7fff
00001C36: cld 
00001C37: repne scasb al, byte ptr es:[di]
00001C39: jcxz 0x1c7e
00001C3B: inc bx
00001C3C: cmp byte ptr es:[di], al
00001C3F: jne 0x1c37
00001C41: or ch, 0x80
00001C44: neg cx
00001C46: mov word ptr [0x75], cx
00001C4A: mov cx, 2
00001C4D: shl bx, cl
00001C4F: add bx, 0x10
00001C52: and bx, 0xfff0
00001C55: mov word ptr [0x79], bx
00001C59: mov dx, ss
00001C5B: sub bp, dx
00001C5D: mov di, 0x1ab5
00001C60: mov es, di
00001C62: mov di, word ptr es:[0x94]
00001C67: cmp di, 0x200
00001C6B: jae 0x1c75
00001C6D: mov di, 0x200
00001C70: mov word ptr es:[0x94], di
00001C75: mov cl, 4
00001C77: shr di, cl
00001C79: inc di
00001C7A: cmp bp, di
00001C7C: jae 0x1c81
00001C7E: jmp 0x1e7a
00001C81: mov bx, di
00001C83: add bx, dx
00001C85: mov word ptr [0x89], bx
00001C89: mov word ptr [0x8d], bx
00001C8D: mov ax, word ptr [0x7b]
00001C90: sub bx, ax
00001C92: mov es, ax
00001C94: mov ah, 0x4a
00001C96: push di
00001C97: int 0x21
00001C99: pop di
00001C9A: shl di, cl
00001C9C: cli 
00001C9D: mov ss, dx
00001C9F: mov sp, di
00001CA1: sti 
00001CA2: mov ax, 0x1ab5
00001CA5: mov es, ax
00001CA7: mov word ptr es:[0x94], di
00001CAC: xor ax, ax
00001CAE: mov es, word ptr cs:[0x291]
00001CB3: mov di, 0x76d6
00001CB6: mov cx, 0x879c
00001CB9: sub cx, di
00001CBB: cld 
00001CBC: rep stosb byte ptr es:[di], al
00001CBE: cmp word ptr [0x74d0], 0x14
00001CC3: jbe 0x1d0c
00001CC5: cmp byte ptr [0x7d], 3
00001CCA: jb 0x1d0c
00001CCC: ja 0x1cd5
00001CCE: cmp byte ptr [0x7e], 0x1e
00001CD3: jb 0x1d0c
00001CD5: mov ax, 0x5801
00001CD8: mov bx, 2
00001CDB: int 0x21
00001CDD: jb 0x1d09
00001CDF: mov ah, 0x67
00001CE1: mov bx, word ptr [0x74d0]
00001CE5: int 0x21
00001CE7: jb 0x1d09
00001CE9: mov ah, 0x48
00001CEB: mov bx, 1
00001CEE: int 0x21
00001CF0: jb 0x1d09
00001CF2: inc ax
00001CF3: mov word ptr [0x91], ax
00001CF6: dec ax
00001CF7: mov es, ax
00001CF9: mov ah, 0x49
00001CFB: int 0x21
00001CFD: jb 0x1d09
00001CFF: mov ax, 0x5801
00001D02: mov bx, 0
00001D05: int 0x21
00001D07: jae 0x1d0c
00001D09: jmp 0x1e7a
00001D0C: mov ah, 0
00001D0E: int 0x1a
00001D10: mov word ptr [0x81], dx
00001D14: mov word ptr [0x83], cx
00001D18: or al, al
00001D1A: je 0x1d28
00001D1C: mov ax, 0x40
00001D1F: mov es, ax
00001D21: mov bx, 0x70
00001D24: mov byte ptr es:[bx], 1
00001D28: xor bp, bp
00001D2A: mov es, word ptr cs:[0x291]
00001D2F: mov si, 0x76b8
00001D32: mov di, 0x76d0
00001D35: call 0x1ded
00001D38: push word ptr [0x73]
00001D3C: push word ptr [0x71]
00001D40: push word ptr [0x6f]
00001D44: push word ptr [0x6d]
00001D48: push word ptr [0x6b]
00001D4C: lcall 0x4e6, 8
00001D51: push ax
00001D52: nop 
00001D53: push cs
00001D54: call 0x2ac0
00001D57: mov es, word ptr cs:[0x291]
00001D5C: push si
00001D5D: push di
00001D5E: mov si, 0x76d0
00001D61: mov di, 0x76d6
00001D64: call 0x1e31
00001D67: pop di
00001D68: pop si
00001D69: retf 
00001D6A: retf 
00001D6B: mov bp, sp
00001D6D: mov ah, 0x4c
00001D6F: mov al, byte ptr [bp + 4]
00001D72: int 0x21
00001D74: mov cx, 0xe
00001D77: mov dx, 0x2f
00001D7A: jmp 0x1e80
00001D7D: push ds
00001D7E: mov ax, 0x3500
00001D81: int 0x21
00001D83: mov word ptr [0x5b], bx
00001D87: mov word ptr [0x5d], es
00001D8B: mov ax, 0x3504
00001D8E: int 0x21
00001D90: mov word ptr [0x5f], bx
00001D94: mov word ptr [0x61], es
00001D98: mov ax, 0x3505
00001D9B: int 0x21
00001D9D: mov word ptr [0x63], bx
00001DA1: mov word ptr [0x65], es
00001DA5: mov ax, 0x3506
00001DA8: int 0x21
00001DAA: mov word ptr [0x67], bx
00001DAE: mov word ptr [0x69], es
00001DB2: mov ax, 0x2500
00001DB5: mov dx, cs
00001DB7: mov ds, dx
00001DB9: mov dx, 0x174
00001DBC: int 0x21
00001DBE: pop ds
00001DBF: ret 
00001DC0: push ds
00001DC1: mov ax, 0x2500
00001DC4: lds dx, ptr [0x5b]
00001DC8: int 0x21
00001DCA: pop ds
00001DCB: push ds
00001DCC: mov ax, 0x2504
00001DCF: lds dx, ptr [0x5f]
00001DD3: int 0x21
00001DD5: pop ds
00001DD6: push ds
00001DD7: mov ax, 0x2505
00001DDA: lds dx, ptr [0x63]
00001DDE: int 0x21
00001DE0: pop ds
00001DE1: push ds
00001DE2: mov ax, 0x2506
00001DE5: lds dx, ptr [0x67]
00001DE9: int 0x21
00001DEB: pop ds
00001DEC: retf 
00001DED: mov ax, 0x100
00001DF0: mov dx, di
00001DF2: mov bx, si
00001DF4: cmp bx, di
00001DF6: je 0x1e11
00001DF8: cmp byte ptr es:[bx], 0xff
00001DFC: je 0x1e0c
00001DFE: mov cl, byte ptr es:[bx + 1]
00001E02: xor ch, ch
00001E04: cmp cx, ax
00001E06: jae 0x1e0c
00001E08: mov ax, cx
00001E0A: mov dx, bx
00001E0C: add bx, 6
00001E0F: jmp 0x1df4
00001E11: cmp dx, di
00001E13: je 0x1e30
00001E15: mov bx, dx
00001E17: cmp byte ptr es:[bx], 0
00001E1B: mov byte ptr es:[bx], 0xff
00001E1F: push es
00001E20: je 0x1e29
00001E22: lcall es:[bx + 2]
00001E26: pop es
00001E27: jmp 0x1ded
00001E29: call word ptr es:[bx + 2]
00001E2D: pop es
00001E2E: jmp 0x1ded
00001E30: ret 
00001E31: mov ah, 0
00001E33: mov dx, di
00001E35: mov bx, si
00001E37: cmp bx, di
00001E39: je 0x1e52
00001E3B: cmp byte ptr es:[bx], 0xff
00001E3F: je 0x1e4d
00001E41: cmp byte ptr es:[bx + 1], ah
00001E45: jb 0x1e4d
00001E47: mov ah, byte ptr es:[bx + 1]
00001E4B: mov dx, bx
00001E4D: add bx, 6
00001E50: jmp 0x1e37
00001E52: cmp dx, di
00001E54: je 0x1e71
00001E56: mov bx, dx
00001E58: cmp byte ptr es:[bx], 0
00001E5C: mov byte ptr es:[bx], 0xff
00001E60: push es
00001E61: je 0x1e6a
00001E63: lcall es:[bx + 2]
00001E67: pop es
00001E68: jmp 0x1e31
00001E6A: call word ptr es:[bx + 2]
00001E6E: pop es
00001E6F: jmp 0x1e31
00001E71: ret 
00001E72: mov ah, 0x40
00001E74: mov bx, 2
00001E77: int 0x21
00001E79: ret 
00001E7A: mov cx, 0x1e
00001E7D: mov dx, 0x3d
00001E80: mov ds, word ptr cs:[0x291]
00001E85: call 0x1e72
00001E88: mov ax, 3
00001E8B: push ax
00001E8C: nop 
00001E8D: push cs
00001E8E: call 0x2acf
00001E91: add byte ptr [bx + si], al
00001E93: add al, 0xc0
00001E95: push bp
00001E96: mov bp, sp
00001E98: push ds
00001E99: push si
00001E9A: call 0x1f91
00001E9D: or ax, ax
00001E9F: je 0x1eaf
00001EA1: nop 
00001EA2: nop 
00001EA3: nop 
00001EA4: mov ax, 0x688
00001EA7: lds si, ptr [bp + 6]
00001EAA: int 0x66
00001EAC: mov ax, 1
00001EAF: pop si
00001EB0: pop ds
00001EB1: mov sp, bp
00001EB3: pop bp
00001EB4: retf 
00001EB5: mov ax, 0x689
00001EB8: int 0x66
00001EBA: retf 
00001EBB: push bp
00001EBC: mov bp, sp
00001EBE: push ds
00001EBF: push si
00001EC0: mov ax, 0x68a
00001EC3: lds si, ptr [bp + 6]
00001EC6: int 0x66
00001EC8: pop si
00001EC9: pop ds
00001ECA: mov sp, bp
00001ECC: pop bp
00001ECD: retf 
00001ECE: push bp
00001ECF: mov bp, sp
00001ED1: push ds
00001ED2: push si
00001ED3: mov ax, 0x68b
00001ED6: lds si, ptr [bp + 6]
00001ED9: int 0x66
00001EDB: pop si
00001EDC: pop ds
00001EDD: mov sp, bp
00001EDF: pop bp
00001EE0: retf 
00001EE1: push bp
00001EE2: mov bp, sp
00001EE4: push ds
00001EE5: push si
00001EE6: mov ax, 0x694
00001EE9: lds si, ptr [bp + 6]
00001EEC: int 0x66
00001EEE: pop si
00001EEF: pop ds
00001EF0: mov sp, bp
00001EF2: pop bp
00001EF3: retf 
00001EF4: mov ax, 0x68c
00001EF7: int 0x66
00001EF9: retf 
00001EFA: push bp
00001EFB: mov bp, sp
00001EFD: push es
00001EFE: push ds
00001EFF: push si
00001F00: push di
00001F01: cld 
00001F02: mov ax, 0x68c
00001F05: int 0x66
00001F07: les di, ptr [bp + 6]
00001F0A: mov ds, bx
00001F0C: mov si, cx
00001F0E: mov cx, 0xffff
00001F11: lodsb al, byte ptr [si]
00001F12: stosb byte ptr es:[di], al
00001F13: inc cx
00001F14: or al, al
00001F16: jne 0x1f11
00001F18: mov ax, cx
00001F1A: pop di
00001F1B: pop si
00001F1C: pop ds
00001F1D: pop es
00001F1E: mov sp, bp
00001F20: pop bp
00001F21: retf 
00001F22: mov ax, 0x68d
00001F25: int 0x66
00001F27: retf 
00001F28: push bp
00001F29: mov bp, sp
00001F2B: mov bx, word ptr [bp + 6]
00001F2E: mov dx, word ptr [bp + 8]
00001F31: mov ax, 0x68e
00001F34: int 0x66
00001F36: mov sp, bp
00001F38: pop bp
00001F39: retf 
00001F3A: mov ax, 0x68f
00001F3D: int 0x66
00001F3F: retf 
00001F40: push bp
00001F41: mov bp, sp
00001F43: mov ax, 0x690
00001F46: mov bx, word ptr [bp + 6]
00001F49: mov cx, word ptr [bp + 8]
00001F4C: mov dx, word ptr [bp + 0xa]
00001F4F: int 0x66
00001F51: mov sp, bp
00001F53: pop bp
00001F54: retf 
00001F55: mov ax, 0x691
00001F58: int 0x66
00001F5A: retf 
00001F5B: mov ax, 0x689
00001F5E: int 0x66
00001F60: or ax, ax
00001F62: jne 0x1f5b
00001F64: retf 
00001F65: push bp
00001F66: mov bp, sp
00001F68: push ds
00001F69: push si
00001F6A: lds si, ptr [bp + 6]
00001F6D: mov ax, 0x695
00001F70: int 0x66
00001F72: pop si
00001F73: pop ds
00001F74: mov sp, bp
00001F76: pop bp
00001F77: retf 
00001F78: mov ax, 0x696
00001F7B: int 0x66
00001F7D: retf 
00001F7E: push bp
00001F7F: mov bp, sp
00001F81: mov dx, word ptr [bp + 6]
00001F84: mov ax, 0x697
00001F87: int 0x66
00001F89: mov sp, bp
00001F8B: pop bp
00001F8C: retf 
00001F8D: call 0x1f91
00001F90: retf 
00001F91: push ds
00001F92: push si
00001F93: mov si, 0x198
00001F96: xor ax, ax
00001F98: mov ds, ax
00001F9A: lds si, ptr [si]
00001F9C: or si, si
00001F9E: je 0x1fe3
00001FA0: nop 
00001FA1: nop 
00001FA2: nop 
00001FA3: sub si, 6
00001FA6: cmp word ptr [si], 0x494d
00001FAA: jne 0x1fca
00001FAC: nop 
00001FAD: nop 
00001FAE: nop 
00001FAF: cmp word ptr [si + 2], 0x4944
00001FB4: jne 0x1fca
00001FB6: nop 
00001FB7: nop 
00001FB8: nop 
00001FB9: mov ax, 0x701
00001FBC: int 0x66
00001FBE: or ax, ax
00001FC0: jne 0x1fdd
00001FC2: nop 
00001FC3: nop 
00001FC4: nop 
00001FC5: je 0x1fe3
00001FC7: nop 
00001FC8: nop 
00001FC9: nop 
00001FCA: cmp word ptr [si], 0x454b
00001FCE: jne 0x1fe3
00001FD0: nop 
00001FD1: nop 
00001FD2: nop 
00001FD3: cmp word ptr [si + 2], 0x4e52
00001FD8: jne 0x1fe3
00001FDA: nop 
00001FDB: nop 
00001FDC: nop 
00001FDD: mov ax, 1
00001FE0: pop si
00001FE1: pop ds
00001FE2: ret 
00001FE3: xor ax, ax
00001FE5: jmp 0x1fe0
00001FE7: add byte ptr [bx + si], al
00001FE9: add byte ptr [bx + si], al
00001FEB: add byte ptr [bx + si], al
00001FED: add byte ptr [bp + si], al
00001FEF: add byte ptr [bx + si], al
00001FF1: add ax, word ptr [bp + si]
00001FF3: add byte ptr [bx + si], al
00001FF5: push bp
00001FF6: mov bp, sp
00001FF8: push es
00001FF9: push ds
00001FFA: push si
00001FFB: push di
00001FFC: cld 
00001FFD: push cs
00001FFE: mov ax, 0x3eb
00002001: push ax
00002002: xor ax, ax
00002004: push ax
00002005: push ax
00002006: les dx, ptr [bp + 6]
00002009: push es
0000200A: push dx
0000200B: nop 
0000200C: push cs
0000200D: call 0x2495
00002010: add sp, 0xc
00002013: or dx, dx
00002015: jne 0x201a
00002017: jmp 0x209d
0000201A: mov word ptr cs:[0x3e7], ax
0000201E: mov word ptr cs:[0x3e9], dx
00002023: mov ax, word ptr cs:[0x3eb]
00002027: mov es, ax
00002029: sub ax, 0x10
0000202C: cmp byte ptr es:[3], 0x44
00002032: jne 0x2082
00002034: nop 
00002035: nop 
00002036: nop 
00002037: cmp byte ptr es:[4], 0x49
0000203D: jne 0x2082
0000203F: nop 
00002040: nop 
00002041: nop 
00002042: cmp byte ptr es:[5], 0x47
00002048: jne 0x2082
0000204A: nop 
0000204B: nop 
0000204C: nop 
0000204D: cmp byte ptr es:[6], 0x50
00002053: jne 0x2082
00002055: nop 
00002056: nop 
00002057: nop 
00002058: cmp byte ptr es:[7], 0x41
0000205E: jne 0x2082
00002060: nop 
00002061: nop 
00002062: nop 
00002063: cmp byte ptr es:[8], 0x4b
00002069: jne 0x2082
0000206B: nop 
0000206C: nop 
0000206D: nop 
0000206E: mov word ptr cs:[0x3ef], ax
00002072: mov word ptr cs:[0x3f3], ax
00002076: lcall cs:[0x3ed]
0000207B: or ax, ax
0000207D: je 0x209a
0000207F: nop 
00002080: nop 
00002081: nop 
00002082: push word ptr cs:[0x3eb]
00002087: xor ax, ax
00002089: push ax
0000208A: lcall 0x1a10, 0x34
0000208F: add sp, 4
00002092: xor ax, ax
00002094: mov word ptr cs:[0x3eb], ax
00002098: jmp 0x209d
0000209A: mov ax, 1
0000209D: pop di
0000209E: pop si
0000209F: pop ds
000020A0: pop es
000020A1: mov sp, bp
000020A3: pop bp
000020A4: retf 
000020A5: cmp word ptr cs:[0x3eb], 0
000020AB: je 0x20ce
000020AD: nop 
000020AE: nop 
000020AF: nop 
000020B0: lcall cs:[0x3f1]
000020B5: push word ptr cs:[0x3e9]
000020BA: push word ptr cs:[0x3e7]
000020BF: lcall 0x1a10, 0x34
000020C4: add sp, 4
000020C7: mov word ptr cs:[0x3eb], 0
000020CE: retf 
000020CF: push bp
000020D0: mov bp, sp
000020D2: mov ax, 0x702
000020D5: mov bx, word ptr [bp + 6]
000020D8: int 0x66
000020DA: mov sp, bp
000020DC: pop bp
000020DD: retf 
000020DE: push bp
000020DF: mov bp, sp
000020E1: mov ax, 0x703
000020E4: mov bx, word ptr [bp + 6]
000020E7: mov cx, word ptr [bp + 8]
000020EA: int 0x66
000020EC: mov sp, bp
000020EE: pop bp
000020EF: retf 
000020F0: push bp
000020F1: mov bp, sp
000020F3: push di
000020F4: push si
000020F5: mov ax, 0x704
000020F8: mov bx, word ptr [bp + 6]
000020FB: mov cx, word ptr [bp + 8]
000020FE: mov si, word ptr [bp + 0xa]
00002101: mov di, word ptr [bp + 0xc]
00002104: int 0x66
00002106: pop si
00002107: pop di
00002108: mov sp, bp
0000210A: pop bp
0000210B: retf 
0000210C: mov ax, 0x705
0000210F: int 0x66
00002111: retf 
00002112: push bp
00002113: mov bp, sp
00002115: mov ax, 0x706
00002118: mov bx, word ptr [bp + 6]
0000211B: mov cx, word ptr [bp + 8]
0000211E: int 0x66
00002120: mov sp, bp
00002122: pop bp
00002123: retf 
00002124: call 0x2128
00002127: retf 
00002128: push ds
00002129: push si
0000212A: mov si, 0x198
0000212D: xor ax, ax
0000212F: mov ds, ax
00002131: lds si, ptr [si]
00002133: or si, si
00002135: je 0x2156
00002137: nop 
00002138: nop 
00002139: nop 
0000213A: sub si, 6
0000213D: cmp word ptr [si], 0x494d
00002141: jne 0x2156
00002143: nop 
00002144: nop 
00002145: nop 
00002146: cmp word ptr [si + 2], 0x4944
0000214B: jne 0x2156
0000214D: nop 
0000214E: nop 
0000214F: nop 
00002150: mov ax, 1
00002153: pop si
00002154: pop ds
00002155: ret 
00002156: xor ax, ax
00002158: jmp 0x2153
0000215A: mov ax, 0x701
0000215D: int 0x66
0000215F: retf 
00002160: mov ax, 0x707
00002163: int 0x66
00002165: retf 
00002166: mov ax, 0x708
00002169: int 0x66
0000216B: retf 
0000216C: mov ax, 0x709
0000216F: int 0x66
00002171: retf 
00002172: mov ax, 0x70a
00002175: int 0x66
00002177: retf 
00002178: mov ax, 0x70b
0000217B: int 0x66
0000217D: retf 
0000217E: mov ax, 0x70c
00002181: int 0x66
00002183: retf 
00002184: mov ax, 0x70e
00002187: int 0x66
00002189: retf 
0000218A: push bp
0000218B: mov bp, sp
0000218D: mov ax, 0x70f
00002190: mov bx, word ptr [bp + 6]
00002193: mov cx, word ptr [bp + 8]
00002196: int 0x66
00002198: mov sp, bp
0000219A: pop bp
0000219B: retf 
0000219C: push bp
0000219D: mov bp, sp
0000219F: mov ax, 0x70d
000021A2: mov bx, word ptr [bp + 6]
000021A5: mov cx, word ptr [bp + 8]
000021A8: int 0x66
000021AA: mov sp, bp
000021AC: pop bp
000021AD: retf 
000021AE: add byte ptr [bx + si], al
000021B0: add byte ptr [bx + si], al
000021B2: add byte ptr [bx + si], al
000021B4: add byte ptr [bp + si], al
000021B6: add byte ptr [bx + si], al
000021B8: add ax, word ptr [bp + si]
000021BA: add byte ptr [bx + si], al
000021BC: push bp
000021BD: mov bp, sp
000021BF: push es
000021C0: push ds
000021C1: push si
000021C2: push di
000021C3: cld 
000021C4: push cs
000021C5: mov ax, 0x5b2
000021C8: push ax
000021C9: xor ax, ax
000021CB: push ax
000021CC: push ax
000021CD: les dx, ptr [bp + 6]
000021D0: push es
000021D1: push dx
000021D2: nop 
000021D3: push cs
000021D4: call 0x2495
000021D7: add sp, 0xc
000021DA: or dx, dx
000021DC: jne 0x21e1
000021DE: jmp 0x2264
000021E1: mov word ptr cs:[0x5ae], ax
000021E5: mov word ptr cs:[0x5b0], dx
000021EA: mov ax, word ptr cs:[0x5b2]
000021EE: mov es, ax
000021F0: sub ax, 0x10
000021F3: cmp byte ptr es:[3], 0x4d
000021F9: jne 0x2249
000021FB: nop 
000021FC: nop 
000021FD: nop 
000021FE: cmp byte ptr es:[4], 0x49
00002204: jne 0x2249
00002206: nop 
00002207: nop 
00002208: nop 
00002209: cmp byte ptr es:[5], 0x44
0000220F: jne 0x2249
00002211: nop 
00002212: nop 
00002213: nop 
00002214: cmp byte ptr es:[6], 0x50
0000221A: jne 0x2249
0000221C: nop 
0000221D: nop 
0000221E: nop 
0000221F: cmp byte ptr es:[7], 0x41
00002225: jne 0x2249
00002227: nop 
00002228: nop 
00002229: nop 
0000222A: cmp byte ptr es:[8], 0x4b
00002230: jne 0x2249
00002232: nop 
00002233: nop 
00002234: nop 
00002235: mov word ptr cs:[0x5b6], ax
00002239: mov word ptr cs:[0x5ba], ax
0000223D: lcall cs:[0x5b4]
00002242: or ax, ax
00002244: je 0x2261
00002246: nop 
00002247: nop 
00002248: nop 
00002249: push word ptr cs:[0x5b2]
0000224E: xor ax, ax
00002250: push ax
00002251: lcall 0x1a10, 0x34
00002256: add sp, 4
00002259: xor ax, ax
0000225B: mov word ptr cs:[0x5b2], ax
0000225F: jmp 0x2264
00002261: mov ax, 1
00002264: pop di
00002265: pop si
00002266: pop ds
00002267: pop es
00002268: mov sp, bp
0000226A: pop bp
0000226B: retf 
0000226C: cmp word ptr cs:[0x5b2], 0
00002272: je 0x2295
00002274: nop 
00002275: nop 
00002276: nop 
00002277: lcall cs:[0x5b8]
0000227C: push word ptr cs:[0x5b0]
00002281: push word ptr cs:[0x5ae]
00002286: lcall 0x1a10, 0x34
0000228B: add sp, 4
0000228E: mov word ptr cs:[0x5b2], 0
00002295: retf 
00002296: push bp
00002297: mov bp, sp
00002299: push es
0000229A: push ds
0000229B: push si
0000229C: push di
0000229D: cld 
0000229E: mov bx, word ptr [bp + 8]
000022A1: mov cx, word ptr [bp + 6]
000022A4: mov dx, word ptr [bp + 0xc]
000022A7: mov si, word ptr [bp + 0xa]
000022AA: mov ax, 0x710
000022AD: int 0x66
000022AF: pop di
000022B0: pop si
000022B1: pop ds
000022B2: pop es
000022B3: mov sp, bp
000022B5: pop bp
000022B6: retf 
000022B7: push bp
000022B8: mov bp, sp
000022BA: push ds
000022BB: push si
000022BC: push di
000022BD: lds dx, ptr [bp + 6]
000022C0: mov ax, word ptr [bp + 0xe]
000022C3: or al, al
000022C5: jne 0x22d1
000022C7: xor cx, cx
000022C9: mov ah, 0x3c
000022CB: int 0x21
000022CD: jb 0x230a
000022CF: jae 0x22d9
000022D1: mov al, 2
000022D3: mov ah, 0x3d
000022D5: int 0x21
000022D7: jb 0x230a
000022D9: mov bx, ax
000022DB: mov ah, 0x42
000022DD: mov al, 2
000022DF: xor cx, cx
000022E1: xor dx, dx
000022E3: int 0x21
000022E5: jb 0x230a
000022E7: lds di, ptr [bp + 0xa]
000022EA: or di, di
000022EC: jne 0x22f2
000022EE: mov cx, ds
000022F0: jcxz 0x22f7
000022F2: mov word ptr [di], ax
000022F4: mov word ptr [di + 2], dx
000022F7: mov ah, 0x42
000022F9: xor al, al
000022FB: xor cx, cx
000022FD: xor dx, dx
000022FF: int 0x21
00002301: jb 0x230a
00002303: mov ax, bx
00002305: pop di
00002306: pop si
00002307: pop ds
00002308: pop bp
00002309: retf 
0000230A: xor ax, ax
0000230C: pop di
0000230D: pop si
0000230E: pop ds
0000230F: pop bp
00002310: retf 
00002311: push bp
00002312: mov bp, sp
00002314: mov ah, 0x3e
00002316: mov bx, word ptr [bp + 6]
00002319: int 0x21
0000231B: jb 0x2322
0000231D: mov ax, 1
00002320: pop bp
00002321: retf 
00002322: xor ax, ax
00002324: pop bp
00002325: retf 
00002326: push bp
00002327: mov bp, sp
00002329: mov bx, word ptr [bp + 6]
0000232C: mov ah, 0x42
0000232E: mov al, 1
00002330: xor cx, cx
00002332: xor dx, dx
00002334: int 0x21
00002336: pop bp
00002337: retf 
00002338: push bp
00002339: mov bp, sp
0000233B: mov bx, word ptr [bp + 6]
0000233E: mov ah, 0x42
00002340: mov al, 0
00002342: mov dx, word ptr [bp + 8]
00002345: mov cx, word ptr [bp + 0xa]
00002348: int 0x21
0000234A: jb 0x234e
0000234C: pop bp
0000234D: retf 
0000234E: xor ax, ax
00002350: xor dx, dx
00002352: pop bp
00002353: retf 
00002354: push bp
00002355: mov bp, sp
00002357: push si
00002358: push di
00002359: mov bx, word ptr [bp + 0xe]
0000235C: push ds
0000235D: lds dx, ptr [bp + 6]
00002360: mov cx, 0x8000
00002363: cmp word ptr [bp + 0xc], 0
00002367: jne 0x2371
00002369: cmp cx, word ptr [bp + 0xa]
0000236C: jbe 0x2371
0000236E: mov cx, word ptr [bp + 0xa]
00002371: mov ah, 0x3f
00002373: int 0x21
00002375: jb 0x23ab
00002377: cmp cx, ax
00002379: jne 0x23ab
0000237B: sub word ptr [bp + 0xa], cx
0000237E: sbb word ptr [bp + 0xc], 0
00002382: mov ax, cx
00002384: and ax, 0xf
00002387: add dx, ax
00002389: shr cx, 1
0000238B: shr cx, 1
0000238D: shr cx, 1
0000238F: shr cx, 1
00002391: mov ax, ds
00002393: add ax, cx
00002395: mov ds, ax
00002397: cmp word ptr [bp + 0xa], 0
0000239B: jne 0x2360
0000239D: cmp word ptr [bp + 0xc], 0
000023A1: jne 0x2360
000023A3: mov ax, 1
000023A6: pop ds
000023A7: pop di
000023A8: pop si
000023A9: pop bp
000023AA: retf 
000023AB: xor ax, ax
000023AD: pop ds
000023AE: pop di
000023AF: pop si
000023B0: pop bp
000023B1: retf 
000023B2: push bp
000023B3: mov bp, sp
000023B5: push si
000023B6: push di
000023B7: mov bx, word ptr [bp + 0xe]
000023BA: push ds
000023BB: lds dx, ptr [bp + 6]
000023BE: mov cx, 0x8000
000023C1: cmp word ptr [bp + 0xc], 0
000023C5: jne 0x23cf
000023C7: cmp cx, word ptr [bp + 0xa]
000023CA: jbe 0x23cf
000023CC: mov cx, word ptr [bp + 0xa]
000023CF: mov ah, 0x40
000023D1: int 0x21
000023D3: jb 0x2409
000023D5: cmp cx, ax
000023D7: jne 0x2409
000023D9: sub word ptr [bp + 0xa], cx
000023DC: sbb word ptr [bp + 0xc], 0
000023E0: mov ax, cx
000023E2: and ax, 0xf
000023E5: add dx, ax
000023E7: shr cx, 1
000023E9: shr cx, 1
000023EB: shr cx, 1
000023ED: shr cx, 1
000023EF: mov ax, ds
000023F1: add ax, cx
000023F3: mov ds, ax
000023F5: cmp word ptr [bp + 0xa], 0
000023F9: jne 0x23be
000023FB: cmp word ptr [bp + 0xc], 0
000023FF: jne 0x23be
00002401: mov ax, 1
00002404: pop ds
00002405: pop di
00002406: pop si
00002407: pop bp
00002408: retf 
00002409: xor ax, ax
0000240B: pop ds
0000240C: pop di
0000240D: pop si
0000240E: pop bp
0000240F: retf 
00002410: push bp
00002411: mov bp, sp
00002413: push di
00002414: push si
00002415: push ds
00002416: mov si, ds
00002418: lds dx, ptr [bp + 6]
0000241B: xor al, al
0000241D: mov ah, 0x3d
0000241F: int 0x21
00002421: jb 0x248c
00002423: mov bx, ax
00002425: mov ah, 0x42
00002427: mov al, 2
00002429: xor cx, cx
0000242B: xor dx, dx
0000242D: int 0x21
0000242F: jb 0x2488
00002431: lds di, ptr [bp + 0xa]
00002434: or di, di
00002436: je 0x243d
00002438: mov word ptr [di], ax
0000243A: mov word ptr [di + 2], dx
0000243D: mov ds, si
0000243F: mov si, bx
00002441: push dx
00002442: push ax
00002443: lcall 0x1a10, 0x2f
00002448: add sp, 4
0000244B: mov bx, si
0000244D: or ax, ax
0000244F: jne 0x2455
00002451: or dx, dx
00002453: je 0x2488
00002455: mov di, ax
00002457: mov si, dx
00002459: mov ah, 0x42
0000245B: xor al, al
0000245D: xor cx, cx
0000245F: xor dx, dx
00002461: int 0x21
00002463: mov ds, si
00002465: mov cx, 0x8000
00002468: mov dx, di
0000246A: mov ah, 0x3f
0000246C: int 0x21
0000246E: cmp ax, cx
00002470: jne 0x247b
00002472: mov ax, ds
00002474: add ax, 0x800
00002477: mov ds, ax
00002479: jmp 0x246a
0000247B: mov ah, 0x3e
0000247D: int 0x21
0000247F: mov dx, si
00002481: mov ax, di
00002483: pop ds
00002484: pop si
00002485: pop di
00002486: pop bp
00002487: retf 
00002488: mov ah, 0x3e
0000248A: int 0x21
0000248C: xor ax, ax
0000248E: xor dx, dx
00002490: pop ds
00002491: pop si
00002492: pop di
00002493: pop bp
00002494: retf 
00002495: push bp
00002496: mov bp, sp
00002498: push di
00002499: push si
0000249A: push ds
0000249B: mov si, ds
0000249D: lds dx, ptr [bp + 6]
000024A0: xor al, al
000024A2: mov ah, 0x3d
000024A4: int 0x21
000024A6: jae 0x24ab
000024A8: jmp 0x2536
000024AB: mov bx, ax
000024AD: mov ah, 0x42
000024AF: mov al, 2
000024B1: xor cx, cx
000024B3: xor dx, dx
000024B5: int 0x21
000024B7: jb 0x2532
000024B9: lds di, ptr [bp + 0xa]
000024BC: or di, di
000024BE: je 0x24c5
000024C0: mov word ptr [di], ax
000024C2: mov word ptr [di + 2], dx
000024C5: mov ds, si
000024C7: mov si, bx
000024C9: add ax, 0x10
000024CC: adc dx, 0
000024CF: push dx
000024D0: push ax
000024D1: lcall 0x1a10, 0x2f
000024D6: add sp, 4
000024D9: mov bx, si
000024DB: or ax, ax
000024DD: jne 0x24e3
000024DF: or dx, dx
000024E1: je 0x2532
000024E3: mov di, ax
000024E5: mov si, dx
000024E7: mov ah, 0x42
000024E9: xor al, al
000024EB: xor cx, cx
000024ED: xor dx, dx
000024EF: int 0x21
000024F1: mov ds, si
000024F3: mov cx, 0x8000
000024F6: mov dx, di
000024F8: add dx, 0xf
000024FB: and dx, 0xfff0
000024FE: mov ah, 0x3f
00002500: int 0x21
00002502: cmp ax, cx
00002504: jne 0x250f
00002506: mov ax, ds
00002508: add ax, 0x800
0000250B: mov ds, ax
0000250D: jmp 0x24fe
0000250F: mov ah, 0x3e
00002511: int 0x21
00002513: mov dx, si
00002515: mov ax, di
00002517: add ax, 0xf
0000251A: shr ax, 1
0000251C: shr ax, 1
0000251E: shr ax, 1
00002520: shr ax, 1
00002522: add ax, dx
00002524: lds bx, ptr [bp + 0xe]
00002527: mov word ptr [bx], ax
00002529: mov dx, si
0000252B: mov ax, di
0000252D: pop ds
0000252E: pop si
0000252F: pop di
00002530: pop bp
00002531: retf 
00002532: mov ah, 0x3e
00002534: int 0x21
00002536: xor ax, ax
00002538: xor dx, dx
0000253A: pop ds
0000253B: pop si
0000253C: pop di
0000253D: pop bp
0000253E: retf 
0000253F: mov ah, 1
00002541: int 0x16
00002543: jne 0x2548
00002545: xor ax, ax
00002547: retf 
00002548: mov ax, 1
0000254B: retf 
0000254C: mov ah, 7
0000254E: int 0x21
00002550: xor ah, ah
00002552: or al, al
00002554: jne 0x255f
00002556: mov ah, 7
00002558: int 0x21
0000255A: xor ah, ah
0000255C: add ax, 0x100
0000255F: retf 
00002560: push bp
00002561: mov bp, sp
00002563: push es
00002564: push ds
00002565: push si
00002566: push di
00002567: les di, ptr [bp + 6]
0000256A: lds si, ptr [bp + 0xa]
0000256D: lodsb al, byte ptr [si]
0000256E: stosb byte ptr es:[di], al
0000256F: or al, al
00002571: jne 0x256d
00002573: pop di
00002574: pop si
00002575: pop ds
00002576: pop es
00002577: pop bp
00002578: retf 
00002579: push bp
0000257A: mov bp, sp
0000257C: push es
0000257D: push ds
0000257E: push si
0000257F: push di
00002580: les di, ptr [bp + 6]
00002583: xor ax, ax
00002585: mov cx, 0xffff
00002588: repne scasb al, byte ptr es:[di]
0000258A: dec di
0000258B: lds si, ptr [bp + 0xa]
0000258E: lodsb al, byte ptr [si]
0000258F: stosb byte ptr es:[di], al
00002590: or al, al
00002592: jne 0x258e
00002594: pop di
00002595: pop si
00002596: pop ds
00002597: pop es
00002598: pop bp
00002599: retf 
0000259A: push bp
0000259B: mov bp, sp
0000259D: mov ax, word ptr [bp + 6]
000025A0: mov dx, word ptr [bp + 8]
000025A3: sar dx, 1
000025A5: rcr ax, 1
000025A7: sar dx, 1
000025A9: rcr ax, 1
000025AB: sar dx, 1
000025AD: rcr ax, 1
000025AF: sar dx, 1
000025B1: rcr ax, 1
000025B3: or dx, dx
000025B5: jne 0x25c0
000025B7: mov bx, ax
000025B9: inc bx
000025BA: mov ah, 0x48
000025BC: int 0x21
000025BE: jae 0x25c2
000025C0: xor ax, ax
000025C2: mov dx, ax
000025C4: xor ax, ax
000025C6: pop bp
000025C7: retf 
000025C8: push bp
000025C9: mov bp, sp
000025CB: push es
000025CC: mov bx, word ptr [bp + 8]
000025CF: mov es, bx
000025D1: mov ah, 0x49
000025D3: int 0x21
000025D5: jae 0x25da
000025D7: mov ax, 0xffff
000025DA: pop es
000025DB: pop bp
000025DC: retf 
000025DD: push bp
000025DE: mov bp, sp
000025E0: push ds
000025E1: push si
000025E2: lds si, ptr [bp + 6]
000025E5: mov bl, 0xf
000025E7: lodsb al, byte ptr [si]
000025E8: or al, al
000025EA: je 0x25fc
000025EC: cmp al, 0xa
000025EE: jne 0x25f6
000025F0: mov ah, 0xe
000025F2: int 0x10
000025F4: mov al, 0xd
000025F6: mov ah, 0xe
000025F8: int 0x10
000025FA: jmp 0x25e7
000025FC: pop si
000025FD: pop ds
000025FE: pop bp
000025FF: retf 
00002600: push ds
00002601: xor ax, ax
00002603: mov ds, ax
00002605: mov ax, word ptr [0x20]
00002608: mov dx, word ptr [0x22]
0000260C: pop ds
0000260D: retf 
0000260E: push bp
0000260F: mov bp, sp
00002611: cli 
00002612: push ds
00002613: xor ax, ax
00002615: mov ds, ax
00002617: mov ax, word ptr [bp + 6]
0000261A: mov word ptr [0x20], ax
0000261D: mov ax, word ptr [bp + 8]
00002620: mov word ptr [0x22], ax
00002623: mov dx, word ptr [bp + 0xa]
00002626: mov al, 0x36
00002628: out 0x43, al
0000262A: jmp 0x262c
0000262C: mov ax, dx
0000262E: out 0x40, al
00002630: jmp 0x2632
00002632: mov al, ah
00002634: out 0x40, al
00002636: sti 
00002637: pop ds
00002638: mov sp, bp
0000263A: pop bp
0000263B: retf 
0000263C: push bp
0000263D: mov bp, sp
0000263F: push ds
00002640: lds dx, ptr [bp + 6]
00002643: mov ah, 0x41
00002645: int 0x21
00002647: jae 0x264d
00002649: xor ax, ax
0000264B: jmp 0x2650
0000264D: mov ax, 1
00002650: pop ds
00002651: mov sp, bp
00002653: pop bp
00002654: retf 
00002655: push bp
00002656: mov bp, sp
00002658: push es
00002659: push di
0000265A: les di, ptr [bp + 6]
0000265D: xor ax, ax
0000265F: mov cx, 0xffff
00002662: repne scasb al, byte ptr es:[di]
00002664: not cx
00002666: mov ax, cx
00002668: dec ax
00002669: pop di
0000266A: pop es
0000266B: mov sp, bp
0000266D: pop bp
0000266E: retf 
0000266F: push bp
00002670: mov bp, sp
00002672: push es
00002673: push ds
00002674: push si
00002675: push di
00002676: cld 
00002677: xor ax, ax
00002679: lds si, ptr [bp + 6]
0000267C: push ds
0000267D: pop es
0000267E: mov di, si
00002680: mov cx, 0xffff
00002683: xor ax, ax
00002685: repne scasb al, byte ptr es:[di]
00002687: not cx
00002689: mov di, si
0000268B: lodsb al, byte ptr [si]
0000268C: cmp al, 0x61
0000268E: jl 0x2696
00002690: cmp al, 0x7a
00002692: jg 0x2696
00002694: sub al, 0x20
00002696: stosb byte ptr es:[di], al
00002697: loop 0x268b
00002699: pop di
0000269A: pop si
0000269B: pop ds
0000269C: pop es
0000269D: mov sp, bp
0000269F: pop bp
000026A0: retf 
000026A1: push bp
000026A2: mov bp, sp
000026A4: push es
000026A5: push ds
000026A6: push si
000026A7: push di
000026A8: cld 
000026A9: lds si, ptr [bp + 6]
000026AC: les di, ptr [bp + 0xa]
000026AF: push di
000026B0: mov cx, 0xffff
000026B3: xor ax, ax
000026B5: repne scasb al, byte ptr es:[di]
000026B7: not cx
000026B9: pop di
000026BA: repe cmpsb byte ptr [si], byte ptr es:[di]
000026BC: xor bx, bx
000026BE: mov al, byte ptr [si - 1]
000026C1: mov bl, byte ptr es:[di - 1]
000026C5: sub ax, bx
000026C7: pop di
000026C8: pop si
000026C9: pop ds
000026CA: pop es
000026CB: mov sp, bp
000026CD: pop bp
000026CE: retf 
000026CF: push bp
000026D0: mov bp, sp
000026D2: push ds
000026D3: lds dx, ptr [bp + 6]
000026D6: xor al, al
000026D8: mov ah, 0x3d
000026DA: int 0x21
000026DC: jb 0x26ec
000026DE: mov bx, ax
000026E0: mov ah, 0x3e
000026E2: int 0x21
000026E4: mov ax, 1
000026E7: pop ds
000026E8: mov sp, bp
000026EA: pop bp
000026EB: retf 
000026EC: xor ax, ax
000026EE: jmp 0x26e7
000026F0: push bp
000026F1: mov bp, sp
000026F3: push es
000026F4: push ds
000026F5: push si
000026F6: push di
000026F7: cld 
000026F8: lds si, ptr [bp + 0xc]
000026FB: cmp word ptr [bp + 0xa], 0
000026FF: jne 0x2719
00002701: or si, si
00002703: je 0x2784
00002705: nop 
00002706: nop 
00002707: nop 
00002708: mov di, si
0000270A: push ds
0000270B: pop es
0000270C: xor ax, ax
0000270E: mov cx, 0xffff
00002711: repne scasb al, byte ptr es:[di]
00002713: neg cx
00002715: dec cx
00002716: mov word ptr [bp + 0xa], cx
00002719: mov ax, word ptr [bp + 8]
0000271C: or ax, ax
0000271E: js 0x2784
00002720: cmp ax, 0x19
00002723: jg 0x2784
00002725: mov ax, word ptr [bp + 6]
00002728: cmp ax, 0x4f
0000272B: jg 0x2784
0000272D: or ax, ax
0000272F: jns 0x2745
00002731: neg ax
00002733: or si, si
00002735: je 0x2739
00002737: add si, ax
00002739: sub word ptr [bp + 0xa], ax
0000273C: js 0x2784
0000273E: je 0x2784
00002740: mov word ptr [bp + 6], 0
00002745: add ax, word ptr [bp + 0xa]
00002748: dec ax
00002749: cmp ax, 0x4f
0000274C: jle 0x2756
0000274E: sub ax, 0x4f
00002751: sub word ptr [bp + 0xa], ax
00002754: js 0x2784
00002756: mov ax, 0xb800
00002759: mov es, ax
0000275B: mov ax, 0xa0
0000275E: mul word ptr [bp + 8]
00002761: mov di, ax
00002763: mov ax, word ptr [bp + 6]
00002766: shl ax, 1
00002768: add di, ax
0000276A: mov ax, word ptr [bp + 0x10]
0000276D: mov ah, al
0000276F: mov cx, word ptr [bp + 0xa]
00002772: or si, si
00002774: je 0x2780
00002776: lodsb al, byte ptr [si]
00002777: or al, al
00002779: je 0x2780
0000277B: stosw word ptr es:[di], ax
0000277C: loop 0x2776
0000277E: jmp 0x2784
00002780: mov al, 0x20
00002782: rep stosw word ptr es:[di], ax
00002784: pop di
00002785: pop si
00002786: pop ds
00002787: pop es
00002788: mov sp, bp
0000278A: pop bp
0000278B: retf 
0000278C: push bp
0000278D: mov bp, sp
0000278F: push es
00002790: push ds
00002791: push si
00002792: push di
00002793: cld 
00002794: mov ax, 0xa0
00002797: mul word ptr [bp + 8]
0000279A: mov di, ax
0000279C: mov ax, word ptr [bp + 6]
0000279F: shl ax, 1
000027A1: add di, ax
000027A3: mov cx, word ptr [bp + 0xa]
000027A6: mov ax, 0xb800
000027A9: mov es, ax
000027AB: mov ax, word ptr [bp + 0xc]
000027AE: inc di
000027AF: stosb byte ptr es:[di], al
000027B0: inc di
000027B1: loop 0x27af
000027B3: pop di
000027B4: pop si
000027B5: pop ds
000027B6: pop es
000027B7: mov sp, bp
000027B9: pop bp
000027BA: retf 
000027BB: push bp
000027BC: mov bp, sp
000027BE: mov ax, word ptr [bp + 8]
000027C1: mov dx, word ptr [bp + 6]
000027C4: mov dh, al
000027C6: mov ah, 2
000027C8: mov bh, 0
000027CA: int 0x10
000027CC: mov sp, bp
000027CE: pop bp
000027CF: retf 
000027D0: push bp
000027D1: mov bp, sp
000027D3: push es
000027D4: push ds
000027D5: push si
000027D6: push di
000027D7: les di, ptr [bp + 6]
000027DA: lds si, ptr [bp + 0xa]
000027DD: mov cx, word ptr [bp + 0xe]
000027E0: rep movsb byte ptr es:[di], byte ptr [si]
000027E2: pop di
000027E3: pop si
000027E4: pop ds
000027E5: pop es
000027E6: pop bp
000027E7: retf 
000027E8: push bp
000027E9: mov bp, sp
000027EB: mov ax, word ptr [bp + 8]
000027EE: xor dx, dx
000027F0: shl ax, 1
000027F2: rcl dx, 1
000027F4: shl ax, 1
000027F6: rcl dx, 1
000027F8: shl ax, 1
000027FA: rcl dx, 1
000027FC: shl ax, 1
000027FE: rcl dx, 1
00002800: add ax, word ptr [bp + 6]
00002803: adc dx, 0
00002806: add ax, word ptr [bp + 0xa]
00002809: adc dx, word ptr [bp + 0xc]
0000280C: push ax
0000280D: sar dx, 1
0000280F: rcr ax, 1
00002811: sar dx, 1
00002813: rcr ax, 1
00002815: sar dx, 1
00002817: rcr ax, 1
00002819: sar dx, 1
0000281B: rcr ax, 1
0000281D: mov dx, ax
0000281F: pop ax
00002820: and ax, 0xf
00002823: mov sp, bp
00002825: pop bp
00002826: retf 
00002827: push bp
00002828: mov bp, sp
0000282A: push es
0000282B: push ds
0000282C: push si
0000282D: push di
0000282E: cld 
0000282F: les di, ptr [bp + 6]
00002832: push di
00002833: push es
00002834: pop ds
00002835: mov ah, 0x19
00002837: int 0x21
00002839: add al, 0x41
0000283B: stosb byte ptr es:[di], al
0000283C: mov al, 0x3a
0000283E: stosb byte ptr es:[di], al
0000283F: mov al, 0x5c
00002841: stosb byte ptr es:[di], al
00002842: xor dl, dl
00002844: mov si, di
00002846: mov ah, 0x47
00002848: int 0x21
0000284A: pop di
0000284B: mov cx, 0xffff
0000284E: xor ax, ax
00002850: repne scasb al, byte ptr es:[di]
00002852: not cx
00002854: dec cx
00002855: mov ax, cx
00002857: pop di
00002858: pop si
00002859: pop ds
0000285A: pop es
0000285B: mov sp, bp
0000285D: pop bp
0000285E: retf 
0000285F: push bp
00002860: mov bp, sp
00002862: push es
00002863: push ds
00002864: push si
00002865: push di
00002866: cld 
00002867: mov ax, cs
00002869: sub ax, 0x10
0000286C: mov ds, ax
0000286E: mov es, word ptr [0x2c]
00002872: mov ds, word ptr [0x2c]
00002876: xor di, di
00002878: mov cx, 0xffff
0000287B: mov ax, 0x100
0000287E: cmp di, 0x400
00002882: jge 0x28b7
00002884: repne scasb al, byte ptr es:[di]
00002886: scasb al, byte ptr es:[di]
00002887: jne 0x287e
00002889: xchg ah, al
0000288B: scasb al, byte ptr es:[di]
0000288C: xchg ah, al
0000288E: jne 0x287e
00002890: scasb al, byte ptr es:[di]
00002891: jne 0x28b7
00002893: mov si, di
00002895: mov ax, cs
00002897: mov es, ax
00002899: les di, ptr [bp + 6]
0000289C: push di
0000289D: mov cx, 0x43
000028A0: rep movsb byte ptr es:[di], byte ptr [si]
000028A2: xor ax, ax
000028A4: stosb byte ptr es:[di], al
000028A5: pop di
000028A6: mov cx, 0xffff
000028A9: repne scasb al, byte ptr es:[di]
000028AB: not cx
000028AD: push es
000028AE: pop ds
000028AF: std 
000028B0: mov al, 0x5c
000028B2: repne scasb al, byte ptr es:[di]
000028B4: cld 
000028B5: je 0x28c5
000028B7: les ax, ptr [bp + 6]
000028BA: push es
000028BB: push ax
000028BC: push cs
000028BD: call 0x2827
000028C0: add sp, 4
000028C3: jmp 0x28cc
000028C5: inc di
000028C6: xor al, al
000028C8: stosb byte ptr es:[di], al
000028C9: inc cx
000028CA: mov ax, cx
000028CC: pop di
000028CD: pop si
000028CE: pop ds
000028CF: pop es
000028D0: mov sp, bp
000028D2: pop bp
000028D3: retf 
000028D4: push bp
000028D5: mov bp, sp
000028D7: push ds
000028D8: lds si, ptr [bp + 6]
000028DB: cmp byte ptr [si + 1], 0x3a
000028DF: jne 0x2901
000028E1: lodsb al, byte ptr [si]
000028E2: cmp al, 0x61
000028E4: jb 0x28ec
000028E6: cmp al, 0x7a
000028E8: ja 0x28ec
000028EA: sub al, 0x20
000028EC: cmp al, 0x41
000028EE: jb 0x2911
000028F0: cmp al, 0x5a
000028F2: ja 0x2911
000028F4: sub al, 0x41
000028F6: xor ah, ah
000028F8: mov dx, ax
000028FA: mov ah, 0xe
000028FC: int 0x21
000028FE: jb 0x2911
00002900: inc si
00002901: mov dx, si
00002903: mov ah, 0x3b
00002905: int 0x21
00002907: jb 0x2911
00002909: mov ax, 1
0000290C: pop ds
0000290D: mov sp, bp
0000290F: pop bp
00002910: retf 
00002911: xor ax, ax
00002913: jmp 0x290c
00002915: push bp
00002916: mov bp, sp
00002918: push es
00002919: push ds
0000291A: push si
0000291B: push di
0000291C: cld 
0000291D: mov ax, cs
0000291F: sub ax, 0x10
00002922: mov ds, ax
00002924: mov dx, 0x80
00002927: mov ah, 0x1a
00002929: int 0x21
0000292B: lds dx, ptr [bp + 6]
0000292E: or dx, dx
00002930: jne 0x2938
00002932: mov ax, ds
00002934: or ax, ax
00002936: je 0x2966
00002938: xor cx, cx
0000293A: mov ah, 0x4e
0000293C: int 0x21
0000293E: jae 0x2944
00002940: xor ax, ax
00002942: jmp 0x2947
00002944: mov ax, 1
00002947: push ax
00002948: mov ax, cs
0000294A: sub ax, 0x10
0000294D: mov ds, ax
0000294F: mov si, 0x80
00002952: lea si, [si + 0x1e]
00002955: mov cx, 0xd
00002958: les di, ptr [bp + 0xa]
0000295B: rep movsb byte ptr es:[di], byte ptr [si]
0000295D: pop ax
0000295E: pop di
0000295F: pop si
00002960: pop ds
00002961: pop es
00002962: mov sp, bp
00002964: pop bp
00002965: retf 
00002966: mov ah, 0x4f
00002968: int 0x21
0000296A: jae 0x2944
0000296C: xor ax, ax
0000296E: jmp 0x2947
00002970: push dx
00002971: jne 0x29e1
00002973: je 0x29de
00002975: insw word ptr es:[di], dx
00002976: and byte ptr gs:[bx + 0x76], ch
0000297A: jb 0x29e9
0000297D: popaw 
0000297E: jns 0x29a0
00002980: jb 0x29f5
00002983: outsw dx, word ptr [si]
00002984: jb 0x2993
00002986: or bh, byte ptr [bx + di + 0x17]
0000298A: mov dx, 0xd70
0000298D: push cs
0000298E: pop ds
0000298F: mov ah, 0x40
00002991: mov bx, 2
00002994: int 0x21
00002996: mov ax, 4
00002999: push ax
0000299A: mov ax, 0x1ab5
0000299D: mov ds, ax
0000299F: nop 
000029A0: push cs
000029A1: call 0x2acf
000029A4: retf 
000029A5: push bp
000029A6: mov bp, sp
000029A8: cmp word ptr [0x7230], 0x20
000029AD: jne 0x29b4
000029AF: mov ax, 1
000029B2: jmp 0x29d0
000029B4: mov bx, word ptr [0x7230]
000029B8: mov cl, 2
000029BA: shl bx, cl
000029BC: mov ax, word ptr [bp + 8]
000029BF: mov dx, word ptr [bp + 6]
000029C2: mov word ptr [bx - 0x78fc], ax
000029C6: mov word ptr [bx - 0x78fe], dx
000029CA: inc word ptr [0x7230]
000029CE: xor ax, ax
000029D0: pop bp
000029D1: retf 
000029D2: int 0x11
000029D4: retf 
000029D5: int 0x12
000029D7: retf 
000029D8: push bp
000029D9: mov bp, sp
000029DB: mov ah, byte ptr [bp + 6]
000029DE: mov cx, word ptr [bp + 0xa]
000029E1: mov dx, word ptr [bp + 8]
000029E4: int 0x1a
000029E6: xchg dx, ax
000029E7: mov dx, cx
000029E9: pop bp
000029EA: retf 
000029EB: push bp
000029EC: mov bp, sp
000029EE: push ds
000029EF: mov ah, 0x3b
000029F1: lds dx, ptr [bp + 6]
000029F4: int 0x21
000029F6: pop ds
000029F7: jb 0x29fd
000029F9: xor ax, ax
000029FB: jmp 0x2a01
000029FD: push ax
000029FE: call 0x2d44
00002A01: pop bp
00002A02: retf 
00002A03: push bp
00002A04: mov bp, sp
00002A06: push ds
00002A07: mov ah, 0x43
00002A09: xor al, al
00002A0B: lds dx, ptr [bp + 6]
00002A0E: int 0x21
00002A10: pop ds
00002A11: jb 0x2a1d
00002A13: les bx, ptr [bp + 0xa]
00002A16: mov word ptr es:[bx], cx
00002A19: xor ax, ax
00002A1B: jmp 0x2a21
00002A1D: push ax
00002A1E: call 0x2d7d
00002A21: pop bp
00002A22: retf 
00002A23: push bp
00002A24: mov bp, sp
00002A26: push ds
00002A27: mov ah, 0x43
00002A29: mov al, 1
00002A2B: lds dx, ptr [bp + 6]
00002A2E: mov cx, word ptr [bp + 0xa]
00002A31: int 0x21
00002A33: pop ds
00002A34: jb 0x2a3a
00002A36: xor ax, ax
00002A38: jmp 0x2a3e
00002A3A: push ax
00002A3B: call 0x2d7d
00002A3E: pop bp
00002A3F: retf 
00002A40: push bp
00002A41: mov bp, sp
00002A43: mov ah, 0x19
00002A45: int 0x21
00002A47: mov ah, 0
00002A49: inc ax
00002A4A: les bx, ptr [bp + 6]
00002A4D: mov word ptr es:[bx], ax
00002A50: pop bp
00002A51: retf 
00002A52: push bp
00002A53: mov bp, sp
00002A55: mov dl, byte ptr [bp + 6]
00002A58: dec dl
00002A5A: mov ah, 0xe
00002A5C: int 0x21
00002A5E: mov ah, 0
00002A60: les bx, ptr [bp + 8]
00002A63: mov word ptr es:[bx], ax
00002A66: pop bp
00002A67: retf 
00002A68: retf 
00002A69: push bp
00002A6A: mov bp, sp
00002A6C: push si
00002A6D: mov si, word ptr [bp + 8]
00002A70: or si, si
00002A72: jne 0x2a96
00002A74: jmp 0x2a86
00002A76: dec word ptr [0x7230]
00002A7A: mov bx, word ptr [0x7230]
00002A7E: mov cl, 2
00002A80: shl bx, cl
00002A82: lcall [bx - 0x78fe]
00002A86: cmp word ptr [0x7230], 0
00002A8B: jne 0x2a76
00002A8D: nop 
00002A8E: push cs
00002A8F: call 0x1d57
00002A92: lcall [0x7334]
00002A96: nop 
00002A97: push cs
00002A98: call 0x1dc0
00002A9B: nop 
00002A9C: push cs
00002A9D: call 0x1d6a
00002AA0: cmp word ptr [bp + 6], 0
00002AA4: jne 0x2abb
00002AA6: or si, si
00002AA8: jne 0x2ab2
00002AAA: lcall [0x7338]
00002AAE: lcall [0x733c]
00002AB2: push word ptr [bp + 4]
00002AB5: nop 
00002AB6: push cs
00002AB7: call 0x1d6b
00002ABA: pop cx
00002ABB: pop si
00002ABC: pop bp
00002ABD: ret 6
00002AC0: push bp
00002AC1: mov bp, sp
00002AC3: xor ax, ax
00002AC5: push ax
00002AC6: push ax
00002AC7: push word ptr [bp + 6]
00002ACA: call 0x2a69
00002ACD: pop bp
00002ACE: retf 
00002ACF: push bp
00002AD0: mov bp, sp
00002AD2: mov ax, 1
00002AD5: push ax
00002AD6: xor ax, ax
00002AD8: push ax
00002AD9: push word ptr [bp + 6]
00002ADC: call 0x2a69
00002ADF: pop bp
00002AE0: retf 
00002AE1: xor ax, ax
00002AE3: push ax
00002AE4: mov ax, 1
00002AE7: push ax
00002AE8: xor ax, ax
00002AEA: push ax
00002AEB: call 0x2a69
00002AEE: retf 
00002AEF: mov ax, 1
00002AF2: push ax
00002AF3: push ax
00002AF4: xor ax, ax
00002AF6: push ax
00002AF7: call 0x2a69
00002AFA: retf 
00002AFB: push si
00002AFC: xchg si, ax
00002AFD: xchg dx, ax
00002AFE: test ax, ax
00002B00: je 0x2b04
00002B02: mul bx
00002B04: jcxz 0x2b0b
00002B06: xchg cx, ax
00002B07: mul si
00002B09: add ax, cx
00002B0B: xchg si, ax
00002B0C: mul bx
00002B0E: add dx, si
00002B10: pop si
00002B11: retf 
00002B12: push bp
00002B13: mov bp, sp
00002B15: push si
00002B16: push di
00002B17: push ds
00002B18: lds si, ptr [bp + 6]
00002B1B: les di, ptr [bp + 0xa]
00002B1E: cld 
00002B1F: shr cx, 1
00002B21: rep movsw word ptr es:[di], word ptr [si]
00002B23: adc cx, cx
00002B25: rep movsb byte ptr es:[di], byte ptr [si]
00002B27: pop ds
00002B28: pop di
00002B29: pop si
00002B2A: pop bp
00002B2B: retf 8
00002B2E: push bp
00002B2F: mov bp, sp
00002B31: push si
00002B32: push ds
00002B33: mov ah, 0x47
00002B35: mov dl, byte ptr [bp + 6]
00002B38: lds si, ptr [bp + 8]
00002B3B: int 0x21
00002B3D: pop ds
00002B3E: jb 0x2b44
00002B40: xor ax, ax
00002B42: jmp 0x2b48
00002B44: push ax
00002B45: call 0x2d44
00002B48: pop si
00002B49: pop bp
00002B4A: retf 
00002B4B: push bp
00002B4C: mov bp, sp
00002B4E: mov ah, 0x2a
00002B50: int 0x21
00002B52: les bx, ptr [bp + 6]
00002B55: mov word ptr es:[bx], cx
00002B58: mov word ptr es:[bx + 2], dx
00002B5C: pop bp
00002B5D: retf 
00002B5E: push bp
00002B5F: mov bp, sp
00002B61: mov ah, 0x2c
00002B63: int 0x21
00002B65: les bx, ptr [bp + 6]
00002B68: mov word ptr es:[bx], cx
00002B6B: mov word ptr es:[bx + 2], dx
00002B6F: pop bp
00002B70: retf 
00002B71: push bp
00002B72: mov bp, sp
00002B74: sub sp, 2
00002B77: push ss
00002B78: lea ax, [bp - 2]
00002B7B: push ax
00002B7C: nop 
00002B7D: push cs
00002B7E: call 0x2a40
00002B81: pop cx
00002B82: pop cx
00002B83: mov ax, word ptr [bp - 2]
00002B86: dec ax
00002B87: mov sp, bp
00002B89: pop bp
00002B8A: retf 
00002B8B: push bp
00002B8C: mov bp, sp
00002B8E: sub sp, 2
00002B91: push ss
00002B92: lea ax, [bp - 2]
00002B95: push ax
00002B96: mov ax, word ptr [bp + 6]
00002B99: inc ax
00002B9A: push ax
00002B9B: nop 
00002B9C: push cs
00002B9D: call 0x2a52
00002BA0: add sp, 6
00002BA3: mov ax, word ptr [bp - 2]
00002BA6: mov sp, bp
00002BA8: pop bp
00002BA9: retf 
00002BAA: push bp
00002BAB: mov bp, sp
00002BAD: push di
00002BAE: mov ax, 0x5700
00002BB1: mov bx, word ptr [bp + 6]
00002BB4: int 0x21
00002BB6: jb 0x2bc6
00002BB8: les di, ptr [bp + 8]
00002BBB: mov word ptr es:[di], cx
00002BBE: mov word ptr es:[di + 2], dx
00002BC2: xor ax, ax
00002BC4: jmp 0x2bca
00002BC6: push ax
00002BC7: call 0x2d44
00002BCA: pop di
00002BCB: pop bp
00002BCC: retf 
00002BCD: push bp
00002BCE: mov bp, sp
00002BD0: mov ah, 0x35
00002BD2: mov al, byte ptr [bp + 6]
00002BD5: int 0x21
00002BD7: xchg bx, ax
00002BD8: mov dx, es
00002BDA: pop bp
00002BDB: retf 
00002BDC: push bp
00002BDD: mov bp, sp
00002BDF: mov ah, 0x25
00002BE1: mov al, byte ptr [bp + 6]
00002BE4: push ds
00002BE5: lds dx, ptr [bp + 8]
00002BE8: int 0x21
00002BEA: pop ds
00002BEB: pop bp
00002BEC: retf 
00002BED: pop cx
00002BEE: push cs
00002BEF: push cx
00002BF0: xor cx, cx
00002BF2: jmp 0x2c0a
00002BF4: pop cx
00002BF5: push cs
00002BF6: push cx
00002BF7: mov cx, 1
00002BFA: jmp 0x2c0a
00002BFC: pop cx
00002BFD: push cs
00002BFE: push cx
00002BFF: mov cx, 2
00002C02: jmp 0x2c0a
00002C04: pop cx
00002C05: push cs
00002C06: push cx
00002C07: mov cx, 3
00002C0A: push bp
00002C0B: push si
00002C0C: push di
00002C0D: mov bp, sp
00002C0F: mov di, cx
00002C11: mov ax, word ptr [bp + 0xa]
00002C14: mov dx, word ptr [bp + 0xc]
00002C17: mov bx, word ptr [bp + 0xe]
00002C1A: mov cx, word ptr [bp + 0x10]
00002C1D: or cx, cx
00002C1F: jne 0x2c29
00002C21: or dx, dx
00002C23: je 0x2c8e
00002C25: or bx, bx
00002C27: je 0x2c8e
00002C29: test di, 1
00002C2D: jne 0x2c4b
00002C2F: or dx, dx
00002C31: jns 0x2c3d
00002C33: neg dx
00002C35: neg ax
00002C37: sbb dx, 0
00002C3A: or di, 0xc
00002C3D: or cx, cx
00002C3F: jns 0x2c4b
00002C41: neg cx
00002C43: neg bx
00002C45: sbb cx, 0
00002C48: xor di, 4
00002C4B: mov bp, cx
00002C4D: mov cx, 0x20
00002C50: push di
00002C51: xor di, di
00002C53: xor si, si
00002C55: shl ax, 1
00002C57: rcl dx, 1
00002C59: rcl si, 1
00002C5B: rcl di, 1
00002C5D: cmp di, bp
00002C5F: jb 0x2c6c
00002C61: ja 0x2c67
00002C63: cmp si, bx
00002C65: jb 0x2c6c
00002C67: sub si, bx
00002C69: sbb di, bp
00002C6B: inc ax
00002C6C: loop 0x2c55
00002C6E: pop bx
00002C6F: test bx, 2
00002C73: je 0x2c7b
00002C75: mov ax, si
00002C77: mov dx, di
00002C79: shr bx, 1
00002C7B: test bx, 4
00002C7F: je 0x2c88
00002C81: neg dx
00002C83: neg ax
00002C85: sbb dx, 0
00002C88: pop di
00002C89: pop si
00002C8A: pop bp
00002C8B: retf 8
00002C8E: div bx
00002C90: test di, 2
00002C94: je 0x2c97
00002C96: xchg dx, ax
00002C97: xor dx, dx
00002C99: jmp 0x2c88
00002C9B: pop bx
00002C9C: push cs
00002C9D: push bx
00002C9E: cmp cl, 0x10
00002CA1: jae 0x2cb3
00002CA3: mov bx, ax
00002CA5: shl ax, cl
00002CA7: shl dx, cl
00002CA9: neg cl
00002CAB: add cl, 0x10
00002CAE: shr bx, cl
00002CB0: or dx, bx
00002CB2: retf 
00002CB3: sub cl, 0x10
00002CB6: xchg dx, ax
00002CB7: xor ax, ax
00002CB9: shl dx, cl
00002CBB: retf 
00002CBC: pop es
00002CBD: push cs
00002CBE: push es
00002CBF: or cx, cx
00002CC1: jge 0x2ccf
00002CC3: not bx
00002CC5: not cx
00002CC7: add bx, 1
00002CCA: adc cx, 0
00002CCD: jmp 0x2cfe
00002CCF: add ax, bx
00002CD1: jae 0x2cd7
00002CD3: add dx, 0x1000
00002CD7: mov ch, cl
00002CD9: mov cl, 4
00002CDB: shl ch, cl
00002CDD: add dh, ch
00002CDF: mov ch, al
00002CE1: shr ax, cl
00002CE3: add dx, ax
00002CE5: mov al, ch
00002CE7: and ax, 0xf
00002CEA: retf 
00002CEB: pop es
00002CEC: push cs
00002CED: push es
00002CEE: or cx, cx
00002CF0: jge 0x2cfe
00002CF2: not bx
00002CF4: not cx
00002CF6: add bx, 1
00002CF9: adc cx, 0
00002CFC: jmp 0x2ccf
00002CFE: sub ax, bx
00002D00: jae 0x2d06
00002D02: sub dx, 0x1000
00002D06: mov bh, cl
00002D08: mov cl, 4
00002D0A: shl bh, cl
00002D0C: xor bl, bl
00002D0E: sub dx, bx
00002D10: mov ch, al
00002D12: shr ax, cl
00002D14: add dx, ax
00002D16: mov al, ch
00002D18: and ax, 0xf
00002D1B: retf 
00002D1C: pop es
00002D1D: push cs
00002D1E: push es
00002D1F: push di
00002D20: mov di, cx
00002D22: mov ch, dh
00002D24: mov cl, 4
00002D26: shl dx, cl
00002D28: shr ch, cl
00002D2A: add dx, ax
00002D2C: adc ch, 0
00002D2F: mov ax, di
00002D31: shl di, cl
00002D33: shr ah, cl
00002D35: add bx, di
00002D37: adc ah, 0
00002D3A: sub dx, bx
00002D3C: sbb ch, ah
00002D3E: mov al, ch
00002D40: cwde 
00002D41: xchg dx, ax
00002D42: pop di
00002D43: retf 
00002D44: push bp
00002D45: mov bp, sp
00002D47: push si
00002D48: mov si, word ptr [bp + 4]
00002D4B: or si, si
00002D4D: jl 0x2d64
00002D4F: cmp si, 0x58
00002D52: jle 0x2d57
00002D54: mov si, 0x57
00002D57: mov word ptr [0x74fe], si
00002D5B: mov al, byte ptr [si + 0x7500]
00002D5F: cwde 
00002D60: mov si, ax
00002D62: jmp 0x2d71
00002D64: neg si
00002D66: cmp si, 0x30
00002D69: jg 0x2d54
00002D6B: mov word ptr [0x74fe], 0xffff
00002D71: mov word ptr [0x7f], si
00002D75: mov ax, 0xffff
00002D78: pop si
00002D79: pop bp
00002D7A: ret 2
00002D7D: push bp
00002D7E: mov bp, sp
00002D80: push si
00002D81: mov si, word ptr [bp + 4]
00002D84: push si
00002D85: call 0x2d44
00002D88: mov ax, si
00002D8A: pop si
00002D8B: pop bp
00002D8C: ret 2
00002D8F: push bp
00002D90: mov bp, sp
00002D92: push si
00002D93: mov si, word ptr [bp + 6]
00002D96: mov al, byte ptr [si + 0x7233]
00002D9A: cwde 
00002D9B: and ax, 0xe
00002D9E: pop si
00002D9F: pop bp
00002DA0: retf 
00002DA1: push bp
00002DA2: mov bp, sp
00002DA4: cmp word ptr [bp + 6], 0x80
00002DA9: jae 0x2db0
00002DAB: mov ax, 1
00002DAE: jmp 0x2db2
00002DB0: xor ax, ax
00002DB2: pop bp
00002DB3: retf 
00002DB4: push bp
00002DB5: mov bp, sp
00002DB7: push si
00002DB8: mov si, word ptr [bp + 6]
00002DBB: mov al, byte ptr [si + 0x7233]
00002DBF: cwde 
00002DC0: and ax, 0xc
00002DC3: pop si
00002DC4: pop bp
00002DC5: retf 
00002DC6: push bp
00002DC7: mov bp, sp
00002DC9: push si
00002DCA: mov si, word ptr [bp + 6]
00002DCD: mov al, byte ptr [si + 0x7233]
00002DD1: cwde 
00002DD2: and ax, 0x20
00002DD5: pop si
00002DD6: pop bp
00002DD7: retf 
00002DD8: push bp
00002DD9: mov bp, sp
00002DDB: push si
00002DDC: mov si, word ptr [bp + 6]
00002DDF: mov al, byte ptr [si + 0x7233]
00002DE3: cwde 
00002DE4: and ax, 2
00002DE7: pop si
00002DE8: pop bp
00002DE9: retf 
00002DEA: push bp
00002DEB: mov bp, sp
00002DED: mov ax, word ptr [bp + 6]
00002DF0: cmp ax, 0x21
00002DF3: jl 0x2dff
00002DF5: cmp ax, 0x7e
00002DF8: jg 0x2dff
00002DFA: mov ax, 1
00002DFD: jmp 0x2e01
00002DFF: xor ax, ax
00002E01: pop bp
00002E02: retf 
00002E03: push bp
00002E04: mov bp, sp
00002E06: push si
00002E07: mov si, word ptr [bp + 6]
00002E0A: mov al, byte ptr [si + 0x7233]
00002E0E: cwde 
00002E0F: and ax, 8
00002E12: pop si
00002E13: pop bp
00002E14: retf 
00002E15: push bp
00002E16: mov bp, sp
00002E18: mov ax, word ptr [bp + 6]
00002E1B: cmp ax, 0x20
00002E1E: jl 0x2e2a
00002E20: cmp ax, 0x7e
00002E23: jg 0x2e2a
00002E25: mov ax, 1
00002E28: jmp 0x2e2c
00002E2A: xor ax, ax
00002E2C: pop bp
00002E2D: retf 
00002E2E: push bp
00002E2F: mov bp, sp
00002E31: push si
00002E32: mov si, word ptr [bp + 6]
00002E35: mov al, byte ptr [si + 0x7233]
00002E39: cwde 
00002E3A: and ax, 0x40
00002E3D: pop si
00002E3E: pop bp
00002E3F: retf 
00002E40: push bp
00002E41: mov bp, sp
00002E43: push si
00002E44: mov si, word ptr [bp + 6]
00002E47: mov al, byte ptr [si + 0x7233]
00002E4B: cwde 
00002E4C: and ax, 1
00002E4F: pop si
00002E50: pop bp
00002E51: retf 
00002E52: push bp
00002E53: mov bp, sp
00002E55: push si
00002E56: mov si, word ptr [bp + 6]
00002E59: mov al, byte ptr [si + 0x7233]
00002E5D: cwde 
00002E5E: and ax, 4
00002E61: pop si
00002E62: pop bp
00002E63: retf 
00002E64: push bp
00002E65: mov bp, sp
00002E67: push si
00002E68: mov si, word ptr [bp + 6]
00002E6B: mov al, byte ptr [si + 0x7233]
00002E6F: cwde 
00002E70: and ax, 0x12
00002E73: pop si
00002E74: pop bp
00002E75: retf 
00002E76: push bp
00002E77: mov bp, sp
00002E79: push si
00002E7A: les bx, ptr [bp + 6]
00002E7D: dec word ptr es:[bx]
00002E80: jl 0x2e97
00002E82: mov ax, word ptr es:[bx + 0xe]
00002E86: mov si, word ptr es:[bx + 0xc]
00002E8A: inc word ptr es:[bx + 0xc]
00002E8E: mov es, ax
00002E90: mov al, byte ptr es:[si]
00002E93: mov ah, 0
00002E95: jmp 0x2ea4
00002E97: push word ptr [bp + 8]
00002E9A: push word ptr [bp + 6]
00002E9D: nop 
00002E9E: push cs
00002E9F: call 0x57ef
00002EA2: pop cx
00002EA3: pop cx
00002EA4: pop si
00002EA5: pop bp
00002EA6: retf 
00002EA7: dec word ptr [0x7340]
00002EAB: jl 0x2ebc
00002EAD: les bx, ptr [0x734c]
00002EB1: inc word ptr [0x734c]
00002EB5: mov al, byte ptr es:[bx]
00002EB8: mov ah, 0
00002EBA: jmp 0x2ec8
00002EBC: push ds
00002EBD: mov ax, 0x7340
00002EC0: push ax
00002EC1: nop 
00002EC2: push cs
00002EC3: call 0x57ef
00002EC6: pop cx
00002EC7: pop cx
00002EC8: retf 
00002EC9: push bp
00002ECA: mov bp, sp
00002ECC: push si
00002ECD: mov cx, word ptr [bp + 6]
00002ED0: les bx, ptr [bp + 8]
00002ED3: inc word ptr es:[bx]
00002ED6: jge 0x2ef1
00002ED8: mov ax, word ptr es:[bx + 0xe]
00002EDC: mov si, word ptr es:[bx + 0xc]
00002EE0: inc word ptr es:[bx + 0xc]
00002EE4: mov dl, cl
00002EE6: mov es, ax
00002EE8: mov byte ptr es:[si], dl
00002EEB: mov al, dl
00002EED: mov ah, 0
00002EEF: jmp 0x2f00
00002EF1: push word ptr [bp + 0xa]
00002EF4: push word ptr [bp + 8]
00002EF7: push cx
00002EF8: nop 
00002EF9: push cs
00002EFA: call 0x5c29
00002EFD: add sp, 6
00002F00: pop si
00002F01: pop bp
00002F02: retf 
00002F03: push bp
00002F04: mov bp, sp
00002F06: mov dx, word ptr [bp + 6]
00002F09: inc word ptr [0x7354]
00002F0D: jge 0x2f20
00002F0F: les bx, ptr [0x7360]
00002F13: inc word ptr [0x7360]
00002F17: mov al, dl
00002F19: mov byte ptr es:[bx], al
00002F1C: mov ah, 0
00002F1E: jmp 0x2f2e
00002F20: push ds
00002F21: mov ax, 0x7354
00002F24: push ax
00002F25: push dx
00002F26: nop 
00002F27: push cs
00002F28: call 0x5c29
00002F2B: add sp, 6
00002F2E: pop bp
00002F2F: retf 
00002F30: push bp
00002F31: mov bp, sp
00002F33: les bx, ptr [bp + 6]
00002F36: mov ax, word ptr es:[bx + 2]
00002F3A: and ax, 0x20
00002F3D: pop bp
00002F3E: retf 
00002F3F: push bp
00002F40: mov bp, sp
00002F42: les bx, ptr [bp + 6]
00002F45: mov ax, word ptr es:[bx + 2]
00002F49: and ax, 0x10
00002F4C: pop bp
00002F4D: retf 
00002F4E: push bp
00002F4F: mov bp, sp
00002F51: mov ax, 0x4400
00002F54: mov bx, word ptr [bp + 6]
00002F57: int 0x21
00002F59: xchg dx, ax
00002F5A: and ax, 0x80
00002F5D: pop bp
00002F5E: retf 
00002F5F: push bp
00002F60: mov bp, sp
00002F62: sub sp, 0x22
00002F65: push si
00002F66: push di
00002F67: push es
00002F68: les di, ptr [bp + 0xa]
00002F6B: mov bx, word ptr [bp + 8]
00002F6E: cmp bx, 0x24
00002F71: ja 0x2fcf
00002F73: cmp bl, 2
00002F76: jb 0x2fcf
00002F78: mov ax, word ptr [bp + 0xe]
00002F7B: mov cx, word ptr [bp + 0x10]
00002F7E: or cx, cx
00002F80: jge 0x2f94
00002F82: cmp byte ptr [bp + 6], 0
00002F86: je 0x2f94
00002F88: mov byte ptr es:[di], 0x2d
00002F8C: inc di
00002F8D: neg cx
00002F8F: neg ax
00002F91: sbb cx, 0
00002F94: lea si, [bp - 0x22]
00002F97: jcxz 0x2fa9
00002F99: xchg cx, ax
00002F9A: sub dx, dx
00002F9C: div bx
00002F9E: xchg cx, ax
00002F9F: div bx
00002FA1: mov byte ptr ss:[si], dl
00002FA4: inc si
00002FA5: jcxz 0x2fb1
00002FA7: jmp 0x2f99
00002FA9: sub dx, dx
00002FAB: div bx
00002FAD: mov byte ptr ss:[si], dl
00002FB0: inc si
00002FB1: or ax, ax
00002FB3: jne 0x2fa9
00002FB5: lea cx, [bp - 0x22]
00002FB8: neg cx
00002FBA: add cx, si
00002FBC: cld 
00002FBD: dec si
00002FBE: mov al, byte ptr ss:[si]
00002FC1: sub al, 0xa
00002FC3: jae 0x2fc9
00002FC5: add al, 0x3a
00002FC7: jmp 0x2fcc
00002FC9: add al, byte ptr [bp + 4]
00002FCC: stosb byte ptr es:[di], al
00002FCD: loop 0x2fbd
00002FCF: mov al, 0
00002FD1: stosb byte ptr es:[di], al
00002FD2: pop es
00002FD3: mov dx, word ptr [bp + 0xc]
00002FD6: mov ax, word ptr [bp + 0xa]
00002FD9: pop di
00002FDA: pop si
00002FDB: mov sp, bp
00002FDD: pop bp
00002FDE: ret 0xe
00002FE1: push bp
00002FE2: mov bp, sp
00002FE4: xor ax, ax
00002FE6: push ax
00002FE7: push word ptr [bp + 8]
00002FEA: push word ptr [bp + 6]
00002FED: push word ptr [bp + 4]
00002FF0: mov ax, 0xa
00002FF3: push ax
00002FF4: mov al, 0
00002FF6: push ax
00002FF7: mov al, 0x61
00002FF9: push ax
00002FFA: call 0x2f5f
00002FFD: pop bp
00002FFE: ret 6
00003001: push bp
00003002: mov bp, sp
00003004: mov bx, word ptr [bp + 6]
00003007: shl bx, 1
00003009: and word ptr [bx + 0x74d2], 0xfdff
0000300F: mov ah, 0x42
00003011: mov al, byte ptr [bp + 0xc]
00003014: mov bx, word ptr [bp + 6]
00003017: mov cx, word ptr [bp + 0xa]
0000301A: mov dx, word ptr [bp + 8]
0000301D: int 0x21
0000301F: jb 0x3023
00003021: jmp 0x3028
00003023: push ax
00003024: call 0x2d44
00003027: cdq 
00003028: pop bp
00003029: retf 
0000302A: push bp
0000302B: mov bp, sp
0000302D: mov ax, word ptr [bp + 0xa]
00003030: or ax, word ptr [bp + 0xc]
00003033: jne 0x303d
00003035: mov word ptr [bp + 0xc], ds
00003038: mov word ptr [bp + 0xa], 0x8782
0000303D: push word ptr [bp + 4]
00003040: mov ax, word ptr [bp + 6]
00003043: or ax, word ptr [bp + 8]
00003046: jne 0x304f
00003048: mov dx, ds
0000304A: mov ax, 0x755a
0000304D: jmp 0x3055
0000304F: mov dx, word ptr [bp + 8]
00003052: mov ax, word ptr [bp + 6]
00003055: push dx
00003056: push ax
00003057: push word ptr [bp + 0xc]
0000305A: push word ptr [bp + 0xa]
0000305D: nop 
0000305E: push cs
0000305F: call 0x3e97
00003062: add sp, 8
00003065: push dx
00003066: push ax
00003067: call 0x2fe1
0000306A: push ds
0000306B: mov ax, 0x755e
0000306E: push ax
0000306F: push word ptr [bp + 0xc]
00003072: push word ptr [bp + 0xa]
00003075: nop 
00003076: push cs
00003077: call 0x65b8
0000307A: add sp, 8
0000307D: mov dx, word ptr [bp + 0xc]
00003080: mov ax, word ptr [bp + 0xa]
00003083: pop bp
00003084: ret 0xa
00003087: push bp
00003088: mov bp, sp
0000308A: sub sp, 2
0000308D: push word ptr [bp + 0xa]
00003090: push word ptr [bp + 8]
00003093: xor ax, ax
00003095: xor dx, dx
00003097: push ax
00003098: push dx
00003099: les bx, ptr [bp + 4]
0000309C: cmp word ptr es:[bx], -1
000030A0: jne 0x30a7
000030A2: mov ax, 2
000030A5: jmp 0x30aa
000030A7: mov ax, 1
000030AA: les bx, ptr [bp + 4]
000030AD: add word ptr es:[bx], ax
000030B0: mov ax, word ptr es:[bx]
000030B3: push ax
000030B4: call 0x302a
000030B7: mov word ptr [bp + 0xa], dx
000030BA: mov word ptr [bp + 8], ax
000030BD: push ss
000030BE: lea ax, [bp - 2]
000030C1: push ax
000030C2: push word ptr [bp + 0xa]
000030C5: push word ptr [bp + 8]
000030C8: nop 
000030C9: push cs
000030CA: call 0x2a03
000030CD: add sp, 8
000030D0: or ax, ax
000030D2: je 0x308d
000030D4: mov dx, word ptr [bp + 0xa]
000030D7: mov ax, word ptr [bp + 8]
000030DA: mov sp, bp
000030DC: pop bp
000030DD: ret 8
000030E0: push si
000030E1: xchg si, ax
000030E2: xchg dx, ax
000030E3: test ax, ax
000030E5: je 0x30e9
000030E7: mul bx
000030E9: jcxz 0x30f0
000030EB: xchg cx, ax
000030EC: mul si
000030EE: add ax, cx
000030F0: xchg si, ax
000030F1: mul bx
000030F3: add dx, si
000030F5: pop si
000030F6: ret 
000030F7: push cx
000030F8: mov ch, al
000030FA: mov cl, 4
000030FC: shr ax, cl
000030FE: add dx, ax
00003100: mov al, ch
00003102: mov ah, bl
00003104: shr bx, cl
00003106: pop cx
00003107: add cx, bx
00003109: mov bl, ah
0000310B: and ax, 0xf
0000310E: and bx, 0xf
00003111: cmp dx, cx
00003113: jne 0x3117
00003115: cmp ax, bx
00003117: ret 
00003118: push bp
00003119: mov bp, sp
0000311B: mov bx, word ptr [bp + 6]
0000311E: shl bx, 1
00003120: test word ptr [bx + 0x74d2], 2
00003126: je 0x312e
00003128: mov ax, 5
0000312B: push ax
0000312C: jmp 0x3142
0000312E: push ds
0000312F: mov ah, 0x3f
00003131: mov bx, word ptr [bp + 6]
00003134: mov cx, word ptr [bp + 0xc]
00003137: lds dx, ptr [bp + 8]
0000313A: int 0x21
0000313C: pop ds
0000313D: jb 0x3141
0000313F: jmp 0x3145
00003141: push ax
00003142: call 0x2d44
00003145: pop bp
00003146: retf 
00003147: push bp
00003148: mov bp, sp
0000314A: sub sp, 0x2a
0000314D: push si
0000314E: push di
0000314F: mov word ptr [bp - 4], 0
00003154: mov word ptr [bp - 6], 0
00003159: jmp 0x3176
0000315B: les di, ptr [bp + 0x10]
0000315E: test byte ptr [bp - 1], 0x20
00003162: je 0x316c
00003164: les di, ptr es:[di]
00003167: add word ptr [bp + 0x10], 4
0000316B: ret 
0000316C: mov di, word ptr es:[di]
0000316F: push ds
00003170: pop es
00003171: add word ptr [bp + 0x10], 2
00003175: ret 
00003176: push es
00003177: cld 
00003178: mov si, word ptr [bp + 0xc]
0000317B: mov es, word ptr [bp + 0xe]
0000317E: lodsb al, byte ptr es:[si]
00003180: or al, al
00003182: je 0x31f2
00003184: cmp al, 0x25
00003186: je 0x31f5
00003188: cwde 
00003189: xchg di, ax
0000318A: inc word ptr [bp - 6]
0000318D: push word ptr [bp + 0xa]
00003190: push word ptr [bp + 8]
00003193: call word ptr [bp + 4]
00003196: pop cx
00003197: pop cx
00003198: or ax, ax
0000319A: jl 0x31c6
0000319C: cwde 
0000319D: or di, di
0000319F: js 0x31db
000031A1: cmp byte ptr [di + 0x7564], 1
000031A6: jne 0x31db
000031A8: xchg bx, ax
000031A9: or bl, bl
000031AB: js 0x31c9
000031AD: cmp byte ptr [bx + 0x7564], 1
000031B2: jne 0x31c9
000031B4: inc word ptr [bp - 6]
000031B7: push word ptr [bp + 0xa]
000031BA: push word ptr [bp + 8]
000031BD: call word ptr [bp + 4]
000031C0: pop cx
000031C1: pop cx
000031C2: or ax, ax
000031C4: jg 0x31a8
000031C6: jmp 0x355c
000031C9: push word ptr [bp + 0xa]
000031CC: push word ptr [bp + 8]
000031CF: push bx
000031D0: call word ptr [bp + 6]
000031D3: add sp, 6
000031D6: dec word ptr [bp - 6]
000031D9: jmp 0x317b
000031DB: cmp ax, di
000031DD: je 0x317b
000031DF: push word ptr [bp + 0xa]
000031E2: push word ptr [bp + 8]
000031E5: push ax
000031E6: call word ptr [bp + 6]
000031E9: add sp, 6
000031EC: dec word ptr [bp - 6]
000031EF: jmp 0x3574
000031F2: jmp 0x3574
000031F5: mov word ptr [bp - 0xa], 0xffff
000031FA: mov es, word ptr [bp + 0xe]
000031FD: mov byte ptr [bp - 1], 0x20
00003201: lodsb al, byte ptr es:[si]
00003203: cwde 
00003204: mov word ptr [bp + 0xc], si
00003207: xchg di, ax
00003208: or di, di
0000320A: jl 0x3225
0000320C: mov bl, byte ptr [di + 0x7564]
00003210: xor bh, bh
00003212: cmp bx, 0x15
00003215: jbe 0x321a
00003217: jmp 0x355c
0000321A: shl bx, 1
0000321C: jmp word ptr cs:[bx + 0x1a0f]
00003221: xchg di, ax
00003222: jmp 0x3188
00003225: jmp 0x3574
00003228: or byte ptr [bp - 1], 1
0000322C: jmp 0x3201
0000322E: sub di, 0x30
00003231: xchg word ptr [bp - 0xa], di
00003234: or di, di
00003236: jl 0x3201
00003238: mov ax, 0xa
0000323B: mul di
0000323D: add word ptr [bp - 0xa], ax
00003240: jmp 0x3201
00003242: or byte ptr [bp - 1], 8
00003246: jmp 0x3201
00003248: or byte ptr [bp - 1], 4
0000324C: jmp 0x3201
0000324E: or byte ptr [bp - 1], 2
00003252: jmp 0x3201
00003254: and byte ptr [bp - 1], 0xdf
00003258: jmp 0x3201
0000325A: or byte ptr [bp - 1], 0x20
0000325E: jmp 0x3201
00003260: mov ax, word ptr [bp - 6]
00003263: sub dx, dx
00003265: test byte ptr [bp - 1], 1
00003269: je 0x32c0
0000326B: jmp 0x3201
0000326D: mov si, 8
00003270: jmp 0x327e
00003272: mov si, 0xa
00003275: jmp 0x327e
00003277: mov si, 0x10
0000327A: jmp 0x327e
0000327C: xor si, si
0000327E: test di, 0x20
00003282: jne 0x328d
00003284: cmp di, 0x58
00003287: je 0x328d
00003289: or byte ptr [bp - 1], 4
0000328D: push ss
0000328E: lea ax, [bp - 8]
00003291: push ax
00003292: push ss
00003293: lea ax, [bp - 6]
00003296: push ax
00003297: mov ax, word ptr [bp - 0xa]
0000329A: and ax, 0x7fff
0000329D: push ax
0000329E: push si
0000329F: push word ptr [bp + 0xa]
000032A2: push word ptr [bp + 8]
000032A5: push word ptr [bp + 6]
000032A8: push word ptr [bp + 4]
000032AB: call 0x3666
000032AE: add sp, 0x14
000032B1: cmp word ptr [bp - 8], 0
000032B5: jle 0x32cf
000032B7: test byte ptr [bp - 1], 1
000032BB: jne 0x32cc
000032BD: inc word ptr [bp - 4]
000032C0: call 0x315b
000032C3: stosw word ptr es:[di], ax
000032C4: test byte ptr [bp - 1], 4
000032C8: je 0x32cc
000032CA: xchg dx, ax
000032CB: stosw word ptr es:[di], ax
000032CC: jmp 0x3178
000032CF: jl 0x32d4
000032D1: jmp 0x3574
000032D4: jmp 0x355c
000032D7: call 0x32da
000032DA: jmp 0x357b
000032DD: push word ptr [bp + 0xa]
000032E0: push word ptr [bp + 8]
000032E3: push ax
000032E4: call word ptr [bp + 6]
000032E7: add sp, 6
000032EA: dec word ptr [bp - 6]
000032ED: and word ptr [bp - 0xa], 0x7fff
000032F2: call 0x32f5
000032F5: jmp 0x35a5
000032F8: push dx
000032F9: cmp al, 0x3a
000032FB: je 0x3316
000032FD: or ax, ax
000032FF: jle 0x3311
00003301: push word ptr [bp + 0xa]
00003304: push word ptr [bp + 8]
00003307: push ax
00003308: call word ptr [bp + 6]
0000330B: add sp, 6
0000330E: dec word ptr [bp - 6]
00003311: pop dx
00003312: mov bx, ds
00003314: jmp 0x3335
00003316: call 0x3319
00003319: jmp 0x35a5
0000331C: pop bx
0000331D: or ax, ax
0000331F: jle 0x3335
00003321: push dx
00003322: push bx
00003323: push word ptr [bp + 0xa]
00003326: push word ptr [bp + 8]
00003329: push ax
0000332A: call word ptr [bp + 6]
0000332D: add sp, 6
00003330: dec word ptr [bp - 6]
00003333: pop bx
00003334: pop dx
00003335: test byte ptr [bp - 1], 1
00003339: jne 0x334b
0000333B: call 0x315b
0000333E: inc word ptr [bp - 4]
00003341: xchg dx, ax
00003342: stosw word ptr es:[di], ax
00003343: test byte ptr [bp - 1], 0x20
00003347: je 0x334b
00003349: xchg bx, ax
0000334A: stosw word ptr es:[di], ax
0000334B: jmp 0x3178
0000334E: jmp 0x355c
00003351: push ss
00003352: lea ax, [bp - 8]
00003355: push ax
00003356: push ss
00003357: lea ax, [bp - 6]
0000335A: push ax
0000335B: mov ax, 0x7fff
0000335E: and ax, word ptr [bp - 0xa]
00003361: push ax
00003362: push word ptr [bp + 0xa]
00003365: push word ptr [bp + 8]
00003368: push word ptr [bp + 6]
0000336B: push word ptr [bp + 4]
0000336E: call 0x4890
00003371: add sp, 0x12
00003374: cmp word ptr [bp - 8], 0
00003378: jle 0x33b3
0000337A: mov al, byte ptr [bp - 1]
0000337D: cwde 
0000337E: test ax, 1
00003381: jne 0x33ad
00003383: call 0x315b
00003386: inc word ptr [bp - 4]
00003389: test byte ptr [bp - 1], 4
0000338D: je 0x3394
0000338F: mov ax, 4
00003392: jmp 0x33a1
00003394: test byte ptr [bp - 1], 8
00003398: je 0x339f
0000339A: mov ax, 8
0000339D: jmp 0x33a1
0000339F: xor ax, ax
000033A1: push ax
000033A2: push es
000033A3: push di
000033A4: call 0x4894
000033A7: add sp, 6
000033AA: jmp 0x3178
000033AD: call 0x4898
000033B0: jmp 0x3178
000033B3: call 0x4898
000033B6: jl 0x334e
000033B8: jmp 0x3574
000033BB: call 0x33be
000033BE: jmp 0x357b
000033C1: test byte ptr [bp - 1], 1
000033C5: jne 0x33cd
000033C7: call 0x315b
000033CA: inc word ptr [bp - 4]
000033CD: and word ptr [bp - 0xa], 0x7fff
000033D2: je 0x3401
000033D4: test byte ptr [bp - 1], 1
000033D8: jne 0x33db
000033DA: stosb byte ptr es:[di], al
000033DB: inc word ptr [bp - 6]
000033DE: push es
000033DF: push word ptr [bp + 0xa]
000033E2: push word ptr [bp + 8]
000033E5: call word ptr [bp + 4]
000033E8: pop cx
000033E9: pop cx
000033EA: pop es
000033EB: or ax, ax
000033ED: jle 0x3401
000033EF: or al, al
000033F1: js 0x33fc
000033F3: xchg bx, ax
000033F4: cmp byte ptr [bx + 0x7564], 1
000033F9: xchg bx, ax
000033FA: jle 0x3401
000033FC: dec word ptr [bp - 0xa]
000033FF: jg 0x33d4
00003401: push es
00003402: push word ptr [bp + 0xa]
00003405: push word ptr [bp + 8]
00003408: push ax
00003409: call word ptr [bp + 6]
0000340C: add sp, 6
0000340F: pop es
00003410: dec word ptr [bp - 6]
00003413: test byte ptr [bp - 1], 1
00003417: jne 0x341c
00003419: mov al, 0
0000341B: stosb byte ptr es:[di], al
0000341C: jmp 0x3178
0000341F: test byte ptr [bp - 1], 1
00003423: jne 0x3428
00003425: call 0x315b
00003428: mov si, word ptr [bp - 0xa]
0000342B: or si, si
0000342D: jge 0x3432
0000342F: mov si, 1
00003432: je 0x3452
00003434: inc word ptr [bp - 6]
00003437: push es
00003438: push word ptr [bp + 0xa]
0000343B: push word ptr [bp + 8]
0000343E: call word ptr [bp + 4]
00003441: pop cx
00003442: pop cx
00003443: pop es
00003444: or ax, ax
00003446: jl 0x345e
00003448: test byte ptr [bp - 1], 1
0000344C: jne 0x344f
0000344E: stosb byte ptr es:[di], al
0000344F: dec si
00003450: jg 0x3434
00003452: test byte ptr [bp - 1], 1
00003456: jne 0x345b
00003458: inc word ptr [bp - 4]
0000345B: jmp 0x3178
0000345E: jmp 0x355c
00003461: push es
00003462: sub ax, ax
00003464: cld 
00003465: push ss
00003466: pop es
00003467: lea di, [bp - 0x2a]
0000346A: mov cx, 0x10
0000346D: rep stosw word ptr es:[di], ax
0000346F: pop es
00003470: lodsb al, byte ptr es:[si]
00003472: and byte ptr [bp - 1], 0xef
00003476: cmp al, 0x5e
00003478: jne 0x3480
0000347A: or byte ptr [bp - 1], 0x10
0000347E: lodsb al, byte ptr es:[si]
00003480: mov ah, 0
00003482: mov dl, al
00003484: mov di, ax
00003486: mov cl, 3
00003488: shr di, cl
0000348A: mov cx, 0x107
0000348D: and cl, dl
0000348F: shl ch, cl
00003491: or byte ptr [bp + di - 0x2a], ch
00003494: lodsb al, byte ptr es:[si]
00003496: cmp al, 0
00003498: je 0x34c3
0000349A: cmp al, 0x5d
0000349C: je 0x34c6
0000349E: cmp al, 0x2d
000034A0: jne 0x3482
000034A2: cmp dl, byte ptr es:[si]
000034A5: ja 0x3482
000034A7: cmp byte ptr es:[si], 0x5d
000034AB: je 0x3482
000034AD: lodsb al, byte ptr es:[si]
000034AF: sub al, dl
000034B1: je 0x3494
000034B3: add dl, al
000034B5: rol ch, 1
000034B7: adc di, 0
000034BA: or byte ptr [bp + di - 0x2a], ch
000034BD: dec al
000034BF: jne 0x34b5
000034C1: jmp 0x3494
000034C3: jmp 0x3574
000034C6: mov word ptr [bp + 0xc], si
000034C9: and word ptr [bp - 0xa], 0x7fff
000034CE: mov si, word ptr [bp - 0xa]
000034D1: test byte ptr [bp - 1], 1
000034D5: jne 0x34da
000034D7: call 0x315b
000034DA: dec si
000034DB: jl 0x3535
000034DD: inc word ptr [bp - 6]
000034E0: push es
000034E1: push word ptr [bp + 0xa]
000034E4: push word ptr [bp + 8]
000034E7: call word ptr [bp + 4]
000034EA: pop cx
000034EB: pop cx
000034EC: pop es
000034ED: or ax, ax
000034EF: jl 0x354a
000034F1: xchg si, ax
000034F2: mov bx, si
000034F4: mov cl, 3
000034F6: shr si, cl
000034F8: mov cx, 0x107
000034FB: and cl, bl
000034FD: shl ch, cl
000034FF: test byte ptr [bp + si - 0x2a], ch
00003502: xchg si, ax
00003503: xchg bx, ax
00003504: je 0x350e
00003506: test byte ptr [bp - 1], 0x10
0000350A: je 0x3514
0000350C: jmp 0x351d
0000350E: test byte ptr [bp - 1], 0x10
00003512: je 0x351d
00003514: test byte ptr [bp - 1], 1
00003518: jne 0x34da
0000351A: stosb byte ptr es:[di], al
0000351B: jmp 0x34da
0000351D: push es
0000351E: push word ptr [bp + 0xa]
00003521: push word ptr [bp + 8]
00003524: push ax
00003525: call word ptr [bp + 6]
00003528: add sp, 6
0000352B: pop es
0000352C: dec word ptr [bp - 6]
0000352F: inc si
00003530: cmp si, word ptr [bp - 0xa]
00003533: jge 0x353e
00003535: test byte ptr [bp - 1], 1
00003539: jne 0x3547
0000353B: inc word ptr [bp - 4]
0000353E: test byte ptr [bp - 1], 1
00003542: jne 0x3547
00003544: mov al, 0
00003546: stosb byte ptr es:[di], al
00003547: jmp 0x3178
0000354A: inc si
0000354B: cmp si, word ptr [bp - 0xa]
0000354E: jge 0x355c
00003550: test byte ptr [bp - 1], 1
00003554: jne 0x355c
00003556: mov al, 0
00003558: stosb byte ptr es:[di], al
00003559: inc word ptr [bp - 4]
0000355C: push word ptr [bp + 0xa]
0000355F: push word ptr [bp + 8]
00003562: mov ax, 0xffff
00003565: push ax
00003566: call word ptr [bp + 6]
00003569: add sp, 6
0000356C: cmp word ptr [bp - 4], 1
00003570: sbb word ptr [bp - 4], 0
00003574: pop es
00003575: mov ax, word ptr [bp - 4]
00003578: jmp 0x3609
0000357B: inc word ptr [bp - 6]
0000357E: push word ptr [bp + 0xa]
00003581: push word ptr [bp + 8]
00003584: call word ptr [bp + 4]
00003587: pop cx
00003588: pop cx
00003589: or ax, ax
0000358B: jle 0x35a0
0000358D: or al, al
0000358F: js 0x359a
00003591: xchg bx, ax
00003592: cmp byte ptr [bx + 0x7564], 1
00003597: xchg bx, ax
00003598: je 0x357b
0000359A: pop cx
0000359B: add cx, 3
0000359E: jmp cx
000035A0: je 0x359a
000035A2: pop cx
000035A3: jmp 0x355c
000035A5: sub dx, dx
000035A7: mov cx, 4
000035AA: dec word ptr [bp - 0xa]
000035AD: jl 0x35f8
000035AF: push dx
000035B0: push cx
000035B1: inc word ptr [bp - 6]
000035B4: push word ptr [bp + 0xa]
000035B7: push word ptr [bp + 8]
000035BA: call word ptr [bp + 4]
000035BD: pop cx
000035BE: pop cx
000035BF: pop cx
000035C0: pop dx
000035C1: or ax, ax
000035C3: jle 0x35fa
000035C5: dec cl
000035C7: jl 0x35fa
000035C9: mov ch, al
000035CB: sub ch, 0x30
000035CE: jb 0x35fa
000035D0: cmp ch, 0xa
000035D3: jb 0x35ec
000035D5: sub ch, 0x11
000035D8: jb 0x35fa
000035DA: cmp ch, 6
000035DD: jb 0x35e9
000035DF: sub ch, 0x20
000035E2: jb 0x35fa
000035E4: cmp ch, 6
000035E7: jae 0x35fa
000035E9: add ch, 0xa
000035EC: shl dx, 1
000035EE: shl dx, 1
000035F0: shl dx, 1
000035F2: shl dx, 1
000035F4: add dl, ch
000035F6: jmp 0x35aa
000035F8: sub ax, ax
000035FA: cmp cl, 4
000035FD: je 0x3605
000035FF: pop cx
00003600: add cx, 3
00003603: jmp cx
00003605: pop cx
00003606: jmp 0x355c
00003609: pop di
0000360A: pop si
0000360B: mov sp, bp
0000360D: pop bp
0000360E: ret 
0000360F: je 0x362a
00003611: je 0x362c
00003613: je 0x362e
00003615: and word ptr [0x1628], dx
00003619: push ss
0000361B: pop ds
0000361C: sbb byte ptr [bp + si + 0x16], dh
0000361F: jb 0x3637
00003621: jl 0x3639
00003623: push cx
00003624: pop ss
00003625: inc dx
00003626: push ss
00003627: dec si
00003628: push ss
00003629: dec ax
0000362A: push ss
0000362B: insw word ptr es:[di], dx
0000362C: push ss
0000362D: mov bx, 0x6117
00003630: sbb byte ptr [bx + si + 0x16], ah
00003633: ja 0x364b
00003635: xlatb 
00003636: push ss
00003637: push sp
00003638: push ss
00003639: pop dx
0000363A: push ss
0000363B: push bx
0000363C: sub bl, 0x30
0000363F: jb 0x3663
00003641: cmp bl, 9
00003644: jbe 0x3658
00003646: cmp bl, 0x2a
00003649: ja 0x3650
0000364B: sub bl, 7
0000364E: jmp 0x3653
00003650: sub bl, 0x27
00003653: cmp bl, 9
00003656: jbe 0x3663
00003658: cmp bl, cl
0000365A: jae 0x3663
0000365C: inc sp
0000365D: inc sp
0000365E: clc 
0000365F: mov bh, 0
00003661: jmp 0x3665
00003663: pop bx
00003664: stc 
00003665: ret 
00003666: push bp
00003667: mov bp, sp
00003669: sub sp, 6
0000366C: push si
0000366D: push di
0000366E: mov byte ptr [bp - 1], 0
00003672: mov word ptr [bp - 4], 0
00003677: mov word ptr [bp - 6], 1
0000367C: inc word ptr [bp - 4]
0000367F: push word ptr [bp + 0xa]
00003682: push word ptr [bp + 8]
00003685: call word ptr [bp + 4]
00003688: pop cx
00003689: pop cx
0000368A: or ax, ax
0000368C: jl 0x36ff
0000368E: cwde 
0000368F: xchg bx, ax
00003690: test bl, 0x80
00003693: jne 0x369d
00003695: mov di, 0x7233
00003698: test byte ptr [bx + di], 1
0000369B: jne 0x367c
0000369D: xchg bx, ax
0000369E: dec word ptr [bp + 0xe]
000036A1: jl 0x3706
000036A3: cmp al, 0x2b
000036A5: je 0x36ae
000036A7: cmp al, 0x2d
000036A9: jne 0x36c5
000036AB: inc byte ptr [bp - 1]
000036AE: dec word ptr [bp + 0xe]
000036B1: jl 0x3706
000036B3: inc word ptr [bp - 4]
000036B6: push word ptr [bp + 0xa]
000036B9: push word ptr [bp + 8]
000036BC: call word ptr [bp + 4]
000036BF: pop cx
000036C0: pop cx
000036C1: or ax, ax
000036C3: jl 0x36ff
000036C5: sub si, si
000036C7: mov di, si
000036C9: mov cx, word ptr [bp + 0xc]
000036CC: jcxz 0x3724
000036CE: cmp cx, 0x24
000036D1: ja 0x3706
000036D3: cmp cl, 2
000036D6: jb 0x3706
000036D8: cmp al, 0x30
000036DA: jne 0x3754
000036DC: cmp cl, 0x10
000036DF: jne 0x3752
000036E1: dec word ptr [bp + 0xe]
000036E4: jl 0x3721
000036E6: inc word ptr [bp - 4]
000036E9: push word ptr [bp + 0xa]
000036EC: push word ptr [bp + 8]
000036EF: call word ptr [bp + 4]
000036F2: pop cx
000036F3: pop cx
000036F4: cmp al, 0x78
000036F6: je 0x3752
000036F8: cmp al, 0x58
000036FA: je 0x3752
000036FC: jmp 0x377e
000036FF: mov word ptr [bp - 6], 0xffff
00003704: jmp 0x370b
00003706: mov word ptr [bp - 6], 0
0000370B: push word ptr [bp + 0xa]
0000370E: push word ptr [bp + 8]
00003711: push ax
00003712: call word ptr [bp + 6]
00003715: add sp, 6
00003718: dec word ptr [bp - 4]
0000371B: sub ax, ax
0000371D: cdq 
0000371E: jmp 0x37d8
00003721: jmp 0x37c8
00003724: cmp al, 0x30
00003726: mov word ptr [bp + 0xc], 0xa
0000372B: jne 0x3754
0000372D: dec word ptr [bp + 0xe]
00003730: jl 0x3721
00003732: inc word ptr [bp - 4]
00003735: push word ptr [bp + 0xa]
00003738: push word ptr [bp + 8]
0000373B: call word ptr [bp + 4]
0000373E: pop cx
0000373F: pop cx
00003740: mov word ptr [bp + 0xc], 8
00003745: cmp al, 0x78
00003747: je 0x374d
00003749: cmp al, 0x58
0000374B: jne 0x377e
0000374D: mov word ptr [bp + 0xc], 0x10
00003752: jmp 0x376b
00003754: mov cx, word ptr [bp + 0xc]
00003757: xchg bx, ax
00003758: call 0x363b
0000375B: xchg bx, ax
0000375C: jb 0x3706
0000375E: xchg si, ax
0000375F: jmp 0x376b
00003761: xchg si, ax
00003762: mul word ptr [bp + 0xc]
00003765: add si, ax
00003767: adc di, dx
00003769: jne 0x379b
0000376B: dec word ptr [bp + 0xe]
0000376E: jl 0x37c8
00003770: inc word ptr [bp - 4]
00003773: push word ptr [bp + 0xa]
00003776: push word ptr [bp + 8]
00003779: call word ptr [bp + 4]
0000377C: pop cx
0000377D: pop cx
0000377E: mov cx, word ptr [bp + 0xc]
00003781: xchg bx, ax
00003782: call 0x363b
00003785: xchg bx, ax
00003786: jae 0x3761
00003788: jmp 0x37b8
0000378A: xchg si, ax
0000378B: mul cx
0000378D: xchg di, ax
0000378E: xchg dx, cx
00003790: mul dx
00003792: add si, di
00003794: adc ax, cx
00003796: xchg di, ax
00003797: adc dl, dh
00003799: jne 0x37ec
0000379B: dec word ptr [bp + 0xe]
0000379E: jl 0x37c8
000037A0: inc word ptr [bp - 4]
000037A3: push word ptr [bp + 0xa]
000037A6: push word ptr [bp + 8]
000037A9: call word ptr [bp + 4]
000037AC: pop cx
000037AD: pop cx
000037AE: mov cx, word ptr [bp + 0xc]
000037B1: xchg bx, ax
000037B2: call 0x363b
000037B5: xchg bx, ax
000037B6: jae 0x378a
000037B8: push word ptr [bp + 0xa]
000037BB: push word ptr [bp + 8]
000037BE: push ax
000037BF: call word ptr [bp + 6]
000037C2: add sp, 6
000037C5: dec word ptr [bp - 4]
000037C8: mov dx, di
000037CA: xchg si, ax
000037CB: cmp byte ptr [bp - 1], 0
000037CF: je 0x37d8
000037D1: neg dx
000037D3: neg ax
000037D5: sbb dx, 0
000037D8: les di, ptr [bp + 0x10]
000037DB: mov bx, word ptr [bp - 4]
000037DE: add word ptr es:[di], bx
000037E1: les di, ptr [bp + 0x14]
000037E4: mov bx, word ptr [bp - 6]
000037E7: mov word ptr es:[di], bx
000037EA: jmp 0x3802
000037EC: mov ax, 0xffff
000037EF: mov dx, 0x7fff
000037F2: add al, byte ptr [bp - 1]
000037F5: adc ah, 0
000037F8: adc dx, 0
000037FB: mov word ptr [bp - 6], 2
00003800: jmp 0x37d8
00003802: pop di
00003803: pop si
00003804: mov sp, bp
00003806: pop bp
00003807: ret 
00003808: push bp
00003809: mov bp, sp
0000380B: push si
0000380C: mov bx, es
0000380E: les si, ptr [bp + 6]
00003811: mov word ptr es:[si], bx
00003814: mov ax, word ptr [bp + 4]
00003817: mov word ptr es:[si + 2], ax
0000381B: mov word ptr es:[si + 4], ss
0000381F: mov word ptr es:[si + 6], ds
00003823: mov es, bx
00003825: pop si
00003826: pop bp
00003827: retf 
00003828: push bp
00003829: mov bp, sp
0000382B: push di
0000382C: mov ax, 0x5701
0000382F: mov bx, word ptr [bp + 6]
00003832: les di, ptr [bp + 8]
00003835: mov cx, word ptr es:[di]
00003838: mov dx, word ptr es:[di + 2]
0000383C: int 0x21
0000383E: jb 0x3844
00003840: xor ax, ax
00003842: jmp 0x3848
00003844: push ax
00003845: call 0x2d44
00003848: pop di
00003849: pop bp
0000384A: retf 
0000384B: mov cx, 5
0000384E: cmp cx, word ptr [0x74d0]
00003852: jae 0x388c
00003854: mov bx, cx
00003856: shl bx, 1
00003858: mov word ptr [bx + 0x74d2], 0
0000385E: mov ax, cx
00003860: mov dx, 0x14
00003863: imul dx
00003865: mov bx, ax
00003867: mov byte ptr [bx + 0x7344], 0xff
0000386C: mov ax, cx
0000386E: mov dx, 0x14
00003871: imul dx
00003873: add ax, 0x7340
00003876: push ax
00003877: mov ax, cx
00003879: mov dx, 0x14
0000387C: imul dx
0000387E: mov bx, ax
00003880: pop ax
00003881: mov word ptr [bx + 0x7352], ax
00003885: inc cx
00003886: cmp cx, word ptr [0x74d0]
0000388A: jb 0x3854
0000388C: mov al, byte ptr [0x7344]
0000388F: cwde 
00003890: push ax
00003891: nop 
00003892: push cs
00003893: call 0x2f4e
00003896: pop cx
00003897: or ax, ax
00003899: jne 0x38a1
0000389B: and word ptr [0x7342], 0xfdff
000038A1: mov ax, 0x200
000038A4: push ax
000038A5: test word ptr [0x7342], 0x200
000038AB: je 0x38b2
000038AD: mov ax, 1
000038B0: jmp 0x38b4
000038B2: xor ax, ax
000038B4: push ax
000038B5: xor ax, ax
000038B7: xor dx, dx
000038B9: push ax
000038BA: push dx
000038BB: push ds
000038BC: mov ax, 0x7340
000038BF: push ax
000038C0: nop 
000038C1: push cs
000038C2: call 0x60c5
000038C5: add sp, 0xc
000038C8: mov al, byte ptr [0x7358]
000038CB: cwde 
000038CC: push ax
000038CD: nop 
000038CE: push cs
000038CF: call 0x2f4e
000038D2: pop cx
000038D3: or ax, ax
000038D5: jne 0x38dd
000038D7: and word ptr [0x7356], 0xfdff
000038DD: mov ax, 0x200
000038E0: push ax
000038E1: test word ptr [0x7356], 0x200
000038E7: je 0x38ee
000038E9: mov ax, 2
000038EC: jmp 0x38f0
000038EE: xor ax, ax
000038F0: push ax
000038F1: xor ax, ax
000038F3: xor dx, dx
000038F5: push ax
000038F6: push dx
000038F7: push ds
000038F8: mov ax, 0x7354
000038FB: push ax
000038FC: nop 
000038FD: push cs
000038FE: call 0x60c5
00003901: add sp, 0xc
00003904: ret 
00003905: push bp
00003906: mov bp, sp
00003908: push ds
00003909: mov ah, 0x41
0000390B: lds dx, ptr [bp + 6]
0000390E: int 0x21
00003910: pop ds
00003911: jb 0x3917
00003913: xor ax, ax
00003915: jmp 0x391b
00003917: push ax
00003918: call 0x2d44
0000391B: pop bp
0000391C: retf 
0000391D: mov al, dh
0000391F: call 0x3924
00003922: mov al, dl
00003924: aam 0x10
00003926: xchg al, ah
00003928: call 0x392d
0000392B: xchg al, ah
0000392D: add al, 0x90
0000392F: daa 
00003930: adc al, 0x40
00003932: daa 
00003933: stosb byte ptr es:[di], al
00003934: ret 
00003935: push bp
00003936: mov bp, sp
00003938: sub sp, 0x96
0000393C: push si
0000393D: push di
0000393E: mov word ptr [bp - 0x12], 0
00003943: mov word ptr [bp - 0x14], 0x50
00003948: mov word ptr [bp - 0x16], 0
0000394D: jmp 0x3999
0000394F: push di
00003950: mov cx, 0xffff
00003953: xor al, al
00003955: repne scasb al, byte ptr es:[di]
00003957: not cx
00003959: dec cx
0000395A: pop di
0000395B: ret 
0000395C: mov byte ptr ss:[di], al
0000395F: inc di
00003960: dec byte ptr [bp - 0x14]
00003963: jne 0x3998
00003965: push bx
00003966: push cx
00003967: push dx
00003968: push es
00003969: lea ax, [bp - 0x96]
0000396D: sub di, ax
0000396F: push ss
00003970: lea ax, [bp - 0x96]
00003974: push ax
00003975: push di
00003976: push word ptr [bp + 0xc]
00003979: push word ptr [bp + 0xa]
0000397C: call word ptr [bp + 0xe]
0000397F: or ax, ax
00003981: jne 0x3988
00003983: mov word ptr [bp - 0x16], 1
00003988: mov word ptr [bp - 0x14], 0x50
0000398D: add word ptr [bp - 0x12], di
00003990: lea di, [bp - 0x96]
00003994: pop es
00003995: pop dx
00003996: pop cx
00003997: pop bx
00003998: ret 
00003999: push es
0000399A: cld 
0000399B: lea di, [bp - 0x96]
0000399F: mov word ptr [bp - 4], di
000039A2: mov di, word ptr [bp - 4]
000039A5: les si, ptr [bp + 6]
000039A8: lodsb al, byte ptr es:[si]
000039AA: or al, al
000039AC: je 0x39c0
000039AE: cmp al, 0x25
000039B0: je 0x39c3
000039B2: mov byte ptr ss:[di], al
000039B5: inc di
000039B6: dec byte ptr [bp - 0x14]
000039B9: jg 0x39a8
000039BB: call 0x3965
000039BE: jmp 0x39a8
000039C0: jmp 0x3da8
000039C3: mov word ptr [bp - 0x10], si
000039C6: lodsb al, byte ptr es:[si]
000039C8: cmp al, 0x25
000039CA: je 0x39b2
000039CC: mov word ptr [bp - 4], di
000039CF: xor cx, cx
000039D1: mov word ptr [bp - 0xe], cx
000039D4: mov word ptr [bp - 2], 0x20
000039D9: mov byte ptr [bp - 0xb], cl
000039DC: mov word ptr [bp - 8], 0xffff
000039E1: mov word ptr [bp - 0xa], 0xffff
000039E6: jmp 0x39ea
000039E8: lodsb al, byte ptr es:[si]
000039EA: xor ah, ah
000039EC: mov dx, ax
000039EE: mov bx, ax
000039F0: sub bl, 0x20
000039F3: cmp bl, 0x60
000039F6: jae 0x3a0b
000039F8: mov bl, byte ptr [bx + 0x75eb]
000039FC: cmp bx, 0x17
000039FF: jbe 0x3a04
00003A01: jmp 0x3d94
00003A04: shl bx, 1
00003A06: jmp word ptr cs:[bx + 0x21c8]
00003A0B: jmp 0x3d94
00003A0E: cmp ch, 0
00003A11: ja 0x3a0b
00003A13: or word ptr [bp - 2], 1
00003A17: jmp 0x39e8
00003A19: cmp ch, 0
00003A1C: ja 0x3a0b
00003A1E: or word ptr [bp - 2], 2
00003A22: jmp 0x39e8
00003A24: cmp ch, 0
00003A27: ja 0x3a0b
00003A29: cmp byte ptr [bp - 0xb], 0x2b
00003A2D: je 0x3a32
00003A2F: mov byte ptr [bp - 0xb], dl
00003A32: jmp 0x39e8
00003A34: and word ptr [bp - 2], 0xffdf
00003A38: jmp 0x3a3e
00003A3A: or word ptr [bp - 2], 0x20
00003A3E: mov ch, 5
00003A40: jmp 0x39e8
00003A42: cmp ch, 0
00003A45: ja 0x3a94
00003A47: test word ptr [bp - 2], 2
00003A4C: jne 0x3a77
00003A4E: or word ptr [bp - 2], 8
00003A52: mov ch, 1
00003A54: jmp 0x39e8
00003A56: jmp 0x3d94
00003A59: mov di, word ptr [bp + 4]
00003A5C: mov ax, word ptr ss:[di]
00003A5F: add word ptr [bp + 4], 2
00003A63: cmp ch, 2
00003A66: jae 0x3a7a
00003A68: or ax, ax
00003A6A: jns 0x3a72
00003A6C: neg ax
00003A6E: or word ptr [bp - 2], 2
00003A72: mov word ptr [bp - 8], ax
00003A75: mov ch, 3
00003A77: jmp 0x39e8
00003A7A: cmp ch, 4
00003A7D: jne 0x3a56
00003A7F: mov word ptr [bp - 0xa], ax
00003A82: inc ch
00003A84: jmp 0x39e8
00003A87: cmp ch, 4
00003A8A: jae 0x3a56
00003A8C: mov ch, 4
00003A8E: inc word ptr [bp - 0xa]
00003A91: jmp 0x39e8
00003A94: xchg dx, ax
00003A95: sub al, 0x30
00003A97: cwde 
00003A98: cmp ch, 2
00003A9B: ja 0x3ab6
00003A9D: mov ch, 2
00003A9F: xchg word ptr [bp - 8], ax
00003AA2: or ax, ax
00003AA4: jl 0x3a77
00003AA6: shl ax, 1
00003AA8: mov dx, ax
00003AAA: shl ax, 1
00003AAC: shl ax, 1
00003AAE: add ax, dx
00003AB0: add word ptr [bp - 8], ax
00003AB3: jmp 0x39e8
00003AB6: cmp ch, 4
00003AB9: jne 0x3a56
00003ABB: xchg word ptr [bp - 0xa], ax
00003ABE: or ax, ax
00003AC0: je 0x3a77
00003AC2: shl ax, 1
00003AC4: mov dx, ax
00003AC6: shl ax, 1
00003AC8: shl ax, 1
00003ACA: add ax, dx
00003ACC: add word ptr [bp - 0xa], ax
00003ACF: jmp 0x39e8
00003AD2: or word ptr [bp - 2], 0x10
00003AD6: jmp 0x3a3e
00003AD9: or word ptr [bp - 2], 0x100
00003ADE: and word ptr [bp - 2], 0xffef
00003AE2: jmp 0x3a3e
00003AE5: mov bh, 8
00003AE7: jmp 0x3af3
00003AE9: mov bh, 0xa
00003AEB: jmp 0x3af7
00003AED: mov bh, 0x10
00003AEF: mov bl, 0xe9
00003AF1: add bl, dl
00003AF3: mov byte ptr [bp - 0xb], 0
00003AF7: mov byte ptr [bp - 5], dl
00003AFA: xor dx, dx
00003AFC: mov byte ptr [bp - 6], dl
00003AFF: mov di, word ptr [bp + 4]
00003B02: mov ax, word ptr ss:[di]
00003B05: jmp 0x3b17
00003B07: mov bh, 0xa
00003B09: mov byte ptr [bp - 6], 1
00003B0D: mov byte ptr [bp - 5], dl
00003B10: mov di, word ptr [bp + 4]
00003B13: mov ax, word ptr ss:[di]
00003B16: cdq 
00003B17: inc di
00003B18: inc di
00003B19: mov word ptr [bp + 6], si
00003B1C: test word ptr [bp - 2], 0x10
00003B21: je 0x3b28
00003B23: mov dx, word ptr ss:[di]
00003B26: inc di
00003B27: inc di
00003B28: mov word ptr [bp + 4], di
00003B2B: lea di, [bp - 0x45]
00003B2E: or ax, ax
00003B30: jne 0x3b44
00003B32: or dx, dx
00003B34: jne 0x3b44
00003B36: cmp word ptr [bp - 0xa], 0
00003B3A: jne 0x3b48
00003B3C: mov byte ptr ss:[di], 0
00003B40: mov ax, di
00003B42: jmp 0x3b58
00003B44: or word ptr [bp - 2], 4
00003B48: push dx
00003B49: push ax
00003B4A: push ss
00003B4B: push di
00003B4C: mov al, bh
00003B4E: cwde 
00003B4F: push ax
00003B50: mov al, byte ptr [bp - 6]
00003B53: push ax
00003B54: push bx
00003B55: call 0x2f5f
00003B58: push ss
00003B59: pop es
00003B5A: mov dx, word ptr [bp - 0xa]
00003B5D: or dx, dx
00003B5F: jge 0x3b64
00003B61: jmp 0x3c58
00003B64: jmp 0x3c66
00003B67: mov byte ptr [bp - 5], dl
00003B6A: mov word ptr [bp + 6], si
00003B6D: lea di, [bp - 0x46]
00003B70: mov bx, word ptr [bp + 4]
00003B73: push word ptr ss:[bx]
00003B76: inc bx
00003B77: inc bx
00003B78: mov word ptr [bp + 4], bx
00003B7B: test word ptr [bp - 2], 0x20
00003B80: je 0x3b92
00003B82: mov dx, word ptr ss:[bx]
00003B85: inc bx
00003B86: inc bx
00003B87: mov word ptr [bp + 4], bx
00003B8A: push ss
00003B8B: pop es
00003B8C: call 0x391d
00003B8F: mov al, 0x3a
00003B91: stosb byte ptr es:[di], al
00003B92: push ss
00003B93: pop es
00003B94: pop dx
00003B95: call 0x391d
00003B98: mov byte ptr ss:[di], 0
00003B9C: mov byte ptr [bp - 6], 0
00003BA0: and word ptr [bp - 2], 0xfffb
00003BA4: lea cx, [bp - 0x46]
00003BA7: sub di, cx
00003BA9: xchg di, cx
00003BAB: mov dx, word ptr [bp - 0xa]
00003BAE: cmp dx, cx
00003BB0: jg 0x3bb4
00003BB2: mov dx, cx
00003BB4: jmp 0x3c58
00003BB7: mov word ptr [bp + 6], si
00003BBA: mov byte ptr [bp - 5], dl
00003BBD: mov di, word ptr [bp + 4]
00003BC0: mov ax, word ptr ss:[di]
00003BC3: add word ptr [bp + 4], 2
00003BC7: push ss
00003BC8: pop es
00003BC9: lea di, [bp - 0x45]
00003BCC: xor ah, ah
00003BCE: mov word ptr ss:[di], ax
00003BD1: mov cx, 1
00003BD4: jmp 0x3c9b
00003BD7: mov word ptr [bp + 6], si
00003BDA: mov byte ptr [bp - 5], dl
00003BDD: mov di, word ptr [bp + 4]
00003BE0: test word ptr [bp - 2], 0x20
00003BE5: jne 0x3bf4
00003BE7: mov di, word ptr ss:[di]
00003BEA: add word ptr [bp + 4], 2
00003BEE: push ds
00003BEF: pop es
00003BF0: or di, di
00003BF2: jmp 0x3bff
00003BF4: les di, ptr ss:[di]
00003BF7: add word ptr [bp + 4], 4
00003BFB: mov ax, es
00003BFD: or ax, di
00003BFF: jne 0x3c06
00003C01: push ds
00003C02: pop es
00003C03: mov di, 0x75e4
00003C06: call 0x394f
00003C09: cmp cx, word ptr [bp - 0xa]
00003C0C: jbe 0x3c11
00003C0E: mov cx, word ptr [bp - 0xa]
00003C11: jmp 0x3c9b
00003C14: mov word ptr [bp + 6], si
00003C17: mov byte ptr [bp - 5], dl
00003C1A: mov di, word ptr [bp + 4]
00003C1D: mov cx, word ptr [bp - 0xa]
00003C20: or cx, cx
00003C22: jge 0x3c27
00003C24: mov cx, 6
00003C27: push ss
00003C28: push di
00003C29: push cx
00003C2A: push ss
00003C2B: lea bx, [bp - 0x45]
00003C2E: push bx
00003C2F: push dx
00003C30: mov ax, 1
00003C33: and ax, word ptr [bp - 2]
00003C36: push ax
00003C37: mov ax, word ptr [bp - 2]
00003C3A: test ax, 0x100
00003C3D: je 0x3c48
00003C3F: mov ax, 8
00003C42: add word ptr [bp + 4], 0xa
00003C46: jmp 0x3c4f
00003C48: add word ptr [bp + 4], 8
00003C4C: mov ax, 6
00003C4F: push ax
00003C50: call 0x488c
00003C53: push ss
00003C54: pop es
00003C55: lea di, [bp - 0x45]
00003C58: test word ptr [bp - 2], 8
00003C5D: je 0x3c77
00003C5F: mov dx, word ptr [bp - 8]
00003C62: or dx, dx
00003C64: jle 0x3c77
00003C66: call 0x394f
00003C69: cmp byte ptr es:[di], 0x2d
00003C6D: jne 0x3c70
00003C6F: dec cx
00003C70: sub dx, cx
00003C72: jle 0x3c77
00003C74: mov word ptr [bp - 0xe], dx
00003C77: cmp byte ptr es:[di], 0x2d
00003C7B: je 0x3c88
00003C7D: mov al, byte ptr [bp - 0xb]
00003C80: or al, al
00003C82: je 0x3c98
00003C84: dec di
00003C85: mov byte ptr es:[di], al
00003C88: cmp word ptr [bp - 0xe], 0
00003C8C: jle 0x3c98
00003C8E: mov cx, word ptr [bp - 0xa]
00003C91: or cx, cx
00003C93: jge 0x3c98
00003C95: dec word ptr [bp - 0xe]
00003C98: call 0x394f
00003C9B: mov si, di
00003C9D: mov di, word ptr [bp - 4]
00003CA0: mov bx, word ptr [bp - 8]
00003CA3: mov ax, 5
00003CA6: and ax, word ptr [bp - 2]
00003CA9: cmp ax, 5
00003CAC: jne 0x3cc1
00003CAE: mov ah, byte ptr [bp - 5]
00003CB1: cmp ah, 0x6f
00003CB4: jne 0x3cc3
00003CB6: cmp word ptr [bp - 0xe], 0
00003CBA: jg 0x3cc1
00003CBC: mov word ptr [bp - 0xe], 1
00003CC1: jmp 0x3cde
00003CC3: cmp ah, 0x78
00003CC6: je 0x3ccd
00003CC8: cmp ah, 0x58
00003CCB: jne 0x3cde
00003CCD: or word ptr [bp - 2], 0x40
00003CD1: dec bx
00003CD2: dec bx
00003CD3: sub word ptr [bp - 0xe], 2
00003CD7: jge 0x3cde
00003CD9: mov word ptr [bp - 0xe], 0
00003CDE: add cx, word ptr [bp - 0xe]
00003CE1: test word ptr [bp - 2], 2
00003CE6: jne 0x3cf4
00003CE8: jmp 0x3cf0
00003CEA: mov al, 0x20
00003CEC: call 0x395c
00003CEF: dec bx
00003CF0: cmp bx, cx
00003CF2: jg 0x3cea
00003CF4: test word ptr [bp - 2], 0x40
00003CF9: je 0x3d06
00003CFB: mov al, 0x30
00003CFD: call 0x395c
00003D00: mov al, byte ptr [bp - 5]
00003D03: call 0x395c
00003D06: mov dx, word ptr [bp - 0xe]
00003D09: or dx, dx
00003D0B: jle 0x3d34
00003D0D: sub cx, dx
00003D0F: sub bx, dx
00003D11: mov al, byte ptr es:[si]
00003D14: cmp al, 0x2d
00003D16: je 0x3d20
00003D18: cmp al, 0x20
00003D1A: je 0x3d20
00003D1C: cmp al, 0x2b
00003D1E: jne 0x3d27
00003D20: lodsb al, byte ptr es:[si]
00003D22: call 0x395c
00003D25: dec cx
00003D26: dec bx
00003D27: xchg dx, cx
00003D29: jcxz 0x3d32
00003D2B: mov al, 0x30
00003D2D: call 0x395c
00003D30: loop 0x3d2b
00003D32: xchg dx, cx
00003D34: jcxz 0x3d48
00003D36: sub bx, cx
00003D38: lodsb al, byte ptr es:[si]
00003D3A: mov byte ptr ss:[di], al
00003D3D: inc di
00003D3E: dec byte ptr [bp - 0x14]
00003D41: jg 0x3d46
00003D43: call 0x3965
00003D46: loop 0x3d38
00003D48: or bx, bx
00003D4A: jle 0x3d55
00003D4C: mov cx, bx
00003D4E: mov al, 0x20
00003D50: call 0x395c
00003D53: loop 0x3d4e
00003D55: jmp 0x39a5
00003D58: mov word ptr [bp + 6], si
00003D5B: mov di, word ptr [bp + 4]
00003D5E: test word ptr [bp - 2], 0x20
00003D63: jne 0x3d70
00003D65: mov di, word ptr ss:[di]
00003D68: add word ptr [bp + 4], 2
00003D6C: push ds
00003D6D: pop es
00003D6E: jmp 0x3d77
00003D70: les di, ptr ss:[di]
00003D73: add word ptr [bp + 4], 4
00003D77: mov ax, 0x50
00003D7A: sub al, byte ptr [bp - 0x14]
00003D7D: add ax, word ptr [bp - 0x12]
00003D80: mov word ptr es:[di], ax
00003D83: test word ptr [bp - 2], 0x10
00003D88: je 0x3d91
00003D8A: inc di
00003D8B: inc di
00003D8C: mov word ptr es:[di], 0
00003D91: jmp 0x39a2
00003D94: mov si, word ptr [bp - 0x10]
00003D97: mov es, word ptr [bp + 8]
00003D9A: mov di, word ptr [bp - 4]
00003D9D: mov al, 0x25
00003D9F: call 0x395c
00003DA2: lodsb al, byte ptr es:[si]
00003DA4: or al, al
00003DA6: jne 0x3d9f
00003DA8: cmp byte ptr [bp - 0x14], 0x50
00003DAC: jge 0x3db1
00003DAE: call 0x3965
00003DB1: pop es
00003DB2: cmp word ptr [bp - 0x16], 0
00003DB6: je 0x3dbd
00003DB8: mov ax, 0xffff
00003DBB: jmp 0x3dc0
00003DBD: mov ax, word ptr [bp - 0x12]
00003DC0: pop di
00003DC1: pop si
00003DC2: mov sp, bp
00003DC4: pop bp
00003DC5: ret 0xc
00003DC8: and al, 0x1e
00003DCA: push cs
00003DCB: push ds
00003DCC: pop cx
00003DCD: push ds
00003DCE: sbb word ptr [0x1e87], bx
00003DD2: xchg sp, ax
00003DD3: push ds
00003DD4: rcr byte ptr [0x1ed9], cl
00003DD8: ficomp word ptr [0x1e42]
00003DDC: pop es
00003DDD: pop ds
00003DDE: in ax, 0x1e
00003DE0: jmp 0x2b01
00003DE3: push ds
00003DE4: pop ds
00003DE6: adc al, 0x20
00003DE8: mov bh, 0x1f
00003DEA: xlatb 
00003DEB: pop ds
00003DEC: pop ax
00003DED: and word ptr [si - 0x6bdf], dx
00003DF1: and word ptr [si + 0x3421], dx
00003DF5: push ds
00003DF6: cmp bl, byte ptr [0x8b55]
00003DFA: in al, dx
00003DFB: mov al, byte ptr [0x7654]
00003DFE: mov ah, 0
00003E00: mov dx, word ptr [bp + 4]
00003E03: dec dx
00003E04: imul dx
00003E06: push ax
00003E07: mov ax, word ptr [0x7657]
00003E0A: pop dx
00003E0B: add ax, dx
00003E0D: mov dx, word ptr [bp + 6]
00003E10: dec dx
00003E11: add ax, dx
00003E13: shl ax, 1
00003E15: mov dx, word ptr [0x7659]
00003E19: pop bp
00003E1A: ret 4
00003E1D: push bp
00003E1E: mov bp, sp
00003E20: sub sp, 2
00003E23: push si
00003E24: push di
00003E25: mov al, byte ptr [0x7656]
00003E28: mov ah, 0
00003E2A: mov word ptr [bp - 2], ax
00003E2D: push ds
00003E2E: mov cx, word ptr [bp + 4]
00003E31: jcxz 0x3e8d
00003E33: les di, ptr [bp + 0xa]
00003E36: lds si, ptr [bp + 6]
00003E39: cld 
00003E3A: cmp si, di
00003E3C: jae 0x3e48
00003E3E: mov ax, cx
00003E40: dec ax
00003E41: shl ax, 1
00003E43: add si, ax
00003E45: add di, ax
00003E47: std 
00003E48: cmp word ptr [bp - 2], 0
00003E4C: jne 0x3e52
00003E4E: rep movsw word ptr es:[di], word ptr [si]
00003E50: jmp 0x3e8d
00003E52: mov dx, 0x3da
00003E55: mov ax, es
00003E57: mov bx, ds
00003E59: cmp ax, bx
00003E5B: je 0x3e6e
00003E5D: cli 
00003E5E: in al, dx
00003E5F: ror al, 1
00003E61: jb 0x3e5e
00003E63: in al, dx
00003E64: ror al, 1
00003E66: jae 0x3e63
00003E68: movsw word ptr es:[di], word ptr [si]
00003E69: sti 
00003E6A: loop 0x3e5d
00003E6C: jmp 0x3e8d
00003E6E: cli 
00003E6F: in al, dx
00003E70: ror al, 1
00003E72: jb 0x3e6f
00003E74: in al, dx
00003E75: ror al, 1
00003E77: jae 0x3e74
00003E79: lodsw ax, word ptr [si]
00003E7A: sti 
00003E7B: mov bx, ax
00003E7D: in al, dx
00003E7E: ror al, 1
00003E80: jb 0x3e7d
00003E82: in al, dx
00003E83: ror al, 1
00003E85: jae 0x3e82
00003E87: mov ax, bx
00003E89: stosw word ptr es:[di], ax
00003E8A: sti 
00003E8B: loop 0x3e6e
00003E8D: cld 
00003E8E: pop ds
00003E8F: pop di
00003E90: pop si
00003E91: mov sp, bp
00003E93: pop bp
00003E94: ret 0xa
00003E97: push bp
00003E98: mov bp, sp
00003E9A: push si
00003E9B: push word ptr [bp + 0xc]
00003E9E: push word ptr [bp + 0xa]
00003EA1: nop 
00003EA2: push cs
00003EA3: call 0x6661
00003EA6: pop cx
00003EA7: pop cx
00003EA8: mov si, ax
00003EAA: inc ax
00003EAB: push ax
00003EAC: push word ptr [bp + 0xc]
00003EAF: push word ptr [bp + 0xa]
00003EB2: push word ptr [bp + 8]
00003EB5: push word ptr [bp + 6]
00003EB8: nop 
00003EB9: push cs
00003EBA: call 0x59ff
00003EBD: add sp, 0xa
00003EC0: mov dx, word ptr [bp + 8]
00003EC3: mov ax, word ptr [bp + 6]
00003EC6: add ax, si
00003EC8: pop si
00003EC9: pop bp
00003ECA: retf 
00003ECB: mov al, 6
00003ECD: push ax
00003ECE: mov al, byte ptr [0x764c]
00003ED1: push ax
00003ED2: mov al, byte ptr [0x764d]
00003ED5: push ax
00003ED6: mov al, byte ptr [0x764e]
00003ED9: push ax
00003EDA: mov al, byte ptr [0x764f]
00003EDD: push ax
00003EDE: mov al, 0
00003EE0: push ax
00003EE1: call 0x4a85
00003EE4: mov dl, byte ptr [0x764c]
00003EE8: mov dh, byte ptr [0x764d]
00003EEC: mov ah, 2
00003EEE: mov bh, 0
00003EF0: call 0x3f2f
00003EF3: retf 
00003EF4: push bp
00003EF5: mov bp, sp
00003EF7: jmp 0x3f11
00003EF9: les bx, ptr [bp + 4]
00003EFC: inc word ptr [bp + 4]
00003EFF: mov al, byte ptr es:[bx]
00003F02: les bx, ptr [bp + 8]
00003F05: inc word ptr [bp + 8]
00003F08: cmp al, byte ptr es:[bx]
00003F0B: je 0x3f11
00003F0D: xor ax, ax
00003F0F: jmp 0x3f1d
00003F11: les bx, ptr [bp + 4]
00003F14: cmp byte ptr es:[bx], 0
00003F18: jne 0x3ef9
00003F1A: mov ax, 1
00003F1D: pop bp
00003F1E: ret 8
00003F21: mov ah, 0x12
00003F23: mov bl, 0x10
00003F25: call 0x3f2f
00003F28: mov al, bl
00003F2A: add al, 0xf0
00003F2C: mov ah, 0
00003F2E: ret 
00003F2F: push bp
00003F30: push ds
00003F31: push cx
00003F32: mov cx, 0x40
00003F35: mov ds, cx
00003F37: pop cx
00003F38: cmp ah, 0
00003F3B: je 0x3f46
00003F3D: cmp ah, 0xf
00003F40: je 0x3f9b
00003F42: int 0x10
00003F44: jmp 0x3fb7
00003F46: cmp al, 2
00003F48: je 0x3f4e
00003F4A: cmp al, 3
00003F4C: jne 0x3f67
00003F4E: push ax
00003F4F: mov ax, 0x1a00
00003F52: int 0x10
00003F54: cmp al, 0x1a
00003F56: je 0x3f5d
00003F58: and byte ptr [0x87], 0xfe
00003F5D: mov ah, 1
00003F5F: mov cx, 0x607
00003F62: int 0x10
00003F64: pop ax
00003F65: jmp 0x3f42
00003F67: cmp al, 0x40
00003F69: jne 0x3f42
00003F6B: mov bl, 0x10
00003F6D: mov ah, 0x12
00003F6F: int 0x10
00003F71: cmp bl, 0x10
00003F74: je 0x3fb7
00003F76: mov ax, 0x1112
00003F79: xor bl, bl
00003F7B: int 0x10
00003F7D: mov ax, 0x1200
00003F80: mov bl, 0x20
00003F82: int 0x10
00003F84: mov ax, 0x1a00
00003F87: int 0x10
00003F89: cmp al, 0x1a
00003F8B: je 0x3fb7
00003F8D: or byte ptr [0x87], 1
00003F92: mov ah, 1
00003F94: mov cx, 0x600
00003F97: int 0x10
00003F99: jmp 0x3fb7
00003F9B: int 0x10
00003F9D: cmp al, 2
00003F9F: je 0x3fa5
00003FA1: cmp al, 3
00003FA3: jne 0x3fb7
00003FA5: push ax
00003FA6: call 0x3f21
00003FA9: or al, al
00003FAB: pop ax
00003FAC: je 0x3fb7
00003FAE: cmp byte ptr [0x84], 0x18
00003FB3: je 0x3fb7
00003FB5: mov al, 0x40
00003FB7: pop ds
00003FB8: pop bp
00003FB9: ret 
00003FBA: mov ah, 0xf
00003FBC: call 0x3f2f
00003FBF: push ax
00003FC0: call 0x3fd7
00003FC3: pop cx
00003FC4: mov ah, 8
00003FC6: mov bh, 0
00003FC8: call 0x3f2f
00003FCB: and ah, 0x7f
00003FCE: mov byte ptr [0x7651], ah
00003FD2: mov byte ptr [0x7650], ah
00003FD6: ret 
00003FD7: push bp
00003FD8: mov bp, sp
00003FDA: mov al, byte ptr [bp + 4]
00003FDD: mov byte ptr [0x7652], al
00003FE0: mov ah, 0xf
00003FE2: call 0x3f2f
00003FE5: mov byte ptr [0x7654], ah
00003FE9: cmp al, byte ptr [0x7652]
00003FED: je 0x4003
00003FEF: mov al, byte ptr [0x7652]
00003FF2: mov ah, 0
00003FF4: call 0x3f2f
00003FF7: mov ah, 0xf
00003FF9: call 0x3f2f
00003FFC: mov byte ptr [0x7652], al
00003FFF: mov byte ptr [0x7654], ah
00004003: cmp byte ptr [0x7652], 3
00004008: jbe 0x401d
0000400A: cmp byte ptr [0x7652], 0x40
0000400F: jae 0x401d
00004011: cmp byte ptr [0x7652], 7
00004016: je 0x401d
00004018: mov ax, 1
0000401B: jmp 0x401f
0000401D: xor ax, ax
0000401F: mov byte ptr [0x7655], al
00004022: cmp byte ptr [0x7652], 0x40
00004027: je 0x402d
00004029: mov al, 0x19
0000402B: jmp 0x4038
0000402D: mov ax, 0x40
00004030: mov es, ax
00004032: mov al, byte ptr es:[0x84]
00004036: inc al
00004038: mov byte ptr [0x7653], al
0000403B: cmp byte ptr [0x7652], 7
00004040: je 0x4062
00004042: mov ax, 0xf000
00004045: mov dx, 0xffea
00004048: push ax
00004049: push dx
0000404A: push ds
0000404B: mov ax, 0x765d
0000404E: push ax
0000404F: call 0x3ef4
00004052: or ax, ax
00004054: jne 0x4062
00004056: call 0x3f21
00004059: or ax, ax
0000405B: jne 0x4062
0000405D: mov ax, 1
00004060: jmp 0x4064
00004062: xor ax, ax
00004064: mov byte ptr [0x7656], al
00004067: cmp byte ptr [0x7652], 7
0000406C: jne 0x4073
0000406E: mov ax, 0xb000
00004071: jmp 0x4076
00004073: mov ax, 0xb800
00004076: mov word ptr [0x7659], ax
00004079: mov word ptr [0x7657], 0
0000407F: mov al, 0
00004081: mov byte ptr [0x764d], al
00004084: mov byte ptr [0x764c], al
00004087: mov al, byte ptr [0x7654]
0000408A: add al, 0xff
0000408C: mov byte ptr [0x764e], al
0000408F: mov al, byte ptr [0x7653]
00004092: add al, 0xff
00004094: mov byte ptr [0x764f], al
00004097: pop bp
00004098: ret 
00004099: mov dx, 0x7664
0000409C: jmp 0x40a1
0000409E: mov dx, 0x7669
000040A1: mov cx, 5
000040A4: mov ah, 0x40
000040A6: mov bx, 2
000040A9: int 0x21
000040AB: mov cx, 0x27
000040AE: mov dx, 0x766e
000040B1: mov ah, 0x40
000040B3: int 0x21
000040B5: jmp 0x1e7a
000040B8: add byte ptr [bx + si], al
000040BA: add byte ptr [bx + si], al
000040BC: add byte ptr [bx + si], al
000040BE: add byte ptr [bx + si], al
000040C0: add byte ptr [bx + si], al
000040C2: add byte ptr [bx + si], al
000040C4: cmp dx, word ptr cs:[0x24b8]
000040C9: je 0x4102
000040CB: mov ds, dx
000040CD: mov ds, word ptr [2]
000040D1: cmp word ptr [2], 0
000040D6: je 0x40df
000040D8: mov word ptr cs:[0x24ba], ds
000040DD: jmp 0x4117
000040DF: mov ax, ds
000040E1: cmp ax, word ptr cs:[0x24b8]
000040E6: je 0x40fd
000040E8: mov ax, word ptr [8]
000040EB: mov word ptr cs:[0x24ba], ax
000040EF: push ds
000040F0: xor ax, ax
000040F2: push ax
000040F3: call 0x4198
000040F6: mov ds, word ptr cs:[0x24be]
000040FB: jmp 0x4120
000040FD: mov dx, word ptr cs:[0x24b8]
00004102: mov word ptr cs:[0x24b8], 0
00004109: mov word ptr cs:[0x24ba], 0
00004110: mov word ptr cs:[0x24bc], 0
00004117: mov ds, word ptr cs:[0x24be]
0000411C: push dx
0000411D: xor ax, ax
0000411F: push ax
00004120: call 0x4560
00004123: add sp, 4
00004126: ret 
00004127: mov ds, dx
00004129: push ds
0000412A: mov es, word ptr [2]
0000412E: mov word ptr [2], 0
00004134: mov word ptr [8], es
00004138: cmp dx, word ptr cs:[0x24b8]
0000413D: je 0x416d
0000413F: cmp word ptr es:[2], 0
00004145: jne 0x416d
00004147: mov ax, word ptr [0]
0000414A: pop bx
0000414B: push es
0000414C: add word ptr es:[0], ax
00004151: mov cx, es
00004153: add dx, ax
00004155: mov es, dx
00004157: cmp word ptr es:[2], 0
0000415D: jne 0x4166
0000415F: mov word ptr es:[8], cx
00004164: jmp 0x4170
00004166: mov word ptr es:[2], cx
0000416B: jmp 0x4170
0000416D: call 0x41c1
00004170: pop es
00004171: mov ax, es
00004173: add ax, word ptr es:[0]
00004178: mov ds, ax
0000417A: cmp word ptr [2], 0
0000417F: je 0x4182
00004181: ret 
00004182: mov ax, word ptr [0]
00004185: add word ptr es:[0], ax
0000418A: mov ax, es
0000418C: mov bx, ds
0000418E: add bx, word ptr [0]
00004192: mov es, bx
00004194: mov word ptr es:[2], ax
00004198: mov bx, ds
0000419A: cmp bx, word ptr [6]
0000419E: je 0x41b9
000041A0: mov es, word ptr [6]
000041A4: mov ds, word ptr [4]
000041A8: mov word ptr [6], es
000041AC: mov word ptr es:[4], ds
000041B1: mov word ptr cs:[0x24bc], ds
000041B6: mov ds, bx
000041B8: ret 
000041B9: mov word ptr cs:[0x24bc], 0
000041C0: ret 
000041C1: mov ax, word ptr cs:[0x24bc]
000041C5: or ax, ax
000041C7: je 0x41ea
000041C9: mov bx, ss
000041CB: pushf 
000041CC: cli 
000041CD: mov ss, ax
000041CF: mov es, word ptr ss:[6]
000041D4: mov word ptr ss:[6], ds
000041D9: mov word ptr [4], ss
000041DD: mov ss, bx
000041DF: popf 
000041E0: mov word ptr es:[4], ds
000041E5: mov word ptr [6], es
000041E9: ret 
000041EA: mov word ptr cs:[0x24bc], ds
000041EF: mov word ptr [4], ds
000041F3: mov word ptr [6], ds
000041F7: ret 
000041F8: push bp
000041F9: mov bp, sp
000041FB: push si
000041FC: push di
000041FD: mov word ptr cs:[0x24be], ds
00004202: mov dx, word ptr [bp + 8]
00004205: or dx, dx
00004207: je 0x4218
00004209: cmp dx, word ptr cs:[0x24ba]
0000420E: jne 0x4215
00004210: call 0x40c4
00004213: jmp 0x4218
00004215: call 0x4127
00004218: mov ds, word ptr cs:[0x24be]
0000421D: pop di
0000421E: pop si
0000421F: pop bp
00004220: retf 
00004221: push ax
00004222: mov ds, word ptr cs:[0x24be]
00004227: xor ax, ax
00004229: push ax
0000422A: push ax
0000422B: call 0x459f
0000422E: add sp, 4
00004231: and ax, 0xf
00004234: je 0x424a
00004236: mov dx, 0x10
00004239: sub dx, ax
0000423B: xor ax, ax
0000423D: mov ds, word ptr cs:[0x24be]
00004242: push ax
00004243: push dx
00004244: call 0x459f
00004247: add sp, 4
0000424A: pop ax
0000424B: push ax
0000424C: xor bx, bx
0000424E: mov bl, ah
00004250: mov cl, 4
00004252: shr bx, cl
00004254: shl ax, cl
00004256: mov ds, word ptr cs:[0x24be]
0000425B: push bx
0000425C: push ax
0000425D: call 0x459f
00004260: add sp, 4
00004263: pop bx
00004264: cmp ax, 0xffff
00004267: je 0x4281
00004269: mov word ptr cs:[0x24b8], dx
0000426E: mov word ptr cs:[0x24ba], dx
00004273: mov ds, dx
00004275: mov word ptr [0], bx
00004279: mov word ptr [2], dx
0000427D: mov ax, 4
00004280: ret 
00004281: xor ax, ax
00004283: cdq 
00004284: ret 
00004285: push ax
00004286: xor bx, bx
00004288: mov bl, ah
0000428A: mov cl, 4
0000428C: shr bx, cl
0000428E: shl ax, cl
00004290: mov ds, word ptr cs:[0x24be]
00004295: push bx
00004296: push ax
00004297: call 0x459f
0000429A: add sp, 4
0000429D: pop bx
0000429E: cmp ax, 0xffff
000042A1: je 0x42db
000042A3: and ax, 0xf
000042A6: jne 0x42c0
000042A8: mov cx, word ptr cs:[0x24ba]
000042AD: mov word ptr cs:[0x24ba], dx
000042B2: mov ds, dx
000042B4: mov word ptr [0], bx
000042B8: mov word ptr [2], cx
000042BC: mov ax, 4
000042BF: ret 
000042C0: push bx
000042C1: push dx
000042C2: neg ax
000042C4: add ax, 0x10
000042C7: xor bx, bx
000042C9: push bx
000042CA: push ax
000042CB: call 0x459f
000042CE: add sp, 4
000042D1: pop dx
000042D2: pop bx
000042D3: cmp ax, 0xffff
000042D6: je 0x42db
000042D8: inc dx
000042D9: jmp 0x42a8
000042DB: xor ax, ax
000042DD: cdq 
000042DE: ret 
000042DF: mov bx, dx
000042E1: sub word ptr [0], ax
000042E5: add dx, word ptr [0]
000042E9: mov ds, dx
000042EB: mov word ptr [0], ax
000042EE: mov word ptr [2], bx
000042F2: mov bx, dx
000042F4: add bx, word ptr [0]
000042F8: mov ds, bx
000042FA: mov word ptr [2], dx
000042FE: mov ax, 4
00004301: ret 
00004302: push bp
00004303: mov bp, sp
00004305: xor dx, dx
00004307: mov ax, word ptr [bp + 6]
0000430A: jmp 0x4315
0000430C: push bp
0000430D: mov bp, sp
0000430F: mov dx, word ptr [bp + 8]
00004312: mov ax, word ptr [bp + 6]
00004315: mov cx, ax
00004317: or cx, dx
00004319: push si
0000431A: push di
0000431B: mov word ptr cs:[0x24be], ds
00004320: je 0x4380
00004322: add ax, 0x13
00004325: adc dx, 0
00004328: jb 0x436b
0000432A: test dx, 0xfff0
0000432E: jne 0x436b
00004330: mov cl, 4
00004332: shr ax, cl
00004334: shl dx, cl
00004336: or ah, dl
00004338: mov dx, word ptr cs:[0x24b8]
0000433D: or dx, dx
0000433F: je 0x4361
00004341: mov dx, word ptr cs:[0x24bc]
00004346: or dx, dx
00004348: je 0x435c
0000434A: mov bx, dx
0000434C: mov ds, dx
0000434E: cmp word ptr [0], ax
00004352: jae 0x4370
00004354: mov dx, word ptr [6]
00004358: cmp dx, bx
0000435A: jne 0x434c
0000435C: call 0x4285
0000435F: jmp 0x4380
00004361: call 0x4221
00004364: jmp 0x4380
00004366: call 0x42df
00004369: jmp 0x4380
0000436B: xor ax, ax
0000436D: cdq 
0000436E: jmp 0x4380
00004370: ja 0x4366
00004372: call 0x4198
00004375: mov bx, word ptr [8]
00004379: mov word ptr [2], bx
0000437D: mov ax, 4
00004380: mov ds, word ptr cs:[0x24be]
00004385: pop di
00004386: pop si
00004387: pop bp
00004388: retf 
00004389: push bx
0000438A: mov si, word ptr cs:[0x24c0]
0000438F: push si
00004390: mov si, word ptr cs:[0x24c2]
00004395: push si
00004396: push cs
00004397: call 0x430c
0000439A: add sp, 4
0000439D: or dx, dx
0000439F: jne 0x43a3
000043A1: pop bx
000043A2: ret 
000043A3: pop ds
000043A4: mov es, dx
000043A6: push es
000043A7: push ds
000043A8: push bx
000043A9: mov dx, word ptr [0]
000043AD: cld 
000043AE: dec dx
000043AF: mov di, 4
000043B2: mov si, di
000043B4: mov cx, 6
000043B7: rep movsw word ptr es:[di], word ptr [si]
000043B9: or dx, dx
000043BB: je 0x43f4
000043BD: mov ax, es
000043BF: inc ax
000043C0: mov es, ax
000043C2: mov ax, ds
000043C4: inc ax
000043C5: mov ds, ax
000043C7: xor di, di
000043C9: mov si, di
000043CB: mov cx, dx
000043CD: cmp cx, 0x1000
000043D1: jbe 0x43d6
000043D3: mov cx, 0x1000
000043D6: shl cx, 1
000043D8: shl cx, 1
000043DA: shl cx, 1
000043DC: rep movsw word ptr es:[di], word ptr [si]
000043DE: sub dx, 0x1000
000043E2: jbe 0x43f4
000043E4: mov ax, es
000043E6: add ax, 0x1000
000043E9: mov es, ax
000043EB: mov ax, ds
000043ED: add ax, 0x1000
000043F0: mov ds, ax
000043F2: jmp 0x43c7
000043F4: mov ds, word ptr cs:[0x24be]
000043F9: push cs
000043FA: call 0x41f8
000043FD: add sp, 4
00004400: pop dx
00004401: mov ax, 4
00004404: ret 
00004405: cmp bx, word ptr cs:[0x24ba]
0000440A: je 0x4451
0000440C: mov di, bx
0000440E: add di, ax
00004410: mov es, di
00004412: mov si, cx
00004414: sub si, ax
00004416: mov word ptr es:[0], si
0000441B: mov word ptr es:[2], bx
00004420: push es
00004421: push ax
00004422: mov es, bx
00004424: mov word ptr es:[0], ax
00004428: mov dx, bx
0000442A: add dx, cx
0000442C: mov es, dx
0000442E: cmp word ptr es:[2], 0
00004434: je 0x443d
00004436: mov word ptr es:[2], di
0000443B: jmp 0x4442
0000443D: mov word ptr es:[8], di
00004442: mov si, bx
00004444: push cs
00004445: call 0x41f8
00004448: add sp, 4
0000444B: mov dx, si
0000444D: mov ax, 4
00004450: ret 
00004451: push bx
00004452: mov es, bx
00004454: mov word ptr es:[0], ax
00004458: add bx, ax
0000445A: push bx
0000445B: xor ax, ax
0000445D: push ax
0000445E: call 0x4560
00004461: add sp, 4
00004464: pop dx
00004465: mov ax, 4
00004468: ret 
00004469: push bp
0000446A: mov bp, sp
0000446C: xor dx, dx
0000446E: jmp 0x4476
00004470: push bp
00004471: mov bp, sp
00004473: mov dx, word ptr [bp + 0xc]
00004476: mov ax, word ptr [bp + 0xa]
00004479: mov bx, word ptr [bp + 8]
0000447C: push si
0000447D: push di
0000447E: mov word ptr cs:[0x24be], ds
00004483: mov word ptr cs:[0x24c0], dx
00004488: mov word ptr cs:[0x24c2], ax
0000448C: or bx, bx
0000448E: je 0x44ca
00004490: mov cx, ax
00004492: or cx, dx
00004494: je 0x44d5
00004496: add ax, 0x13
00004499: adc dx, 0
0000449C: jb 0x44de
0000449E: test dx, 0xfff0
000044A2: jne 0x44de
000044A4: mov cl, 4
000044A6: shr ax, cl
000044A8: shl dx, cl
000044AA: or ah, dl
000044AC: mov es, bx
000044AE: mov cx, word ptr es:[0]
000044B3: cmp cx, ax
000044B5: jb 0x44c5
000044B7: ja 0x44c0
000044B9: mov dx, bx
000044BB: mov ax, 4
000044BE: jmp 0x44e1
000044C0: call 0x4405
000044C3: jmp 0x44e1
000044C5: call 0x4389
000044C8: jmp 0x44e1
000044CA: push dx
000044CB: push ax
000044CC: push cs
000044CD: call 0x430c
000044D0: add sp, 4
000044D3: jmp 0x44e1
000044D5: push bx
000044D6: push ax
000044D7: push cs
000044D8: call 0x41f8
000044DB: add sp, 4
000044DE: xor ax, ax
000044E0: cdq 
000044E1: mov ds, word ptr cs:[0x24be]
000044E6: pop di
000044E7: pop si
000044E8: pop bp
000044E9: retf 
000044EA: push bp
000044EB: mov bp, sp
000044ED: push si
000044EE: mov si, word ptr [bp + 6]
000044F1: inc si
000044F2: sub si, word ptr [0x7b]
000044F6: add si, 0x3f
000044F9: mov cl, 6
000044FB: shr si, cl
000044FD: cmp si, word ptr [0x7696]
00004501: jne 0x4515
00004503: mov ax, word ptr [bp + 6]
00004506: mov dx, word ptr [bp + 4]
00004509: mov word ptr [0x8d], ax
0000450C: mov word ptr [0x8b], dx
00004510: mov ax, 1
00004513: jmp 0x455b
00004515: mov cl, 6
00004517: shl si, cl
00004519: mov dx, word ptr [0x91]
0000451D: mov ax, si
0000451F: add ax, word ptr [0x7b]
00004523: cmp ax, dx
00004525: jbe 0x452d
00004527: mov si, dx
00004529: sub si, word ptr [0x7b]
0000452D: push si
0000452E: push word ptr [0x7b]
00004532: nop 
00004533: push cs
00004534: call 0x4d1c
00004537: pop cx
00004538: pop cx
00004539: mov dx, ax
0000453B: cmp dx, -1
0000453E: jne 0x454b
00004540: mov ax, si
00004542: mov cl, 6
00004544: shr ax, cl
00004546: mov word ptr [0x7696], ax
00004549: jmp 0x4503
0000454B: mov ax, word ptr [0x7b]
0000454E: add ax, dx
00004550: mov word ptr [0x91], ax
00004553: mov word ptr [0x8f], 0
00004559: xor ax, ax
0000455B: pop si
0000455C: pop bp
0000455D: ret 4
00004560: push bp
00004561: mov bp, sp
00004563: mov cx, word ptr [0x89]
00004567: mov bx, word ptr [0x87]
0000456B: mov dx, word ptr [bp + 6]
0000456E: mov ax, word ptr [bp + 4]
00004571: call 0x30f7
00004574: jb 0x4596
00004576: mov cx, word ptr [0x91]
0000457A: mov bx, word ptr [0x8f]
0000457E: mov dx, word ptr [bp + 6]
00004581: mov ax, word ptr [bp + 4]
00004584: call 0x30f7
00004587: ja 0x4596
00004589: push word ptr [bp + 6]
0000458C: push word ptr [bp + 4]
0000458F: call 0x44ea
00004592: or ax, ax
00004594: jne 0x459b
00004596: mov ax, 0xffff
00004599: jmp 0x459d
0000459B: xor ax, ax
0000459D: pop bp
0000459E: ret 
0000459F: push bp
000045A0: mov bp, sp
000045A2: sub sp, 8
000045A5: mov ax, word ptr [0x8d]
000045A8: xor dx, dx
000045AA: mov cl, 4
000045AC: call 0x2c9b
000045AF: add ax, word ptr [0x8b]
000045B3: adc dx, 0
000045B6: add ax, word ptr [bp + 4]
000045B9: adc dx, word ptr [bp + 6]
000045BC: cmp dx, 0xf
000045BF: jl 0x45d0
000045C1: jg 0x45c8
000045C3: cmp ax, 0xffff
000045C6: jbe 0x45d0
000045C8: mov dx, 0xffff
000045CB: mov ax, 0xffff
000045CE: jmp 0x4626
000045D0: mov dx, word ptr [0x8d]
000045D4: mov ax, word ptr [0x8b]
000045D7: mov cx, word ptr [bp + 6]
000045DA: mov bx, word ptr [bp + 4]
000045DD: call 0x2cbc
000045E0: mov word ptr [bp - 2], dx
000045E3: mov word ptr [bp - 4], ax
000045E6: mov cx, word ptr [0x89]
000045EA: mov bx, word ptr [0x87]
000045EE: call 0x30f7
000045F1: jb 0x45c8
000045F3: mov cx, word ptr [0x91]
000045F7: mov bx, word ptr [0x8f]
000045FB: mov dx, word ptr [bp - 2]
000045FE: mov ax, word ptr [bp - 4]
00004601: call 0x30f7
00004604: ja 0x45c8
00004606: mov ax, word ptr [0x8d]
00004609: mov dx, word ptr [0x8b]
0000460D: mov word ptr [bp - 6], ax
00004610: mov word ptr [bp - 8], dx
00004613: push word ptr [bp - 2]
00004616: push word ptr [bp - 4]
00004619: call 0x44ea
0000461C: or ax, ax
0000461E: je 0x45c8
00004620: mov dx, word ptr [bp - 6]
00004623: mov ax, word ptr [bp - 8]
00004626: mov sp, bp
00004628: pop bp
00004629: ret 
0000462A: push bp
0000462B: mov bp, sp
0000462D: sub sp, 4
00004630: mov word ptr [bp - 2], 0
00004635: mov word ptr [bp - 4], 0
0000463A: mov dx, word ptr [0x91]
0000463E: mov ax, word ptr [0x8f]
00004641: mov cx, word ptr [0x8d]
00004645: mov bx, word ptr [0x8b]
00004649: call 0x2d1c
0000464C: mov word ptr [bp - 2], dx
0000464F: mov word ptr [bp - 4], ax
00004652: cmp word ptr [bp - 2], 0
00004656: jb 0x4668
00004658: ja 0x4660
0000465A: cmp word ptr [bp - 4], 0x10
0000465E: jbe 0x4668
00004660: sub word ptr [bp - 4], 0x10
00004664: sbb word ptr [bp - 2], 0
00004668: and word ptr [bp - 4], 0xfff0
0000466C: and word ptr [bp - 2], 0xffff
00004670: mov dx, word ptr [bp - 2]
00004673: mov ax, word ptr [bp - 4]
00004676: mov sp, bp
00004678: pop bp
00004679: retf 
0000467A: push bp
0000467B: mov bp, sp
0000467D: sub sp, 2
00004680: push si
00004681: push di
00004682: mov di, word ptr [bp + 6]
00004685: mov si, word ptr [bp + 8]
00004688: push di
00004689: push si
0000468A: push word ptr [bp + 0xa]
0000468D: push word ptr [bp + 0xc]
00004690: call 0x4a0e
00004693: or ax, ax
00004695: jne 0x469b
00004697: xor ax, ax
00004699: jmp 0x46ca
0000469B: mov ax, word ptr [bp + 0xa]
0000469E: sub ax, di
000046A0: inc ax
000046A1: mov word ptr [bp - 2], ax
000046A4: jmp 0x46c2
000046A6: push word ptr [bp + 0x10]
000046A9: push word ptr [bp + 0xe]
000046AC: push di
000046AD: push si
000046AE: call 0x3df8
000046B1: push dx
000046B2: push ax
000046B3: push word ptr [bp - 2]
000046B6: call 0x49d2
000046B9: mov ax, word ptr [bp - 2]
000046BC: shl ax, 1
000046BE: add word ptr [bp + 0xe], ax
000046C1: inc si
000046C2: cmp si, word ptr [bp + 0xc]
000046C5: jle 0x46a6
000046C7: mov ax, 1
000046CA: pop di
000046CB: pop si
000046CC: mov sp, bp
000046CE: pop bp
000046CF: retf 
000046D0: push bp
000046D1: mov bp, sp
000046D3: sub sp, 2
000046D6: push si
000046D7: push di
000046D8: mov di, word ptr [bp + 6]
000046DB: mov si, word ptr [bp + 8]
000046DE: push di
000046DF: push si
000046E0: push word ptr [bp + 0xa]
000046E3: push word ptr [bp + 0xc]
000046E6: call 0x4a0e
000046E9: or ax, ax
000046EB: jne 0x46f1
000046ED: xor ax, ax
000046EF: jmp 0x4720
000046F1: mov ax, word ptr [bp + 0xa]
000046F4: sub ax, di
000046F6: inc ax
000046F7: mov word ptr [bp - 2], ax
000046FA: jmp 0x4718
000046FC: push di
000046FD: push si
000046FE: call 0x3df8
00004701: push dx
00004702: push ax
00004703: push word ptr [bp + 0x10]
00004706: push word ptr [bp + 0xe]
00004709: push word ptr [bp - 2]
0000470C: call 0x49d2
0000470F: mov ax, word ptr [bp - 2]
00004712: shl ax, 1
00004714: add word ptr [bp + 0xe], ax
00004717: inc si
00004718: cmp si, word ptr [bp + 0xc]
0000471B: jle 0x46fc
0000471D: mov ax, 1
00004720: pop di
00004721: pop si
00004722: mov sp, bp
00004724: pop bp
00004725: retf 
00004726: push bp
00004727: mov bp, sp
00004729: sub sp, 8
0000472C: push ss
0000472D: lea ax, [bp - 8]
00004730: push ax
00004731: nop 
00004732: push cs
00004733: call 0x3808
00004736: pop cx
00004737: pop cx
00004738: push ss
00004739: lea ax, [bp - 8]
0000473C: push ax
0000473D: push word ptr [bp + 0xc]
00004740: push word ptr [bp + 0xa]
00004743: push word ptr [bp + 8]
00004746: push word ptr [bp + 6]
00004749: push cs
0000474A: call 0x4754
0000474D: add sp, 0xc
00004750: mov sp, bp
00004752: pop bp
00004753: retf 
00004754: push bp
00004755: mov bp, sp
00004757: push si
00004758: push di
00004759: push ds
0000475A: lds si, ptr [bp + 0xe]
0000475D: push word ptr [si]
0000475F: push word ptr [si + 6]
00004762: lds si, ptr [bp + 6]
00004765: mov ax, word ptr [si]
00004767: mov bx, word ptr [si + 2]
0000476A: mov cx, word ptr [si + 4]
0000476D: mov dx, word ptr [si + 6]
00004770: mov di, word ptr [si + 0xa]
00004773: mov si, word ptr [si + 8]
00004776: pop ds
00004777: pop es
00004778: push bp
00004779: int 0x21
0000477B: pop bp
0000477C: pushf 
0000477D: pushf 
0000477E: push si
0000477F: push ds
00004780: push es
00004781: lds si, ptr [bp + 0xe]
00004784: pop word ptr [si]
00004786: pop word ptr [si + 6]
00004789: lds si, ptr [bp + 0xa]
0000478C: pop word ptr [si + 8]
0000478F: pop word ptr [si + 0xe]
00004792: pop word ptr [si + 0xc]
00004795: and word ptr [si + 0xc], 1
00004799: mov word ptr [si + 0xa], di
0000479C: mov word ptr [si + 6], dx
0000479F: mov word ptr [si + 4], cx
000047A2: mov word ptr [si + 2], bx
000047A5: mov word ptr [si], ax
000047A7: pop ds
000047A8: je 0x47b0
000047AA: push ax
000047AB: push ax
000047AC: call 0x2d44
000047AF: pop ax
000047B0: pop di
000047B1: pop si
000047B2: pop bp
000047B3: retf 
000047B4: push bp
000047B5: mov bp, sp
000047B7: push ds
000047B8: lds dx, ptr [bp + 0xa]
000047BB: mov ah, 0x44
000047BD: mov al, byte ptr [bp + 8]
000047C0: mov bx, word ptr [bp + 6]
000047C3: mov cx, word ptr [bp + 0xe]
000047C6: int 0x21
000047C8: pop ds
000047C9: jb 0x47d7
000047CB: cmp word ptr [bp + 8], 0
000047CF: jne 0x47d5
000047D1: mov ax, dx
000047D3: jmp 0x47db
000047D5: jmp 0x47db
000047D7: push ax
000047D8: call 0x2d44
000047DB: pop bp
000047DC: retf 
000047DD: cmp byte ptr [0x7698], 0
000047E2: je 0x47e9
000047E4: mov ax, 1
000047E7: jmp 0x47ee
000047E9: mov ah, 0xb
000047EB: int 0x21
000047ED: cwde 
000047EE: retf 
000047EF: push bp
000047F0: mov bp, sp
000047F2: sub sp, 4
000047F5: push si
000047F6: push di
000047F7: mov si, word ptr [bp + 8]
000047FA: mov di, word ptr [bp + 0xc]
000047FD: push word ptr [bp + 6]
00004800: push si
00004801: push word ptr [bp + 0xa]
00004804: push di
00004805: call 0x4a0e
00004808: or ax, ax
0000480A: je 0x482f
0000480C: push word ptr [bp + 0xe]
0000480F: push word ptr [bp + 0x10]
00004812: mov ax, word ptr [bp + 0xa]
00004815: sub ax, word ptr [bp + 6]
00004818: mov dx, word ptr [bp + 0xe]
0000481B: add dx, ax
0000481D: push dx
0000481E: mov ax, di
00004820: sub ax, si
00004822: mov dx, word ptr [bp + 0x10]
00004825: add dx, ax
00004827: push dx
00004828: call 0x4a0e
0000482B: or ax, ax
0000482D: jne 0x4833
0000482F: xor ax, ax
00004831: jmp 0x4886
00004833: mov dx, si
00004835: mov word ptr [bp - 2], di
00004838: mov word ptr [bp - 4], 1
0000483D: cmp si, word ptr [bp + 0x10]
00004840: jge 0x484c
00004842: mov dx, di
00004844: mov word ptr [bp - 2], si
00004847: mov word ptr [bp - 4], 0xffff
0000484C: mov di, dx
0000484E: jmp 0x4879
00004850: push word ptr [bp + 0xe]
00004853: mov ax, di
00004855: sub ax, si
00004857: mov dx, word ptr [bp + 0x10]
0000485A: add dx, ax
0000485C: push dx
0000485D: call 0x3df8
00004860: push dx
00004861: push ax
00004862: push word ptr [bp + 6]
00004865: push di
00004866: call 0x3df8
00004869: push dx
0000486A: push ax
0000486B: mov ax, word ptr [bp + 0xa]
0000486E: sub ax, word ptr [bp + 6]
00004871: inc ax
00004872: push ax
00004873: call 0x49d2
00004876: add di, word ptr [bp - 4]
00004879: mov ax, word ptr [bp - 2]
0000487C: add ax, word ptr [bp - 4]
0000487F: cmp ax, di
00004881: jne 0x4850
00004883: mov ax, 1
00004886: pop di
00004887: pop si
00004888: mov sp, bp
0000488A: pop bp
0000488B: retf 
0000488C: jmp word ptr [0x76b0]
00004890: jmp word ptr [0x76b2]
00004894: jmp word ptr [0x76b4]
00004898: jmp word ptr [0x76b6]
0000489C: push bp
0000489D: mov bp, sp
0000489F: sub sp, 2
000048A2: mov ax, word ptr [bp + 4]
000048A5: shr ax, 1
000048A7: mov cx, ax
000048A9: mov al, byte ptr [0x7654]
000048AC: mov ah, 0
000048AE: push ax
000048AF: mov ax, cx
000048B1: xor dx, dx
000048B3: pop bx
000048B4: div bx
000048B6: mov bl, al
000048B8: mov ah, 0
000048BA: mov dl, byte ptr [0x7654]
000048BE: mov dh, 0
000048C0: imul dx
000048C2: mov dl, cl
000048C4: sub dl, al
000048C6: mov byte ptr [bp - 1], dl
000048C9: mov ah, bl
000048CB: mov al, byte ptr [bp - 1]
000048CE: mov sp, bp
000048D0: pop bp
000048D1: ret 4
000048D4: push bp
000048D5: mov bp, sp
000048D7: les bx, ptr [bp + 8]
000048DA: mov dx, word ptr es:[bx]
000048DD: les bx, ptr [bp + 4]
000048E0: cmp dx, word ptr es:[bx]
000048E3: je 0x48f2
000048E5: mov bh, 0
000048E7: mov ah, 2
000048E9: call 0x3f2f
000048EC: les bx, ptr [bp + 4]
000048EF: mov word ptr es:[bx], dx
000048F2: inc dl
000048F4: cmp dl, byte ptr [0x7654]
000048F8: jb 0x48fe
000048FA: inc dh
000048FC: mov dl, 0
000048FE: les bx, ptr [bp + 8]
00004901: mov word ptr es:[bx], dx
00004904: pop bp
00004905: ret 8
00004908: push bp
00004909: mov bp, sp
0000490B: sub sp, 0xc
0000490E: push si
0000490F: push di
00004910: mov di, word ptr [bp + 4]
00004913: call 0x4d38
00004916: mov word ptr [bp - 8], ax
00004919: mov word ptr [bp - 6], ax
0000491C: mov ax, word ptr [bp + 0xc]
0000491F: cmp ax, word ptr [0x7659]
00004923: jne 0x492a
00004925: mov ax, 1
00004928: jmp 0x492c
0000492A: xor ax, ax
0000492C: mov word ptr [bp - 0xa], ax
0000492F: or ax, ax
00004931: je 0x493f
00004933: push word ptr [bp + 0xc]
00004936: push word ptr [bp + 0xa]
00004939: call 0x489c
0000493C: mov word ptr [bp - 2], ax
0000493F: mov ax, word ptr [bp + 8]
00004942: cmp ax, word ptr [0x7659]
00004946: jne 0x494d
00004948: mov ax, 1
0000494B: jmp 0x494f
0000494D: xor ax, ax
0000494F: mov word ptr [bp - 0xc], ax
00004952: or ax, ax
00004954: je 0x49b9
00004956: push word ptr [bp + 8]
00004959: push word ptr [bp + 6]
0000495C: call 0x489c
0000495F: mov word ptr [bp - 4], ax
00004962: jmp 0x49b9
00004964: cmp word ptr [bp - 0xc], 0
00004968: je 0x4982
0000496A: push ss
0000496B: lea ax, [bp - 4]
0000496E: push ax
0000496F: push ss
00004970: lea ax, [bp - 6]
00004973: push ax
00004974: call 0x48d4
00004977: mov bh, 0
00004979: mov ah, 8
0000497B: call 0x3f2f
0000497E: mov si, ax
00004980: jmp 0x498c
00004982: les bx, ptr [bp + 6]
00004985: mov si, word ptr es:[bx]
00004988: add word ptr [bp + 6], 2
0000498C: cmp word ptr [bp - 0xa], 0
00004990: je 0x49af
00004992: push ss
00004993: lea ax, [bp - 2]
00004996: push ax
00004997: push ss
00004998: lea ax, [bp - 6]
0000499B: push ax
0000499C: call 0x48d4
0000499F: mov ax, si
000049A1: mov bl, ah
000049A3: mov cx, 1
000049A6: mov bh, 0
000049A8: mov ah, 9
000049AA: call 0x3f2f
000049AD: jmp 0x49b9
000049AF: les bx, ptr [bp + 0xa]
000049B2: mov word ptr es:[bx], si
000049B5: add word ptr [bp + 0xa], 2
000049B9: mov ax, di
000049BB: dec di
000049BC: or ax, ax
000049BE: jne 0x4964
000049C0: mov dx, word ptr [bp - 8]
000049C3: mov bh, 0
000049C5: mov ah, 2
000049C7: call 0x3f2f
000049CA: pop di
000049CB: pop si
000049CC: mov sp, bp
000049CE: pop bp
000049CF: ret 0xa
000049D2: push bp
000049D3: mov bp, sp
000049D5: mov dx, word ptr [bp + 4]
000049D8: mov al, byte ptr [0x7655]
000049DB: mov ah, 0
000049DD: or ax, ax
000049DF: jne 0x49fa
000049E1: cmp word ptr [0x765b], 0
000049E6: je 0x49fa
000049E8: push word ptr [bp + 0xc]
000049EB: push word ptr [bp + 0xa]
000049EE: push word ptr [bp + 8]
000049F1: push word ptr [bp + 6]
000049F4: push dx
000049F5: call 0x3e1d
000049F8: jmp 0x4a0a
000049FA: push word ptr [bp + 0xc]
000049FD: push word ptr [bp + 0xa]
00004A00: push word ptr [bp + 8]
00004A03: push word ptr [bp + 6]
00004A06: push dx
00004A07: call 0x4908
00004A0A: pop bp
00004A0B: ret 0xa
00004A0E: push bp
00004A0F: mov bp, sp
00004A11: push si
00004A12: push di
00004A13: mov bx, word ptr [bp + 0xa]
00004A16: mov si, word ptr [bp + 8]
00004A19: mov di, word ptr [bp + 6]
00004A1C: mov al, byte ptr [0x7654]
00004A1F: mov ah, 0
00004A21: mov cx, ax
00004A23: mov al, byte ptr [0x7653]
00004A26: mov ah, 0
00004A28: mov dx, ax
00004A2A: cmp bx, cx
00004A2C: ja 0x4a5b
00004A2E: cmp di, cx
00004A30: ja 0x4a5b
00004A32: cmp bx, di
00004A34: jg 0x4a5b
00004A36: cmp si, dx
00004A38: ja 0x4a5b
00004A3A: cmp word ptr [bp + 4], dx
00004A3D: ja 0x4a5b
00004A3F: cmp si, word ptr [bp + 4]
00004A42: jg 0x4a5b
00004A44: or bx, bx
00004A46: jle 0x4a5b
00004A48: or di, di
00004A4A: jle 0x4a5b
00004A4C: or si, si
00004A4E: jle 0x4a5b
00004A50: cmp word ptr [bp + 4], 0
00004A54: jle 0x4a5b
00004A56: mov ax, 1
00004A59: jmp 0x4a5d
00004A5B: xor ax, ax
00004A5D: pop di
00004A5E: pop si
00004A5F: pop bp
00004A60: ret 8
00004A63: push bp
00004A64: mov bp, sp
00004A66: mov dx, word ptr [bp + 6]
00004A69: mov ch, byte ptr [0x7650]
00004A6D: mov cl, 0x20
00004A6F: jmp 0x4a7c
00004A71: les bx, ptr [bp + 8]
00004A74: mov word ptr es:[bx], cx
00004A77: add word ptr [bp + 8], 2
00004A7B: inc dx
00004A7C: cmp dx, word ptr [bp + 4]
00004A7F: jle 0x4a71
00004A81: pop bp
00004A82: ret 8
00004A85: push bp
00004A86: mov bp, sp
00004A88: sub sp, 0xa0
00004A8C: mov al, byte ptr [0x7655]
00004A8F: mov ah, 0
00004A91: or ax, ax
00004A93: je 0x4a98
00004A95: jmp 0x4bd2
00004A98: cmp word ptr [0x765b], 0
00004A9D: jne 0x4aa2
00004A9F: jmp 0x4bd2
00004AA2: cmp byte ptr [bp + 4], 1
00004AA6: je 0x4aab
00004AA8: jmp 0x4bd2
00004AAB: inc byte ptr [bp + 0xc]
00004AAE: inc byte ptr [bp + 0xa]
00004AB1: inc byte ptr [bp + 8]
00004AB4: inc byte ptr [bp + 6]
00004AB7: cmp byte ptr [bp + 0xe], 6
00004ABB: je 0x4ac0
00004ABD: jmp 0x4b51
00004AC0: mov al, byte ptr [bp + 0xa]
00004AC3: mov ah, 0
00004AC5: push ax
00004AC6: mov al, byte ptr [bp + 0xc]
00004AC9: mov ah, 0
00004ACB: push ax
00004ACC: mov al, byte ptr [bp + 6]
00004ACF: mov ah, 0
00004AD1: push ax
00004AD2: mov al, byte ptr [bp + 8]
00004AD5: mov ah, 0
00004AD7: push ax
00004AD8: mov al, byte ptr [bp + 0xa]
00004ADB: mov ah, 0
00004ADD: inc ax
00004ADE: push ax
00004ADF: mov al, byte ptr [bp + 0xc]
00004AE2: mov ah, 0
00004AE4: push ax
00004AE5: nop 
00004AE6: push cs
00004AE7: call 0x47ef
00004AEA: add sp, 0xc
00004AED: push ss
00004AEE: lea ax, [bp - 0xa0]
00004AF2: push ax
00004AF3: mov al, byte ptr [bp + 6]
00004AF6: mov ah, 0
00004AF8: push ax
00004AF9: mov al, byte ptr [bp + 0xc]
00004AFC: mov ah, 0
00004AFE: push ax
00004AFF: mov al, byte ptr [bp + 6]
00004B02: mov ah, 0
00004B04: push ax
00004B05: mov al, byte ptr [bp + 0xc]
00004B08: mov ah, 0
00004B0A: push ax
00004B0B: nop 
00004B0C: push cs
00004B0D: call 0x467a
00004B10: add sp, 0xc
00004B13: push ss
00004B14: lea ax, [bp - 0xa0]
00004B18: push ax
00004B19: mov al, byte ptr [bp + 0xc]
00004B1C: mov ah, 0
00004B1E: push ax
00004B1F: mov al, byte ptr [bp + 8]
00004B22: mov ah, 0
00004B24: push ax
00004B25: call 0x4a63
00004B28: push ss
00004B29: lea ax, [bp - 0xa0]
00004B2D: push ax
00004B2E: mov al, byte ptr [bp + 6]
00004B31: mov ah, 0
00004B33: push ax
00004B34: mov al, byte ptr [bp + 8]
00004B37: mov ah, 0
00004B39: push ax
00004B3A: mov al, byte ptr [bp + 6]
00004B3D: mov ah, 0
00004B3F: push ax
00004B40: mov al, byte ptr [bp + 0xc]
00004B43: mov ah, 0
00004B45: push ax
00004B46: nop 
00004B47: push cs
00004B48: call 0x46d0
00004B4B: add sp, 0xc
00004B4E: jmp 0x4beb
00004B51: mov al, byte ptr [bp + 0xa]
00004B54: mov ah, 0
00004B56: inc ax
00004B57: push ax
00004B58: mov al, byte ptr [bp + 0xc]
00004B5B: mov ah, 0
00004B5D: push ax
00004B5E: mov al, byte ptr [bp + 6]
00004B61: mov ah, 0
00004B63: dec ax
00004B64: push ax
00004B65: mov al, byte ptr [bp + 8]
00004B68: mov ah, 0
00004B6A: push ax
00004B6B: mov al, byte ptr [bp + 0xa]
00004B6E: mov ah, 0
00004B70: push ax
00004B71: mov al, byte ptr [bp + 0xc]
00004B74: mov ah, 0
00004B76: push ax
00004B77: nop 
00004B78: push cs
00004B79: call 0x47ef
00004B7C: add sp, 0xc
00004B7F: push ss
00004B80: lea ax, [bp - 0xa0]
00004B84: push ax
00004B85: mov al, byte ptr [bp + 0xa]
00004B88: mov ah, 0
00004B8A: push ax
00004B8B: mov al, byte ptr [bp + 0xc]
00004B8E: mov ah, 0
00004B90: push ax
00004B91: mov al, byte ptr [bp + 0xa]
00004B94: mov ah, 0
00004B96: push ax
00004B97: mov al, byte ptr [bp + 0xc]
00004B9A: mov ah, 0
00004B9C: push ax
00004B9D: nop 
00004B9E: push cs
00004B9F: call 0x467a
00004BA2: add sp, 0xc
00004BA5: push ss
00004BA6: lea ax, [bp - 0xa0]
00004BAA: push ax
00004BAB: mov al, byte ptr [bp + 0xc]
00004BAE: mov ah, 0
00004BB0: push ax
00004BB1: mov al, byte ptr [bp + 8]
00004BB4: mov ah, 0
00004BB6: push ax
00004BB7: call 0x4a63
00004BBA: push ss
00004BBB: lea ax, [bp - 0xa0]
00004BBF: push ax
00004BC0: mov al, byte ptr [bp + 0xa]
00004BC3: mov ah, 0
00004BC5: push ax
00004BC6: mov al, byte ptr [bp + 8]
00004BC9: mov ah, 0
00004BCB: push ax
00004BCC: mov al, byte ptr [bp + 0xa]
00004BCF: jmp 0x4b3d
00004BD2: mov bh, byte ptr [0x7650]
00004BD6: mov ah, byte ptr [bp + 0xe]
00004BD9: mov al, byte ptr [bp + 4]
00004BDC: mov ch, byte ptr [bp + 0xa]
00004BDF: mov cl, byte ptr [bp + 0xc]
00004BE2: mov dh, byte ptr [bp + 6]
00004BE5: mov dl, byte ptr [bp + 8]
00004BE8: call 0x3f2f
00004BEB: mov sp, bp
00004BED: pop bp
00004BEE: ret 0xc
00004BF1: add byte ptr [bx + si], al
00004BF3: pop word ptr [0x76a0]
00004BF7: pop word ptr [0x76a2]
00004BFB: pop word ptr [0x76a4]
00004BFF: mov word ptr cs:[0x2ff1], ds
00004C04: mov word ptr [0x76a6], si
00004C08: mov word ptr [0x76a8], di
00004C0C: cld 
00004C0D: mov es, word ptr [0x7b]
00004C11: mov si, 0x80
00004C14: xor ah, ah
00004C16: lodsb al, byte ptr es:[si]
00004C18: inc ax
00004C19: mov bp, es
00004C1B: xchg si, dx
00004C1D: xchg bx, ax
00004C1E: mov si, word ptr [0x75]
00004C22: inc si
00004C23: inc si
00004C24: mov cx, 1
00004C27: cmp byte ptr [0x7d], 3
00004C2C: jb 0x4c3f
00004C2E: mov es, word ptr [0x77]
00004C32: mov di, si
00004C34: mov cl, 0x7f
00004C36: xor al, al
00004C38: repne scasb al, byte ptr es:[di]
00004C3A: jcxz 0x4cae
00004C3C: xor cl, 0x7f
00004C3F: push ax
00004C40: mov ax, cx
00004C42: add ax, bx
00004C44: inc ax
00004C45: and ax, 0xfffe
00004C48: mov di, sp
00004C4A: sub di, ax
00004C4C: jb 0x4cae
00004C4E: mov sp, di
00004C50: push es
00004C51: pop ds
00004C52: push ss
00004C53: pop es
00004C54: push cx
00004C55: dec cx
00004C56: rep movsb byte ptr es:[di], byte ptr [si]
00004C58: xor al, al
00004C5A: stosb byte ptr es:[di], al
00004C5B: mov ds, bp
00004C5D: xchg dx, si
00004C5F: xchg cx, bx
00004C61: mov ax, bx
00004C63: mov dx, ax
00004C65: inc bx
00004C66: call 0x4c86
00004C69: ja 0x4c76
00004C6B: jb 0x4cb3
00004C6D: cmp al, 0xd
00004C6F: je 0x4c82
00004C71: call 0x4c86
00004C74: ja 0x4c6b
00004C76: cmp al, 0x20
00004C78: je 0x4c82
00004C7A: cmp al, 0xd
00004C7C: je 0x4c82
00004C7E: cmp al, 9
00004C80: jne 0x4c66
00004C82: xor al, al
00004C84: jmp 0x4c66
00004C86: or ax, ax
00004C88: je 0x4c91
00004C8A: inc dx
00004C8B: stosb byte ptr es:[di], al
00004C8C: or al, al
00004C8E: jne 0x4c91
00004C90: inc bx
00004C91: xchg al, ah
00004C93: xor al, al
00004C95: stc 
00004C96: jcxz 0x4cad
00004C98: lodsb al, byte ptr [si]
00004C99: dec cx
00004C9A: sub al, 0x22
00004C9C: je 0x4cad
00004C9E: add al, 0x22
00004CA0: cmp al, 0x5c
00004CA2: jne 0x4cab
00004CA4: cmp byte ptr [si], 0x22
00004CA7: jne 0x4cab
00004CA9: lodsb al, byte ptr [si]
00004CAA: dec cx
00004CAB: or si, si
00004CAD: ret 
00004CAE: nop 
00004CAF: nop 
00004CB0: jmp 0x1e7a
00004CB3: pop cx
00004CB4: add cx, dx
00004CB6: mov ds, word ptr cs:[0x2ff1]
00004CBB: mov word ptr [0x769a], bx
00004CBF: inc bx
00004CC0: add bx, bx
00004CC2: add bx, bx
00004CC4: mov si, sp
00004CC6: mov bp, sp
00004CC8: sub bp, bx
00004CCA: jb 0x4cae
00004CCC: mov sp, bp
00004CCE: mov word ptr [0x769c], bp
00004CD2: mov word ptr [0x769e], ss
00004CD6: jcxz 0x4ce9
00004CD8: mov word ptr [bp], si
00004CDB: mov word ptr [bp + 2], ss
00004CDE: add bp, 4
00004CE1: lodsb al, byte ptr ss:[si]
00004CE3: or al, al
00004CE5: loopne 0x4ce1
00004CE7: je 0x4cd6
00004CE9: xor ax, ax
00004CEB: mov word ptr [bp], ax
00004CEE: mov word ptr [bp + 2], ax
00004CF1: mov ds, word ptr cs:[0x2ff1]
00004CF6: mov si, word ptr [0x76a6]
00004CFA: mov di, word ptr [0x76a8]
00004CFE: push word ptr [0x76a4]
00004D02: push word ptr [0x76a2]
00004D06: mov ax, word ptr [0x769a]
00004D09: mov word ptr [0x6b], ax
00004D0C: mov ax, word ptr [0x769e]
00004D0F: mov word ptr [0x6f], ax
00004D12: mov ax, word ptr [0x769c]
00004D15: mov word ptr [0x6d], ax
00004D18: jmp word ptr [0x76a0]
00004D1C: push bp
00004D1D: mov bp, sp
00004D1F: mov ah, 0x4a
00004D21: mov bx, word ptr [bp + 8]
00004D24: mov es, word ptr [bp + 6]
00004D27: int 0x21
00004D29: jb 0x4d30
00004D2B: mov ax, 0xffff
00004D2E: jmp 0x4d36
00004D30: push bx
00004D31: push ax
00004D32: call 0x2d44
00004D35: pop ax
00004D36: pop bp
00004D37: retf 
00004D38: mov ah, 3
00004D3A: mov bh, 0
00004D3C: call 0x3f2f
00004D3F: mov ax, dx
00004D41: ret 
00004D42: call 0x4d38
00004D45: mov ah, 0
00004D47: mov dl, byte ptr [0x764c]
00004D4B: mov dh, 0
00004D4D: sub ax, dx
00004D4F: inc ax
00004D50: retf 
00004D51: call 0x4d38
00004D54: mov cl, 8
00004D56: shr ax, cl
00004D58: mov ah, 0
00004D5A: mov dl, byte ptr [0x764d]
00004D5E: mov dh, 0
00004D60: sub ax, dx
00004D62: inc ax
00004D63: retf 
00004D64: push bp
00004D65: mov bp, sp
00004D67: xor ax, ax
00004D69: push ax
00004D6A: push word ptr [bp + 8]
00004D6D: push word ptr [bp + 6]
00004D70: nop 
00004D71: push cs
00004D72: call 0x4e21
00004D75: add sp, 6
00004D78: mov dx, ax
00004D7A: cmp dx, -1
00004D7D: je 0x4d99
00004D7F: test word ptr [bp + 0xa], 2
00004D84: je 0x4d8c
00004D86: test dx, 1
00004D8A: jne 0x4d90
00004D8C: xor ax, ax
00004D8E: jmp 0x4d99
00004D90: mov word ptr [0x7f], 5
00004D96: mov ax, 0xffff
00004D99: pop bp
00004D9A: retf 
00004D9B: push bp
00004D9C: mov bp, sp
00004D9E: push si
00004D9F: push di
00004DA0: push es
00004DA1: push bp
00004DA2: les si, ptr [bp + 6]
00004DA5: cld 
00004DA6: sub ax, ax
00004DA8: cdq 
00004DA9: mov cx, 0xa
00004DAC: mov bh, 0
00004DAE: mov di, 0x7233
00004DB1: mov bl, byte ptr es:[si]
00004DB4: inc si
00004DB5: test byte ptr [bx + di], 1
00004DB8: jne 0x4db1
00004DBA: mov bp, 0
00004DBD: cmp bl, 0x2b
00004DC0: je 0x4dc8
00004DC2: cmp bl, 0x2d
00004DC5: jne 0x4dcc
00004DC7: inc bp
00004DC8: mov bl, byte ptr es:[si]
00004DCB: inc si
00004DCC: cmp bl, 0x39
00004DCF: ja 0x4e00
00004DD1: sub bl, 0x30
00004DD4: jb 0x4e00
00004DD6: mul cx
00004DD8: add ax, bx
00004DDA: adc dl, dh
00004DDC: je 0x4dc8
00004DDE: jmp 0x4df2
00004DE0: mov di, dx
00004DE2: mov cx, 0xa
00004DE5: mul cx
00004DE7: xchg di, ax
00004DE8: xchg cx, dx
00004DEA: mul dx
00004DEC: xchg dx, ax
00004DED: xchg di, ax
00004DEE: add ax, bx
00004DF0: adc dx, cx
00004DF2: mov bl, byte ptr es:[si]
00004DF5: inc si
00004DF6: cmp bl, 0x39
00004DF9: ja 0x4e00
00004DFB: sub bl, 0x30
00004DFE: jae 0x4de0
00004E00: dec bp
00004E01: jl 0x4e0a
00004E03: neg dx
00004E05: neg ax
00004E07: sbb dx, 0
00004E0A: pop bp
00004E0B: pop es
00004E0C: pop di
00004E0D: pop si
00004E0E: pop bp
00004E0F: retf 
00004E10: push bp
00004E11: mov bp, sp
00004E13: push word ptr [bp + 8]
00004E16: push word ptr [bp + 6]
00004E19: push cs
00004E1A: call 0x4d9b
00004E1D: pop cx
00004E1E: pop cx
00004E1F: pop bp
00004E20: retf 
00004E21: push bp
00004E22: mov bp, sp
00004E24: push ds
00004E25: mov cx, word ptr [bp + 0xc]
00004E28: mov ah, 0x43
00004E2A: mov al, byte ptr [bp + 0xa]
00004E2D: lds dx, ptr [bp + 6]
00004E30: int 0x21
00004E32: pop ds
00004E33: jb 0x4e38
00004E35: xchg cx, ax
00004E36: jmp 0x4e3c
00004E38: push ax
00004E39: call 0x2d44
00004E3C: pop bp
00004E3D: retf 
00004E3E: push bp
00004E3F: mov bp, sp
00004E41: mov dx, word ptr [bp + 6]
00004E44: cmp dx, word ptr [0x74d0]
00004E48: jb 0x4e53
00004E4A: mov ax, 6
00004E4D: push ax
00004E4E: call 0x2d44
00004E51: jmp 0x4e64
00004E53: mov bx, dx
00004E55: shl bx, 1
00004E57: mov word ptr [bx + 0x74d2], 0
00004E5D: push dx
00004E5E: nop 
00004E5F: push cs
00004E60: call 0x4e66
00004E63: pop cx
00004E64: pop bp
00004E65: retf 
00004E66: push bp
00004E67: mov bp, sp
00004E69: mov ah, 0x3e
00004E6B: mov bx, word ptr [bp + 6]
00004E6E: int 0x21
00004E70: jb 0x4e7e
00004E72: shl bx, 1
00004E74: mov word ptr [bx + 0x74d2], 0
00004E7A: xor ax, ax
00004E7C: jmp 0x4e82
00004E7E: push ax
00004E7F: call 0x2d44
00004E82: pop bp
00004E83: retf 
00004E84: push bp
00004E85: mov bp, sp
00004E87: sub sp, 4
00004E8A: mov ax, word ptr [bp + 6]
00004E8D: cmp ax, word ptr [0x74d0]
00004E91: jb 0x4e99
00004E93: mov ax, 6
00004E96: push ax
00004E97: jmp 0x4ef4
00004E99: mov bx, word ptr [bp + 6]
00004E9C: shl bx, 1
00004E9E: test word ptr [bx + 0x74d2], 0x200
00004EA4: je 0x4eab
00004EA6: mov ax, 1
00004EA9: jmp 0x4ef7
00004EAB: mov ax, 0x4400
00004EAE: mov bx, word ptr [bp + 6]
00004EB1: int 0x21
00004EB3: jb 0x4ef3
00004EB5: test dl, 0x80
00004EB8: jne 0x4eef
00004EBA: mov ax, 0x4201
00004EBD: xor cx, cx
00004EBF: mov dx, cx
00004EC1: int 0x21
00004EC3: jb 0x4ef3
00004EC5: push dx
00004EC6: push ax
00004EC7: mov ax, 0x4202
00004ECA: xor cx, cx
00004ECC: mov dx, cx
00004ECE: int 0x21
00004ED0: mov word ptr [bp - 4], ax
00004ED3: mov word ptr [bp - 2], dx
00004ED6: pop dx
00004ED7: pop cx
00004ED8: jb 0x4ef3
00004EDA: mov ax, 0x4200
00004EDD: int 0x21
00004EDF: jb 0x4ef3
00004EE1: cmp dx, word ptr [bp - 2]
00004EE4: jb 0x4eef
00004EE6: ja 0x4eed
00004EE8: cmp ax, word ptr [bp - 4]
00004EEB: jb 0x4eef
00004EED: jmp 0x4ea6
00004EEF: xor ax, ax
00004EF1: jmp 0x4ef7
00004EF3: push ax
00004EF4: call 0x2d44
00004EF7: mov sp, bp
00004EF9: pop bp
00004EFA: retf 
00004EFB: push bp
00004EFC: mov bp, sp
00004EFE: push si
00004EFF: mov si, 0xffff
00004F02: mov ax, word ptr [bp + 6]
00004F05: or ax, word ptr [bp + 8]
00004F08: jne 0x4f0d
00004F0A: jmp 0x4fae
00004F0D: les bx, ptr [bp + 6]
00004F10: mov ax, word ptr es:[bx + 0x12]
00004F14: cmp ax, word ptr [bp + 6]
00004F17: je 0x4f1c
00004F19: jmp 0x4fae
00004F1C: les bx, ptr [bp + 6]
00004F1F: cmp word ptr es:[bx + 6], 0
00004F24: je 0x4f55
00004F26: cmp word ptr es:[bx], 0
00004F2A: jge 0x4f3b
00004F2C: push word ptr [bp + 8]
00004F2F: push bx
00004F30: nop 
00004F31: push cs
00004F32: call 0x4fb3
00004F35: pop cx
00004F36: pop cx
00004F37: or ax, ax
00004F39: jne 0x4fae
00004F3B: les bx, ptr [bp + 6]
00004F3E: test word ptr es:[bx + 2], 4
00004F44: je 0x4f55
00004F46: push word ptr es:[bx + 0xa]
00004F4A: push word ptr es:[bx + 8]
00004F4E: nop 
00004F4F: push cs
00004F50: call 0x41f8
00004F53: pop cx
00004F54: pop cx
00004F55: les bx, ptr [bp + 6]
00004F58: cmp byte ptr es:[bx + 4], 0
00004F5D: jl 0x4f6d
00004F5F: mov al, byte ptr es:[bx + 4]
00004F63: cwde 
00004F64: push ax
00004F65: nop 
00004F66: push cs
00004F67: call 0x4e3e
00004F6A: pop cx
00004F6B: mov si, ax
00004F6D: les bx, ptr [bp + 6]
00004F70: mov word ptr es:[bx + 2], 0
00004F76: mov word ptr es:[bx + 6], 0
00004F7C: mov word ptr es:[bx], 0
00004F81: mov byte ptr es:[bx + 4], 0xff
00004F86: cmp word ptr es:[bx + 0x10], 0
00004F8B: je 0x4fae
00004F8D: xor ax, ax
00004F8F: xor dx, dx
00004F91: push ax
00004F92: push dx
00004F93: push ax
00004F94: push dx
00004F95: push word ptr es:[bx + 0x10]
00004F99: call 0x302a
00004F9C: push dx
00004F9D: push ax
00004F9E: nop 
00004F9F: push cs
00004FA0: call 0x3905
00004FA3: pop cx
00004FA4: pop cx
00004FA5: les bx, ptr [bp + 6]
00004FA8: mov word ptr es:[bx + 0x10], 0
00004FAE: mov ax, si
00004FB0: pop si
00004FB1: pop bp
00004FB2: retf 
00004FB3: push bp
00004FB4: mov bp, sp
00004FB6: push si
00004FB7: mov ax, word ptr [bp + 6]
00004FBA: or ax, word ptr [bp + 8]
00004FBD: jne 0x4fc7
00004FBF: nop 
00004FC0: push cs
00004FC1: call 0x50e0
00004FC4: jmp 0x507b
00004FC7: les bx, ptr [bp + 6]
00004FCA: mov ax, word ptr es:[bx + 0x12]
00004FCE: cmp ax, word ptr [bp + 6]
00004FD1: je 0x4fd9
00004FD3: mov ax, 0xffff
00004FD6: jmp 0x507d
00004FD9: les bx, ptr [bp + 6]
00004FDC: cmp word ptr es:[bx], 0
00004FE0: jl 0x5033
00004FE2: test word ptr es:[bx + 2], 8
00004FE8: jne 0x5002
00004FEA: mov ax, word ptr es:[bx + 0xe]
00004FEE: mov dx, word ptr [bp + 6]
00004FF1: add dx, 5
00004FF4: cmp ax, word ptr [bp + 8]
00004FF7: je 0x4ffc
00004FF9: jmp 0x507b
00004FFC: cmp word ptr es:[bx + 0xc], dx
00005000: jne 0x507b
00005002: les bx, ptr [bp + 6]
00005005: mov word ptr es:[bx], 0
0000500A: mov ax, word ptr es:[bx + 0xe]
0000500E: mov dx, word ptr [bp + 6]
00005011: add dx, 5
00005014: cmp ax, word ptr [bp + 8]
00005017: jne 0x507b
00005019: cmp word ptr es:[bx + 0xc], dx
0000501D: jne 0x507b
0000501F: mov ax, word ptr es:[bx + 0xa]
00005023: mov dx, word ptr es:[bx + 8]
00005027: mov word ptr es:[bx + 0xe], ax
0000502B: mov word ptr es:[bx + 0xc], dx
0000502F: jmp 0x507b
00005031: jmp 0x507b
00005033: les bx, ptr [bp + 6]
00005036: mov ax, word ptr es:[bx + 6]
0000503A: add ax, word ptr es:[bx]
0000503D: inc ax
0000503E: mov si, ax
00005040: sub word ptr es:[bx], si
00005043: push ax
00005044: mov ax, word ptr es:[bx + 0xa]
00005048: mov dx, word ptr es:[bx + 8]
0000504C: mov word ptr es:[bx + 0xe], ax
00005050: mov word ptr es:[bx + 0xc], dx
00005054: push ax
00005055: push dx
00005056: mov al, byte ptr es:[bx + 4]
0000505A: cwde 
0000505B: push ax
0000505C: nop 
0000505D: push cs
0000505E: call 0x679c
00005061: add sp, 8
00005064: cmp ax, si
00005066: je 0x507b
00005068: les bx, ptr [bp + 6]
0000506B: test word ptr es:[bx + 2], 0x200
00005071: jne 0x507b
00005073: or word ptr es:[bx + 2], 0x10
00005078: jmp 0x4fd3
0000507B: xor ax, ax
0000507D: pop si
0000507E: pop bp
0000507F: retf 
00005080: push bp
00005081: mov bp, sp
00005083: push ds
00005084: mov ah, 0x2f
00005086: int 0x21
00005088: push es
00005089: push bx
0000508A: mov ah, 0x1a
0000508C: lds dx, ptr [bp + 0xa]
0000508F: int 0x21
00005091: mov ah, 0x4e
00005093: mov cx, word ptr [bp + 0xe]
00005096: lds dx, ptr [bp + 6]
00005099: int 0x21
0000509B: pushf 
0000509C: pop cx
0000509D: xchg bx, ax
0000509E: mov ah, 0x1a
000050A0: pop dx
000050A1: pop ds
000050A2: int 0x21
000050A4: push cx
000050A5: popf 
000050A6: pop ds
000050A7: jb 0x50ad
000050A9: xor ax, ax
000050AB: jmp 0x50b1
000050AD: push bx
000050AE: call 0x2d44
000050B1: pop bp
000050B2: retf 
000050B3: push bp
000050B4: mov bp, sp
000050B6: push ds
000050B7: mov ah, 0x2f
000050B9: int 0x21
000050BB: push es
000050BC: push bx
000050BD: mov ah, 0x1a
000050BF: lds dx, ptr [bp + 6]
000050C2: int 0x21
000050C4: mov ah, 0x4f
000050C6: int 0x21
000050C8: pushf 
000050C9: pop cx
000050CA: xchg bx, ax
000050CB: mov ah, 0x1a
000050CD: pop dx
000050CE: pop ds
000050CF: int 0x21
000050D1: push cx
000050D2: popf 
000050D3: pop ds
000050D4: jb 0x50da
000050D6: xor ax, ax
000050D8: jmp 0x50de
000050DA: push bx
000050DB: call 0x2d44
000050DE: pop bp
000050DF: retf 
000050E0: push bp
000050E1: mov bp, sp
000050E3: sub sp, 4
000050E6: push si
000050E7: push di
000050E8: xor di, di
000050EA: mov si, word ptr [0x74d0]
000050EE: mov word ptr [bp - 2], ds
000050F1: mov word ptr [bp - 4], 0x7340
000050F6: jmp 0x5113
000050F8: les bx, ptr [bp - 4]
000050FB: test word ptr es:[bx + 2], 3
00005101: je 0x510f
00005103: push word ptr [bp - 2]
00005106: push bx
00005107: nop 
00005108: push cs
00005109: call 0x4fb3
0000510C: pop cx
0000510D: pop cx
0000510E: inc di
0000510F: add word ptr [bp - 4], 0x14
00005113: mov ax, si
00005115: dec si
00005116: or ax, ax
00005118: jne 0x50f8
0000511A: mov ax, di
0000511C: pop di
0000511D: pop si
0000511E: mov sp, bp
00005120: pop bp
00005121: retf 
00005122: push bp
00005123: mov bp, sp
00005125: push si
00005126: push di
00005127: xor di, di
00005129: les bx, ptr [bp + 0xc]
0000512C: inc word ptr [bp + 0xc]
0000512F: mov cl, byte ptr es:[bx]
00005132: mov al, cl
00005134: cmp al, 0x72
00005136: jne 0x5140
00005138: mov dx, 1
0000513B: mov si, 1
0000513E: jmp 0x515e
00005140: cmp cl, 0x77
00005143: jne 0x514a
00005145: mov dx, 0x302
00005148: jmp 0x5152
0000514A: cmp cl, 0x61
0000514D: jne 0x515a
0000514F: mov dx, 0x902
00005152: mov di, 0x80
00005155: mov si, 2
00005158: jmp 0x515e
0000515A: xor ax, ax
0000515C: jmp 0x51d8
0000515E: les bx, ptr [bp + 0xc]
00005161: mov cl, byte ptr es:[bx]
00005164: inc word ptr [bp + 0xc]
00005167: cmp cl, 0x2b
0000516A: je 0x517f
0000516C: les bx, ptr [bp + 0xc]
0000516F: cmp byte ptr es:[bx], 0x2b
00005173: jne 0x5196
00005175: cmp cl, 0x74
00005178: je 0x517f
0000517A: cmp cl, 0x62
0000517D: jne 0x5196
0000517F: cmp cl, 0x2b
00005182: jne 0x518a
00005184: les bx, ptr [bp + 0xc]
00005187: mov cl, byte ptr es:[bx]
0000518A: and dx, 0xfffc
0000518D: or dx, 4
00005190: mov di, 0x180
00005193: mov si, 3
00005196: cmp cl, 0x74
00005199: jne 0x51a1
0000519B: or dx, 0x4000
0000519F: jmp 0x51be
000051A1: cmp cl, 0x62
000051A4: jne 0x51ac
000051A6: or dx, 0x8000
000051AA: jmp 0x51bb
000051AC: mov ax, word ptr [0x74fa]
000051AF: and ax, 0xc000
000051B2: or dx, ax
000051B4: mov ax, dx
000051B6: test ax, 0x8000
000051B9: je 0x51be
000051BB: or si, 0x40
000051BE: mov word ptr [0x733a], 0
000051C4: mov word ptr [0x7338], 0x4d2c
000051CA: les bx, ptr [bp + 8]
000051CD: mov word ptr es:[bx], dx
000051D0: les bx, ptr [bp + 4]
000051D3: mov word ptr es:[bx], di
000051D6: mov ax, si
000051D8: pop di
000051D9: pop si
000051DA: pop bp
000051DB: ret 0xc
000051DE: push bp
000051DF: mov bp, sp
000051E1: sub sp, 4
000051E4: push word ptr [bp + 8]
000051E7: push word ptr [bp + 6]
000051EA: push ss
000051EB: lea ax, [bp - 2]
000051EE: push ax
000051EF: push ss
000051F0: lea ax, [bp - 4]
000051F3: push ax
000051F4: call 0x5122
000051F7: les bx, ptr [bp + 0xe]
000051FA: mov word ptr es:[bx + 2], ax
000051FE: or ax, ax
00005200: je 0x522c
00005202: cmp byte ptr es:[bx + 4], 0
00005207: jge 0x5240
00005209: push word ptr [bp - 4]
0000520C: mov ax, word ptr [bp - 2]
0000520F: or ax, word ptr [bp + 4]
00005212: push ax
00005213: push word ptr [bp + 0xc]
00005216: push word ptr [bp + 0xa]
00005219: nop 
0000521A: push cs
0000521B: call 0x5a50
0000521E: add sp, 8
00005221: les bx, ptr [bp + 0xe]
00005224: mov byte ptr es:[bx + 4], al
00005228: or al, al
0000522A: jge 0x5240
0000522C: les bx, ptr [bp + 0xe]
0000522F: mov byte ptr es:[bx + 4], 0xff
00005234: mov word ptr es:[bx + 2], 0
0000523A: xor dx, dx
0000523C: xor ax, ax
0000523E: jmp 0x52a9
00005240: les bx, ptr [bp + 0xe]
00005243: mov al, byte ptr es:[bx + 4]
00005247: cwde 
00005248: push ax
00005249: nop 
0000524A: push cs
0000524B: call 0x2f4e
0000524E: pop cx
0000524F: or ax, ax
00005251: je 0x525c
00005253: les bx, ptr [bp + 0xe]
00005256: or word ptr es:[bx + 2], 0x200
0000525C: mov ax, 0x200
0000525F: push ax
00005260: les bx, ptr [bp + 0xe]
00005263: test word ptr es:[bx + 2], 0x200
00005269: je 0x5270
0000526B: mov ax, 1
0000526E: jmp 0x5272
00005270: xor ax, ax
00005272: push ax
00005273: xor ax, ax
00005275: xor dx, dx
00005277: push ax
00005278: push dx
00005279: push word ptr [bp + 0x10]
0000527C: push word ptr [bp + 0xe]
0000527F: nop 
00005280: push cs
00005281: call 0x60c5
00005284: add sp, 0xc
00005287: or ax, ax
00005289: je 0x529a
0000528B: push word ptr [bp + 0x10]
0000528E: push word ptr [bp + 0xe]
00005291: nop 
00005292: push cs
00005293: call 0x4efb
00005296: pop cx
00005297: pop cx
00005298: jmp 0x523a
0000529A: les bx, ptr [bp + 0xe]
0000529D: mov word ptr es:[bx + 0x10], 0
000052A3: mov dx, word ptr [bp + 0x10]
000052A6: mov ax, word ptr [bp + 0xe]
000052A9: mov sp, bp
000052AB: pop bp
000052AC: ret 0xe
000052AF: push bp
000052B0: mov bp, sp
000052B2: sub sp, 4
000052B5: mov word ptr [bp - 2], ds
000052B8: mov word ptr [bp - 4], 0x7340
000052BD: les bx, ptr [bp - 4]
000052C0: cmp byte ptr es:[bx + 4], 0
000052C5: jl 0x52df
000052C7: mov ax, word ptr [bp - 4]
000052CA: add word ptr [bp - 4], 0x14
000052CE: push ax
000052CF: mov ax, word ptr [0x74d0]
000052D2: mov dx, 0x14
000052D5: imul dx
000052D7: add ax, 0x7340
000052DA: pop dx
000052DB: cmp dx, ax
000052DD: jb 0x52bd
000052DF: les bx, ptr [bp - 4]
000052E2: cmp byte ptr es:[bx + 4], 0
000052E7: jl 0x52ef
000052E9: xor dx, dx
000052EB: xor ax, ax
000052ED: jmp 0x52f5
000052EF: mov dx, word ptr [bp - 2]
000052F2: mov ax, word ptr [bp - 4]
000052F5: mov sp, bp
000052F7: pop bp
000052F8: ret 
000052F9: push bp
000052FA: mov bp, sp
000052FC: sub sp, 4
000052FF: call 0x52af
00005302: mov word ptr [bp - 2], dx
00005305: mov word ptr [bp - 4], ax
00005308: or ax, dx
0000530A: jne 0x5312
0000530C: xor dx, dx
0000530E: xor ax, ax
00005310: jmp 0x532a
00005312: push word ptr [bp - 2]
00005315: push word ptr [bp - 4]
00005318: push word ptr [bp + 8]
0000531B: push word ptr [bp + 6]
0000531E: push word ptr [bp + 0xc]
00005321: push word ptr [bp + 0xa]
00005324: xor ax, ax
00005326: push ax
00005327: call 0x51de
0000532A: mov sp, bp
0000532C: pop bp
0000532D: retf 
0000532E: push bp
0000532F: mov bp, sp
00005331: mov ax, 0x41ee
00005334: push ax
00005335: push word ptr [bp + 8]
00005338: push word ptr [bp + 6]
0000533B: push word ptr [bp + 0xc]
0000533E: push word ptr [bp + 0xa]
00005341: lea ax, [bp + 0xe]
00005344: push ax
00005345: call 0x3935
00005348: pop bp
00005349: retf 
0000534A: push bp
0000534B: mov bp, sp
0000534D: push si
0000534E: push di
0000534F: jmp 0x542c
00005352: inc word ptr [bp + 8]
00005355: les bx, ptr [bp + 4]
00005358: mov ax, word ptr es:[bx + 6]
0000535C: cmp ax, word ptr [bp + 8]
0000535F: jbe 0x5366
00005361: mov ax, word ptr [bp + 8]
00005364: jmp 0x536d
00005366: les bx, ptr [bp + 4]
00005369: mov ax, word ptr es:[bx + 6]
0000536D: mov di, ax
0000536F: les bx, ptr [bp + 4]
00005372: test word ptr es:[bx + 2], 0x40
00005378: je 0x53e9
0000537A: cmp word ptr es:[bx + 6], 0
0000537F: je 0x53e9
00005381: mov ax, word ptr es:[bx + 6]
00005385: cmp ax, word ptr [bp + 8]
00005388: jae 0x53e9
0000538A: cmp word ptr es:[bx], 0
0000538E: jne 0x53e9
00005390: dec word ptr [bp + 8]
00005393: xor di, di
00005395: jmp 0x53a5
00005397: les bx, ptr [bp + 4]
0000539A: add di, word ptr es:[bx + 6]
0000539E: mov ax, word ptr es:[bx + 6]
000053A2: sub word ptr [bp + 8], ax
000053A5: les bx, ptr [bp + 4]
000053A8: mov ax, word ptr es:[bx + 6]
000053AC: cmp ax, word ptr [bp + 8]
000053AF: jbe 0x5397
000053B1: push di
000053B2: push word ptr [bp + 0xc]
000053B5: push word ptr [bp + 0xa]
000053B8: mov al, byte ptr es:[bx + 4]
000053BC: cwde 
000053BD: push ax
000053BE: nop 
000053BF: push cs
000053C0: call 0x3118
000053C3: add sp, 8
000053C6: mov dx, ax
000053C8: add word ptr [bp + 0xa], dx
000053CB: cmp dx, di
000053CD: je 0x542c
000053CF: mov ax, di
000053D1: sub ax, dx
000053D3: add word ptr [bp + 8], ax
000053D6: les bx, ptr [bp + 4]
000053D9: or word ptr es:[bx + 2], 0x20
000053DE: jmp 0x5435
000053E0: les bx, ptr [bp + 0xa]
000053E3: mov byte ptr es:[bx], dl
000053E6: inc word ptr [bp + 0xa]
000053E9: dec word ptr [bp + 8]
000053EC: mov ax, word ptr [bp + 8]
000053EF: or ax, ax
000053F1: je 0x5427
000053F3: dec di
000053F4: je 0x5427
000053F6: les bx, ptr [bp + 4]
000053F9: dec word ptr es:[bx]
000053FC: jl 0x5413
000053FE: mov ax, word ptr es:[bx + 0xe]
00005402: mov si, word ptr es:[bx + 0xc]
00005406: inc word ptr es:[bx + 0xc]
0000540A: mov es, ax
0000540C: mov al, byte ptr es:[si]
0000540F: mov ah, 0
00005411: jmp 0x5420
00005413: push word ptr [bp + 6]
00005416: push word ptr [bp + 4]
00005419: nop 
0000541A: push cs
0000541B: call 0x57ef
0000541E: pop cx
0000541F: pop cx
00005420: mov dx, ax
00005422: cmp ax, 0xffff
00005425: jne 0x53e0
00005427: cmp dx, -1
0000542A: je 0x53d6
0000542C: cmp word ptr [bp + 8], 0
00005430: je 0x5435
00005432: jmp 0x5352
00005435: mov ax, word ptr [bp + 8]
00005438: pop di
00005439: pop si
0000543A: pop bp
0000543B: ret 0xa
0000543E: push bp
0000543F: mov bp, sp
00005441: sub sp, 4
00005444: push si
00005445: push di
00005446: mov di, word ptr [bp + 0xa]
00005449: or di, di
0000544B: jne 0x5451
0000544D: xor ax, ax
0000544F: jmp 0x54c6
00005451: mov bx, di
00005453: xor cx, cx
00005455: mov ax, word ptr [bp + 0xc]
00005458: xor dx, dx
0000545A: call 0x30e0
0000545D: mov word ptr [bp - 2], dx
00005460: mov word ptr [bp - 4], ax
00005463: cmp dx, 1
00005466: ja 0x548d
00005468: jb 0x546e
0000546A: or ax, ax
0000546C: jae 0x548d
0000546E: push word ptr [bp + 8]
00005471: push word ptr [bp + 6]
00005474: push word ptr [bp - 4]
00005477: push word ptr [bp + 0x10]
0000547A: push word ptr [bp + 0xe]
0000547D: call 0x534a
00005480: mov dx, word ptr [bp - 4]
00005483: sub dx, ax
00005485: push dx
00005486: xor dx, dx
00005488: pop ax
00005489: div di
0000548B: jmp 0x54c6
0000548D: mov si, word ptr [bp + 0xc]
00005490: inc si
00005491: jmp 0x54a6
00005493: mov bx, di
00005495: xor cx, cx
00005497: mov dx, word ptr [bp + 8]
0000549A: mov ax, word ptr [bp + 6]
0000549D: call 0x2cbc
000054A0: mov word ptr [bp + 8], dx
000054A3: mov word ptr [bp + 6], ax
000054A6: dec si
000054A7: mov ax, si
000054A9: or ax, ax
000054AB: je 0x54c1
000054AD: push word ptr [bp + 8]
000054B0: push word ptr [bp + 6]
000054B3: push di
000054B4: push word ptr [bp + 0x10]
000054B7: push word ptr [bp + 0xe]
000054BA: call 0x534a
000054BD: or ax, ax
000054BF: je 0x5493
000054C1: mov ax, word ptr [bp + 0xc]
000054C4: sub ax, si
000054C6: pop di
000054C7: pop si
000054C8: mov sp, bp
000054CA: pop bp
000054CB: retf 
000054CC: push bp
000054CD: mov bp, sp
000054CF: sub sp, 4
000054D2: push si
000054D3: les bx, ptr [bp + 4]
000054D6: cmp word ptr es:[bx], 0
000054DA: jge 0x54e8
000054DC: mov cx, word ptr es:[bx + 6]
000054E0: add cx, word ptr es:[bx]
000054E3: inc cx
000054E4: mov si, cx
000054E6: jmp 0x54f7
000054E8: les bx, ptr [bp + 4]
000054EB: mov ax, word ptr es:[bx]
000054EE: cdq 
000054EF: xor ax, dx
000054F1: sub ax, dx
000054F3: mov cx, ax
000054F5: mov si, ax
000054F7: les bx, ptr [bp + 4]
000054FA: test word ptr es:[bx + 2], 0x40
00005500: jne 0x5545
00005502: les bx, ptr [bp + 4]
00005505: mov ax, word ptr es:[bx + 0xe]
00005509: mov dx, word ptr es:[bx + 0xc]
0000550D: mov word ptr [bp - 2], ax
00005510: mov word ptr [bp - 4], dx
00005513: cmp word ptr es:[bx], 0
00005517: jge 0x553e
00005519: jmp 0x5528
0000551B: dec word ptr [bp - 4]
0000551E: les bx, ptr [bp - 4]
00005521: cmp byte ptr es:[bx], 0xa
00005525: jne 0x5528
00005527: inc si
00005528: mov ax, cx
0000552A: dec cx
0000552B: or ax, ax
0000552D: jne 0x551b
0000552F: jmp 0x5545
00005531: les bx, ptr [bp - 4]
00005534: inc word ptr [bp - 4]
00005537: cmp byte ptr es:[bx], 0xa
0000553B: jne 0x553e
0000553D: inc si
0000553E: mov ax, cx
00005540: dec cx
00005541: or ax, ax
00005543: jne 0x5531
00005545: mov ax, si
00005547: pop si
00005548: mov sp, bp
0000554A: pop bp
0000554B: ret 4
0000554E: push bp
0000554F: mov bp, sp
00005551: push si
00005552: mov si, word ptr [bp + 0xe]
00005555: push word ptr [bp + 8]
00005558: push word ptr [bp + 6]
0000555B: nop 
0000555C: push cs
0000555D: call 0x4fb3
00005560: pop cx
00005561: pop cx
00005562: or ax, ax
00005564: je 0x556b
00005566: mov ax, 0xffff
00005569: jmp 0x55cb
0000556B: cmp si, 1
0000556E: jne 0x5587
00005570: les bx, ptr [bp + 6]
00005573: cmp word ptr es:[bx], 0
00005577: jle 0x5587
00005579: push word ptr [bp + 8]
0000557C: push bx
0000557D: call 0x54cc
00005580: cdq 
00005581: sub word ptr [bp + 0xa], ax
00005584: sbb word ptr [bp + 0xc], dx
00005587: les bx, ptr [bp + 6]
0000558A: and word ptr es:[bx + 2], 0xfe5f
00005590: mov word ptr es:[bx], 0
00005595: mov ax, word ptr es:[bx + 0xa]
00005599: mov dx, word ptr es:[bx + 8]
0000559D: mov word ptr es:[bx + 0xe], ax
000055A1: mov word ptr es:[bx + 0xc], dx
000055A5: push si
000055A6: push word ptr [bp + 0xc]
000055A9: push word ptr [bp + 0xa]
000055AC: mov al, byte ptr es:[bx + 4]
000055B0: cwde 
000055B1: push ax
000055B2: nop 
000055B3: push cs
000055B4: call 0x3001
000055B7: add sp, 8
000055BA: cmp dx, -1
000055BD: jne 0x55c9
000055BF: cmp ax, 0xffff
000055C2: jne 0x55c9
000055C4: mov ax, 0xffff
000055C7: jmp 0x55cb
000055C9: xor ax, ax
000055CB: pop si
000055CC: pop bp
000055CD: retf 
000055CE: push bp
000055CF: mov bp, sp
000055D1: sub sp, 8
000055D4: mov ax, 1
000055D7: push ax
000055D8: xor ax, ax
000055DA: xor dx, dx
000055DC: push ax
000055DD: push dx
000055DE: les bx, ptr [bp + 6]
000055E1: mov al, byte ptr es:[bx + 4]
000055E5: cwde 
000055E6: push ax
000055E7: nop 
000055E8: push cs
000055E9: call 0x3001
000055EC: add sp, 8
000055EF: mov word ptr [bp - 2], dx
000055F2: mov word ptr [bp - 4], ax
000055F5: cmp dx, -1
000055F8: jne 0x5602
000055FA: cmp ax, 0xffff
000055FD: jne 0x5602
000055FF: jmp 0x56a4
00005602: les bx, ptr [bp + 6]
00005605: cmp word ptr es:[bx], 0
00005609: jl 0x560e
0000560B: jmp 0x5694
0000560E: mov al, byte ptr es:[bx + 4]
00005612: cwde 
00005613: shl ax, 1
00005615: mov bx, ax
00005617: test word ptr [bx + 0x74d2], 0x800
0000561D: je 0x5682
0000561F: mov ax, 2
00005622: push ax
00005623: xor ax, ax
00005625: xor dx, dx
00005627: push ax
00005628: push dx
00005629: mov bx, word ptr [bp + 6]
0000562C: mov al, byte ptr es:[bx + 4]
00005630: cwde 
00005631: push ax
00005632: nop 
00005633: push cs
00005634: call 0x3001
00005637: add sp, 8
0000563A: mov word ptr [bp - 6], dx
0000563D: mov word ptr [bp - 8], ax
00005640: cmp dx, -1
00005643: jne 0x564a
00005645: cmp ax, 0xffff
00005648: je 0x56aa
0000564A: xor ax, ax
0000564C: push ax
0000564D: push word ptr [bp - 2]
00005650: push word ptr [bp - 4]
00005653: les bx, ptr [bp + 6]
00005656: mov al, byte ptr es:[bx + 4]
0000565A: cwde 
0000565B: push ax
0000565C: nop 
0000565D: push cs
0000565E: call 0x3001
00005661: add sp, 8
00005664: cmp dx, -1
00005667: jne 0x5676
00005669: cmp ax, 0xffff
0000566C: jne 0x5676
0000566E: mov dx, 0xffff
00005671: mov ax, 0xffff
00005674: jmp 0x56aa
00005676: mov ax, word ptr [bp - 6]
00005679: mov dx, word ptr [bp - 8]
0000567C: mov word ptr [bp - 2], ax
0000567F: mov word ptr [bp - 4], dx
00005682: push word ptr [bp + 8]
00005685: push word ptr [bp + 6]
00005688: call 0x54cc
0000568B: cdq 
0000568C: add word ptr [bp - 4], ax
0000568F: adc word ptr [bp - 2], dx
00005692: jmp 0x56a4
00005694: push word ptr [bp + 8]
00005697: push word ptr [bp + 6]
0000569A: call 0x54cc
0000569D: cdq 
0000569E: sub word ptr [bp - 4], ax
000056A1: sbb word ptr [bp - 2], dx
000056A4: mov dx, word ptr [bp - 2]
000056A7: mov ax, word ptr [bp - 4]
000056AA: mov sp, bp
000056AC: pop bp
000056AD: retf 
000056AE: push bp
000056AF: mov bp, sp
000056B1: sub sp, 4
000056B4: push si
000056B5: push di
000056B6: mov di, word ptr [bp + 0xa]
000056B9: or di, di
000056BB: je 0x5730
000056BD: mov bx, di
000056BF: xor cx, cx
000056C1: mov ax, word ptr [bp + 0xc]
000056C4: xor dx, dx
000056C6: call 0x30e0
000056C9: mov word ptr [bp - 2], dx
000056CC: mov word ptr [bp - 4], ax
000056CF: cmp dx, 1
000056D2: ja 0x56f2
000056D4: jb 0x56da
000056D6: or ax, ax
000056D8: jae 0x56f2
000056DA: push word ptr [bp + 8]
000056DD: push word ptr [bp + 6]
000056E0: push word ptr [bp - 4]
000056E3: push word ptr [bp + 0x10]
000056E6: push word ptr [bp + 0xe]
000056E9: call 0x5dee
000056EC: xor dx, dx
000056EE: div di
000056F0: jmp 0x5733
000056F2: xor si, si
000056F4: cmp si, word ptr [bp + 0xc]
000056F7: jae 0x5730
000056F9: push word ptr [bp + 8]
000056FC: push word ptr [bp + 6]
000056FF: push di
00005700: push word ptr [bp + 0x10]
00005703: push word ptr [bp + 0xe]
00005706: call 0x5dee
00005709: xor dx, dx
0000570B: or dx, dx
0000570D: jne 0x5713
0000570F: cmp ax, di
00005711: je 0x5717
00005713: mov ax, si
00005715: jmp 0x5733
00005717: mov bx, di
00005719: xor cx, cx
0000571B: mov dx, word ptr [bp + 8]
0000571E: mov ax, word ptr [bp + 6]
00005721: call 0x2cbc
00005724: mov word ptr [bp + 8], dx
00005727: mov word ptr [bp + 6], ax
0000572A: inc si
0000572B: cmp si, word ptr [bp + 0xc]
0000572E: jb 0x56f9
00005730: mov ax, word ptr [bp + 0xc]
00005733: pop di
00005734: pop si
00005735: mov sp, bp
00005737: pop bp
00005738: retf 
00005739: push bp
0000573A: mov bp, sp
0000573C: sub sp, 4
0000573F: push si
00005740: mov si, 0x14
00005743: mov word ptr [bp - 2], ds
00005746: mov word ptr [bp - 4], 0x7340
0000574B: jmp 0x576b
0000574D: les bx, ptr [bp - 4]
00005750: mov ax, word ptr es:[bx + 2]
00005754: and ax, 0x300
00005757: cmp ax, 0x300
0000575A: jne 0x5767
0000575C: push word ptr [bp - 2]
0000575F: push bx
00005760: nop 
00005761: push cs
00005762: call 0x4fb3
00005765: pop cx
00005766: pop cx
00005767: add word ptr [bp - 4], 0x14
0000576B: mov ax, si
0000576D: dec si
0000576E: or ax, ax
00005770: jne 0x574d
00005772: pop si
00005773: mov sp, bp
00005775: pop bp
00005776: ret 
00005777: push bp
00005778: mov bp, sp
0000577A: les bx, ptr [bp + 4]
0000577D: test word ptr es:[bx + 2], 0x200
00005783: je 0x5788
00005785: call 0x5739
00005788: les bx, ptr [bp + 4]
0000578B: push word ptr es:[bx + 6]
0000578F: mov ax, word ptr es:[bx + 0xa]
00005793: mov dx, word ptr es:[bx + 8]
00005797: mov word ptr es:[bx + 0xe], ax
0000579B: mov word ptr es:[bx + 0xc], dx
0000579F: push ax
000057A0: push dx
000057A1: mov al, byte ptr es:[bx + 4]
000057A5: cwde 
000057A6: push ax
000057A7: nop 
000057A8: push cs
000057A9: call 0x5ff1
000057AC: add sp, 8
000057AF: les bx, ptr [bp + 4]
000057B2: mov word ptr es:[bx], ax
000057B5: or ax, ax
000057B7: jle 0x57c2
000057B9: and word ptr es:[bx + 2], 0xffdf
000057BE: xor ax, ax
000057C0: jmp 0x57eb
000057C2: les bx, ptr [bp + 4]
000057C5: cmp word ptr es:[bx], 0
000057C9: jne 0x57db
000057CB: mov ax, word ptr es:[bx + 2]
000057CF: and ax, 0xfe7f
000057D2: or ax, 0x20
000057D5: mov word ptr es:[bx + 2], ax
000057D9: jmp 0x57e8
000057DB: les bx, ptr [bp + 4]
000057DE: mov word ptr es:[bx], 0
000057E3: or word ptr es:[bx + 2], 0x10
000057E8: mov ax, 0xffff
000057EB: pop bp
000057EC: ret 4
000057EF: push bp
000057F0: mov bp, sp
000057F2: les bx, ptr [bp + 6]
000057F5: inc word ptr es:[bx]
000057F8: push word ptr [bp + 8]
000057FB: push bx
000057FC: push cs
000057FD: call 0x5807
00005800: pop cx
00005801: pop cx
00005802: pop bp
00005803: retf 
00005804: pop ax
00005805: push cs
00005806: push ax
00005807: push bp
00005808: mov bp, sp
0000580A: push si
0000580B: mov ax, word ptr [bp + 6]
0000580E: or ax, word ptr [bp + 8]
00005811: jne 0x5819
00005813: mov ax, 0xffff
00005816: jmp 0x58f2
00005819: les bx, ptr [bp + 6]
0000581C: cmp word ptr es:[bx], 0
00005820: jle 0x583c
00005822: les bx, ptr [bp + 6]
00005825: dec word ptr es:[bx]
00005828: mov ax, word ptr es:[bx + 0xe]
0000582C: mov si, word ptr es:[bx + 0xc]
00005830: inc word ptr es:[bx + 0xc]
00005834: mov es, ax
00005836: mov al, byte ptr es:[si]
00005839: jmp 0x58f0
0000583C: les bx, ptr [bp + 6]
0000583F: cmp word ptr es:[bx], 0
00005843: jl 0x58b4
00005845: test word ptr es:[bx + 2], 0x110
0000584B: jne 0x58b4
0000584D: test word ptr es:[bx + 2], 1
00005853: je 0x58b4
00005855: les bx, ptr [bp + 6]
00005858: or word ptr es:[bx + 2], 0x80
0000585E: cmp word ptr es:[bx + 6], 0
00005863: je 0x5874
00005865: push word ptr [bp + 8]
00005868: push bx
00005869: call 0x5777
0000586C: or ax, ax
0000586E: je 0x5822
00005870: jmp 0x5813
00005872: jmp 0x5822
00005874: les bx, ptr [bp + 6]
00005877: test word ptr es:[bx + 2], 0x200
0000587D: je 0x5882
0000587F: call 0x5739
00005882: mov ax, 1
00005885: push ax
00005886: push ds
00005887: mov ax, 0x8790
0000588A: push ax
0000588B: les bx, ptr [bp + 6]
0000588E: mov al, byte ptr es:[bx + 4]
00005892: cwde 
00005893: push ax
00005894: nop 
00005895: push cs
00005896: call 0x5ff1
00005899: add sp, 8
0000589C: or ax, ax
0000589E: jne 0x58d3
000058A0: les bx, ptr [bp + 6]
000058A3: mov al, byte ptr es:[bx + 4]
000058A7: cwde 
000058A8: push ax
000058A9: nop 
000058AA: push cs
000058AB: call 0x4e84
000058AE: pop cx
000058AF: cmp ax, 1
000058B2: je 0x58bf
000058B4: les bx, ptr [bp + 6]
000058B7: or word ptr es:[bx + 2], 0x10
000058BC: jmp 0x5813
000058BF: les bx, ptr [bp + 6]
000058C2: mov ax, word ptr es:[bx + 2]
000058C6: and ax, 0xfe7f
000058C9: or ax, 0x20
000058CC: mov word ptr es:[bx + 2], ax
000058D0: jmp 0x5813
000058D3: cmp byte ptr [0x8790], 0xd
000058D8: jne 0x58e5
000058DA: les bx, ptr [bp + 6]
000058DD: test word ptr es:[bx + 2], 0x40
000058E3: je 0x5874
000058E5: les bx, ptr [bp + 6]
000058E8: and word ptr es:[bx + 2], 0xffdf
000058ED: mov al, byte ptr [0x8790]
000058F0: mov ah, 0
000058F2: pop si
000058F3: pop bp
000058F4: retf 
000058F5: push ds
000058F6: mov ax, 0x7340
000058F9: push ax
000058FA: push cs
000058FB: call 0x5807
000058FE: pop cx
000058FF: pop cx
00005900: retf 
00005901: push bp
00005902: mov bp, sp
00005904: sub sp, 0x44
00005907: push si
00005908: mov si, word ptr [bp + 0xa]
0000590B: nop 
0000590C: push cs
0000590D: call 0x2b71
00005910: add al, 0x41
00005912: mov byte ptr [bp - 0x44], al
00005915: mov byte ptr [bp - 0x43], 0x3a
00005919: mov byte ptr [bp - 0x42], 0x5c
0000591D: push ss
0000591E: lea ax, [bp - 0x41]
00005921: push ax
00005922: xor ax, ax
00005924: push ax
00005925: nop 
00005926: push cs
00005927: call 0x2b2e
0000592A: add sp, 6
0000592D: cmp ax, 0xffff
00005930: jne 0x5938
00005932: xor dx, dx
00005934: xor ax, ax
00005936: jmp 0x598a
00005938: push ss
00005939: lea ax, [bp - 0x44]
0000593C: push ax
0000593D: nop 
0000593E: push cs
0000593F: call 0x6661
00005942: pop cx
00005943: pop cx
00005944: cmp ax, si
00005946: jb 0x5950
00005948: mov word ptr [0x7f], 0x22
0000594E: jmp 0x5932
00005950: mov ax, word ptr [bp + 6]
00005953: or ax, word ptr [bp + 8]
00005956: jne 0x5971
00005958: push si
00005959: nop 
0000595A: push cs
0000595B: call 0x4302
0000595E: pop cx
0000595F: mov word ptr [bp + 8], dx
00005962: mov word ptr [bp + 6], ax
00005965: or ax, dx
00005967: jne 0x5971
00005969: mov word ptr [0x7f], 8
0000596F: jmp 0x5932
00005971: push ss
00005972: lea ax, [bp - 0x44]
00005975: push ax
00005976: push word ptr [bp + 8]
00005979: push word ptr [bp + 6]
0000597C: nop 
0000597D: push cs
0000597E: call 0x65f7
00005981: add sp, 8
00005984: mov dx, word ptr [bp + 8]
00005987: mov ax, word ptr [bp + 6]
0000598A: pop si
0000598B: mov sp, bp
0000598D: pop bp
0000598E: retf 
0000598F: push bp
00005990: mov bp, sp
00005992: mov bx, word ptr [bp + 6]
00005995: mov cx, word ptr [bp + 0xc]
00005998: cmp cx, 0xa
0000599B: jne 0x59a2
0000599D: mov ax, bx
0000599F: cdq 
000059A0: jmp 0x59a6
000059A2: mov ax, bx
000059A4: xor dx, dx
000059A6: push dx
000059A7: push ax
000059A8: push word ptr [bp + 0xa]
000059AB: push word ptr [bp + 8]
000059AE: push cx
000059AF: mov al, 1
000059B1: push ax
000059B2: mov al, 0x61
000059B4: push ax
000059B5: call 0x2f5f
000059B8: pop bp
000059B9: retf 
000059BA: push bp
000059BB: mov bp, sp
000059BD: push word ptr [bp + 8]
000059C0: push word ptr [bp + 6]
000059C3: push word ptr [bp + 0xc]
000059C6: push word ptr [bp + 0xa]
000059C9: push word ptr [bp + 0xe]
000059CC: mov al, 0
000059CE: push ax
000059CF: mov al, 0x61
000059D1: push ax
000059D2: call 0x2f5f
000059D5: pop bp
000059D6: retf 
000059D7: push bp
000059D8: mov bp, sp
000059DA: mov ax, word ptr [bp + 0xe]
000059DD: push word ptr [bp + 8]
000059E0: push word ptr [bp + 6]
000059E3: push word ptr [bp + 0xc]
000059E6: push word ptr [bp + 0xa]
000059E9: push ax
000059EA: cmp ax, 0xa
000059ED: jne 0x59f4
000059EF: mov ax, 1
000059F2: jmp 0x59f6
000059F4: xor ax, ax
000059F6: push ax
000059F7: mov al, 0x61
000059F9: push ax
000059FA: call 0x2f5f
000059FD: pop bp
000059FE: retf 
000059FF: push bp
00005A00: mov bp, sp
00005A02: push si
00005A03: push di
00005A04: mov dx, ds
00005A06: les di, ptr [bp + 6]
00005A09: lds si, ptr [bp + 0xa]
00005A0C: mov cx, word ptr [bp + 0xe]
00005A0F: shr cx, 1
00005A11: cld 
00005A12: rep movsw word ptr es:[di], word ptr [si]
00005A14: jae 0x5a17
00005A16: movsb byte ptr es:[di], byte ptr [si]
00005A17: mov ds, dx
00005A19: mov dx, word ptr [bp + 8]
00005A1C: mov ax, word ptr [bp + 6]
00005A1F: pop di
00005A20: pop si
00005A21: pop bp
00005A22: retf 
00005A23: push bp
00005A24: mov bp, sp
00005A26: push ds
00005A27: mov cx, word ptr [bp + 4]
00005A2A: mov ah, 0x3c
00005A2C: lds dx, ptr [bp + 6]
00005A2F: int 0x21
00005A31: pop ds
00005A32: jb 0x5a36
00005A34: jmp 0x5a3a
00005A36: push ax
00005A37: call 0x2d44
00005A3A: pop bp
00005A3B: ret 6
00005A3E: push bp
00005A3F: mov bp, sp
00005A41: mov bx, word ptr [bp + 4]
00005A44: sub cx, cx
00005A46: sub dx, dx
00005A48: mov ah, 0x40
00005A4A: int 0x21
00005A4C: pop bp
00005A4D: ret 2
00005A50: push bp
00005A51: mov bp, sp
00005A53: sub sp, 4
00005A56: push si
00005A57: push di
00005A58: mov si, word ptr [bp + 0xa]
00005A5B: mov di, word ptr [bp + 0xc]
00005A5E: test si, 0xc000
00005A62: jne 0x5a6c
00005A64: mov ax, word ptr [0x74fa]
00005A67: and ax, 0xc000
00005A6A: or si, ax
00005A6C: xor ax, ax
00005A6E: push ax
00005A6F: push word ptr [bp + 8]
00005A72: push word ptr [bp + 6]
00005A75: nop 
00005A76: push cs
00005A77: call 0x4e21
00005A7A: add sp, 6
00005A7D: mov word ptr [bp - 2], ax
00005A80: test si, 0x100
00005A84: jne 0x5a89
00005A86: jmp 0x5b09
00005A89: and di, word ptr [0x74fc]
00005A8D: mov ax, di
00005A8F: test ax, 0x180
00005A92: jne 0x5a9b
00005A94: mov ax, 1
00005A97: push ax
00005A98: call 0x2d44
00005A9B: cmp word ptr [bp - 2], -1
00005A9F: jne 0x5ac4
00005AA1: cmp word ptr [0x74fe], 2
00005AA6: je 0x5ab2
00005AA8: push word ptr [0x74fe]
00005AAC: call 0x2d44
00005AAF: jmp 0x5bb9
00005AB2: test di, 0x80
00005AB6: je 0x5abc
00005AB8: xor ax, ax
00005ABA: jmp 0x5abf
00005ABC: mov ax, 1
00005ABF: mov word ptr [bp - 2], ax
00005AC2: jmp 0x5ad0
00005AC4: test si, 0x400
00005AC8: je 0x5b09
00005ACA: mov ax, 0x50
00005ACD: push ax
00005ACE: jmp 0x5aac
00005AD0: test si, 0xf0
00005AD4: je 0x5af4
00005AD6: push word ptr [bp + 8]
00005AD9: push word ptr [bp + 6]
00005ADC: xor ax, ax
00005ADE: push ax
00005ADF: call 0x5a23
00005AE2: mov di, ax
00005AE4: or ax, ax
00005AE6: jge 0x5aeb
00005AE8: jmp 0x5bb7
00005AEB: push di
00005AEC: nop 
00005AED: push cs
00005AEE: call 0x4e66
00005AF1: pop cx
00005AF2: jmp 0x5b09
00005AF4: push word ptr [bp + 8]
00005AF7: push word ptr [bp + 6]
00005AFA: push word ptr [bp - 2]
00005AFD: call 0x5a23
00005B00: mov di, ax
00005B02: or ax, ax
00005B04: jge 0x5b84
00005B06: jmp 0x5bb7
00005B09: push si
00005B0A: push word ptr [bp + 8]
00005B0D: push word ptr [bp + 6]
00005B10: nop 
00005B11: push cs
00005B12: call 0x5bbf
00005B15: add sp, 6
00005B18: mov di, ax
00005B1A: or ax, ax
00005B1C: jl 0x5b84
00005B1E: xor ax, ax
00005B20: push ax
00005B21: push di
00005B22: nop 
00005B23: push cs
00005B24: call 0x47b4
00005B27: pop cx
00005B28: pop cx
00005B29: mov word ptr [bp - 4], ax
00005B2C: test ax, 0x80
00005B2F: je 0x5b54
00005B31: or si, 0x2000
00005B35: test si, 0x8000
00005B39: je 0x5b5e
00005B3B: and ax, 0xff
00005B3E: or ax, 0x20
00005B41: xor dx, dx
00005B43: push dx
00005B44: push ax
00005B45: mov ax, 1
00005B48: push ax
00005B49: push di
00005B4A: nop 
00005B4B: push cs
00005B4C: call 0x47b4
00005B4F: add sp, 8
00005B52: jmp 0x5b5e
00005B54: test si, 0x200
00005B58: je 0x5b5e
00005B5A: push di
00005B5B: call 0x5a3e
00005B5E: test word ptr [bp - 2], 1
00005B63: je 0x5b84
00005B65: test si, 0x100
00005B69: je 0x5b84
00005B6B: test si, 0xf0
00005B6F: je 0x5b84
00005B71: mov ax, 1
00005B74: push ax
00005B75: push ax
00005B76: push word ptr [bp + 8]
00005B79: push word ptr [bp + 6]
00005B7C: nop 
00005B7D: push cs
00005B7E: call 0x4e21
00005B81: add sp, 8
00005B84: or di, di
00005B86: jl 0x5bb7
00005B88: test si, 0x300
00005B8C: je 0x5b93
00005B8E: mov ax, 0x1000
00005B91: jmp 0x5b95
00005B93: xor ax, ax
00005B95: mov dx, si
00005B97: and dx, 0xf8ff
00005B9B: or dx, ax
00005B9D: push dx
00005B9E: test word ptr [bp - 2], 1
00005BA3: je 0x5ba9
00005BA5: xor ax, ax
00005BA7: jmp 0x5bac
00005BA9: mov ax, 0x100
00005BAC: pop dx
00005BAD: or dx, ax
00005BAF: mov bx, di
00005BB1: shl bx, 1
00005BB3: mov word ptr [bx + 0x74d2], dx
00005BB7: mov ax, di
00005BB9: pop di
00005BBA: pop si
00005BBB: mov sp, bp
00005BBD: pop bp
00005BBE: retf 
00005BBF: push bp
00005BC0: mov bp, sp
00005BC2: sub sp, 2
00005BC5: mov al, 1
00005BC7: mov cx, word ptr [bp + 0xa]
00005BCA: test cx, 2
00005BCE: jne 0x5bda
00005BD0: mov al, 2
00005BD2: test cx, 4
00005BD6: jne 0x5bda
00005BD8: mov al, 0
00005BDA: push ds
00005BDB: lds dx, ptr [bp + 6]
00005BDE: mov cl, 0xf0
00005BE0: and cl, byte ptr [bp + 0xa]
00005BE3: or al, cl
00005BE5: mov ah, 0x3d
00005BE7: int 0x21
00005BE9: pop ds
00005BEA: jb 0x5c06
00005BEC: mov word ptr [bp - 2], ax
00005BEF: mov ax, word ptr [bp + 0xa]
00005BF2: and ax, 0xb8ff
00005BF5: or ax, 0x8000
00005BF8: mov bx, word ptr [bp - 2]
00005BFB: shl bx, 1
00005BFD: mov word ptr [bx + 0x74d2], ax
00005C01: mov ax, word ptr [bp - 2]
00005C04: jmp 0x5c0a
00005C06: push ax
00005C07: call 0x2d44
00005C0A: mov sp, bp
00005C0C: pop bp
00005C0D: retf 
00005C0E: push bp
00005C0F: mov bp, sp
00005C11: mov ax, 0x41ee
00005C14: push ax
00005C15: push ds
00005C16: mov ax, 0x7354
00005C19: push ax
00005C1A: push word ptr [bp + 8]
00005C1D: push word ptr [bp + 6]
00005C20: lea ax, [bp + 0xa]
00005C23: push ax
00005C24: call 0x3935
00005C27: pop bp
00005C28: retf 
00005C29: push bp
00005C2A: mov bp, sp
00005C2C: les bx, ptr [bp + 8]
00005C2F: dec word ptr es:[bx]
00005C32: push word ptr [bp + 0xa]
00005C35: push bx
00005C36: mov al, byte ptr [bp + 6]
00005C39: cwde 
00005C3A: push ax
00005C3B: nop 
00005C3C: push cs
00005C3D: call 0x5c45
00005C40: add sp, 6
00005C43: pop bp
00005C44: retf 
00005C45: push bp
00005C46: mov bp, sp
00005C48: push si
00005C49: mov al, byte ptr [bp + 6]
00005C4C: mov byte ptr [0x8792], al
00005C4F: les bx, ptr [bp + 8]
00005C52: cmp word ptr es:[bx], -1
00005C56: jge 0x5cac
00005C58: inc word ptr es:[bx]
00005C5B: mov ax, word ptr es:[bx + 0xe]
00005C5F: mov si, word ptr es:[bx + 0xc]
00005C63: inc word ptr es:[bx + 0xc]
00005C67: mov dl, byte ptr [0x8792]
00005C6B: mov es, ax
00005C6D: mov byte ptr es:[si], dl
00005C70: mov es, word ptr [bp + 0xa]
00005C73: test word ptr es:[bx + 2], 8
00005C79: jne 0x5c7e
00005C7B: jmp 0x5dd2
00005C7E: cmp byte ptr [0x8792], 0xa
00005C83: je 0x5c8f
00005C85: cmp byte ptr [0x8792], 0xd
00005C8A: je 0x5c8f
00005C8C: jmp 0x5dd2
00005C8F: push word ptr [bp + 0xa]
00005C92: push word ptr [bp + 8]
00005C95: nop 
00005C96: push cs
00005C97: call 0x4fb3
00005C9A: pop cx
00005C9B: pop cx
00005C9C: or ax, ax
00005C9E: jne 0x5ca3
00005CA0: jmp 0x5dd2
00005CA3: mov ax, 0xffff
00005CA6: jmp 0x5dd7
00005CA9: jmp 0x5dd2
00005CAC: les bx, ptr [bp + 8]
00005CAF: test word ptr es:[bx + 2], 0x90
00005CB5: jne 0x5cbf
00005CB7: test word ptr es:[bx + 2], 2
00005CBD: jne 0x5cc9
00005CBF: les bx, ptr [bp + 8]
00005CC2: or word ptr es:[bx + 2], 0x10
00005CC7: jmp 0x5ca3
00005CC9: les bx, ptr [bp + 8]
00005CCC: or word ptr es:[bx + 2], 0x100
00005CD2: cmp word ptr es:[bx + 6], 0
00005CD7: je 0x5d48
00005CD9: cmp word ptr es:[bx], 0
00005CDD: je 0x5cee
00005CDF: push word ptr [bp + 0xa]
00005CE2: push bx
00005CE3: nop 
00005CE4: push cs
00005CE5: call 0x4fb3
00005CE8: pop cx
00005CE9: pop cx
00005CEA: or ax, ax
00005CEC: jne 0x5ca3
00005CEE: les bx, ptr [bp + 8]
00005CF1: mov ax, word ptr es:[bx + 6]
00005CF5: neg ax
00005CF7: mov word ptr es:[bx], ax
00005CFA: mov ax, word ptr es:[bx + 0xe]
00005CFE: mov si, word ptr es:[bx + 0xc]
00005D02: inc word ptr es:[bx + 0xc]
00005D06: mov dl, byte ptr [0x8792]
00005D0A: mov es, ax
00005D0C: mov byte ptr es:[si], dl
00005D0F: mov es, word ptr [bp + 0xa]
00005D12: test word ptr es:[bx + 2], 8
00005D18: jne 0x5d1d
00005D1A: jmp 0x5dd2
00005D1D: cmp byte ptr [0x8792], 0xa
00005D22: je 0x5d2e
00005D24: cmp byte ptr [0x8792], 0xd
00005D29: je 0x5d2e
00005D2B: jmp 0x5dd2
00005D2E: push word ptr [bp + 0xa]
00005D31: push word ptr [bp + 8]
00005D34: nop 
00005D35: push cs
00005D36: call 0x4fb3
00005D39: pop cx
00005D3A: pop cx
00005D3B: or ax, ax
00005D3D: jne 0x5d42
00005D3F: jmp 0x5dd2
00005D42: jmp 0x5ca3
00005D45: jmp 0x5dd2
00005D48: les bx, ptr [bp + 8]
00005D4B: mov al, byte ptr es:[bx + 4]
00005D4F: cwde 
00005D50: shl ax, 1
00005D52: mov bx, ax
00005D54: test word ptr [bx + 0x74d2], 0x800
00005D5A: je 0x5d77
00005D5C: mov ax, 2
00005D5F: push ax
00005D60: xor ax, ax
00005D62: xor dx, dx
00005D64: push ax
00005D65: push dx
00005D66: mov bx, word ptr [bp + 8]
00005D69: mov al, byte ptr es:[bx + 4]
00005D6D: cwde 
00005D6E: push ax
00005D6F: nop 
00005D70: push cs
00005D71: call 0x3001
00005D74: add sp, 8
00005D77: cmp byte ptr [0x8792], 0xa
00005D7C: jne 0x5da5
00005D7E: les bx, ptr [bp + 8]
00005D81: test word ptr es:[bx + 2], 0x40
00005D87: jne 0x5da5
00005D89: mov ax, 1
00005D8C: push ax
00005D8D: push ds
00005D8E: mov ax, 0x76aa
00005D91: push ax
00005D92: mov al, byte ptr es:[bx + 4]
00005D96: cwde 
00005D97: push ax
00005D98: nop 
00005D99: push cs
00005D9A: call 0x68ed
00005D9D: add sp, 8
00005DA0: cmp ax, 1
00005DA3: jne 0x5dc4
00005DA5: mov ax, 1
00005DA8: push ax
00005DA9: push ds
00005DAA: mov ax, 0x8792
00005DAD: push ax
00005DAE: les bx, ptr [bp + 8]
00005DB1: mov al, byte ptr es:[bx + 4]
00005DB5: cwde 
00005DB6: push ax
00005DB7: nop 
00005DB8: push cs
00005DB9: call 0x68ed
00005DBC: add sp, 8
00005DBF: cmp ax, 1
00005DC2: je 0x5dd2
00005DC4: les bx, ptr [bp + 8]
00005DC7: test word ptr es:[bx + 2], 0x200
00005DCD: jne 0x5dd2
00005DCF: jmp 0x5cbf
00005DD2: mov al, byte ptr [0x8792]
00005DD5: mov ah, 0
00005DD7: pop si
00005DD8: pop bp
00005DD9: retf 
00005DDA: push bp
00005DDB: mov bp, sp
00005DDD: push ds
00005DDE: mov ax, 0x7354
00005DE1: push ax
00005DE2: push word ptr [bp + 6]
00005DE5: push cs
00005DE6: call 0x5c45
00005DE9: add sp, 6
00005DEC: pop bp
00005DED: retf 
00005DEE: push bp
00005DEF: mov bp, sp
00005DF1: sub sp, 2
00005DF4: push si
00005DF5: push di
00005DF6: mov di, word ptr [bp + 8]
00005DF9: mov word ptr [bp - 2], di
00005DFC: les bx, ptr [bp + 4]
00005DFF: test word ptr es:[bx + 2], 8
00005E05: je 0x5e35
00005E07: jmp 0x5e2b
00005E09: push word ptr [bp + 6]
00005E0C: push word ptr [bp + 4]
00005E0F: les bx, ptr [bp + 0xa]
00005E12: inc word ptr [bp + 0xa]
00005E15: mov al, byte ptr es:[bx]
00005E18: cwde 
00005E19: push ax
00005E1A: push cs
00005E1B: call 0x5c45
00005E1E: add sp, 6
00005E21: cmp ax, 0xffff
00005E24: jne 0x5e2b
00005E26: xor ax, ax
00005E28: jmp 0x5fe9
00005E2B: mov ax, di
00005E2D: dec di
00005E2E: or ax, ax
00005E30: jne 0x5e09
00005E32: jmp 0x5fe6
00005E35: les bx, ptr [bp + 4]
00005E38: test word ptr es:[bx + 2], 0x40
00005E3E: jne 0x5e43
00005E40: jmp 0x5f6b
00005E43: cmp word ptr es:[bx + 6], 0
00005E48: jne 0x5e4d
00005E4A: jmp 0x5f18
00005E4D: cmp word ptr es:[bx + 6], di
00005E51: jae 0x5ebc
00005E53: cmp word ptr es:[bx], 0
00005E57: je 0x5e68
00005E59: push word ptr [bp + 6]
00005E5C: push bx
00005E5D: nop 
00005E5E: push cs
00005E5F: call 0x4fb3
00005E62: pop cx
00005E63: pop cx
00005E64: or ax, ax
00005E66: jne 0x5e26
00005E68: les bx, ptr [bp + 4]
00005E6B: mov al, byte ptr es:[bx + 4]
00005E6F: cwde 
00005E70: shl ax, 1
00005E72: mov bx, ax
00005E74: test word ptr [bx + 0x74d2], 0x800
00005E7A: je 0x5e97
00005E7C: mov ax, 2
00005E7F: push ax
00005E80: xor ax, ax
00005E82: xor dx, dx
00005E84: push ax
00005E85: push dx
00005E86: mov bx, word ptr [bp + 4]
00005E89: mov al, byte ptr es:[bx + 4]
00005E8D: cwde 
00005E8E: push ax
00005E8F: nop 
00005E90: push cs
00005E91: call 0x3001
00005E94: add sp, 8
00005E97: push di
00005E98: push word ptr [bp + 0xc]
00005E9B: push word ptr [bp + 0xa]
00005E9E: les bx, ptr [bp + 4]
00005EA1: mov al, byte ptr es:[bx + 4]
00005EA5: cwde 
00005EA6: push ax
00005EA7: nop 
00005EA8: push cs
00005EA9: call 0x68ed
00005EAC: add sp, 8
00005EAF: cmp ax, di
00005EB1: jne 0x5eb6
00005EB3: jmp 0x5fe6
00005EB6: jmp 0x5e26
00005EB9: jmp 0x5fe6
00005EBC: les bx, ptr [bp + 4]
00005EBF: mov ax, word ptr es:[bx]
00005EC2: add ax, di
00005EC4: jl 0x5eec
00005EC6: cmp word ptr es:[bx], 0
00005ECA: jne 0x5ed8
00005ECC: mov ax, 0xffff
00005ECF: sub ax, word ptr es:[bx + 6]
00005ED3: mov word ptr es:[bx], ax
00005ED6: jmp 0x5eec
00005ED8: push word ptr [bp + 6]
00005EDB: push word ptr [bp + 4]
00005EDE: nop 
00005EDF: push cs
00005EE0: call 0x4fb3
00005EE3: pop cx
00005EE4: pop cx
00005EE5: or ax, ax
00005EE7: je 0x5eec
00005EE9: jmp 0x5e26
00005EEC: push di
00005EED: push word ptr [bp + 0xc]
00005EF0: push word ptr [bp + 0xa]
00005EF3: les bx, ptr [bp + 4]
00005EF6: push word ptr es:[bx + 0xe]
00005EFA: push word ptr es:[bx + 0xc]
00005EFE: nop 
00005EFF: push cs
00005F00: call 0x59ff
00005F03: add sp, 0xa
00005F06: les bx, ptr [bp + 4]
00005F09: mov ax, word ptr es:[bx]
00005F0C: add ax, di
00005F0E: mov word ptr es:[bx], ax
00005F11: add word ptr es:[bx + 0xc], di
00005F15: jmp 0x5fe6
00005F18: les bx, ptr [bp + 4]
00005F1B: mov al, byte ptr es:[bx + 4]
00005F1F: cwde 
00005F20: shl ax, 1
00005F22: mov bx, ax
00005F24: test word ptr [bx + 0x74d2], 0x800
00005F2A: je 0x5f47
00005F2C: mov ax, 2
00005F2F: push ax
00005F30: xor ax, ax
00005F32: xor dx, dx
00005F34: push ax
00005F35: push dx
00005F36: mov bx, word ptr [bp + 4]
00005F39: mov al, byte ptr es:[bx + 4]
00005F3D: cwde 
00005F3E: push ax
00005F3F: nop 
00005F40: push cs
00005F41: call 0x3001
00005F44: add sp, 8
00005F47: push di
00005F48: push word ptr [bp + 0xc]
00005F4B: push word ptr [bp + 0xa]
00005F4E: les bx, ptr [bp + 4]
00005F51: mov al, byte ptr es:[bx + 4]
00005F55: cwde 
00005F56: push ax
00005F57: nop 
00005F58: push cs
00005F59: call 0x68ed
00005F5C: add sp, 8
00005F5F: cmp ax, di
00005F61: jne 0x5f66
00005F63: jmp 0x5fe6
00005F66: jmp 0x5e26
00005F69: jmp 0x5fe6
00005F6B: les bx, ptr [bp + 4]
00005F6E: cmp word ptr es:[bx + 6], 0
00005F73: je 0x5fc7
00005F75: jmp 0x5fbe
00005F77: les bx, ptr [bp + 4]
00005F7A: inc word ptr es:[bx]
00005F7D: jge 0x5f9f
00005F7F: mov ax, word ptr es:[bx + 0xe]
00005F83: mov si, word ptr es:[bx + 0xc]
00005F87: inc word ptr es:[bx + 0xc]
00005F8B: les bx, ptr [bp + 0xa]
00005F8E: inc word ptr [bp + 0xa]
00005F91: mov dl, byte ptr es:[bx]
00005F94: mov es, ax
00005F96: mov byte ptr es:[si], dl
00005F99: mov al, dl
00005F9B: mov ah, 0
00005F9D: jmp 0x5fb6
00005F9F: push word ptr [bp + 6]
00005FA2: push word ptr [bp + 4]
00005FA5: les bx, ptr [bp + 0xa]
00005FA8: inc word ptr [bp + 0xa]
00005FAB: mov al, byte ptr es:[bx]
00005FAE: push ax
00005FAF: push cs
00005FB0: call 0x5c29
00005FB3: add sp, 6
00005FB6: cmp ax, 0xffff
00005FB9: jne 0x5fbe
00005FBB: jmp 0x5e26
00005FBE: mov ax, di
00005FC0: dec di
00005FC1: or ax, ax
00005FC3: jne 0x5f77
00005FC5: jmp 0x5fe6
00005FC7: push di
00005FC8: push word ptr [bp + 0xc]
00005FCB: push word ptr [bp + 0xa]
00005FCE: les bx, ptr [bp + 4]
00005FD1: mov al, byte ptr es:[bx + 4]
00005FD5: cwde 
00005FD6: push ax
00005FD7: nop 
00005FD8: push cs
00005FD9: call 0x679c
00005FDC: add sp, 8
00005FDF: cmp ax, di
00005FE1: je 0x5fe6
00005FE3: jmp 0x5e26
00005FE6: mov ax, word ptr [bp - 2]
00005FE9: pop di
00005FEA: pop si
00005FEB: mov sp, bp
00005FED: pop bp
00005FEE: ret 0xa
00005FF1: push bp
00005FF2: mov bp, sp
00005FF4: sub sp, 4
00005FF7: push si
00005FF8: push di
00005FF9: mov ax, word ptr [bp + 6]
00005FFC: cmp ax, word ptr [0x74d0]
00006000: jb 0x600c
00006002: mov ax, 6
00006005: push ax
00006006: call 0x2d44
00006009: jmp 0x60bc
0000600C: mov ax, word ptr [bp + 0xc]
0000600F: inc ax
00006010: cmp ax, 2
00006013: jb 0x6022
00006015: mov bx, word ptr [bp + 6]
00006018: shl bx, 1
0000601A: test word ptr [bx + 0x74d2], 0x200
00006020: je 0x6027
00006022: xor ax, ax
00006024: jmp 0x60bc
00006027: push word ptr [bp + 0xc]
0000602A: push word ptr [bp + 0xa]
0000602D: push word ptr [bp + 8]
00006030: push word ptr [bp + 6]
00006033: nop 
00006034: push cs
00006035: call 0x3118
00006038: add sp, 8
0000603B: mov word ptr [bp - 2], ax
0000603E: inc ax
0000603F: cmp ax, 2
00006042: jb 0x6051
00006044: mov bx, word ptr [bp + 6]
00006047: shl bx, 1
00006049: test word ptr [bx + 0x74d2], 0x4000
0000604F: jne 0x6056
00006051: mov ax, word ptr [bp - 2]
00006054: jmp 0x60bc
00006056: mov cx, word ptr [bp - 2]
00006059: les si, ptr [bp + 8]
0000605C: mov di, si
0000605E: mov bx, si
00006060: cld 
00006061: lodsb al, byte ptr es:[si]
00006063: cmp al, 0x1a
00006065: je 0x6097
00006067: cmp al, 0xd
00006069: je 0x6070
0000606B: stosb byte ptr es:[di], al
0000606C: loop 0x6061
0000606E: jmp 0x608f
00006070: loop 0x6061
00006072: push es
00006073: push bx
00006074: mov ax, 1
00006077: push ax
00006078: lea ax, [bp - 3]
0000607B: push ss
0000607C: push ax
0000607D: push word ptr [bp + 6]
00006080: nop 
00006081: push cs
00006082: call 0x3118
00006085: add sp, 8
00006088: pop bx
00006089: pop es
0000608A: cld 
0000608B: mov al, byte ptr [bp - 3]
0000608E: stosb byte ptr es:[di], al
0000608F: cmp di, bx
00006091: jne 0x6095
00006093: jmp 0x6027
00006095: jmp 0x60b9
00006097: push bx
00006098: mov ax, 1
0000609B: push ax
0000609C: neg cx
0000609E: sbb ax, ax
000060A0: push ax
000060A1: push cx
000060A2: push word ptr [bp + 6]
000060A5: nop 
000060A6: push cs
000060A7: call 0x3001
000060AA: add sp, 8
000060AD: mov bx, word ptr [bp + 6]
000060B0: shl bx, 1
000060B2: or word ptr [bx + 0x74d2], 0x200
000060B8: pop bx
000060B9: sub di, bx
000060BB: xchg di, ax
000060BC: pop di
000060BD: pop si
000060BE: mov sp, bp
000060C0: pop bp
000060C1: retf 
000060C2: jmp 0x5ff1
000060C5: push bp
000060C6: mov bp, sp
000060C8: push si
000060C9: push di
000060CA: mov di, word ptr [bp + 0xe]
000060CD: mov si, word ptr [bp + 0x10]
000060D0: les bx, ptr [bp + 6]
000060D3: mov ax, word ptr es:[bx + 0x12]
000060D7: cmp ax, word ptr [bp + 6]
000060DA: jne 0x60e7
000060DC: cmp di, 2
000060DF: jg 0x60e7
000060E1: cmp si, 0x7fff
000060E5: jbe 0x60ed
000060E7: mov ax, 0xffff
000060EA: jmp 0x61de
000060ED: cmp word ptr [0x76ae], 0
000060F2: jne 0x6103
000060F4: cmp word ptr [bp + 6], 0x7354
000060F9: jne 0x6103
000060FB: mov word ptr [0x76ae], 1
00006101: jmp 0x6117
00006103: cmp word ptr [0x76ac], 0
00006108: jne 0x6117
0000610A: cmp word ptr [bp + 6], 0x7340
0000610F: jne 0x6117
00006111: mov word ptr [0x76ac], 1
00006117: les bx, ptr [bp + 6]
0000611A: cmp word ptr es:[bx], 0
0000611E: je 0x6136
00006120: mov ax, 1
00006123: push ax
00006124: xor ax, ax
00006126: xor dx, dx
00006128: push ax
00006129: push dx
0000612A: push word ptr [bp + 8]
0000612D: push bx
0000612E: nop 
0000612F: push cs
00006130: call 0x554e
00006133: add sp, 0xa
00006136: les bx, ptr [bp + 6]
00006139: test word ptr es:[bx + 2], 4
0000613F: je 0x6150
00006141: push word ptr es:[bx + 0xa]
00006145: push word ptr es:[bx + 8]
00006149: nop 
0000614A: push cs
0000614B: call 0x41f8
0000614E: pop cx
0000614F: pop cx
00006150: les bx, ptr [bp + 6]
00006153: and word ptr es:[bx + 2], 0xfff3
00006158: mov word ptr es:[bx + 6], 0
0000615E: mov ax, word ptr [bp + 8]
00006161: mov dx, word ptr [bp + 6]
00006164: add dx, 5
00006167: mov word ptr es:[bx + 0xa], ax
0000616B: mov word ptr es:[bx + 8], dx
0000616F: mov word ptr es:[bx + 0xe], ax
00006173: mov word ptr es:[bx + 0xc], dx
00006177: cmp di, 2
0000617A: je 0x61dc
0000617C: or si, si
0000617E: jbe 0x61dc
00006180: mov word ptr [0x7336], 0
00006186: mov word ptr [0x7334], 0x4d69
0000618C: mov ax, word ptr [bp + 0xa]
0000618F: or ax, word ptr [bp + 0xc]
00006192: jne 0x61b5
00006194: push si
00006195: nop 
00006196: push cs
00006197: call 0x4302
0000619A: pop cx
0000619B: mov word ptr [bp + 0xc], dx
0000619E: mov word ptr [bp + 0xa], ax
000061A1: or ax, dx
000061A3: jne 0x61a8
000061A5: jmp 0x60e7
000061A8: les bx, ptr [bp + 6]
000061AB: or word ptr es:[bx + 2], 4
000061B0: jmp 0x61b5
000061B2: jmp 0x60e7
000061B5: les bx, ptr [bp + 6]
000061B8: mov ax, word ptr [bp + 0xc]
000061BB: mov dx, word ptr [bp + 0xa]
000061BE: mov word ptr es:[bx + 0xe], ax
000061C2: mov word ptr es:[bx + 0xc], dx
000061C6: mov word ptr es:[bx + 0xa], ax
000061CA: mov word ptr es:[bx + 8], dx
000061CE: mov word ptr es:[bx + 6], si
000061D2: cmp di, 1
000061D5: jne 0x61dc
000061D7: or word ptr es:[bx + 2], 8
000061DC: xor ax, ax
000061DE: pop di
000061DF: pop si
000061E0: pop bp
000061E1: retf 
000061E2: push bp
000061E3: mov bp, sp
000061E5: push si
000061E6: mov si, word ptr [bp + 4]
000061E9: mov ax, word ptr [bp + 0xa]
000061EC: or ax, word ptr [bp + 0xc]
000061EF: je 0x6236
000061F1: push word ptr [bp + 8]
000061F4: push word ptr [bp + 6]
000061F7: nop 
000061F8: push cs
000061F9: call 0x6661
000061FC: pop cx
000061FD: pop cx
000061FE: cmp ax, si
00006200: jb 0x6222
00006202: push si
00006203: push word ptr [bp + 8]
00006206: push word ptr [bp + 6]
00006209: push word ptr [bp + 0xc]
0000620C: push word ptr [bp + 0xa]
0000620F: nop 
00006210: push cs
00006211: call 0x6680
00006214: add sp, 0xa
00006217: les bx, ptr [bp + 0xa]
0000621A: add bx, si
0000621C: mov byte ptr es:[bx], 0
00006220: jmp 0x6236
00006222: push word ptr [bp + 8]
00006225: push word ptr [bp + 6]
00006228: push word ptr [bp + 0xc]
0000622B: push word ptr [bp + 0xa]
0000622E: nop 
0000622F: push cs
00006230: call 0x65f7
00006233: add sp, 8
00006236: pop si
00006237: pop bp
00006238: ret 0xa
0000623B: push bp
0000623C: mov bp, sp
0000623E: sub sp, 2
00006241: les bx, ptr [bp + 4]
00006244: cmp byte ptr es:[bx - 1], 0x2e
00006249: jne 0x624e
0000624B: dec word ptr [bp + 4]
0000624E: dec word ptr [bp + 4]
00006251: les bx, ptr [bp + 4]
00006254: mov al, byte ptr es:[bx]
00006257: cwde 
00006258: mov word ptr [bp - 2], ax
0000625B: mov cx, 4
0000625E: mov bx, 0x468b
00006261: mov ax, word ptr cs:[bx]
00006264: cmp ax, word ptr [bp - 2]
00006267: je 0x6270
00006269: add bx, 2
0000626C: loop 0x6261
0000626E: jmp 0x6283
00006270: jmp word ptr cs:[bx + 8]
00006274: les bx, ptr [bp + 4]
00006277: cmp byte ptr es:[bx - 2], 0
0000627C: jne 0x6283
0000627E: mov ax, 1
00006281: jmp 0x6285
00006283: xor ax, ax
00006285: mov sp, bp
00006287: pop bp
00006288: ret 4
0000628B: add byte ptr [bx + si], al
0000628D: das 
0000628E: add byte ptr [bp + si], bh
00006290: add byte ptr [si], bl
00006293: jle 0x62db
00006295: jle 0x62dd
00006297: je 0x62df
00006299: jle 0x62e1
0000629B: push bp
0000629C: mov bp, sp
0000629E: sub sp, 0x58
000062A1: push si
000062A2: push di
000062A3: xor di, di
000062A5: mov ax, word ptr [bp + 0xa]
000062A8: or ax, word ptr [bp + 0xc]
000062AB: je 0x62b4
000062AD: les bx, ptr [bp + 0xa]
000062B0: mov byte ptr es:[bx], 0
000062B4: mov ax, word ptr [bp + 0xe]
000062B7: or ax, word ptr [bp + 0x10]
000062BA: je 0x62c3
000062BC: les bx, ptr [bp + 0xe]
000062BF: mov byte ptr es:[bx], 0
000062C3: mov ax, word ptr [bp + 0x12]
000062C6: or ax, word ptr [bp + 0x14]
000062C9: je 0x62d2
000062CB: les bx, ptr [bp + 0x12]
000062CE: mov byte ptr es:[bx], 0
000062D2: mov ax, word ptr [bp + 0x16]
000062D5: or ax, word ptr [bp + 0x18]
000062D8: je 0x62e1
000062DA: les bx, ptr [bp + 0x16]
000062DD: mov byte ptr es:[bx], 0
000062E1: lea ax, [bp - 0x58]
000062E4: mov word ptr [bp - 2], ss
000062E7: mov word ptr [bp - 4], ax
000062EA: jmp 0x62ef
000062EC: inc word ptr [bp + 6]
000062EF: les bx, ptr [bp + 6]
000062F2: cmp byte ptr es:[bx], 0x20
000062F6: je 0x62ec
000062F8: push word ptr [bp + 8]
000062FB: push bx
000062FC: nop 
000062FD: push cs
000062FE: call 0x6661
00006301: pop cx
00006302: pop cx
00006303: mov si, ax
00006305: cmp ax, 0x50
00006308: jle 0x630d
0000630A: mov si, 0x50
0000630D: les bx, ptr [bp - 4]
00006310: mov byte ptr es:[bx], 0
00006314: inc word ptr [bp - 4]
00006317: push si
00006318: push word ptr [bp + 8]
0000631B: push word ptr [bp + 6]
0000631E: push word ptr [bp - 2]
00006321: push word ptr [bp - 4]
00006324: nop 
00006325: push cs
00006326: call 0x6680
00006329: add sp, 0xa
0000632C: add word ptr [bp - 4], si
0000632F: les bx, ptr [bp - 4]
00006332: mov byte ptr es:[bx], 0
00006336: xor si, si
00006338: dec word ptr [bp - 4]
0000633B: les bx, ptr [bp - 4]
0000633E: mov al, byte ptr es:[bx]
00006341: cwde 
00006342: mov word ptr [bp - 6], ax
00006345: mov cx, 7
00006348: mov bx, 0x4875
0000634B: mov ax, word ptr cs:[bx]
0000634E: cmp ax, word ptr [bp - 6]
00006351: je 0x635a
00006353: add bx, 2
00006356: loop 0x634b
00006358: jmp 0x6338
0000635A: jmp word ptr cs:[bx + 0xe]
0000635E: or si, si
00006360: jne 0x6375
00006362: les bx, ptr [bp - 4]
00006365: cmp byte ptr es:[bx + 1], 0
0000636A: jne 0x6375
0000636C: push word ptr [bp - 2]
0000636F: push bx
00006370: call 0x623b
00006373: mov si, ax
00006375: or si, si
00006377: jne 0x6338
00006379: test di, 2
0000637D: jne 0x6338
0000637F: or di, 2
00006382: push word ptr [bp + 0x18]
00006385: push word ptr [bp + 0x16]
00006388: push word ptr [bp - 2]
0000638B: push word ptr [bp - 4]
0000638E: mov ax, 4
00006391: push ax
00006392: call 0x61e2
00006395: les bx, ptr [bp - 4]
00006398: mov byte ptr es:[bx], 0
0000639C: jmp 0x6338
0000639E: mov ax, ss
000063A0: lea dx, [bp - 0x56]
000063A3: cmp ax, word ptr [bp - 2]
000063A6: jne 0x6338
000063A8: cmp dx, word ptr [bp - 4]
000063AB: jne 0x6338
000063AD: or si, si
000063AF: je 0x63df
000063B1: inc word ptr [bp - 4]
000063B4: les bx, ptr [bp - 4]
000063B7: cmp byte ptr es:[bx], 0
000063BB: je 0x63c0
000063BD: or di, 8
000063C0: push word ptr [bp + 0x10]
000063C3: push word ptr [bp + 0xe]
000063C6: push word ptr [bp - 2]
000063C9: push word ptr [bp - 4]
000063CC: mov ax, 0x41
000063CF: push ax
000063D0: call 0x61e2
000063D3: les bx, ptr [bp - 4]
000063D6: mov byte ptr es:[bx], 0
000063DA: dec word ptr [bp - 4]
000063DD: jmp 0x6449
000063DF: or si, si
000063E1: je 0x63e6
000063E3: jmp 0x6338
000063E6: inc si
000063E7: inc word ptr [bp - 4]
000063EA: les bx, ptr [bp - 4]
000063ED: cmp byte ptr es:[bx], 0
000063F1: je 0x63f6
000063F3: or di, 4
000063F6: push word ptr [bp + 0x14]
000063F9: push word ptr [bp + 0x12]
000063FC: push word ptr [bp - 2]
000063FF: push word ptr [bp - 4]
00006402: mov ax, 8
00006405: push ax
00006406: call 0x61e2
00006409: les bx, ptr [bp - 4]
0000640C: mov byte ptr es:[bx], 0
00006410: dec word ptr [bp - 4]
00006413: les bx, ptr [bp - 4]
00006416: cmp byte ptr es:[bx], 0
0000641A: je 0x6449
0000641C: cmp byte ptr es:[bx], 0x3a
00006420: je 0x6425
00006422: jmp 0x6338
00006425: mov ax, ss
00006427: lea dx, [bp - 0x56]
0000642A: cmp ax, word ptr [bp - 2]
0000642D: je 0x6432
0000642F: jmp 0x6338
00006432: cmp dx, word ptr [bp - 4]
00006435: je 0x643a
00006437: jmp 0x6338
0000643A: jmp 0x6449
0000643C: or si, si
0000643E: je 0x6443
00006440: jmp 0x6338
00006443: or di, 1
00006446: jmp 0x6338
00006449: les bx, ptr [bp - 4]
0000644C: cmp byte ptr es:[bx], 0x3a
00006450: jne 0x646d
00006452: cmp byte ptr [bp - 0x57], 0
00006456: je 0x645b
00006458: or di, 0x10
0000645B: push word ptr [bp + 0xc]
0000645E: push word ptr [bp + 0xa]
00006461: push ss
00006462: lea ax, [bp - 0x57]
00006465: push ax
00006466: mov ax, 2
00006469: push ax
0000646A: call 0x61e2
0000646D: mov ax, di
0000646F: pop di
00006470: pop si
00006471: mov sp, bp
00006473: pop bp
00006474: retf 
00006475: add byte ptr [bx + si], al
00006477: sub al, byte ptr [bx + si]
00006479: add byte ptr cs:[bx], ch
0000647C: add byte ptr [bp + si], bh
0000647E: add byte ptr [bx], bh
00006480: add byte ptr [si], bl
00006483: lodsw ax, word ptr [si]
00006484: inc di
00006485: cmp al, 0x48
00006487: pop si
00006488: inc di
00006489: fild word ptr [bx - 0x62]
0000648C: inc di
0000648D: cmp al, 0x48
0000648F: fild word ptr [bx + 0x55]
00006492: mov bp, sp
00006494: push word ptr [bp + 0x18]
00006497: push word ptr [bp + 0x16]
0000649A: push word ptr [bp + 0x14]
0000649D: push word ptr [bp + 0x12]
000064A0: push word ptr [bp + 0x10]
000064A3: push word ptr [bp + 0xe]
000064A6: push word ptr [bp + 0xc]
000064A9: push word ptr [bp + 0xa]
000064AC: push word ptr [bp + 8]
000064AF: push word ptr [bp + 6]
000064B2: push cs
000064B3: call 0x629b
000064B6: add sp, 0x14
000064B9: pop bp
000064BA: retf 
000064BB: push bp
000064BC: mov bp, sp
000064BE: push si
000064BF: mov si, word ptr [bp + 8]
000064C2: push si
000064C3: push word ptr [bp + 0xc]
000064C6: push word ptr [bp + 0xa]
000064C9: les bx, ptr [bp + 4]
000064CC: push word ptr es:[bx + 2]
000064D0: push word ptr es:[bx]
000064D3: nop 
000064D4: push cs
000064D5: call 0x59ff
000064D8: add sp, 0xa
000064DB: les bx, ptr [bp + 4]
000064DE: add word ptr es:[bx], si
000064E1: push bx
000064E2: push es
000064E3: mov es, word ptr es:[bx + 2]
000064E7: mov ax, es
000064E9: pop es
000064EA: pop bx
000064EB: mov bx, word ptr es:[bx]
000064EE: mov es, ax
000064F0: mov byte ptr es:[bx], 0
000064F4: mov ax, si
000064F6: pop si
000064F7: pop bp
000064F8: ret 0xa
000064FB: push bp
000064FC: mov bp, sp
000064FE: les bx, ptr [bp + 6]
00006501: mov byte ptr es:[bx], 0
00006505: mov ax, 0x48bb
00006508: push ax
00006509: push ss
0000650A: lea ax, [bp + 6]
0000650D: push ax
0000650E: push word ptr [bp + 0xc]
00006511: push word ptr [bp + 0xa]
00006514: lea ax, [bp + 0xe]
00006517: push ax
00006518: call 0x3935
0000651B: pop bp
0000651C: retf 
0000651D: push bp
0000651E: mov bp, sp
00006520: les bx, ptr [bp + 6]
00006523: mov byte ptr es:[bx], 0
00006527: mov ax, 0x48bb
0000652A: push ax
0000652B: push ss
0000652C: lea ax, [bp + 6]
0000652F: push ax
00006530: push word ptr [bp + 0xc]
00006533: push word ptr [bp + 0xa]
00006536: push word ptr [bp + 0xe]
00006539: call 0x3935
0000653C: pop bp
0000653D: retf 
0000653E: push bp
0000653F: mov bp, sp
00006541: push si
00006542: les bx, ptr [bp + 4]
00006545: mov ax, word ptr es:[bx + 2]
00006549: mov si, word ptr es:[bx]
0000654C: inc word ptr es:[bx]
0000654F: mov es, ax
00006551: mov dl, byte ptr es:[si]
00006554: mov al, dl
00006556: or al, al
00006558: jne 0x655f
0000655A: mov ax, 0xffff
0000655D: jmp 0x6563
0000655F: mov al, dl
00006561: mov ah, 0
00006563: pop si
00006564: pop bp
00006565: ret 
00006566: push bp
00006567: mov bp, sp
00006569: les bx, ptr [bp + 6]
0000656C: dec word ptr es:[bx]
0000656F: pop bp
00006570: ret 
00006571: push bp
00006572: mov bp, sp
00006574: push ss
00006575: lea ax, [bp + 0xe]
00006578: push ax
00006579: push word ptr [bp + 0xc]
0000657C: push word ptr [bp + 0xa]
0000657F: push ss
00006580: lea ax, [bp + 6]
00006583: push ax
00006584: mov ax, 0x4966
00006587: push ax
00006588: mov ax, 0x493e
0000658B: push ax
0000658C: call 0x3147
0000658F: add sp, 0x10
00006592: pop bp
00006593: retf 
00006594: push bp
00006595: mov bp, sp
00006597: push word ptr [bp + 0x10]
0000659A: push word ptr [bp + 0xe]
0000659D: push word ptr [bp + 0xc]
000065A0: push word ptr [bp + 0xa]
000065A3: push ss
000065A4: lea ax, [bp + 6]
000065A7: push ax
000065A8: mov ax, 0x4966
000065AB: push ax
000065AC: mov ax, 0x493e
000065AF: push ax
000065B0: call 0x3147
000065B3: add sp, 0x10
000065B6: pop bp
000065B7: retf 
000065B8: push bp
000065B9: mov bp, sp
000065BB: push si
000065BC: push di
000065BD: cld 
000065BE: push ds
000065BF: les di, ptr [bp + 6]
000065C2: mov dx, di
000065C4: xor al, al
000065C6: mov cx, 0xffff
000065C9: repne scasb al, byte ptr es:[di]
000065CB: push es
000065CC: lea si, [di - 1]
000065CF: les di, ptr [bp + 0xa]
000065D2: mov cx, 0xffff
000065D5: repne scasb al, byte ptr es:[di]
000065D7: not cx
000065D9: sub di, cx
000065DB: push es
000065DC: pop ds
000065DD: pop es
000065DE: xchg di, si
000065E0: test si, 1
000065E4: je 0x65e8
000065E6: movsb byte ptr es:[di], byte ptr [si]
000065E7: dec cx
000065E8: shr cx, 1
000065EA: rep movsw word ptr es:[di], word ptr [si]
000065EC: jae 0x65ef
000065EE: movsb byte ptr es:[di], byte ptr [si]
000065EF: xchg dx, ax
000065F0: mov dx, es
000065F2: pop ds
000065F3: pop di
000065F4: pop si
000065F5: pop bp
000065F6: retf 
000065F7: push bp
000065F8: mov bp, sp
000065FA: push si
000065FB: push di
000065FC: cld 
000065FD: les di, ptr [bp + 0xa]
00006600: mov si, di
00006602: xor al, al
00006604: mov cx, 0xffff
00006607: repne scasb al, byte ptr es:[di]
00006609: not cx
0000660B: push ds
0000660C: mov ax, es
0000660E: mov ds, ax
00006610: les di, ptr [bp + 6]
00006613: rep movsb byte ptr es:[di], byte ptr [si]
00006615: pop ds
00006616: mov dx, word ptr [bp + 8]
00006619: mov ax, word ptr [bp + 6]
0000661C: pop di
0000661D: pop si
0000661E: pop bp
0000661F: retf 
00006620: push bp
00006621: mov bp, sp
00006623: push si
00006624: push di
00006625: mov dx, ds
00006627: cld 
00006628: lds si, ptr [bp + 6]
0000662B: les di, ptr [bp + 0xa]
0000662E: xor ax, ax
00006630: mov bx, ax
00006632: mov cx, 0x617a
00006635: lodsb al, byte ptr [si]
00006636: mov bl, byte ptr es:[di]
00006639: or al, al
0000663B: je 0x6659
0000663D: scasb al, byte ptr es:[di]
0000663E: je 0x6635
00006640: cmp al, ch
00006642: jb 0x664a
00006644: cmp al, cl
00006646: ja 0x664a
00006648: sub al, 0x20
0000664A: cmp bl, ch
0000664C: jb 0x6655
0000664E: cmp bl, cl
00006650: ja 0x6655
00006652: sub bl, 0x20
00006655: cmp al, bl
00006657: je 0x6635
00006659: sub ax, bx
0000665B: mov ds, dx
0000665D: pop di
0000665E: pop si
0000665F: pop bp
00006660: retf 
00006661: push bp
00006662: mov bp, sp
00006664: push di
00006665: les di, ptr [bp + 6]
00006668: xor ax, ax
0000666A: cmp ax, word ptr [bp + 8]
0000666D: jne 0x6673
0000666F: cmp ax, di
00006671: je 0x667d
00006673: cld 
00006674: mov cx, 0xffff
00006677: repne scasb al, byte ptr es:[di]
00006679: xchg cx, ax
0000667A: not ax
0000667C: dec ax
0000667D: pop di
0000667E: pop bp
0000667F: retf 
00006680: push bp
00006681: mov bp, sp
00006683: push si
00006684: push di
00006685: cld 
00006686: les di, ptr [bp + 0xa]
00006689: mov si, di
0000668B: xor al, al
0000668D: mov bx, word ptr [bp + 0xe]
00006690: mov cx, bx
00006692: repne scasb al, byte ptr es:[di]
00006694: sub bx, cx
00006696: push ds
00006697: mov di, es
00006699: mov ds, di
0000669B: les di, ptr [bp + 6]
0000669E: xchg bx, cx
000066A0: rep movsb byte ptr es:[di], byte ptr [si]
000066A2: mov cx, bx
000066A4: rep stosb byte ptr es:[di], al
000066A6: pop ds
000066A7: mov dx, word ptr [bp + 8]
000066AA: mov ax, word ptr [bp + 6]
000066AD: pop di
000066AE: pop si
000066AF: pop bp
000066B0: retf 
000066B1: push bp
000066B2: mov bp, sp
000066B4: sub sp, 8
000066B7: mov ax, word ptr [bp + 6]
000066BA: or ax, word ptr [bp + 8]
000066BD: je 0x6704
000066BF: mov ax, word ptr [bp + 8]
000066C2: mov dx, word ptr [bp + 6]
000066C5: mov word ptr [0x8796], ax
000066C8: mov word ptr [0x8794], dx
000066CC: jmp 0x6704
000066CE: mov ax, word ptr [bp + 0xc]
000066D1: mov dx, word ptr [bp + 0xa]
000066D4: mov word ptr [bp - 2], ax
000066D7: mov word ptr [bp - 4], dx
000066DA: jmp 0x66ee
000066DC: les bx, ptr [bp - 4]
000066DF: mov al, byte ptr es:[bx]
000066E2: les bx, ptr [0x8794]
000066E6: cmp al, byte ptr es:[bx]
000066E9: je 0x66f7
000066EB: inc word ptr [bp - 4]
000066EE: les bx, ptr [bp - 4]
000066F1: cmp byte ptr es:[bx], 0
000066F5: jne 0x66dc
000066F7: les bx, ptr [bp - 4]
000066FA: cmp byte ptr es:[bx], 0
000066FE: je 0x670e
00006700: inc word ptr [0x8794]
00006704: les bx, ptr [0x8794]
00006708: cmp byte ptr es:[bx], 0
0000670C: jne 0x66ce
0000670E: les bx, ptr [0x8794]
00006712: cmp byte ptr es:[bx], 0
00006716: jne 0x671e
00006718: xor dx, dx
0000671A: xor ax, ax
0000671C: jmp 0x6774
0000671E: mov ax, word ptr [0x8796]
00006721: mov dx, word ptr [0x8794]
00006725: mov word ptr [bp - 6], ax
00006728: mov word ptr [bp - 8], dx
0000672B: jmp 0x6764
0000672D: mov ax, word ptr [bp + 0xc]
00006730: mov dx, word ptr [bp + 0xa]
00006733: mov word ptr [bp - 2], ax
00006736: mov word ptr [bp - 4], dx
00006739: jmp 0x6757
0000673B: les bx, ptr [bp - 4]
0000673E: mov al, byte ptr es:[bx]
00006741: les bx, ptr [0x8794]
00006745: cmp al, byte ptr es:[bx]
00006748: jne 0x6754
0000674A: mov byte ptr es:[bx], 0
0000674E: inc word ptr [0x8794]
00006752: jmp 0x676e
00006754: inc word ptr [bp - 4]
00006757: les bx, ptr [bp - 4]
0000675A: cmp byte ptr es:[bx], 0
0000675E: jne 0x673b
00006760: inc word ptr [0x8794]
00006764: les bx, ptr [0x8794]
00006768: cmp byte ptr es:[bx], 0
0000676C: jne 0x672d
0000676E: mov dx, word ptr [bp - 6]
00006771: mov ax, word ptr [bp - 8]
00006774: mov sp, bp
00006776: pop bp
00006777: retf 
00006778: push bp
00006779: mov bp, sp
0000677B: push si
0000677C: cld 
0000677D: push ds
0000677E: lds si, ptr [bp + 6]
00006781: mov dx, si
00006783: jmp 0x6790
00006785: sub al, 0x61
00006787: cmp al, 0x19
00006789: ja 0x6790
0000678B: add al, 0x41
0000678D: mov byte ptr [si - 1], al
00006790: lodsb al, byte ptr [si]
00006791: and al, al
00006793: jne 0x6785
00006795: xchg dx, ax
00006796: mov dx, ds
00006798: pop ds
00006799: pop si
0000679A: pop bp
0000679B: retf 
0000679C: push bp
0000679D: mov bp, sp
0000679F: sub sp, 0x8e
000067A3: push si
000067A4: push di
000067A5: mov di, word ptr [bp + 6]
000067A8: cmp di, word ptr [0x74d0]
000067AC: jb 0x67b8
000067AE: mov ax, 6
000067B1: push ax
000067B2: call 0x2d44
000067B5: jmp 0x68e7
000067B8: mov ax, word ptr [bp + 0xc]
000067BB: inc ax
000067BC: cmp ax, 2
000067BF: jae 0x67c6
000067C1: xor ax, ax
000067C3: jmp 0x68e7
000067C6: mov bx, di
000067C8: shl bx, 1
000067CA: test word ptr [bx + 0x74d2], 0x800
000067D0: je 0x67e5
000067D2: mov ax, 2
000067D5: push ax
000067D6: xor ax, ax
000067D8: xor dx, dx
000067DA: push ax
000067DB: push dx
000067DC: push di
000067DD: nop 
000067DE: push cs
000067DF: call 0x3001
000067E2: add sp, 8
000067E5: mov bx, di
000067E7: shl bx, 1
000067E9: test word ptr [bx + 0x74d2], 0x4000
000067EF: jne 0x6806
000067F1: push word ptr [bp + 0xc]
000067F4: push word ptr [bp + 0xa]
000067F7: push word ptr [bp + 8]
000067FA: push di
000067FB: nop 
000067FC: push cs
000067FD: call 0x68ed
00006800: add sp, 8
00006803: jmp 0x68e7
00006806: mov bx, di
00006808: shl bx, 1
0000680A: and word ptr [bx + 0x74d2], 0xfdff
00006810: mov ax, word ptr [bp + 0xa]
00006813: mov dx, word ptr [bp + 8]
00006816: mov word ptr [bp - 0xa], ax
00006819: mov word ptr [bp - 0xc], dx
0000681C: mov ax, word ptr [bp + 0xc]
0000681F: mov word ptr [bp - 6], ax
00006822: jmp 0x6899
00006824: dec word ptr [bp - 6]
00006827: les bx, ptr [bp - 0xc]
0000682A: inc word ptr [bp - 0xc]
0000682D: mov al, byte ptr es:[bx]
00006830: mov byte ptr [bp - 7], al
00006833: cmp al, 0xa
00006835: jne 0x6841
00006837: les bx, ptr [bp - 4]
0000683A: mov byte ptr es:[bx], 0xd
0000683E: inc word ptr [bp - 4]
00006841: les bx, ptr [bp - 4]
00006844: mov al, byte ptr [bp - 7]
00006847: mov byte ptr es:[bx], al
0000684A: inc word ptr [bp - 4]
0000684D: lea ax, [bp - 0x8e]
00006851: mov dx, word ptr [bp - 4]
00006854: xor bx, bx
00006856: sub dx, ax
00006858: sbb bx, 0
0000685B: or bx, bx
0000685D: jl 0x68a3
0000685F: jne 0x6867
00006861: cmp dx, 0x80
00006865: jb 0x68a3
00006867: lea ax, [bp - 0x8e]
0000686B: mov si, word ptr [bp - 4]
0000686E: xor dx, dx
00006870: sub si, ax
00006872: sbb dx, 0
00006875: push si
00006876: push ss
00006877: push ax
00006878: push di
00006879: nop 
0000687A: push cs
0000687B: call 0x68ed
0000687E: add sp, 8
00006881: mov dx, ax
00006883: cmp ax, si
00006885: je 0x6899
00006887: cmp dx, -1
0000688A: jne 0x6891
0000688C: mov ax, 0xffff
0000688F: jmp 0x68e2
00006891: mov ax, word ptr [bp + 0xc]
00006894: sub ax, word ptr [bp - 6]
00006897: jmp 0x68de
00006899: lea ax, [bp - 0x8e]
0000689D: mov word ptr [bp - 2], ss
000068A0: mov word ptr [bp - 4], ax
000068A3: cmp word ptr [bp - 6], 0
000068A7: je 0x68ac
000068A9: jmp 0x6824
000068AC: lea ax, [bp - 0x8e]
000068B0: mov si, word ptr [bp - 4]
000068B3: xor dx, dx
000068B5: sub si, ax
000068B7: sbb dx, 0
000068BA: mov ax, si
000068BC: or ax, ax
000068BE: jbe 0x68e4
000068C0: push si
000068C1: push ss
000068C2: lea ax, [bp - 0x8e]
000068C6: push ax
000068C7: push di
000068C8: nop 
000068C9: push cs
000068CA: call 0x68ed
000068CD: add sp, 8
000068D0: mov dx, ax
000068D2: cmp ax, si
000068D4: je 0x68e4
000068D6: cmp dx, -1
000068D9: je 0x688c
000068DB: mov ax, word ptr [bp + 0xc]
000068DE: add ax, dx
000068E0: sub ax, si
000068E2: jmp 0x68e7
000068E4: mov ax, word ptr [bp + 0xc]
000068E7: pop di
000068E8: pop si
000068E9: mov sp, bp
000068EB: pop bp
000068EC: retf 
000068ED: push bp
000068EE: mov bp, sp
000068F0: mov bx, word ptr [bp + 6]
000068F3: shl bx, 1
000068F5: test word ptr [bx + 0x74d2], 1
000068FB: je 0x6903
000068FD: mov ax, 5
00006900: push ax
00006901: jmp 0x6924
00006903: push ds
00006904: mov ah, 0x40
00006906: mov bx, word ptr [bp + 6]
00006909: mov cx, word ptr [bp + 0xc]
0000690C: lds dx, ptr [bp + 8]
0000690F: int 0x21
00006911: pop ds
00006912: jb 0x6923
00006914: push ax
00006915: mov bx, word ptr [bp + 6]
00006918: shl bx, 1
0000691A: or word ptr [bx + 0x74d2], 0x1000
00006920: pop ax
00006921: jmp 0x6927
00006923: push ax
00006924: call 0x2d44
00006927: pop bp
00006928: retf 
00006929: jmp 0x679c
0000692C: push bp
0000692D: mov bp, sp
0000692F: sub sp, 4
00006932: push si
00006933: xor si, si
00006935: mov word ptr [bp - 2], ds
00006938: mov word ptr [bp - 4], 0x7340
0000693D: cmp si, word ptr [0x74d0]
00006941: jae 0x6964
00006943: les bx, ptr [bp - 4]
00006946: test word ptr es:[bx + 2], 3
0000694C: je 0x6959
0000694E: push word ptr [bp - 2]
00006951: push bx
00006952: nop 
00006953: push cs
00006954: call 0x4efb
00006957: pop cx
00006958: pop cx
00006959: add word ptr [bp - 4], 0x14
0000695D: inc si
0000695E: cmp si, word ptr [0x74d0]
00006962: jb 0x6943
00006964: pop si
00006965: mov sp, bp
00006967: pop bp
00006968: retf 
00006969: push bp
0000696A: mov bp, sp
0000696C: sub sp, 4
0000696F: push si
00006970: mov si, 4
00006973: mov word ptr [bp - 2], ds
00006976: mov word ptr [bp - 4], 0x7340
0000697B: jmp 0x6998
0000697D: les bx, ptr [bp - 4]
00006980: test word ptr es:[bx + 2], 3
00006986: je 0x6993
00006988: push word ptr [bp - 2]
0000698B: push bx
0000698C: nop 
0000698D: push cs
0000698E: call 0x4fb3
00006991: pop cx
00006992: pop cx
00006993: dec si
00006994: add word ptr [bp - 4], 0x14
00006998: or si, si
0000699A: jne 0x697d
0000699C: pop si
0000699D: mov sp, bp
0000699F: pop bp
000069A0: retf 
000069A1: push bp
000069A2: mov bp, sp
000069A4: sub sp, 8
000069A7: mov ax, word ptr [bp + 6]
000069AA: or ax, word ptr [bp + 8]
000069AD: je 0x69f4
000069AF: mov ax, word ptr [bp + 8]
000069B2: mov dx, word ptr [bp + 6]
000069B5: mov word ptr [0x879a], ax
000069B8: mov word ptr [0x8798], dx
000069BC: jmp 0x69f4
000069BE: mov ax, word ptr [bp + 0xc]
000069C1: mov dx, word ptr [bp + 0xa]
000069C4: mov word ptr [bp - 2], ax
000069C7: mov word ptr [bp - 4], dx
000069CA: jmp 0x69de
000069CC: les bx, ptr [bp - 4]
000069CF: mov al, byte ptr es:[bx]
000069D2: les bx, ptr [0x8798]
000069D6: cmp al, byte ptr es:[bx]
000069D9: je 0x69e7
000069DB: inc word ptr [bp - 4]
000069DE: les bx, ptr [bp - 4]
000069E1: cmp byte ptr es:[bx], 0
000069E5: jne 0x69cc
000069E7: les bx, ptr [bp - 4]
000069EA: cmp byte ptr es:[bx], 0
000069EE: je 0x69fe
000069F0: inc word ptr [0x8798]
000069F4: les bx, ptr [0x8798]
000069F8: cmp byte ptr es:[bx], 0
000069FC: jne 0x69be
000069FE: les bx, ptr [0x8798]
00006A02: cmp byte ptr es:[bx], 0
00006A06: jne 0x6a0e
00006A08: xor dx, dx
00006A0A: xor ax, ax
00006A0C: jmp 0x6a64
00006A0E: mov ax, word ptr [0x879a]
00006A11: mov dx, word ptr [0x8798]
00006A15: mov word ptr [bp - 6], ax
00006A18: mov word ptr [bp - 8], dx
00006A1B: jmp 0x6a54
00006A1D: mov ax, word ptr [bp + 0xc]
00006A20: mov dx, word ptr [bp + 0xa]
00006A23: mov word ptr [bp - 2], ax
00006A26: mov word ptr [bp - 4], dx
00006A29: jmp 0x6a47
00006A2B: les bx, ptr [bp - 4]
00006A2E: mov al, byte ptr es:[bx]
00006A31: les bx, ptr [0x8798]
00006A35: cmp al, byte ptr es:[bx]
00006A38: jne 0x6a44
00006A3A: mov byte ptr es:[bx], 0
00006A3E: inc word ptr [0x8798]
00006A42: jmp 0x6a5e
00006A44: inc word ptr [bp - 4]
00006A47: les bx, ptr [bp - 4]
00006A4A: cmp byte ptr es:[bx], 0
00006A4E: jne 0x6a2b
00006A50: inc word ptr [0x8798]
00006A54: les bx, ptr [0x8798]
00006A58: cmp byte ptr es:[bx], 0
00006A5C: jne 0x6a1d
00006A5E: mov dx, word ptr [bp - 6]
00006A61: mov ax, word ptr [bp - 8]
00006A64: mov sp, bp
00006A66: pop bp
00006A67: retf 
00006A68: push bp
00006A69: mov bp, sp
00006A6B: sub sp, 0x80
00006A6F: push si
00006A70: push di
00006A71: mov word ptr [bp - 4], 0
00006A76: mov word ptr [bp - 6], 0
00006A7B: mov word ptr [bp - 8], 0
00006A80: lcall 0, 0xf71
00006A85: mov word ptr [0x76d6], ax
00006A88: mov ax, 0x50
00006A8B: push ax
00006A8C: push ds
00006A8D: mov ax, 0x76d8
00006A90: push ax
00006A91: lcall 0, 0x3d01
00006A96: add sp, 6
00006A99: cmp word ptr [bp + 6], 1
00006A9D: jg 0x6aa2
00006A9F: jmp 0x6b71
00006AA2: mov word ptr [bp - 0xe], 1
00006AA7: mov ax, word ptr [bp + 8]
00006AAA: add ax, 4
00006AAD: mov word ptr [bp - 0x24], ax
00006AB0: mov ax, word ptr [bp - 0xe]
00006AB3: cmp ax, word ptr [bp + 6]
00006AB6: jl 0x6abb
00006AB8: jmp 0x6b71
00006ABB: mov es, word ptr [bp + 0xa]
00006ABE: mov bx, word ptr [bp - 0x24]
00006AC1: push word ptr es:[bx + 2]
00006AC5: push word ptr es:[bx]
00006AC8: lcall 0, 0x4b78
00006ACD: add sp, 4
00006AD0: mov si, 0x96
00006AD3: mov di, ax
00006AD5: mov es, dx
00006AD7: mov cx, 0xb
00006ADA: xor ax, ax
00006ADC: repe cmpsb byte ptr [si], byte ptr es:[di]
00006ADE: je 0x6ae5
00006AE0: sbb ax, ax
00006AE2: sbb ax, 0xffff
00006AE5: or ax, ax
00006AE7: je 0x6b17
00006AE9: mov es, word ptr [bp + 0xa]
00006AEC: mov bx, word ptr [bp - 0x24]
00006AEF: push word ptr es:[bx + 2]
00006AF3: push word ptr es:[bx]
00006AF6: lcall 0, 0x4b78
00006AFB: add sp, 4
00006AFE: mov si, 0xa1
00006B01: mov di, ax
00006B03: mov es, dx
00006B05: mov cx, 0xb
00006B08: xor ax, ax
00006B0A: repe cmpsb byte ptr [si], byte ptr es:[di]
00006B0C: je 0x6b13
00006B0E: sbb ax, ax
00006B10: sbb ax, 0xffff
00006B13: or ax, ax
00006B15: jne 0x6b1e
00006B17: mov word ptr [bp - 8], 1
00006B1C: jmp 0x6b5f
00006B1E: mov es, word ptr [bp + 0xa]
00006B21: mov bx, word ptr [bp - 0x24]
00006B24: les di, ptr es:[bx]
00006B27: mov si, 0xac
00006B2A: mov cx, 4
00006B2D: xor ax, ax
00006B2F: repe cmpsb byte ptr [si], byte ptr es:[di]
00006B31: je 0x6b38
00006B33: sbb ax, ax
00006B35: sbb ax, 0xffff
00006B38: or ax, ax
00006B3A: je 0x6b5a
00006B3C: mov es, word ptr [bp + 0xa]
00006B3F: mov bx, word ptr [bp - 0x24]
00006B42: les di, ptr es:[bx]
00006B45: mov si, 0xb0
00006B48: mov cx, 4
00006B4B: xor ax, ax
00006B4D: repe cmpsb byte ptr [si], byte ptr es:[di]
00006B4F: je 0x6b56
00006B51: sbb ax, ax
00006B53: sbb ax, 0xffff
00006B56: or ax, ax
00006B58: jne 0x6b5f
00006B5A: mov word ptr [bp - 6], 1
00006B5F: add word ptr [bp - 0x24], 4
00006B63: inc word ptr [bp - 0xe]
00006B66: mov ax, word ptr [bp - 0xe]
00006B69: cmp ax, word ptr [bp + 6]
00006B6C: jge 0x6b71
00006B6E: jmp 0x6abb
00006B71: push ss
00006B72: lea ax, [bp - 0x22]
00006B75: push ax
00006B76: push ss
00006B77: lea ax, [bp - 0x1c]
00006B7A: push ax
00006B7B: push ss
00006B7C: lea ax, [bp - 0x80]
00006B7F: push ax
00006B80: push ss
00006B81: lea ax, [bp - 0x12]
00006B84: push ax
00006B85: les bx, ptr [bp + 8]
00006B88: push word ptr es:[bx + 2]
00006B8C: push word ptr es:[bx]
00006B8F: lcall 0, 0x4891
00006B94: add sp, 0x14
00006B97: mov al, byte ptr [bp - 0x12]
00006B9A: cwde 
00006B9B: add ax, 0xffbf
00006B9E: push ax
00006B9F: lcall 0, 0xf8b
00006BA4: add sp, 2
00006BA7: push ss
00006BA8: pop es
00006BA9: lea di, [bp - 0x80]
00006BAC: xor ax, ax
00006BAE: mov cx, 0xffff
00006BB1: repne scasb al, byte ptr es:[di]
00006BB3: not cx
00006BB5: dec cx
00006BB6: dec cx
00006BB7: lea ax, [bp - 0x80]
00006BBA: add cx, ax
00006BBC: mov bx, cx
00006BBE: mov byte ptr ss:[bx], 0
00006BC2: push ss
00006BC3: push ax
00006BC4: lcall 0, 0xdeb
00006BC9: add sp, 4
00006BCC: push word ptr [bp - 8]
00006BCF: push word ptr [bp - 6]
00006BD2: lcall 0x19fe, 0x2f
00006BD7: add sp, 4
00006BDA: cmp word ptr [bp - 8], 0
00006BDE: je 0x6be3
00006BE0: jmp 0x6e2c
00006BE3: lcall 0, 0x38d
00006BE8: or ax, ax
00006BEA: je 0x6c5a
00006BEC: push ds
00006BED: mov ax, 0x7ada
00006BF0: push ax
00006BF1: push ds
00006BF2: mov ax, 0xb4
00006BF5: push ax
00006BF6: push ss
00006BF7: lea ax, [bp - 0x3e]
00006BFA: push ax
00006BFB: xor ax, ax
00006BFD: push ax
00006BFE: lcall 0x80c, 0x2bd
00006C03: or ax, ax
00006C05: jne 0x6c5a
00006C07: mov ax, word ptr [bp - 0x2a]
00006C0A: mov dx, word ptr [bp - 0x2c]
00006C0D: add dx, 0xa
00006C10: adc ax, 0
00006C13: push ax
00006C14: push dx
00006C15: lcall 0x1a10, 0x20
00006C1A: mov word ptr [0x772e], dx
00006C1E: mov word ptr [0x772c], ax
00006C21: push ds
00006C22: mov ax, 0x7ada
00006C25: push ax
00006C26: push ds
00006C27: mov ax, 0xbd
00006C2A: push ax
00006C2B: xor ax, ax
00006C2D: xor dx, dx
00006C2F: push ax
00006C30: push dx
00006C31: push word ptr [bp - 0x2c]
00006C34: push word ptr [0x772e]
00006C38: push word ptr [0x772c]
00006C3C: lcall 0x7f4, 0xa
00006C41: mov word ptr [bp - 2], ax
00006C44: mov word ptr [0x7730], ax
00006C47: mov word ptr [0x7736], 0x2328
00006C4D: push ds
00006C4E: mov ax, 0x772c
00006C51: push ax
00006C52: lcall 0, 0x2bb
00006C57: add sp, 4
00006C5A: mov word ptr [0x772a], 1
00006C60: mov word ptr [0x7728], 1
00006C66: lcall 0x1a05, 0x20
00006C6B: lcall 0x1a7e, 0x20
00006C70: jmp 0x6e06
00006C73: lcall 0x1a08, 0x20
00006C78: mov dx, ax
00006C7A: cmp ax, 3
00006C7D: je 0x6cc2
00006C7F: jg 0x6c8e
00006C81: cmp ax, 1
00006C84: je 0x6c9b
00006C86: cmp ax, 2
00006C89: je 0x6cb0
00006C8B: jmp 0x6e06
00006C8E: cmp ax, 4
00006C91: je 0x6cca
00006C93: cmp ax, 0x7531
00006C96: je 0x6cc2
00006C98: jmp 0x6e06
00006C9B: lcall 0x1a92, 0x20
00006CA0: cmp ax, 0x7531
00006CA3: je 0x6ca8
00006CA5: jmp 0x6e06
00006CA8: mov word ptr [bp - 4], 1
00006CAD: jmp 0x6e06
00006CB0: mov ax, 1
00006CB3: push ax
00006CB4: lcall 0x1a1b, 0x20
00006CB9: add sp, 2
00006CBC: mov word ptr [bp - 4], ax
00006CBF: jmp 0x6e06
00006CC2: mov word ptr [bp - 4], 1
00006CC7: jmp 0x6e06
00006CCA: xor ax, ax
00006CCC: mov dx, 0xa5
00006CCF: push ax
00006CD0: push dx
00006CD1: lcall 0x1a10, 0x20
00006CD6: mov word ptr [bp - 0xa], dx
00006CD9: mov word ptr [bp - 0xc], ax
00006CDC: lcall 0x1a7e, 0x25
00006CE1: lcall 0x1a7e, 0x20
00006CE6: push word ptr [bp - 0xa]
00006CE9: push word ptr [bp - 0xc]
00006CEC: lcall 0x1a43, 0x25
00006CF1: add sp, 4
00006CF4: mov word ptr [bp - 4], ax
00006CF7: cmp word ptr [bp - 4], 1
00006CFB: jg 0x6d00
00006CFD: jmp 0x6df0
00006D00: cmp ax, 2
00006D03: jne 0x6d08
00006D05: jmp 0x6dcf
00006D08: cmp ax, 3
00006D0B: jne 0x6d10
00006D0D: jmp 0x6de4
00006D10: cmp ax, 4
00006D13: je 0x6d18
00006D15: jmp 0x6de9
00006D18: push word ptr [bp - 0xa]
00006D1B: push word ptr [bp - 0xc]
00006D1E: lcall 0x1a2b, 0x20
00006D23: add sp, 4
00006D26: or ax, ax
00006D28: jne 0x6d2d
00006D2A: jmp 0x6dc8
00006D2D: xor ax, ax
00006D2F: push ax
00006D30: lcall 0xeec, 0x789
00006D35: xor ax, ax
00006D37: push ax
00006D38: push word ptr [0x7754]
00006D3C: push ax
00006D3D: lcall 0x10b4, 0x136
00006D42: mov ax, 0x20
00006D45: push ax
00006D46: push ax
00006D47: mov ax, 0x25e
00006D4A: push ax
00006D4B: mov ax, 0x1bf
00006D4E: push ax
00006D4F: mov ax, 2
00006D52: push ax
00006D53: lcall 0x104d, 0x96
00006D58: push word ptr [0x7742]
00006D5C: push word ptr [0x7740]
00006D60: lcall 0x185d, 4
00006D65: push word ptr [0x7748]
00006D69: push word ptr [0x7754]
00006D6D: lcall 0x183e, 2
00006D72: mov ax, 2
00006D75: push ax
00006D76: mov ax, 8
00006D79: push ax
00006D7A: lcall 0x183e, 0x47
00006D7F: push ds
00006D80: mov ax, 0xc6
00006D83: push ax
00006D84: mov ax, 0x140
00006D87: push ax
00006D88: mov ax, 0xdc
00006D8B: push ax
00006D8C: lcall 0x17b8, 0x50
00006D91: mov ax, 1
00006D94: push ax
00006D95: mov ax, 8
00006D98: push ax
00006D99: lcall 0x183e, 0x47
00006D9E: xor ax, ax
00006DA0: mov dx, 0x9c4
00006DA3: push ax
00006DA4: push dx
00006DA5: lcall 0x54a, 0x1c5
00006DAA: mov ax, 1
00006DAD: push ax
00006DAE: lcall 0xeec, 0x789
00006DB3: lcall 0x1a83, 0x20
00006DB8: push word ptr [bp - 0xa]
00006DBB: push word ptr [bp - 0xc]
00006DBE: lcall 0x1a8b, 0x20
00006DC3: add sp, 4
00006DC6: jmp 0x6de9
00006DC8: lcall 0x1a83, 0x25
00006DCD: jmp 0x6de9
00006DCF: lcall 0x1a83, 0x20
00006DD4: push word ptr [bp - 0xa]
00006DD7: push word ptr [bp - 0xc]
00006DDA: lcall 0x1a8b, 0x20
00006DDF: add sp, 4
00006DE2: jmp 0x6de9
00006DE4: lcall 0x1a83, 0x25
00006DE9: mov word ptr [bp - 4], 0
00006DEE: jmp 0x6dfb
00006DF0: cmp word ptr [bp - 4], -1
00006DF4: jne 0x6dfb
00006DF6: mov word ptr [bp - 4], 0
00006DFB: push word ptr [bp - 0xa]
00006DFE: push word ptr [bp - 0xc]
00006E01: lcall 0x1a10, 0x25
00006E06: cmp word ptr [bp - 4], 0
00006E0A: jne 0x6e0f
00006E0C: jmp 0x6c73
00006E0F: lcall 0x1a7e, 0x25
00006E14: lcall 0, 0x38d
00006E19: or ax, ax
00006E1B: je 0x6e42
00006E1D: push word ptr [0x772e]
00006E21: push word ptr [0x772c]
00006E25: lcall 0x1a10, 0x25
00006E2A: jmp 0x6e42
00006E2C: mov word ptr [0x772a], 0
00006E32: mov word ptr [0x7728], 0
00006E38: lcall 0x1a05, 0x20
00006E3D: lcall 0x1aab, 0x20
00006E42: lcall 0x19fe, 0x2a
00006E47: xor ax, ax
00006E49: pop di
00006E4A: pop si
00006E4B: mov sp, bp
00006E4D: pop bp
00006E4E: retf 
00006E4F: push bp
00006E50: mov bp, sp
00006E52: mov ax, 0x24
00006E55: push ax
00006E56: lcall 0, 0xfcd
00006E5B: add sp, 2
00006E5E: mov word ptr [0x7c5f], dx
00006E62: mov word ptr [0x7c5d], ax
00006E65: mov ax, 0x524
00006E68: push ax
00006E69: mov ax, 0x58
00006E6C: push ax
00006E6D: mov ax, 0x24
00006E70: push ax
00006E71: lcall 0, 0xfdc
00006E76: add sp, 6
00006E79: xor ax, ax
00006E7B: pop bp
00006E7C: retf 
00006E7D: push bp
00006E7E: mov bp, sp
00006E80: push word ptr [0x7c5f]
00006E84: push word ptr [0x7c5d]
00006E88: mov ax, 0x24
00006E8B: push ax
00006E8C: lcall 0, 0xfdc
00006E91: add sp, 6
00006E94: xor ax, ax
00006E96: pop bp
00006E97: retf 
00006E98: push ax
00006E99: push bx
00006E9A: push cx
00006E9B: push dx
00006E9C: push es
00006E9D: push ds
00006E9E: push si
00006E9F: push di
00006EA0: push bp
00006EA1: mov bp, 0x1ab5
00006EA4: mov ds, bp
00006EA6: mov bp, sp
00006EA8: sub sp, 2
00006EAB: mov ax, word ptr [bp + 0x10]
00006EAE: mov cl, 8
00006EB0: shr ax, cl
00006EB2: and al, 0xff
00006EB4: mov byte ptr [0x7c52], al
00006EB7: mov ax, word ptr [bp + 0x10]
00006EBA: mov cl, 0xf
00006EBC: shr ax, cl
00006EBE: and al, 1
00006EC0: mov byte ptr [0x7c5a], al
00006EC3: mov al, byte ptr [bp + 2]
00006EC6: and al, 0xff
00006EC8: mov byte ptr [0x7c59], al
00006ECB: mov al, byte ptr [bp + 0x10]
00006ECE: and al, 0xff
00006ED0: mov byte ptr [0x7c58], al
00006ED3: mov al, byte ptr [0x7c52]
00006ED6: and al, 1
00006ED8: mov byte ptr [0x7c57], al
00006EDB: mov al, byte ptr [0x7c52]
00006EDE: mov ah, 0
00006EE0: sar ax, 1
00006EE2: and al, 3
00006EE4: mov byte ptr [0x7c56], al
00006EE7: mov al, byte ptr [0x7c52]
00006EEA: and al, 8
00006EEC: mov byte ptr [0x7c55], al
00006EEF: mov al, byte ptr [0x7c52]
00006EF2: and al, 0x10
00006EF4: mov byte ptr [0x7c54], al
00006EF7: mov al, byte ptr [0x7c52]
00006EFA: and al, 0x20
00006EFC: mov byte ptr [0x7c53], al
00006EFF: mov word ptr [0xe4], 0
00006F05: mov word ptr [0xe2], 0
00006F0B: cmp byte ptr [0x7c59], 0xc
00006F10: jne 0x6f58
00006F12: inc word ptr [0xe0]
00006F16: mov ax, word ptr [0xe0]
00006F19: mov bx, 6
00006F1C: cdq 
00006F1D: idiv bx
00006F1F: mov word ptr [0xe0], dx
00006F23: cmp word ptr [0xe0], 5
00006F28: je 0x6f58
00006F2A: mov ax, word ptr [0xe2]
00006F2D: mov dx, word ptr [0xe4]
00006F31: add word ptr [0xe2], 1
00006F36: adc word ptr [0xe4], 0
00006F3B: cmp dx, 1
00006F3E: jb 0x6f2a
00006F40: jne 0x6f47
00006F42: cmp ax, 0x86a0
00006F45: jb 0x6f2a
00006F47: mov word ptr [bp + 0x10], 1
00006F4C: mov sp, bp
00006F4E: pop bp
00006F4F: pop di
00006F50: pop si
00006F51: pop ds
00006F52: pop es
00006F53: pop dx
00006F54: pop cx
00006F55: pop bx
00006F56: pop ax
00006F57: iret 
00006F58: mov word ptr [0xe0], 0
00006F5E: mov byte ptr [0x7bda], 0
00006F63: mov al, byte ptr [0x7c59]
00006F66: mov ah, 0
00006F68: mov word ptr [bp - 2], ax
00006F6B: or ax, ax
00006F6D: je 0x6f76
00006F6F: cmp ax, 2
00006F72: je 0x6fa5
00006F74: jmp 0x6fe0
00006F76: mov al, byte ptr [0x7c58]
00006F79: mov ah, 0
00006F7B: add ax, 0x41
00006F7E: push ax
00006F7F: push ds
00006F80: mov ax, 0xe6
00006F83: push ax
00006F84: push ds
00006F85: mov ax, 0x7c16
00006F88: push ax
00006F89: lcall 0, 0x48fb
00006F8E: add sp, 0xa
00006F91: push ds
00006F92: mov ax, 0x103
00006F95: push ax
00006F96: push ds
00006F97: mov ax, 0x7bda
00006F9A: push ax
00006F9B: lcall 0, 0x48fb
00006FA0: add sp, 8
00006FA3: jmp 0x6ff5
00006FA5: mov word ptr [0x7c5b], 1
00006FAB: cmp word ptr [0xde], 0
00006FB0: je 0x6fcf
00006FB2: mov al, byte ptr [0x7c58]
00006FB5: mov ah, 0
00006FB7: add ax, 0x41
00006FBA: push ax
00006FBB: push ds
00006FBC: mov ax, 0x11a
00006FBF: push ax
00006FC0: push ds
00006FC1: mov ax, 0x7c16
00006FC4: push ax
00006FC5: lcall 0, 0x48fb
00006FCA: add sp, 0xa
00006FCD: jmp 0x6ff5
00006FCF: mov word ptr [bp + 0x10], 3
00006FD4: mov sp, bp
00006FD6: pop bp
00006FD7: pop di
00006FD8: pop si
00006FD9: pop ds
00006FDA: pop es
00006FDB: pop dx
00006FDC: pop cx
00006FDD: pop bx
00006FDE: pop ax
00006FDF: iret 
00006FE0: push word ptr [bp - 2]
00006FE3: push ds
00006FE4: mov ax, 0x131
00006FE7: push ax
00006FE8: push ds
00006FE9: mov ax, 0x7c16
00006FEC: push ax
00006FED: lcall 0, 0x48fb
00006FF2: add sp, 0xa
00006FF5: xor ax, ax
00006FF7: push ax
00006FF8: push word ptr [0x7766]
00006FFC: push ax
00006FFD: lcall 0x10b4, 0x136
00007002: push word ptr [0x7748]
00007006: lcall 0x10b4, 0x343
0000700B: mov ax, 0xdc
0000700E: push ax
0000700F: mov ax, 0xb9
00007012: push ax
00007013: mov ax, 0x172
00007016: push ax
00007017: mov ax, 0x11d
0000701A: push ax
0000701B: mov ax, 3
0000701E: push ax
0000701F: lcall 0x104d, 0x96
00007024: push word ptr [0x773e]
00007028: push word ptr [0x773c]
0000702C: lcall 0x185d, 4
00007031: push word ptr [0x774e]
00007035: push word ptr [0x7766]
00007039: lcall 0x183e, 2
0000703E: push ds
0000703F: mov ax, 0x7c16
00007042: push ax
00007043: mov ax, 0xe6
00007046: push ax
00007047: mov ax, 0xc8
0000704A: push ax
0000704B: lcall 0x17b8, 0x50
00007050: push ds
00007051: mov ax, 0x7bda
00007054: push ax
00007055: mov ax, 0xe6
00007058: push ax
00007059: mov ax, 0xdc
0000705C: push ax
0000705D: lcall 0x17b8, 0x50
00007062: push ds
00007063: mov ax, 0x145
00007066: push ax
00007067: mov ax, 0xe6
0000706A: push ax
0000706B: mov ax, 0xf0
0000706E: push ax
0000706F: lcall 0x17b8, 0x50
00007074: push ds
00007075: mov ax, 0x15b
00007078: push ax
00007079: mov ax, 0xe6
0000707C: push ax
0000707D: mov ax, 0x104
00007080: push ax
00007081: lcall 0x17b8, 0x50
00007086: lcall 0, 0x2bdd
0000708B: or ax, ax
0000708D: je 0x7086
0000708F: mov word ptr [bp + 0x10], 0
00007094: mov sp, bp
00007096: pop bp
00007097: pop di
00007098: pop si
00007099: pop ds
0000709A: pop es
0000709B: pop dx
0000709C: pop cx
0000709D: pop bx
0000709E: pop ax
0000709F: iret 
000070A0: push bp
000070A1: mov bp, sp
000070A3: sub sp, 2
000070A6: push ds
000070A7: push es
000070A8: push si
000070A9: push di
000070AA: mov ax, 0x1ab5
000070AD: mov ds, ax
000070AF: mov ax, word ptr [bp + 6]
000070B2: nop 
000070B3: nop 
000070B4: nop 
000070B5: nop 
000070B6: nop 
000070B7: nop 
000070B8: nop 
000070B9: nop 
000070BA: dec ax
000070BB: jne 0x70b2
000070BD: mov word ptr [bp - 2], 0
000070C2: mov ax, word ptr [bp - 2]
000070C5: pop di
000070C6: pop si
000070C7: pop es
000070C8: pop ds
000070C9: mov sp, bp
000070CB: pop bp
000070CC: retf 2
000070CF: push bp
000070D0: mov bp, sp
000070D2: sub sp, 2
000070D5: push ds
000070D6: push es
000070D7: push si
000070D8: push di
000070D9: mov ax, 0x1ab5
000070DC: mov ds, ax
000070DE: pushf 
000070DF: push dx
000070E0: mov dx, 0x40
000070E3: mov es, dx
000070E5: pop dx
000070E6: mov di, 0x6c
000070E9: cli 
000070EA: mov dx, word ptr es:[di + 2]
000070EE: mov bx, word ptr es:[di]
000070F1: sti 
000070F2: mov word ptr [0x54ce], dx
000070F6: mov word ptr [0x54cc], bx
000070FA: cmp word ptr [bp + 6], 0
000070FE: jne 0x7139
00007100: add bx, 0x12
00007103: adc dx, 0
00007106: mov si, 0x200
00007109: xor cx, cx
0000710B: push si
0000710C: push cs
0000710D: call 0x70a0
00007110: inc cx
00007111: jne 0x711a
00007113: mov word ptr [bp - 2], 0xfc19
00007118: jmp 0x7150
0000711A: cmp dx, word ptr es:[di + 2]
0000711E: ja 0x710b
00007120: cmp bx, word ptr es:[di]
00007123: ja 0x710b
00007125: mov ax, si
00007127: mul cx
00007129: mov cx, 0x3e8
0000712C: div cx
0000712E: mov word ptr [0x54d0], ax
00007131: mov word ptr [0x54d2], 0
00007137: jmp 0x714b
00007139: cli 
0000713A: mov al, 0x34
0000713C: out 0x43, al
0000713E: xor al, al
00007140: out 0x40, al
00007142: out 0x40, al
00007144: sti 
00007145: mov word ptr [0x54d2], 1
0000714B: mov word ptr [bp - 2], 0
00007150: popf 
00007151: mov ax, word ptr [bp - 2]
00007154: pop di
00007155: pop si
00007156: pop es
00007157: pop ds
00007158: mov sp, bp
0000715A: pop bp
0000715B: retf 2
0000715E: push bp
0000715F: mov bp, sp
00007161: sub sp, 4
00007164: push ds
00007165: push es
00007166: push si
00007167: push di
00007168: mov ax, 0x1ab5
0000716B: mov ds, ax
0000716D: pushf 
0000716E: cmp word ptr [0x54d2], -1
00007173: jne 0x7187
00007175: cli 
00007176: mov al, 0x34
00007178: out 0x43, al
0000717A: xor al, al
0000717C: out 0x40, al
0000717E: out 0x40, al
00007180: sti 
00007181: mov word ptr [0x54d2], 1
00007187: push dx
00007188: mov dx, 0x40
0000718B: mov es, dx
0000718D: pop dx
0000718E: mov di, 0x6c
00007191: cli 
00007192: mov dx, word ptr es:[di + 2]
00007196: mov ax, word ptr es:[di]
00007199: sti 
0000719A: cmp word ptr [0x54d2], 0
0000719F: jne 0x71a8
000071A1: mov word ptr [bp - 4], 0
000071A6: jmp 0x71d0
000071A8: push ax
000071A9: xor al, al
000071AB: out 0x43, al
000071AD: in al, 0x40
000071AF: xchg al, ah
000071B1: in al, 0x40
000071B3: xchg al, ah
000071B5: not ax
000071B7: mov word ptr [bp - 4], ax
000071BA: pop ax
000071BB: cmp ax, word ptr es:[di]
000071BE: je 0x71d0
000071C0: cmp word ptr [bp - 4], 0x8000
000071C5: ja 0x71d0
000071C7: cli 
000071C8: mov ax, word ptr es:[di]
000071CB: mov dx, word ptr es:[di + 2]
000071CF: sti 
000071D0: cmp word ptr [0x54ce], dx
000071D4: ja 0x71de
000071D6: jb 0x71e4
000071D8: cmp word ptr [0x54cc], ax
000071DC: jbe 0x71e4
000071DE: add ax, 0xb0
000071E1: adc dx, 0x18
000071E4: sub ax, word ptr [0x54cc]
000071E8: sbb dx, word ptr [0x54ce]
000071EC: mov bx, 0x225
000071EF: lcall 0x7ff, 8
000071F4: mov bx, 0xa
000071F7: lcall 0x7ff, 0x32
000071FC: push dx
000071FD: push ax
000071FE: mov ax, 0x346
00007201: mul word ptr [bp - 4]
00007204: mov bx, 0x3e8
00007207: lcall 0x7ff, 0x32
0000720C: mov bx, 0x3e8
0000720F: lcall 0x7ff, 0x32
00007214: pop bx
00007215: add ax, bx
00007217: pop bx
00007218: adc dx, bx
0000721A: mov word ptr [bp - 2], ax
0000721D: popf 
0000721E: mov ax, word ptr [bp - 2]
00007221: pop di
00007222: pop si
00007223: pop es
00007224: pop ds
00007225: mov sp, bp
00007227: pop bp
00007228: retf 
00007229: push bp
0000722A: mov bp, sp
0000722C: sub sp, 2
0000722F: push ds
00007230: push es
00007231: push si
00007232: push di
00007233: mov ax, 0x1ab5
00007236: mov ds, ax
00007238: push cs
00007239: call 0x715e
0000723C: cmp word ptr [bp + 8], dx
0000723F: ja 0x7248
00007241: jb 0x724f
00007243: cmp word ptr [bp + 6], ax
00007246: jbe 0x724f
00007248: add ax, 0x5c00
0000724B: adc dx, 0x526
0000724F: sub ax, word ptr [bp + 6]
00007252: sbb dx, word ptr [bp + 8]
00007255: mov word ptr [bp - 2], ax
00007258: mov ax, word ptr [bp - 2]
0000725B: pop di
0000725C: pop si
0000725D: pop es
0000725E: pop ds
0000725F: mov sp, bp
00007261: pop bp
00007262: retf 4
00007265: push bp
00007266: mov bp, sp
00007268: sub sp, 6
0000726B: push ds
0000726C: push es
0000726D: push si
0000726E: push di
0000726F: mov ax, 0x1ab5
00007272: mov ds, ax
00007274: push bx
00007275: push cx
00007276: push dx
00007277: push cs
00007278: call 0x715e
0000727B: mov word ptr [bp - 4], dx
0000727E: mov word ptr [bp - 6], ax
00007281: mov si, word ptr [0x54d0]
00007285: mov di, word ptr [0x54d2]
00007289: cmp word ptr [0x54d8], 0
0000728E: je 0x72a2
00007290: push bp
00007291: mov ah, 1
00007293: int 0x16
00007295: pop bp
00007296: je 0x72a2
00007298: push bp
00007299: mov ah, 0
0000729B: int 0x16
0000729D: pop bp
0000729E: cmp al, 0x1b
000072A0: je 0x72d6
000072A2: cmp di, 0
000072A5: jne 0x72b8
000072A7: sub word ptr [bp + 6], 1
000072AB: sbb word ptr [bp + 8], 0
000072AF: jl 0x72ce
000072B1: push si
000072B2: push cs
000072B3: call 0x70a0
000072B6: jmp 0x7289
000072B8: push word ptr [bp - 4]
000072BB: push word ptr [bp - 6]
000072BE: push cs
000072BF: call 0x7229
000072C2: cmp dx, word ptr [bp + 8]
000072C5: ja 0x72ce
000072C7: jb 0x7289
000072C9: cmp ax, word ptr [bp + 6]
000072CC: jb 0x7289
000072CE: mov word ptr [bp - 2], 0
000072D3: clc 
000072D4: jmp 0x72dc
000072D6: mov word ptr [bp - 2], 0xffec
000072DB: stc 
000072DC: pop dx
000072DD: pop cx
000072DE: pop bx
000072DF: mov ax, word ptr [bp - 2]
000072E2: pop di
000072E3: pop si
000072E4: pop es
000072E5: pop ds
000072E6: mov sp, bp
000072E8: pop bp
000072E9: retf 4
000072EC: push bp
000072ED: mov bp, sp
000072EF: sub sp, 2
000072F2: push ds
000072F3: push es
000072F4: push si
000072F5: push di
000072F6: mov ax, 0x1ab5
000072F9: mov ds, ax
000072FB: mov ax, word ptr [0x54d8]
000072FE: mov word ptr [bp - 2], ax
00007301: mov ax, word ptr [bp + 6]
00007304: cmp ax, 0
00007307: je 0x730c
00007309: mov ax, 1
0000730C: mov word ptr [0x54d8], ax
0000730F: mov ax, word ptr [bp - 2]
00007312: pop di
00007313: pop si
00007314: pop es
00007315: pop ds
00007316: mov sp, bp
00007318: pop bp
00007319: retf 2
0000731C: push di
0000731D: push bx
0000731E: mov di, 0xffff
00007321: xor bx, bx
00007323: push bx
00007324: lodsb al, byte ptr [si]
00007325: sub al, cl
00007327: imul al
00007329: mov bx, ax
0000732B: lodsb al, byte ptr [si]
0000732C: sub al, dh
0000732E: imul al
00007330: add bx, ax
00007332: lodsb al, byte ptr [si]
00007333: sub al, dl
00007335: imul al
00007337: add ax, bx
00007339: pop bx
0000733A: jne 0x7340
0000733C: mov bl, bh
0000733E: jmp 0x734e
00007340: cmp ax, di
00007342: jae 0x7348
00007344: mov bl, bh
00007346: mov di, ax
00007348: inc bh
0000734A: cmp bh, ch
0000734C: jne 0x7323
0000734E: mov al, bl
00007350: pop bx
00007351: pop di
00007352: ret 
00007353: push bp
00007354: mov bp, sp
00007356: sub sp, 2
00007359: push ds
0000735A: push es
0000735B: push si
0000735C: push di
0000735D: mov ax, 0x1ab5
00007360: mov ds, ax
00007362: mov cl, byte ptr [bp + 0xa]
00007365: mov dh, byte ptr [bp + 8]
00007368: mov dl, byte ptr [bp + 6]
0000736B: and cl, 0x3f
0000736E: and dx, 0x3f3f
00007372: mov ax, word ptr [bp + 0xc]
00007375: cmp ax, 4
00007378: je 0x7386
0000737A: cmp ax, 5
0000737D: je 0x7390
0000737F: mov word ptr [bp - 2], 0xfff7
00007384: jmp 0x739d
00007386: mov ch, 0x10
00007388: mov si, 0x3adc
0000738B: call 0x731c
0000738E: jmp 0x7398
00007390: xor ch, ch
00007392: mov si, 0x3b0c
00007395: call 0x731c
00007398: xor ah, ah
0000739A: mov word ptr [bp - 2], ax
0000739D: mov ax, word ptr [bp - 2]
000073A0: pop di
000073A1: pop si
000073A2: pop es
000073A3: pop ds
000073A4: mov sp, bp
000073A6: pop bp
000073A7: retf 8
000073AA: push bp
000073AB: mov bp, sp
000073AD: sub sp, 2
000073B0: push ds
000073B1: push es
000073B2: push si
000073B3: push di
000073B4: mov ax, 0x1ab5
000073B7: mov ds, ax
000073B9: mov ax, word ptr [bp + 6]
000073BC: and al, 0x3f
000073BE: mov ah, 0x24
000073C0: and ah, al
000073C2: mov bh, 0x12
000073C4: and bh, al
000073C6: mov ch, 9
000073C8: and ch, al
000073CA: xor cl, cl
000073CC: or ah, ah
000073CE: je 0x73e0
000073D0: mov cl, 0x15
000073D2: cmp ah, 0x20
000073D5: je 0x73e0
000073D7: mov cl, 0x2a
000073D9: cmp ah, 4
000073DC: je 0x73e0
000073DE: mov cl, 0x3f
000073E0: xor dh, dh
000073E2: or bh, bh
000073E4: je 0x73f6
000073E6: mov dh, 0x15
000073E8: cmp bh, 0x10
000073EB: je 0x73f6
000073ED: mov dh, 0x2a
000073EF: cmp bh, 2
000073F2: je 0x73f6
000073F4: mov dh, 0x3f
000073F6: xor dl, dl
000073F8: or ch, ch
000073FA: je 0x740c
000073FC: mov dl, 0x15
000073FE: cmp ch, 8
00007401: je 0x740c
00007403: mov dl, 0x2a
00007405: cmp ch, 1
00007408: je 0x740c
0000740A: mov dl, 0x3f
0000740C: mov ch, 0x10
0000740E: mov si, 0x3adc
00007411: call 0x731c
00007414: xor ah, ah
00007416: mov word ptr [bp - 2], ax
00007419: mov ax, word ptr [bp - 2]
0000741C: pop di
0000741D: pop si
0000741E: pop es
0000741F: pop ds
00007420: mov sp, bp
00007422: pop bp
00007423: retf 2
00007426: push bp
00007427: mov bp, sp
00007429: sub sp, 2
0000742C: push ds
0000742D: push es
0000742E: push si
0000742F: push di
00007430: mov ax, 0x1ab5
00007433: mov ds, ax
00007435: lds si, ptr [bp + 0xa]
00007438: les di, ptr [bp + 6]
0000743B: lodsb al, byte ptr [si]
0000743C: xor ah, ah
0000743E: mov bx, ax
00007440: shl bx, 1
00007442: add bx, ax
00007444: mov ax, 0x1ab5
00007447: mov ds, ax
00007449: mov si, 0x3adc
0000744C: add si, bx
0000744E: mov cx, 3
00007451: rep movsb byte ptr es:[di], byte ptr [si]
00007453: lds si, ptr [bp + 0xa]
00007456: mov bl, byte ptr [si + 1]
00007459: and bl, 3
0000745C: mov ax, 0x1ab5
0000745F: mov ds, ax
00007461: mov si, 0x3ab8
00007464: cmp bl, 0
00007467: je 0x747c
00007469: mov si, 0x3ac1
0000746C: cmp bl, 1
0000746F: je 0x747c
00007471: mov si, 0x3aca
00007474: cmp bl, 2
00007477: je 0x747c
00007479: mov si, 0x3ad3
0000747C: mov cx, 9
0000747F: rep movsb byte ptr es:[di], byte ptr [si]
00007481: mov word ptr [bp - 2], 0
00007486: mov ax, word ptr [bp - 2]
00007489: pop di
0000748A: pop si
0000748B: pop es
0000748C: pop ds
0000748D: mov sp, bp
0000748F: pop bp
00007490: retf 8
00007493: push bp
00007494: mov bp, sp
00007496: sub sp, 2
00007499: push ds
0000749A: push es
0000749B: push si
0000749C: push di
0000749D: mov ax, 0x1ab5
000074A0: mov ds, ax
000074A2: lds si, ptr [bp + 0xa]
000074A5: les di, ptr [bp + 6]
000074A8: xor al, al
000074AA: mov cx, 3
000074AD: rep stosb byte ptr es:[di], al
000074AF: lodsb al, byte ptr [si]
000074B0: xor ah, ah
000074B2: mov bx, ax
000074B4: shl bx, 1
000074B6: add bx, ax
000074B8: mov ax, 0x1ab5
000074BB: mov ds, ax
000074BD: mov si, 0x3adc
000074C0: add si, bx
000074C2: mov cx, 3
000074C5: rep movsb byte ptr es:[di], byte ptr [si]
000074C7: mov word ptr [bp - 2], 0
000074CC: mov ax, word ptr [bp - 2]
000074CF: pop di
000074D0: pop si
000074D1: pop es
000074D2: pop ds
000074D3: mov sp, bp
000074D5: pop bp
000074D6: retf 8
000074D9: push bp
000074DA: mov bp, sp
000074DC: sub sp, 2
000074DF: push ds
000074E0: push es
000074E1: push si
000074E2: push di
000074E3: mov ax, 0x1ab5
000074E6: mov ds, ax
000074E8: lds si, ptr [bp + 0xa]
000074EB: les di, ptr [bp + 6]
000074EE: mov cx, word ptr [bp + 0xe]
000074F1: or cx, cx
000074F3: jne 0x74fc
000074F5: mov word ptr [bp - 2], 0xfff6
000074FA: jmp 0x755d
000074FC: cmp cx, 0x10
000074FF: jbe 0x7504
00007501: mov cx, 0x10
00007504: lodsb al, byte ptr [si]
00007505: mov dh, 0x24
00007507: and dh, al
00007509: mov dl, 0x12
0000750B: and dl, al
0000750D: mov ah, 9
0000750F: and ah, al
00007511: xor al, al
00007513: or dh, dh
00007515: je 0x7527
00007517: mov al, 0x15
00007519: cmp dh, 0x20
0000751C: je 0x7527
0000751E: mov al, 0x2a
00007520: cmp dh, 4
00007523: je 0x7527
00007525: mov al, 0x3f
00007527: stosb byte ptr es:[di], al
00007528: xor al, al
0000752A: or dl, dl
0000752C: je 0x753e
0000752E: mov al, 0x15
00007530: cmp dl, 0x10
00007533: je 0x753e
00007535: mov al, 0x2a
00007537: cmp dl, 2
0000753A: je 0x753e
0000753C: mov al, 0x3f
0000753E: stosb byte ptr es:[di], al
0000753F: xor al, al
00007541: or ah, ah
00007543: je 0x7555
00007545: mov al, 0x15
00007547: cmp ah, 8
0000754A: je 0x7555
0000754C: mov al, 0x2a
0000754E: cmp ah, 1
00007551: je 0x7555
00007553: mov al, 0x3f
00007555: stosb byte ptr es:[di], al
00007556: loop 0x7504
00007558: mov word ptr [bp - 2], 0
0000755D: mov ax, word ptr [bp - 2]
00007560: pop di
00007561: pop si
00007562: pop es
00007563: pop ds
00007564: mov sp, bp
00007566: pop bp
00007567: retf 0xa
0000756A: push bp
0000756B: mov bp, sp
0000756D: sub sp, 8
00007570: push ds
00007571: push es
00007572: push si
00007573: push di
00007574: mov ax, 0x1ab5
00007577: mov ds, ax
00007579: lds si, ptr [bp + 0xa]
0000757C: cmp word ptr [bp + 0xe], 0
00007580: jne 0x758a
00007582: mov word ptr [bp - 2], 0xfff6
00007587: jmp 0x7632
0000758A: mov ax, 4
0000758D: push ax
0000758E: lodsb al, byte ptr [si]
0000758F: push ax
00007590: lodsb al, byte ptr [si]
00007591: push ax
00007592: lodsb al, byte ptr [si]
00007593: push ax
00007594: push cs
00007595: call 0x7353
00007598: mov word ptr [bp - 8], ax
0000759B: dec word ptr [bp + 0xe]
0000759E: jne 0x75a3
000075A0: jmp 0x762d
000075A3: xor cx, cx
000075A5: cmp word ptr [bp + 0xe], 3
000075A9: jbe 0x75b0
000075AB: mov word ptr [bp + 0xe], 3
000075B0: mov ax, 0x1ab5
000075B3: mov es, ax
000075B5: mov di, 0x3ab8
000075B8: cmp cx, 0
000075BB: je 0x75d0
000075BD: mov di, 0x3ac1
000075C0: cmp cx, 1
000075C3: je 0x75d0
000075C5: mov di, 0x3aca
000075C8: cmp cx, 2
000075CB: je 0x75d0
000075CD: mov di, 0x3ad3
000075D0: push ds
000075D1: push si
000075D2: push cx
000075D3: xor bx, bx
000075D5: mov word ptr [bp - 6], 0xffff
000075DA: mov ax, bx
000075DC: shl ax, 1
000075DE: add ax, bx
000075E0: add di, ax
000075E2: mov cl, byte ptr es:[di]
000075E5: mov dh, byte ptr es:[di + 1]
000075E9: mov dl, byte ptr es:[di + 2]
000075ED: lodsb al, byte ptr [si]
000075EE: sub al, cl
000075F0: imul al
000075F2: mov word ptr [bp - 4], ax
000075F5: lodsb al, byte ptr [si]
000075F6: sub al, dh
000075F8: imul al
000075FA: add word ptr [bp - 4], ax
000075FD: lodsb al, byte ptr [si]
000075FE: sub al, dl
00007600: imul al
00007602: add word ptr [bp - 4], ax
00007605: inc bx
00007606: cmp bx, word ptr [bp + 0xe]
00007609: jb 0x75da
0000760B: pop cx
0000760C: pop si
0000760D: pop ds
0000760E: mov ax, word ptr [bp - 4]
00007611: cmp word ptr [bp - 6], ax
00007614: jb 0x7620
00007616: mov word ptr [bp - 6], ax
00007619: mov byte ptr [bp - 7], cl
0000761C: or ax, ax
0000761E: je 0x7632
00007620: inc cx
00007621: cmp cx, 4
00007624: jb 0x75b0
00007626: les di, ptr [bp + 6]
00007629: mov ax, word ptr [bp - 8]
0000762C: stosw word ptr es:[di], ax
0000762D: mov word ptr [bp - 2], 0
00007632: mov ax, word ptr [bp - 2]
00007635: pop di
00007636: pop si
00007637: pop es
00007638: pop ds
00007639: mov sp, bp
0000763B: pop bp
0000763C: retf 0xa
0000763F: push bp
00007640: mov bp, sp
00007642: sub sp, 2
00007645: push ds
00007646: push es
00007647: push si
00007648: push di
00007649: mov ax, 0x1ab5
0000764C: mov ds, ax
0000764E: lds si, ptr [bp + 0xa]
00007651: add si, 3
00007654: les di, ptr [bp + 6]
00007657: mov ax, 4
0000765A: push ax
0000765B: lodsb al, byte ptr [si]
0000765C: push ax
0000765D: lodsb al, byte ptr [si]
0000765E: push ax
0000765F: lodsb al, byte ptr [si]
00007660: push ax
00007661: push cs
00007662: call 0x7353
00007665: stosb byte ptr es:[di], al
00007666: mov word ptr [bp - 2], 0
0000766B: mov ax, word ptr [bp - 2]
0000766E: pop di
0000766F: pop si
00007670: pop es
00007671: pop ds
00007672: mov sp, bp
00007674: pop bp
00007675: retf 8
00007678: push bp
00007679: mov bp, sp
0000767B: sub sp, 6
0000767E: push ds
0000767F: push es
00007680: push si
00007681: push di
00007682: mov ax, 0x1ab5
00007685: mov ds, ax
00007687: mov byte ptr [bp - 6], 0
0000768B: mov byte ptr [bp - 5], 8
0000768F: mov byte ptr [bp - 4], 1
00007693: mov byte ptr [bp - 3], 9
00007697: lds si, ptr [bp + 0xa]
0000769A: les di, ptr [bp + 6]
0000769D: mov cx, word ptr [bp + 0xe]
000076A0: xor bx, bx
000076A2: or cx, cx
000076A4: jne 0x76ad
000076A6: mov word ptr [bp - 2], 0xfff6
000076AB: jmp 0x76fd
000076AD: cmp cx, 0x10
000076B0: jbe 0x76b5
000076B2: mov cx, 0x10
000076B5: lodsb al, byte ptr [si]
000076B6: mov bl, al
000076B8: lodsb al, byte ptr [si]
000076B9: mov dh, al
000076BB: lodsb al, byte ptr [si]
000076BC: mov dl, al
000076BE: push ds
000076BF: push si
000076C0: mov ax, 0x1ab5
000076C3: mov ds, ax
000076C5: mov si, 0x3a2a
000076C8: mov al, byte ptr [bx + si]
000076CA: mov bl, dh
000076CC: mov dh, byte ptr [bx + si]
000076CE: mov bl, dl
000076D0: mov dl, byte ptr [bx + si]
000076D2: xor si, si
000076D4: mov bl, al
000076D6: mov si, bx
000076D8: mov al, byte ptr [bp + si - 6]
000076DB: shl al, 1
000076DD: shl al, 1
000076DF: mov bl, dh
000076E1: mov si, bx
000076E3: mov dh, byte ptr [bp + si - 6]
000076E6: shl dh, 1
000076E8: mov bl, dl
000076EA: mov si, bx
000076EC: mov dl, byte ptr [bp + si - 6]
000076EF: or al, dh
000076F1: or al, dl
000076F3: pop si
000076F4: pop ds
000076F5: stosb byte ptr es:[di], al
000076F6: loop 0x76b5
000076F8: mov word ptr [bp - 2], 0
000076FD: mov ax, word ptr [bp - 2]
00007700: pop di
00007701: pop si
00007702: pop es
00007703: pop ds
00007704: mov sp, bp
00007706: pop bp
00007707: retf 0xa
0000770A: push bp
0000770B: mov bp, sp
0000770D: sub sp, 2
00007710: push ds
00007711: push es
00007712: push si
00007713: push di
00007714: mov ax, 0x1ab5
00007717: mov ds, ax
00007719: lds si, ptr [bp + 0xc]
0000771C: les di, ptr [bp + 6]
0000771F: mov dh, 0x1e
00007721: mov dl, 0x3b
00007723: mov ch, 0xb
00007725: lodsb al, byte ptr [si]
00007726: mul dh
00007728: mov bx, ax
0000772A: lodsb al, byte ptr [si]
0000772B: mul dl
0000772D: add bx, ax
0000772F: lodsb al, byte ptr [si]
00007730: mul ch
00007732: add ax, bx
00007734: mov bl, 0x64
00007736: div bl
00007738: mov bh, 0x31
0000773A: sub bh, ah
0000773C: adc al, 0
0000773E: cmp al, byte ptr [bp + 0xa]
00007741: jbe 0x7747
00007743: cmp al, 0x15
00007745: jne 0x7749
00007747: xor al, al
00007749: stosb byte ptr es:[di], al
0000774A: dec word ptr [bp + 0x10]
0000774D: jne 0x7725
0000774F: mov word ptr [bp - 2], 0
00007754: mov ax, word ptr [bp - 2]
00007757: pop di
00007758: pop si
00007759: pop es
0000775A: pop ds
0000775B: mov sp, bp
0000775D: pop bp
0000775E: retf 0xc
00007761: push bp
00007762: mov bp, sp
00007764: sub sp, 0x32
00007767: push ds
00007768: push es
00007769: push si
0000776A: push di
0000776B: mov ax, 0x1ab5
0000776E: mov ds, ax
00007770: lds si, ptr [bp + 0xe]
00007773: les di, ptr [bp + 6]
00007776: mov ah, byte ptr [si + 0x74]
00007779: mov al, byte ptr es:[di + 0x74]
0000777D: cmp ax, 0x200
00007780: jne 0x77bc
00007782: mov bx, word ptr [si + 0x1c]
00007785: lds si, ptr [bp + 0xa]
00007788: mov ax, 0x1ab5
0000778B: mov es, ax
0000778D: mov di, 0x4120
00007790: cmp bx, 3
00007793: jne 0x77a9
00007795: mov cx, 0x10
00007798: lodsb al, byte ptr [si]
00007799: cmp al, 2
0000779B: jbe 0x77a1
0000779D: cmp al, 0x38
0000779F: jne 0x77a3
000077A1: xor al, al
000077A3: stosb byte ptr es:[di], al
000077A4: loop 0x7798
000077A6: jmp 0x7894
000077A9: mov ax, 0x10
000077AC: push ax
000077AD: push ds
000077AE: push si
000077AF: mov ax, 2
000077B2: push ax
000077B3: push es
000077B4: push di
000077B5: push cs
000077B6: call 0x770a
000077B9: jmp 0x7894
000077BC: cmp ax, 0x202
000077BF: jne 0x7814
000077C1: mov bx, word ptr [si + 0x1c]
000077C4: lds si, ptr [bp + 0xa]
000077C7: mov ax, ss
000077C9: mov es, ax
000077CB: lea di, [bp - 0x32]
000077CE: cmp bx, 3
000077D1: jne 0x77e1
000077D3: mov ax, 0x10
000077D6: push ax
000077D7: push ds
000077D8: push si
000077D9: push es
000077DA: push di
000077DB: push cs
000077DC: call 0x74d9
000077DF: jmp 0x77e6
000077E1: mov cx, 0x18
000077E4: rep movsw word ptr es:[di], word ptr [si]
000077E6: mov ax, 0x1ab5
000077E9: mov ds, ax
000077EB: lea di, [bp - 0x32]
000077EE: xor bx, bx
000077F0: mov si, 0x3adc
000077F3: mov ch, 0x10
000077F5: mov cl, byte ptr es:[di]
000077F8: mov dh, byte ptr es:[di + 1]
000077FC: mov dl, byte ptr es:[di + 2]
00007800: call 0x731c
00007803: mov si, 0x3f90
00007806: mov byte ptr [bx + si], al
00007808: add di, 3
0000780B: inc bx
0000780C: cmp bx, 0x10
0000780F: jb 0x77f0
00007811: jmp 0x7894
00007814: cmp ax, 0x203
00007817: jne 0x7841
00007819: mov bx, word ptr [si + 0x1c]
0000781C: lds si, ptr [bp + 0xa]
0000781F: mov ax, 0x1ab5
00007822: mov es, ax
00007824: mov di, 0x4130
00007827: cmp bx, 3
0000782A: jne 0x7833
0000782C: mov cx, 0x10
0000782F: rep movsb byte ptr es:[di], byte ptr [si]
00007831: jmp 0x7894
00007833: mov ax, 0x10
00007836: push ax
00007837: push ds
00007838: push si
00007839: push es
0000783A: push di
0000783B: push cs
0000783C: call 0x7678
0000783F: jmp 0x7894
00007841: cmp ax, 0x300
00007844: jne 0x7863
00007846: lds si, ptr [bp + 0xa]
00007849: mov ax, 0x1ab5
0000784C: mov es, ax
0000784E: mov di, 0x4140
00007851: mov ax, 0x100
00007854: push ax
00007855: push ds
00007856: push si
00007857: mov ax, 8
0000785A: push ax
0000785B: push es
0000785C: push di
0000785D: push cs
0000785E: call 0x770a
00007861: jmp 0x7894
00007863: cmp ax, 0x303
00007866: jne 0x7894
00007868: mov ax, 0x1ab5
0000786B: mov ds, ax
0000786D: les di, ptr [bp + 0xa]
00007870: xor bx, bx
00007872: mov si, 0x3b0c
00007875: xor ch, ch
00007877: mov cl, byte ptr es:[di]
0000787A: mov dh, byte ptr es:[di + 1]
0000787E: mov dl, byte ptr es:[di + 2]
00007882: call 0x731c
00007885: mov si, 0x4020
00007888: mov byte ptr [bx + si], al
0000788A: add di, 3
0000788D: inc bx
0000788E: cmp bx, 0x100
00007892: jb 0x7872
00007894: mov word ptr [bp - 2], 0
00007899: mov ax, word ptr [bp - 2]
0000789C: pop di
0000789D: pop si
0000789E: pop es
0000789F: pop ds
000078A0: mov sp, bp
000078A2: pop bp
000078A3: retf 0xc
000078A6: push bp
000078A7: mov bp, sp
000078A9: sub sp, 2
000078AC: push ds
000078AD: push es
000078AE: push si
000078AF: push di
000078B0: mov ax, 0x1ab5
000078B3: mov ds, ax
000078B5: mov ax, 0x1ab5
000078B8: mov es, ax
000078BA: lds si, ptr [bp + 6]
000078BD: mov ax, word ptr [bp + 0xa]
000078C0: cmp ax, 0
000078C3: jne 0x78c7
000078C5: jmp 0x78df
000078C7: cmp ax, 1
000078CA: jne 0x78da
000078CC: push ds
000078CD: push si
000078CE: push es
000078CF: mov di, 0x3aac
000078D2: push di
000078D3: push cs
000078D4: call 0x7426
000078D7: jmp 0x79b0
000078DA: cmp ax, 2
000078DD: jne 0x78e6
000078DF: mov di, 0x3aaa
000078E2: movsw word ptr es:[di], word ptr [si]
000078E3: jmp 0x79b0
000078E6: cmp ax, 3
000078E9: jne 0x78fc
000078EB: mov di, 0x3adc
000078EE: mov ax, 0x10
000078F1: push ax
000078F2: push ds
000078F3: push si
000078F4: push es
000078F5: push di
000078F6: push cs
000078F7: call 0x74d9
000078FA: jmp 0x7909
000078FC: cmp ax, 4
000078FF: jne 0x7957
00007901: mov di, 0x3adc
00007904: mov cx, 0x18
00007907: rep movsw word ptr es:[di], word ptr [si]
00007909: mov ax, 0x1ab5
0000790C: mov ds, ax
0000790E: mov di, 0x3e0c
00007911: xor bx, bx
00007913: mov si, 0x3adc
00007916: mov ch, 0x10
00007918: mov cl, byte ptr es:[di]
0000791B: mov dh, byte ptr es:[di + 1]
0000791F: mov dl, byte ptr es:[di + 2]
00007923: call 0x731c
00007926: mov si, 0x3fe0
00007929: mov byte ptr [bx + si], al
0000792B: add di, 3
0000792E: inc bx
0000792F: cmp bx, 0x40
00007932: jb 0x7913
00007934: mov di, 0x3f8c
00007937: xor bx, bx
00007939: mov si, 0x3adc
0000793C: mov ch, 0x10
0000793E: mov cl, bh
00007940: mov dh, bh
00007942: mov dl, bh
00007944: call 0x731c
00007947: mov byte ptr es:[di], al
0000794A: add bh, 0x3f
0000794D: inc bl
0000794F: inc di
00007950: cmp bl, 2
00007953: jb 0x7939
00007955: jmp 0x79b0
00007957: cmp ax, 5
0000795A: jne 0x79b7
0000795C: mov di, 0x3b0c
0000795F: mov cx, 0x180
00007962: rep movsw word ptr es:[di], word ptr [si]
00007964: mov ax, 0x1ab5
00007967: mov ds, ax
00007969: mov di, 0x3ecc
0000796C: xor bx, bx
0000796E: mov si, 0x3b0c
00007971: xor ch, ch
00007973: mov cl, byte ptr es:[di]
00007976: mov dh, byte ptr es:[di + 1]
0000797A: mov dl, byte ptr es:[di + 2]
0000797E: call 0x731c
00007981: mov si, 0x3fa0
00007984: mov byte ptr [bx + si], al
00007986: add di, 3
00007989: inc bx
0000798A: cmp bx, 0x40
0000798D: jb 0x796e
0000798F: mov di, 0x3f8e
00007992: xor bx, bx
00007994: mov si, 0x3b0c
00007997: xor ch, ch
00007999: mov cl, bh
0000799B: mov dh, bh
0000799D: mov dl, bh
0000799F: call 0x731c
000079A2: mov byte ptr es:[di], al
000079A5: add bh, 0x3f
000079A8: inc bl
000079AA: inc di
000079AB: cmp bl, 2
000079AE: jb 0x7994
000079B0: mov word ptr [bp - 2], 0
000079B5: jmp 0x79bc
000079B7: mov word ptr [bp - 2], 0xfff7
000079BC: mov ax, word ptr [bp - 2]
000079BF: pop di
000079C0: pop si
000079C1: pop es
000079C2: pop ds
000079C3: mov sp, bp
000079C5: pop bp
000079C6: retf 6
000079C9: push bp
000079CA: mov bp, sp
000079CC: sub sp, 6
000079CF: push ds
000079D0: push es
000079D1: push si
000079D2: push di
000079D3: mov ax, 0x1ab5
000079D6: mov ds, ax
000079D8: les di, ptr [bp + 6]
000079DB: mov ax, word ptr [bp + 0xa]
000079DE: cmp ax, 0
000079E1: jne 0x79e5
000079E3: jmp 0x7a00
000079E5: cmp ax, 1
000079E8: jne 0x79fb
000079EA: mov ax, 4
000079ED: push ax
000079EE: push ds
000079EF: mov si, 0x3aac
000079F2: push si
000079F3: push es
000079F4: push di
000079F5: push cs
000079F6: call 0x756a
000079F9: jmp 0x7a3d
000079FB: cmp ax, 2
000079FE: jne 0x7a06
00007A00: mov si, 0x3aaa
00007A03: movsw word ptr es:[di], word ptr [si]
00007A04: jmp 0x7a3d
00007A06: cmp ax, 3
00007A09: jne 0x7a21
00007A0B: mov si, 0x3adc
00007A0E: mov ax, 0x10
00007A11: push ax
00007A12: push ds
00007A13: push si
00007A14: push es
00007A15: push di
00007A16: push cs
00007A17: call 0x7678
00007A1A: mov byte ptr es:[di + 0x10], 0
00007A1F: jmp 0x7a3d
00007A21: cmp ax, 4
00007A24: jne 0x7a30
00007A26: mov si, 0x3adc
00007A29: mov cx, 0x18
00007A2C: rep movsw word ptr es:[di], word ptr [si]
00007A2E: jmp 0x7a3d
00007A30: cmp ax, 5
00007A33: jne 0x7a44
00007A35: mov si, 0x3b0c
00007A38: mov cx, 0x180
00007A3B: rep movsw word ptr es:[di], word ptr [si]
00007A3D: mov word ptr [bp - 2], 0
00007A42: jmp 0x7a49
00007A44: mov word ptr [bp - 2], 0xfff7
00007A49: mov ax, word ptr [bp - 2]
00007A4C: pop di
00007A4D: pop si
00007A4E: pop es
00007A4F: pop ds
00007A50: mov sp, bp
00007A52: pop bp
00007A53: retf 6
00007A56: push bp
00007A57: mov bp, sp
00007A59: sub sp, 2
00007A5C: push ds
00007A5D: push es
00007A5E: push si
00007A5F: push di
00007A60: mov ax, 0x1ab5
00007A63: mov ds, ax
00007A65: mov word ptr [bp - 2], 0xffe8
00007A6A: les di, ptr [bp + 0x10]
00007A6D: mov ax, word ptr [bp + 0xa]
00007A70: push ax
00007A71: lcall 0x98e, 0x12a
00007A76: jae 0x7a80
00007A78: mov word ptr [bp - 2], 0xfc19
00007A7D: jmp 0x7bf3
00007A80: mov ds, dx
00007A82: mov si, ax
00007A84: mov word ptr es:[di], 0xca00
00007A89: mov byte ptr es:[di + 2], 2
00007A8E: mov byte ptr es:[di + 3], 2
00007A93: mov ax, word ptr [bp + 0xa]
00007A96: mov word ptr es:[di + 4], ax
00007A9A: xor ax, ax
00007A9C: mov word ptr es:[di + 6], ax
00007AA0: mov word ptr es:[di + 8], ax
00007AA4: mov ax, word ptr [bp + 8]
00007AA7: mov word ptr es:[di + 0x2c], ax
00007AAB: dec ax
00007AAC: mov word ptr es:[di + 0xa], ax
00007AB0: mov ax, word ptr [bp + 6]
00007AB3: mov word ptr es:[di + 0x2e], ax
00007AB7: dec ax
00007AB8: mov word ptr es:[di + 0xc], ax
00007ABC: xor ah, ah
00007ABE: mov al, byte ptr [si + 0x1e]
00007AC1: mov byte ptr es:[di + 0x12], al
00007AC5: mul word ptr [bp + 6]
00007AC8: mov word ptr es:[di + 0x34], ax
00007ACC: mov ax, word ptr [si + 0x18]
00007ACF: mov word ptr es:[di + 0xe], ax
00007AD3: mov ax, word ptr [si + 0x1a]
00007AD6: mov word ptr es:[di + 0x10], ax
00007ADA: xor ah, ah
00007ADC: mov al, byte ptr [si + 0x17]
00007ADF: mov byte ptr es:[di + 0x13], al
00007AE3: mul word ptr [bp + 8]
00007AE6: mov bx, 8
00007AE9: div bx
00007AEB: or dx, dx
00007AED: je 0x7af0
00007AEF: inc ax
00007AF0: mov word ptr es:[di + 0x30], ax
00007AF4: test ax, 1
00007AF7: je 0x7afa
00007AF9: inc ax
00007AFA: mov word ptr es:[di + 0x14], ax
00007AFE: mov cl, dl
00007B00: xor cl, 7
00007B03: inc cl
00007B05: and cl, 7
00007B08: mov ch, 0xff
00007B0A: shl ch, cl
00007B0C: mov cl, ch
00007B0E: not ch
00007B10: mov word ptr es:[di + 0x32], cx
00007B14: mov word ptr es:[di + 0x28], 0
00007B1A: mov word ptr es:[di + 0x2a], 4
00007B20: mov ax, word ptr [bp + 0x14]
00007B23: mov word ptr es:[di + 0x16], ax
00007B27: cmp ax, 0
00007B2A: jne 0x7b35
00007B2C: mov bx, word ptr [bp + 0xe]
00007B2F: mov ax, word ptr [bp + 0xc]
00007B32: jmp 0x7bcc
00007B35: cmp ax, 1
00007B38: jne 0x7b64
00007B3A: mov dx, word ptr [bp + 0xc]
00007B3D: mov word ptr es:[di + 0x22], dx
00007B41: mov ah, 0x4c
00007B43: int 0x67
00007B45: or ah, ah
00007B47: jne 0x7b5c
00007B49: mov word ptr es:[di + 0x24], bx
00007B4D: mov word ptr es:[di + 0x26], 0
00007B53: mov ah, 0x41
00007B55: int 0x67
00007B57: and ax, 0xff00
00007B5A: je 0x7bcc
00007B5C: mov word ptr [bp - 2], 0xffea
00007B61: jmp 0x7bf3
00007B64: cmp ax, 3
00007B67: jne 0x7b99
00007B69: mov dx, word ptr [bp + 0xc]
00007B6C: mov word ptr es:[di + 0x22], dx
00007B70: mov ah, 0x4c
00007B72: push ax
00007B73: lcall 0xb95, 0x179
00007B78: or ax, ax
00007B7A: jne 0x7b92
00007B7C: mov word ptr es:[di + 0x24], bx
00007B80: mov word ptr es:[di + 0x26], 0
00007B86: mov ah, 0x41
00007B88: push ax
00007B89: lcall 0xb95, 0x179
00007B8E: or ax, ax
00007B90: je 0x7bcc
00007B92: mov word ptr [bp - 2], 0xffdb
00007B97: jmp 0x7bf3
00007B99: cmp ax, 2
00007B9C: jne 0x7bf3
00007B9E: mov dx, word ptr [bp + 0xc]
00007BA1: mov word ptr es:[di + 0x22], dx
00007BA5: mov ah, 0x4c
00007BA7: push ax
00007BA8: lcall 0x620, 0x219
00007BAD: or ax, ax
00007BAF: jne 0x7bc7
00007BB1: mov word ptr es:[di + 0x24], bx
00007BB5: mov word ptr es:[di + 0x26], 0
00007BBB: mov ah, 0x41
00007BBD: push ax
00007BBE: lcall 0x620, 0x219
00007BC3: or ax, ax
00007BC5: je 0x7bcc
00007BC7: mov word ptr [bp - 2], ax
00007BCA: jmp 0x7bf3
00007BCC: mov word ptr es:[di + 0x1a], bx
00007BD0: mov word ptr es:[di + 0x18], ax
00007BD4: mov ax, word ptr [si + 0x24]
00007BD7: mov word ptr es:[di + 0x1c], ax
00007BDB: xor ax, ax
00007BDD: mov word ptr es:[di + 0x1e], ax
00007BE1: mov word ptr es:[di + 0x20], ax
00007BE5: mov al, byte ptr [si + 0x15]
00007BE8: xor ah, ah
00007BEA: mov word ptr es:[di + 0x74], ax
00007BEE: mov word ptr [bp - 2], 0
00007BF3: mov ax, word ptr [bp - 2]
00007BF6: pop di
00007BF7: pop si
00007BF8: pop es
00007BF9: pop ds
00007BFA: mov sp, bp
00007BFC: pop bp
00007BFD: retf 0x10
00007C00: push bp
00007C01: mov bp, sp
00007C03: sub sp, 8
00007C06: push ds
00007C07: push es
00007C08: push si
00007C09: push di
00007C0A: mov ax, 0x1ab5
00007C0D: mov ds, ax
00007C0F: mov word ptr [bp - 2], 0xffe8
00007C14: les di, ptr [bp + 0xc]
00007C17: mov ax, word ptr [bp + 0xa]
00007C1A: push ax
00007C1B: mov ax, word ptr [bp + 8]
00007C1E: push ax
00007C1F: mov ax, word ptr [bp + 6]
00007C22: push ax
00007C23: lcall 0xb08, 0x2e7
00007C28: or dx, dx
00007C2A: jge 0x7c32
00007C2C: mov word ptr [bp - 2], ax
00007C2F: jmp 0x7d3d
00007C32: mov bx, word ptr [bp + 0x10]
00007C35: cmp bx, 0
00007C38: jne 0x7c55
00007C3A: cmp dx, 0x10
00007C3D: jae 0x7c4d
00007C3F: push dx
00007C40: push ax
00007C41: lcall 0x79e, 0xc
00007C46: or dx, dx
00007C48: je 0x7c4d
00007C4A: jmp 0x7d1c
00007C4D: mov word ptr [bp - 2], 0xffe6
00007C52: jmp 0x7d3d
00007C55: cmp bx, 1
00007C58: jne 0x7c92
00007C5A: mov bx, 0x4000
00007C5D: div bx
00007C5F: or dx, dx
00007C61: je 0x7c64
00007C63: inc ax
00007C64: mov word ptr [bp - 4], ax
00007C67: mov ah, 0x42
00007C69: int 0x67
00007C6B: or ah, ah
00007C6D: jne 0x7c8a
00007C6F: cmp bx, word ptr [bp - 4]
00007C72: jb 0x7c82
00007C74: mov bx, word ptr [bp - 4]
00007C77: mov ah, 0x43
00007C79: int 0x67
00007C7B: or ah, ah
00007C7D: jne 0x7c8a
00007C7F: jmp 0x7d19
00007C82: mov word ptr [bp - 2], 0xffe9
00007C87: jmp 0x7d3d
00007C8A: mov word ptr [bp - 2], 0xffea
00007C8F: jmp 0x7d3d
00007C92: cmp bx, 3
00007C95: jne 0x7cd4
00007C97: mov bx, 0x4000
00007C9A: div bx
00007C9C: or dx, dx
00007C9E: je 0x7ca1
00007CA0: inc ax
00007CA1: mov word ptr [bp - 4], ax
00007CA4: mov ah, 0x42
00007CA6: push ax
00007CA7: lcall 0xb95, 0x179
00007CAC: or ah, ah
00007CAE: jne 0x7ccd
00007CB0: cmp bx, word ptr [bp - 4]
00007CB3: jb 0x7cc6
00007CB5: mov bx, word ptr [bp - 4]
00007CB8: mov ah, 0x43
00007CBA: push ax
00007CBB: lcall 0xb95, 0x179
00007CC0: or ah, ah
00007CC2: jne 0x7ccd
00007CC4: jmp 0x7d19
00007CC6: mov word ptr [bp - 2], 0xffda
00007CCB: jmp 0x7d3d
00007CCD: mov word ptr [bp - 2], 0xffdb
00007CD2: jmp 0x7d3d
00007CD4: cmp bx, 2
00007CD7: jne 0x7d3d
00007CD9: mov bx, 0x4000
00007CDC: div bx
00007CDE: or dx, dx
00007CE0: je 0x7ce3
00007CE2: inc ax
00007CE3: mov word ptr [bp - 4], ax
00007CE6: mov ah, 0x42
00007CE8: push ax
00007CE9: lcall 0x620, 0x219
00007CEE: or ah, ah
00007CF0: jne 0x7d12
00007CF2: cmp bx, word ptr [bp - 4]
00007CF5: jb 0x7d0b
00007CF7: mov bx, word ptr [bp - 4]
00007CFA: add di, 0x36
00007CFD: mov ah, 0x43
00007CFF: push ax
00007D00: lcall 0x620, 0x219
00007D05: or ah, ah
00007D07: jne 0x7d12
00007D09: jmp 0x7d19
00007D0B: mov word ptr [bp - 2], 0xffe1
00007D10: jmp 0x7d3d
00007D12: mov word ptr [bp - 2], 0xffe2
00007D17: jmp 0x7d3d
00007D19: xor ax, ax
00007D1B: xchg dx, ax
00007D1C: mov bx, word ptr [bp + 0x10]
00007D1F: push bx
00007D20: mov bx, word ptr [bp + 0xe]
00007D23: push bx
00007D24: mov bx, word ptr [bp + 0xc]
00007D27: push bx
00007D28: push dx
00007D29: push ax
00007D2A: mov ax, word ptr [bp + 0xa]
00007D2D: push ax
00007D2E: mov ax, word ptr [bp + 8]
00007D31: push ax
00007D32: mov ax, word ptr [bp + 6]
00007D35: push ax
00007D36: push cs
00007D37: call 0x7a56
00007D3A: mov word ptr [bp - 2], ax
00007D3D: mov ax, word ptr [bp - 2]
00007D40: pop di
00007D41: pop si
00007D42: pop es
00007D43: pop ds
00007D44: mov sp, bp
00007D46: pop bp
00007D47: retf 0xc
00007D4A: push bp
00007D4B: mov bp, sp
00007D4D: sub sp, 2
00007D50: push ds
00007D51: push es
00007D52: push si
00007D53: push di
00007D54: mov ax, 0x1ab5
00007D57: mov ds, ax
00007D59: mov word ptr [bp - 2], 0xffe8
00007D5E: les di, ptr [bp + 6]
00007D61: cmp word ptr es:[di], 0xca00
00007D66: je 0x7d70
00007D68: mov word ptr [bp - 2], 0xffe4
00007D6D: jmp 0x7df4
00007D70: mov ax, word ptr es:[di + 0x16]
00007D74: cmp ax, 0
00007D77: jne 0x7d91
00007D79: push word ptr es:[di + 0x1a]
00007D7D: push word ptr es:[di + 0x18]
00007D81: lcall 0x79e, 0x5d
00007D86: or ah, ah
00007D88: je 0x7de4
00007D8A: mov word ptr [bp - 2], 0xffe7
00007D8F: jmp 0x7df4
00007D91: cmp ax, 1
00007D94: jne 0x7da9
00007D96: mov dx, word ptr es:[di + 0x22]
00007D9A: mov ah, 0x45
00007D9C: int 0x67
00007D9E: or ah, ah
00007DA0: je 0x7de4
00007DA2: mov word ptr [bp - 2], 0xffea
00007DA7: jmp 0x7df4
00007DA9: cmp ax, 3
00007DAC: jne 0x7dc5
00007DAE: mov dx, word ptr es:[di + 0x22]
00007DB2: mov ah, 0x45
00007DB4: push ax
00007DB5: lcall 0xb95, 0x179
00007DBA: or ah, ah
00007DBC: je 0x7de4
00007DBE: mov word ptr [bp - 2], 0xffdb
00007DC3: jmp 0x7df4
00007DC5: cmp ax, 2
00007DC8: jne 0x7df4
00007DCA: mov dx, word ptr es:[di + 0x22]
00007DCE: add di, 0x36
00007DD1: mov ah, 0x45
00007DD3: push ax
00007DD4: lcall 0x620, 0x219
00007DD9: or ah, ah
00007DDB: je 0x7de4
00007DDD: mov word ptr [bp - 2], 0xffe2
00007DE2: jmp 0x7df4
00007DE4: les di, ptr [bp + 6]
00007DE7: mov cx, 0x80
00007DEA: mov al, 0xff
00007DEC: cld 
00007DED: rep stosb byte ptr es:[di], al
00007DEF: mov word ptr [bp - 2], 0
00007DF4: mov ax, word ptr [bp - 2]
00007DF7: pop di
00007DF8: pop si
00007DF9: pop es
00007DFA: pop ds
00007DFB: mov sp, bp
00007DFD: pop bp
00007DFE: retf 4
00007E01: add byte ptr [di - 0x75], dl
00007E04: in al, dx
00007E05: sub sp, 2
00007E08: push ds
00007E09: push es
00007E0A: push si
00007E0B: push di
00007E0C: mov ax, 0x1ab5
00007E0F: mov ds, ax
00007E11: mov word ptr [bp - 2], 0
00007E16: cmp byte ptr [0x54e3], 1
00007E1B: je 0x7e22
00007E1D: mov word ptr [bp - 2], 0xffe3
00007E22: mov ax, word ptr [bp - 2]
00007E25: pop di
00007E26: pop si
00007E27: pop es
00007E28: pop ds
00007E29: mov sp, bp
00007E2B: pop bp
00007E2C: retf 
00007E2D: push bp
00007E2E: mov bp, sp
00007E30: sub sp, 0x82
00007E34: push ds
00007E35: push es
00007E36: push si
00007E37: push di
00007E38: mov ax, 0x1ab5
00007E3B: mov ds, ax
00007E3D: cmp byte ptr [0x54e3], 1
00007E42: jne 0x7e47
00007E44: jmp 0x7fb8
00007E47: push ds
00007E48: cld 
00007E49: push dx
00007E4A: mov dx, word ptr [bp + 0xa]
00007E4D: mov ds, dx
00007E4F: pop dx
00007E50: push dx
00007E51: mov dx, ss
00007E53: mov es, dx
00007E55: pop dx
00007E56: mov si, word ptr [bp + 8]
00007E59: mov di, bp
00007E5B: sub di, 0x82
00007E5F: mov word ptr [bp + 0xa], es
00007E62: mov word ptr [bp + 8], di
00007E65: movsb byte ptr es:[di], byte ptr [si]
00007E66: cmp byte ptr [si - 1], 0
00007E6A: jne 0x7e65
00007E6C: pop ds
00007E6D: push dx
00007E6E: mov dx, ss
00007E70: mov ds, dx
00007E72: pop dx
00007E73: mov si, bp
00007E75: sub si, 0x82
00007E79: mov ax, 0x1ab5
00007E7C: mov es, ax
00007E7E: mov di, 0x4240
00007E81: cmp byte ptr [si], 0
00007E84: je 0x7e95
00007E86: cmp byte ptr [si + 1], 0x3a
00007E8A: jne 0x7e95
00007E8C: movsb byte ptr es:[di], byte ptr [si]
00007E8D: and byte ptr es:[di - 1], 0xdf
00007E92: movsb byte ptr es:[di], byte ptr [si]
00007E93: jmp 0x7ea4
00007E95: mov ah, 0x19
00007E97: int 0x21
00007E99: add al, 0x41
00007E9B: mov byte ptr es:[di], al
00007E9E: inc di
00007E9F: mov byte ptr es:[di], 0x3a
00007EA3: inc di
00007EA4: cmp byte ptr [si], 0
00007EA7: je 0x7eae
00007EA9: cmp byte ptr [si], 0x5c
00007EAC: je 0x7eef
00007EAE: mov byte ptr es:[di], 0x5c
00007EB2: inc di
00007EB3: push ds
00007EB4: push si
00007EB5: mov ax, 0x1ab5
00007EB8: mov ds, ax
00007EBA: mov si, di
00007EBC: mov dl, byte ptr [0x4240]
00007EC0: sub dl, 0x40
00007EC3: mov ah, 0x47
00007EC5: int 0x21
00007EC7: pop si
00007EC8: pop ds
00007EC9: jae 0x7ed3
00007ECB: mov word ptr [bp - 2], 0xffe0
00007ED0: jmp 0x7fbd
00007ED3: mov di, 0x4240
00007ED6: mov ax, 0
00007ED9: mov cx, 0x41
00007EDC: repne scasb al, byte ptr es:[di]
00007EDE: or cx, cx
00007EE0: je 0x7ecb
00007EE2: dec di
00007EE3: cmp byte ptr es:[di - 1], 0x5c
00007EE8: je 0x7eef
00007EEA: mov byte ptr es:[di], 0x5c
00007EEE: inc di
00007EEF: cld 
00007EF0: mov ax, di
00007EF2: sub ax, 0x4240
00007EF5: mov cx, 0x41
00007EF8: sub cx, ax
00007EFA: movsb byte ptr es:[di], byte ptr [si]
00007EFB: dec cx
00007EFC: je 0x7ecb
00007EFE: cmp byte ptr es:[di - 1], 0
00007F03: jne 0x7efa
00007F05: dec di
00007F06: cmp byte ptr es:[di - 1], 0x5c
00007F0B: je 0x7f16
00007F0D: mov byte ptr es:[di], 0x5c
00007F11: inc di
00007F12: mov byte ptr es:[di], 0
00007F16: mov ax, 0x1ab5
00007F19: mov ds, ax
00007F1B: mov word ptr [0x4281], di
00007F1F: mov dx, 0x4240
00007F22: mov cx, 0
00007F25: mov ah, 0x5a
00007F27: int 0x21
00007F29: jae 0x7f33
00007F2B: mov word ptr [bp - 2], 0xffe0
00007F30: jmp 0x7fbd
00007F33: mov bx, ax
00007F35: mov ah, 0x3e
00007F37: int 0x21
00007F39: jb 0x7f44
00007F3B: mov dx, 0x4240
00007F3E: mov ah, 0x41
00007F40: int 0x21
00007F42: jae 0x7f4b
00007F44: mov word ptr [bp - 2], 0xffe0
00007F49: jmp 0x7fbd
00007F4B: mov ax, 0x1ab5
00007F4E: mov ds, ax
00007F50: mov dx, word ptr [bp + 6]
00007F53: xor ax, ax
00007F55: mov word ptr [0x4289], dx
00007F59: mov word ptr [0x4287], ax
00007F5C: mov word ptr [0x4283], dx
00007F60: cmp dx, 0
00007F63: jne 0x7f91
00007F65: mov dx, 1
00007F68: push dx
00007F69: mov ax, 0x10
00007F6C: push ax
00007F6D: lcall 0x79e, 0xc
00007F72: or dx, dx
00007F74: jne 0x7f7d
00007F76: mov word ptr [bp - 2], 0xffe6
00007F7B: jmp 0x7fbd
00007F7D: mov word ptr [0x4289], dx
00007F81: mov word ptr [0x4287], ax
00007F84: or ax, ax
00007F86: je 0x7f91
00007F88: add ax, 0x10
00007F8B: mov cl, 4
00007F8D: shr ax, cl
00007F8F: add dx, ax
00007F91: mov word ptr [0x4285], dx
00007F95: mov si, 0x428b
00007F98: mov cx, 4
00007F9B: mov word ptr [si], 0xffff
00007F9F: mov word ptr [si + 2], 0xffff
00007FA4: mov word ptr [si + 4], 0xffff
00007FA9: mov word ptr [si + 6], 0
00007FAE: add si, 8
00007FB1: loop 0x7f9b
00007FB3: mov byte ptr [0x54e3], 1
00007FB8: mov word ptr [bp - 2], 0
00007FBD: mov ax, word ptr [bp - 2]
00007FC0: pop di
00007FC1: pop si
00007FC2: pop es
00007FC3: pop ds
00007FC4: mov sp, bp
00007FC6: pop bp
00007FC7: retf 6
00007FCA: push bp
00007FCB: mov bp, sp
00007FCD: sub sp, 2
00007FD0: push ds
00007FD1: push es
00007FD2: push si
00007FD3: push di
00007FD4: mov ax, 0x1ab5
00007FD7: mov ds, ax
00007FD9: mov word ptr [bp - 2], 0
00007FDE: cmp byte ptr [0x54e3], 0
00007FE3: je 0x8004
00007FE5: cmp word ptr [0x4283], 0
00007FEA: jne 0x8004
00007FEC: push word ptr [0x4289]
00007FF0: push word ptr [0x4287]
00007FF4: lcall 0x79e, 0x5d
00007FF9: or ax, ax
00007FFB: je 0x8004
00007FFD: mov word ptr [bp - 2], 0xffe7
00008002: jmp 0x800e
00008004: mov byte ptr [0x54e3], 0
00008009: mov word ptr [bp - 2], 0
0000800E: mov ax, word ptr [bp - 2]
00008011: pop di
00008012: pop si
00008013: pop es
00008014: pop ds
00008015: mov sp, bp
00008017: pop bp
00008018: retf 
00008019: push bp
0000801A: mov bp, sp
0000801C: sub sp, 0x12
0000801F: push ds
00008020: push es
00008021: push si
00008022: push di
00008023: mov ax, 0x1ab5
00008026: mov ds, ax
00008028: mov word ptr [bp - 4], bx
0000802B: mov word ptr [bp - 6], cx
0000802E: mov word ptr [bp - 8], dx
00008031: mov ax, es
00008033: mov word ptr [bp - 0xa], ax
00008036: mov word ptr [bp - 0xc], di
00008039: mov ah, byte ptr [bp + 7]
0000803C: mov byte ptr [bp + 7], 0
00008040: cmp ah, 0x42
00008043: jne 0x8048
00008045: jmp 0x8222
00008048: cmp byte ptr [0x54e3], 1
0000804D: je 0x8057
0000804F: mov word ptr [bp - 2], 0xffe3
00008054: jmp 0x8338
00008057: cmp ah, 0x44
0000805A: jne 0x805e
0000805C: jmp 0x8086
0000805E: cmp ah, 0x41
00008061: jne 0x8066
00008063: jmp 0x8216
00008066: cmp ah, 0x4c
00008069: jne 0x806e
0000806B: jmp 0x8263
0000806E: cmp ah, 0x43
00008071: jne 0x8076
00008073: jmp 0x8288
00008076: cmp ah, 0x45
00008079: jne 0x807e
0000807B: jmp 0x82e3
0000807E: mov word ptr [bp - 2], 0xffe2
00008083: jmp 0x8338
00008086: mov ax, 0x1ab5
00008089: mov es, ax
0000808B: mov di, 0x428b
0000808E: mov dx, word ptr [bp - 8]
00008091: mov bx, word ptr [bp - 4]
00008094: xor ax, ax
00008096: mov cx, 0xffff
00008099: mov word ptr [bp - 0xe], 0xffff
0000809E: cmp word ptr es:[di], dx
000080A1: jne 0x80c0
000080A3: cmp word ptr es:[di + 2], bx
000080A7: jne 0x80c0
000080A9: cmp word ptr es:[di + 4], cx
000080AD: jle 0x80c0
000080AF: mov cx, word ptr es:[di + 6]
000080B3: mov word ptr [bp - 0x12], cx
000080B6: mov cx, word ptr es:[di + 4]
000080BA: mov word ptr [bp - 0x10], cx
000080BD: mov word ptr [bp - 0xe], ax
000080C0: add di, 8
000080C3: inc al
000080C5: cmp al, 4
000080C7: jb 0x809e
000080C9: mov ax, word ptr [bp - 0xe]
000080CC: cmp ax, -1
000080CF: je 0x80ff
000080D1: cmp byte ptr [bp + 6], al
000080D4: jne 0x80ff
000080D6: mov di, 0x428b
000080D9: mov bl, 8
000080DB: mul bl
000080DD: add di, ax
000080DF: cmp word ptr es:[di + 4], -1
000080E4: je 0x80ff
000080E6: mov cx, word ptr [bp - 6]
000080E9: cmp word ptr es:[di + 4], cx
000080ED: jne 0x80f2
000080EF: jmp 0x8206
000080F2: mov word ptr es:[di + 4], cx
000080F6: mov word ptr es:[di + 6], 1
000080FC: jmp 0x8206
000080FF: mov di, 0x428b
00008102: mov al, 8
00008104: mul byte ptr [bp + 6]
00008107: add di, ax
00008109: cmp word ptr es:[di], -1
0000810D: je 0x814a
0000810F: cmp word ptr es:[di + 6], 0
00008114: je 0x814a
00008116: mov ax, 0x4000
00008119: mul word ptr es:[di + 2]
0000811D: mov bx, word ptr es:[di]
00008120: mov cx, dx
00008122: mov dx, ax
00008124: mov al, 0
00008126: mov ah, 0x42
00008128: int 0x21
0000812A: jb 0x8147
0000812C: mov ax, 0x4000
0000812F: mul word ptr [bp + 6]
00008132: mov bx, word ptr es:[di]
00008135: mov cx, 0x4000
00008138: mov dx, ax
0000813A: push ds
0000813B: mov ax, word ptr [0x4285]
0000813E: mov ds, ax
00008140: mov ah, 0x40
00008142: int 0x21
00008144: pop ds
00008145: jae 0x814a
00008147: jmp 0x820e
0000814A: mov dx, word ptr [bp - 8]
0000814D: mov word ptr es:[di], dx
00008150: mov bx, word ptr [bp - 4]
00008153: mov word ptr es:[di + 2], bx
00008157: mov cx, word ptr [bp - 6]
0000815A: mov word ptr es:[di + 4], cx
0000815E: mov word ptr es:[di + 6], cx
00008162: cmp byte ptr [bp - 0xe], 0xff
00008166: jne 0x8199
00008168: mov ax, 0x4000
0000816B: mul bx
0000816D: mov bx, word ptr [bp - 8]
00008170: mov cx, dx
00008172: mov dx, ax
00008174: mov al, 0
00008176: mov ah, 0x42
00008178: int 0x21
0000817A: jb 0x8197
0000817C: mov ax, 0x4000
0000817F: mul word ptr [bp + 6]
00008182: mov bx, word ptr [bp - 8]
00008185: mov cx, 0x4000
00008188: mov dx, ax
0000818A: push ds
0000818B: mov ax, word ptr [0x4285]
0000818E: mov ds, ax
00008190: mov ah, 0x3f
00008192: int 0x21
00008194: pop ds
00008195: jae 0x8206
00008197: jmp 0x820e
00008199: cmp word ptr [bp - 0x12], 1
0000819D: jne 0x81a6
0000819F: mov ax, word ptr [bp - 0x12]
000081A2: mov word ptr es:[di + 6], ax
000081A6: mov bx, word ptr [0x4285]
000081AA: mov cx, 0x4000
000081AD: mov ds, bx
000081AF: mov ax, word ptr [bp - 0xe]
000081B2: mul cx
000081B4: mov si, ax
000081B6: mov es, bx
000081B8: mov ax, word ptr [bp + 6]
000081BB: mul cx
000081BD: mov di, ax
000081BF: shr cx, 1
000081C1: rep movsw word ptr es:[di], word ptr [si]
000081C3: mov ax, 0x1ab5
000081C6: mov es, ax
000081C8: mov di, 0x428b
000081CB: mov al, 8
000081CD: mul byte ptr [bp - 0xe]
000081D0: add di, ax
000081D2: mov cx, word ptr [bp - 6]
000081D5: cmp word ptr [bp - 0xe], 0xffff
000081DA: je 0x81e3
000081DC: cmp word ptr es:[di + 4], 0
000081E1: je 0x81fa
000081E3: cmp word ptr es:[di + 4], cx
000081E7: jne 0x8206
000081E9: mov word ptr es:[di], 0xffff
000081EE: mov word ptr es:[di + 2], 0xffff
000081F4: mov word ptr es:[di + 4], 0xffff
000081FA: mov word ptr es:[di + 4], 0xffff
00008200: mov word ptr es:[di + 6], 0
00008206: mov word ptr [bp - 2], 0
0000820B: jmp 0x8338
0000820E: mov word ptr [bp - 2], 0xffe2
00008213: jmp 0x8338
00008216: mov bx, word ptr [0x4285]
0000821A: mov word ptr [bp - 2], 0
0000821F: jmp 0x8338
00008222: cmp byte ptr [0x54e3], 1
00008227: je 0x8233
00008229: mov ah, 0x19
0000822B: int 0x21
0000822D: inc al
0000822F: mov dl, al
00008231: jmp 0x823d
00008233: mov dl, byte ptr [0x4240]
00008237: and dl, 0xdf
0000823A: sub dl, 0x40
0000823D: mov ah, 0x36
0000823F: int 0x21
00008241: cmp ax, -1
00008244: je 0x825b
00008246: mul cx
00008248: mul bx
0000824A: mov bx, 0x4000
0000824D: div bx
0000824F: mov bx, ax
00008251: mov dx, ax
00008253: mov word ptr [bp - 2], 0
00008258: jmp 0x8338
0000825B: mov word ptr [bp - 2], 0xffe2
00008260: jmp 0x8338
00008263: mov bx, dx
00008265: sub cx, cx
00008267: sub dx, dx
00008269: mov al, 2
0000826B: mov ah, 0x42
0000826D: int 0x21
0000826F: push dx
00008270: push ax
00008271: mov al, 0
00008273: mov ah, 0x42
00008275: int 0x21
00008277: pop ax
00008278: pop dx
00008279: mov bx, 0x4000
0000827C: div bx
0000827E: mov bx, ax
00008280: mov word ptr [bp - 2], 0
00008285: jmp 0x8338
00008288: mov si, word ptr [0x4281]
0000828C: mov byte ptr [si], 0
0000828F: mov cx, 0
00008292: mov dx, 0x4240
00008295: mov ah, 0x5a
00008297: int 0x21
00008299: jae 0x82a3
0000829B: mov word ptr [bp - 2], 0xffe0
000082A0: jmp 0x8338
000082A3: mov dx, ax
000082A5: mov cx, word ptr [bp - 4]
000082A8: push cx
000082A9: push dx
000082AA: mov bx, dx
000082AC: mov cx, 0x4000
000082AF: mov dx, 0
000082B2: push ds
000082B3: mov ax, word ptr [0x4285]
000082B6: mov ds, ax
000082B8: mov ah, 0x40
000082BA: int 0x21
000082BC: pop ds
000082BD: pop dx
000082BE: pop cx
000082BF: jb 0x82dc
000082C1: loop 0x82a8
000082C3: mov cx, 0xd
000082C6: cld 
000082C7: mov ax, 0x1ab5
000082CA: mov ds, ax
000082CC: mov si, word ptr [0x4281]
000082D0: les di, ptr [bp - 0xc]
000082D3: rep movsb byte ptr es:[di], byte ptr [si]
000082D5: mov word ptr [bp - 2], 0
000082DA: jmp 0x8338
000082DC: mov word ptr [bp - 2], 0xffe0
000082E1: jmp 0x8338
000082E3: mov si, 0x428b
000082E6: mov dx, word ptr [bp - 8]
000082E9: mov ax, 0xffff
000082EC: mov cx, 4
000082EF: cmp word ptr [si], dx
000082F1: jne 0x82fd
000082F3: mov word ptr [si], ax
000082F5: mov word ptr [si + 2], ax
000082F8: mov word ptr [si + 4], 0
000082FD: add si, 8
00008300: loop 0x82ef
00008302: mov bx, word ptr [bp - 8]
00008305: mov ah, 0x3e
00008307: int 0x21
00008309: jb 0x8333
0000830B: mov cx, 0xd
0000830E: cld 
0000830F: mov ax, 0x1ab5
00008312: mov es, ax
00008314: mov di, word ptr [0x4281]
00008318: lds si, ptr [bp - 0xc]
0000831B: rep movsb byte ptr es:[di], byte ptr [si]
0000831D: mov dx, 0x4240
00008320: push ds
00008321: mov ax, es
00008323: mov ds, ax
00008325: mov ah, 0x41
00008327: int 0x21
00008329: pop ds
0000832A: jb 0x8333
0000832C: mov word ptr [bp - 2], 0
00008331: jmp 0x8338
00008333: mov word ptr [bp - 2], 0xffe2
00008338: mov ax, word ptr [bp - 2]
0000833B: pop di
0000833C: pop si
0000833D: pop es
0000833E: pop ds
0000833F: mov sp, bp
00008341: pop bp
00008342: retf 2
00008345: add byte ptr [di - 0x75], dl
00008348: in al, dx
00008349: sub sp, 2
0000834C: push ds
0000834D: push es
0000834E: push si
0000834F: push di
00008350: mov ax, 0x1ab5
00008353: mov ds, ax
00008355: push word ptr [bp + 6]
00008358: lcall 0x98e, 0x12a
0000835D: jae 0x8364
0000835F: mov word ptr [bp - 2], ax
00008362: jmp 0x836f
00008364: mov di, ax
00008366: mov es, dx
00008368: mov ax, word ptr es:[di + 0x24]
0000836C: mov word ptr [bp - 2], ax
0000836F: mov ax, word ptr [bp - 2]
00008372: pop di
00008373: pop si
00008374: pop es
00008375: pop ds
00008376: mov sp, bp
00008378: pop bp
00008379: retf 2
0000837C: push bp
0000837D: mov bp, sp
0000837F: sub sp, 0xe
00008382: push ds
00008383: push es
00008384: push si
00008385: push di
00008386: mov ax, 0x1ab5
00008389: mov ds, ax
0000838B: mov word ptr [bp - 0xe], 0
00008390: mov word ptr [bp - 0xc], 4
00008395: mov word ptr [bp - 0xa], 4
0000839A: mov word ptr [bp - 8], 0x10
0000839F: mov word ptr [bp - 6], 0x10
000083A4: mov word ptr [bp - 4], 0x100
000083A9: lcall 0x98e, 0x35e
000083AE: or ax, ax
000083B0: jl 0x83d0
000083B2: push ax
000083B3: push cs
000083B4: call 0x8346
000083B7: or ax, ax
000083B9: jl 0x83d0
000083BB: mov si, ax
000083BD: shl si, 1
000083BF: push ax
000083C0: xor ax, ax
000083C2: push ax
000083C3: push word ptr [bp + si - 0xe]
000083C6: push word ptr [bp + 8]
000083C9: push word ptr [bp + 6]
000083CC: push cs
000083CD: call 0x85ed
000083D0: mov word ptr [bp - 2], ax
000083D3: mov ax, word ptr [bp - 2]
000083D6: pop di
000083D7: pop si
000083D8: pop es
000083D9: pop ds
000083DA: mov sp, bp
000083DC: pop bp
000083DD: retf 4
000083E0: push bp
000083E1: mov bp, sp
000083E3: sub sp, 0xe
000083E6: push ds
000083E7: push es
000083E8: push si
000083E9: push di
000083EA: mov ax, 0x1ab5
000083ED: mov ds, ax
000083EF: mov word ptr [bp - 0xe], 0
000083F4: mov word ptr [bp - 0xc], 4
000083F9: mov word ptr [bp - 0xa], 4
000083FE: mov word ptr [bp - 8], 0x10
00008403: mov word ptr [bp - 6], 0x10
00008408: mov word ptr [bp - 4], 0x100
0000840D: lcall 0x98e, 0x35e
00008412: or ax, ax
00008414: jl 0x8434
00008416: push ax
00008417: push cs
00008418: call 0x8346
0000841B: or ax, ax
0000841D: jl 0x8434
0000841F: mov si, ax
00008421: shl si, 1
00008423: push ax
00008424: xor ax, ax
00008426: push ax
00008427: push word ptr [bp + si - 0xe]
0000842A: push word ptr [bp + 8]
0000842D: push word ptr [bp + 6]
00008430: push cs
00008431: call 0x8791
00008434: mov word ptr [bp - 2], ax
00008437: mov ax, word ptr [bp - 2]
0000843A: pop di
0000843B: pop si
0000843C: pop es
0000843D: pop ds
0000843E: mov sp, bp
00008440: pop bp
00008441: retf 4
00008444: push bp
00008445: mov bp, sp
00008447: sub sp, 2
0000844A: push ds
0000844B: push es
0000844C: push si
0000844D: push di
0000844E: mov ax, 0x1ab5
00008451: mov ds, ax
00008453: lcall 0x98e, 0x35e
00008458: or ax, ax
0000845A: jge 0x8461
0000845C: mov word ptr [bp - 2], ax
0000845F: jmp 0x848f
00008461: push ax
00008462: push cs
00008463: call 0x8346
00008466: or ax, ax
00008468: jge 0x846f
0000846A: mov word ptr [bp - 2], ax
0000846D: jmp 0x848f
0000846F: cmp ax, 3
00008472: je 0x847b
00008474: mov word ptr [bp - 2], 0xfff7
00008479: jmp 0x848f
0000847B: push ax
0000847C: push word ptr [bp + 8]
0000847F: mov ax, 1
00008482: push ax
00008483: push ss
00008484: lea ax, [bp + 6]
00008487: push ax
00008488: push cs
00008489: call 0x85ed
0000848C: mov word ptr [bp - 2], ax
0000848F: mov ax, word ptr [bp - 2]
00008492: pop di
00008493: pop si
00008494: pop es
00008495: pop ds
00008496: mov sp, bp
00008498: pop bp
00008499: retf 4
0000849C: push bp
0000849D: mov bp, sp
0000849F: sub sp, 4
000084A2: push ds
000084A3: push es
000084A4: push si
000084A5: push di
000084A6: mov ax, 0x1ab5
000084A9: mov ds, ax
000084AB: lcall 0x98e, 0x35e
000084B0: or ax, ax
000084B2: jge 0x84b9
000084B4: mov word ptr [bp - 2], ax
000084B7: jmp 0x84f2
000084B9: push ax
000084BA: push cs
000084BB: call 0x8346
000084BE: or ax, ax
000084C0: jge 0x84c7
000084C2: mov word ptr [bp - 2], ax
000084C5: jmp 0x84f2
000084C7: cmp ax, 3
000084CA: je 0x84d3
000084CC: mov word ptr [bp - 2], 0xfff7
000084D1: jmp 0x84f2
000084D3: push ax
000084D4: push word ptr [bp + 6]
000084D7: mov ax, 1
000084DA: push ax
000084DB: push ss
000084DC: lea ax, [bp - 4]
000084DF: push ax
000084E0: push cs
000084E1: call 0x8791
000084E4: or ax, ax
000084E6: je 0x84ea
000084E8: jmp 0x84ef
000084EA: mov al, byte ptr [bp - 4]
000084ED: xor ah, ah
000084EF: mov word ptr [bp - 2], ax
000084F2: mov ax, word ptr [bp - 2]
000084F5: pop di
000084F6: pop si
000084F7: pop es
000084F8: pop ds
000084F9: mov sp, bp
000084FB: pop bp
000084FC: retf 2
000084FF: push bp
00008500: mov bp, sp
00008502: sub sp, 6
00008505: push ds
00008506: push es
00008507: push si
00008508: push di
00008509: mov ax, 0x1ab5
0000850C: mov ds, ax
0000850E: lcall 0x98e, 0x35e
00008513: or ax, ax
00008515: jge 0x851c
00008517: mov word ptr [bp - 2], ax
0000851A: jmp 0x8561
0000851C: push ax
0000851D: push cs
0000851E: call 0x8346
00008521: or ax, ax
00008523: jge 0x852a
00008525: mov word ptr [bp - 2], ax
00008528: jmp 0x8561
0000852A: cmp ax, 4
0000852D: je 0x853b
0000852F: cmp ax, 5
00008532: je 0x853b
00008534: mov word ptr [bp - 2], 0xfff7
00008539: jmp 0x8561
0000853B: mov bx, word ptr [bp + 0xa]
0000853E: mov byte ptr [bp - 6], bl
00008541: mov bx, word ptr [bp + 8]
00008544: mov byte ptr [bp - 5], bl
00008547: mov bx, word ptr [bp + 6]
0000854A: mov byte ptr [bp - 4], bl
0000854D: push ax
0000854E: push word ptr [bp + 0xc]
00008551: mov ax, 1
00008554: push ax
00008555: push ss
00008556: lea ax, [bp - 6]
00008559: push ax
0000855A: push cs
0000855B: call 0x85ed
0000855E: mov word ptr [bp - 2], ax
00008561: mov ax, word ptr [bp - 2]
00008564: pop di
00008565: pop si
00008566: pop es
00008567: pop ds
00008568: mov sp, bp
0000856A: pop bp
0000856B: retf 8
0000856E: push bp
0000856F: mov bp, sp
00008571: sub sp, 6
00008574: push ds
00008575: push es
00008576: push si
00008577: push di
00008578: mov ax, 0x1ab5
0000857B: mov ds, ax
0000857D: lcall 0x98e, 0x35e
00008582: or ax, ax
00008584: jge 0x858b
00008586: mov word ptr [bp - 2], ax
00008589: jmp 0x85e0
0000858B: push ax
0000858C: push cs
0000858D: call 0x8346
00008590: or ax, ax
00008592: jge 0x8599
00008594: mov word ptr [bp - 2], ax
00008597: jmp 0x85e0
00008599: cmp ax, 4
0000859C: je 0x85aa
0000859E: cmp ax, 5
000085A1: je 0x85aa
000085A3: mov word ptr [bp - 2], 0xfff7
000085A8: jmp 0x85e0
000085AA: push ax
000085AB: push word ptr [bp + 0x12]
000085AE: mov ax, 1
000085B1: push ax
000085B2: push ss
000085B3: lea ax, [bp - 6]
000085B6: push ax
000085B7: push cs
000085B8: call 0x8791
000085BB: or ax, ax
000085BD: je 0x85c4
000085BF: mov word ptr [bp - 2], ax
000085C2: jmp 0x85e0
000085C4: xor ax, ax
000085C6: les di, ptr [bp + 0xe]
000085C9: mov al, byte ptr [bp - 6]
000085CC: stosw word ptr es:[di], ax
000085CD: les di, ptr [bp + 0xa]
000085D0: mov al, byte ptr [bp - 5]
000085D3: stosw word ptr es:[di], ax
000085D4: les di, ptr [bp + 6]
000085D7: mov al, byte ptr [bp - 4]
000085DA: stosw word ptr es:[di], ax
000085DB: mov word ptr [bp - 2], 0
000085E0: mov ax, word ptr [bp - 2]
000085E3: pop di
000085E4: pop si
000085E5: pop es
000085E6: pop ds
000085E7: mov sp, bp
000085E9: pop bp
000085EA: retf 0xe
000085ED: push bp
000085EE: mov bp, sp
000085F0: sub sp, 4
000085F3: push ds
000085F4: push es
000085F5: push si
000085F6: push di
000085F7: mov ax, 0x1ab5
000085FA: mov ds, ax
000085FC: lds si, ptr [bp + 6]
000085FF: push dx
00008600: mov dx, 0x40
00008603: mov es, dx
00008605: pop dx
00008606: mov dx, word ptr es:[0x63]
0000860B: add dx, 6
0000860E: mov word ptr [bp - 4], dx
00008611: cmp word ptr [bp + 0xa], 0
00008615: jne 0x861a
00008617: jmp 0x8778
0000861A: cmp word ptr [bp + 0xe], 0
0000861E: jne 0x8623
00008620: jmp 0x877f
00008623: cmp word ptr [bp + 0xe], 1
00008627: jne 0x866b
00008629: mov dh, byte ptr [si]
0000862B: mov al, byte ptr [si + 1]
0000862E: cmp al, 4
00008630: jl 0x8634
00008632: sub al, 4
00008634: or al, al
00008636: jne 0x863c
00008638: xor dl, dl
0000863A: jmp 0x8654
0000863C: cmp al, 1
0000863E: jne 0x8647
00008640: xor dl, dl
00008642: or dh, 0x10
00008645: jmp 0x8654
00008647: cmp al, 2
00008649: jne 0x864f
0000864B: mov dl, 1
0000864D: jmp 0x8654
0000864F: mov dl, 1
00008651: or dh, 0x10
00008654: mov bh, 1
00008656: mov bl, dl
00008658: push bp
00008659: mov ah, 0xb
0000865B: int 0x10
0000865D: pop bp
0000865E: xor bh, bh
00008660: mov bl, dh
00008662: push bp
00008663: mov ah, 0xb
00008665: int 0x10
00008667: pop bp
00008668: jmp 0x8778
0000866B: cmp word ptr [bp + 0xe], 2
0000866F: jne 0x867e
00008671: mov bl, byte ptr [si]
00008673: xor bh, bh
00008675: push bp
00008676: mov ah, 0xb
00008678: int 0x10
0000867A: pop bp
0000867B: jmp 0x8778
0000867E: cmp word ptr [bp + 0xe], 3
00008682: jne 0x86c2
00008684: mov bx, word ptr [bp + 0xc]
00008687: mov cx, word ptr [bp + 0xa]
0000868A: mov ax, bx
0000868C: add ax, cx
0000868E: cmp ax, 0x10
00008691: jbe 0x8696
00008693: jmp 0x877f
00008696: cmp cx, 0x10
00008699: jb 0x86ae
0000869B: push dx
0000869C: mov dx, ds
0000869E: mov es, dx
000086A0: pop dx
000086A1: mov dx, si
000086A3: mov al, 2
000086A5: push bp
000086A6: mov ah, 0x10
000086A8: int 0x10
000086AA: pop bp
000086AB: jmp 0x8778
000086AE: push bx
000086AF: push cx
000086B0: mov bh, byte ptr [si]
000086B2: xor al, al
000086B4: push bp
000086B5: mov ah, 0x10
000086B7: int 0x10
000086B9: pop bp
000086BA: pop cx
000086BB: pop bx
000086BC: inc bx
000086BD: loop 0x86ae
000086BF: jmp 0x8778
000086C2: cmp word ptr [bp + 0xe], 4
000086C6: jne 0x8721
000086C8: mov bx, word ptr [bp + 0xc]
000086CB: mov cx, word ptr [bp + 0xa]
000086CE: mov ax, bx
000086D0: add ax, cx
000086D2: cmp ax, 0x10
000086D5: jbe 0x86da
000086D7: jmp 0x877f
000086DA: mov dx, word ptr [bp - 4]
000086DD: in al, dx
000086DE: test al, 8
000086E0: je 0x86dd
000086E2: push bx
000086E3: push cx
000086E4: mov dx, 0x3c0
000086E7: mov ax, bx
000086E9: out dx, al
000086EA: inc dx
000086EB: in al, dx
000086EC: mov dx, 0x3c8
000086EF: out dx, al
000086F0: inc dx
000086F1: mov al, byte ptr [si]
000086F3: out dx, al
000086F4: mov al, byte ptr [si + 1]
000086F7: out dx, al
000086F8: mov al, byte ptr [si + 2]
000086FB: out dx, al
000086FC: add si, 3
000086FF: mov dx, word ptr [bp - 4]
00008702: in al, dx
00008703: mov al, 0x20
00008705: mov dx, 0x3c0
00008708: out dx, al
00008709: pop cx
0000870A: pop bx
0000870B: inc bx
0000870C: loop 0x86da
0000870E: mov ax, 0x1ab5
00008711: mov ds, ax
00008713: mov bh, byte ptr [0x55f7]
00008717: mov al, 1
00008719: push bp
0000871A: mov ah, 0x10
0000871C: int 0x10
0000871E: pop bp
0000871F: jmp 0x8778
00008721: cmp word ptr [bp + 0xe], 5
00008725: jne 0x877f
00008727: mov bx, word ptr [bp + 0xc]
0000872A: add bx, word ptr [bp + 0xa]
0000872D: cmp bx, 0x100
00008731: jbe 0x8735
00008733: jmp 0x877f
00008735: mov al, byte ptr [bp + 0xc]
00008738: mov dx, 0x3c8
0000873B: out dx, al
0000873C: inc dx
0000873D: mov ax, 0x40
00008740: cmp word ptr [bp + 0xa], ax
00008743: jae 0x8748
00008745: mov ax, word ptr [bp + 0xa]
00008748: sub word ptr [bp + 0xa], ax
0000874B: mov cx, ax
0000874D: shl cx, 1
0000874F: add cx, ax
00008751: push dx
00008752: mov dx, word ptr [bp - 4]
00008755: in al, dx
00008756: test al, 8
00008758: je 0x8755
0000875A: pop dx
0000875B: mov al, byte ptr [si]
0000875D: out dx, al
0000875E: inc si
0000875F: loop 0x875b
00008761: cmp word ptr [bp + 0xa], 0
00008765: jg 0x873d
00008767: mov ax, 0x1ab5
0000876A: mov ds, ax
0000876C: mov bh, byte ptr [0x55f7]
00008770: mov al, 1
00008772: push bp
00008773: mov ah, 0x10
00008775: int 0x10
00008777: pop bp
00008778: mov word ptr [bp - 2], 0
0000877D: jmp 0x8784
0000877F: mov word ptr [bp - 2], 0xfff7
00008784: mov ax, word ptr [bp - 2]
00008787: pop di
00008788: pop si
00008789: pop es
0000878A: pop ds
0000878B: mov sp, bp
0000878D: pop bp
0000878E: retf 0xa
00008791: push bp
00008792: mov bp, sp
00008794: sub sp, 0x18
00008797: push ds
00008798: push es
00008799: push si
0000879A: push di
0000879B: mov ax, 0x1ab5
0000879E: mov ds, ax
000087A0: les di, ptr [bp + 6]
000087A3: cmp word ptr [bp + 0xe], 0
000087A7: jne 0x87ac
000087A9: jmp 0x88df
000087AC: cmp word ptr [bp + 0xe], 1
000087B0: je 0x87ba
000087B2: cmp word ptr [bp + 0xe], 2
000087B6: je 0x87ba
000087B8: jmp 0x87eb
000087BA: push dx
000087BB: mov dx, 0x40
000087BE: mov ds, dx
000087C0: pop dx
000087C1: mov si, 0x66
000087C4: mov bl, byte ptr [si]
000087C6: mov bh, bl
000087C8: and bl, 0xf
000087CB: mov byte ptr es:[di], bl
000087CE: mov bl, bh
000087D0: and bl, 0x20
000087D3: mov cl, 4
000087D5: shr bl, cl
000087D7: mov dl, bl
000087D9: mov bl, bh
000087DB: and bl, 0x10
000087DE: mov cl, 4
000087E0: shr bl, cl
000087E2: add bl, dl
000087E4: mov byte ptr es:[di + 1], bl
000087E8: jmp 0x88d8
000087EB: cmp word ptr [bp + 0xe], 3
000087EF: jne 0x8859
000087F1: lcall 0x98e, 0x35e
000087F6: mov word ptr [bp - 6], ax
000087F9: mov bx, word ptr [bp + 0xc]
000087FC: add bx, word ptr [bp + 0xa]
000087FF: cmp bx, 0x10
00008802: jbe 0x8807
00008804: jmp 0x88df
00008807: push dx
00008808: mov dx, 0x40
0000880B: mov ds, dx
0000880D: pop dx
0000880E: lds si, ptr [0xa8]
00008812: lds si, ptr [si + 4]
00008815: mov ax, ds
00008817: or ax, si
00008819: jne 0x8848
0000881B: push dx
0000881C: mov dx, ss
0000881E: mov ds, dx
00008820: pop dx
00008821: lea si, [bp - 0x18]
00008824: xor bx, bx
00008826: mov al, bl
00008828: cmp al, 8
0000882A: jl 0x882e
0000882C: add al, 0x30
0000882E: mov byte ptr [bx + si], al
00008830: cmp bx, 6
00008833: jne 0x883e
00008835: cmp word ptr [bp - 6], 2
00008839: je 0x883e
0000883B: add byte ptr [bx + si], 0xe
0000883E: inc bx
0000883F: cmp bx, 0x10
00008842: jl 0x8826
00008844: mov byte ptr [bp - 8], 0
00008848: mov cx, word ptr [bp + 0xa]
0000884B: add si, word ptr [bp + 0xc]
0000884E: rep movsb byte ptr es:[di], byte ptr [si]
00008850: cmp word ptr [bp + 0xa], 0x10
00008854: jne 0x8857
00008856: movsb byte ptr es:[di], byte ptr [si]
00008857: jmp 0x88d8
00008859: cmp word ptr [bp + 0xe], 4
0000885D: jne 0x88b7
0000885F: mov al, 0x1a
00008861: push bp
00008862: mov ah, 0x10
00008864: int 0x10
00008866: pop bp
00008867: mov cl, 6
00008869: shl bl, 1
0000886B: sub cl, bl
0000886D: mov bl, bh
0000886F: shl bl, cl
00008871: mov bh, 0xff
00008873: shl bh, cl
00008875: not bh
00008877: mov word ptr [bp - 4], bx
0000887A: mov bx, word ptr [bp + 0xc]
0000887D: mov cx, word ptr [bp + 0xa]
00008880: mov ax, bx
00008882: add ax, cx
00008884: cmp ax, 0x10
00008887: jbe 0x888b
00008889: jmp 0x88df
0000888B: push bx
0000888C: push cx
0000888D: mov al, 7
0000888F: push bp
00008890: mov ah, 0x10
00008892: int 0x10
00008894: pop bp
00008895: mov ax, word ptr [bp - 4]
00008898: and bh, ah
0000889A: or bh, al
0000889C: mov bl, bh
0000889E: xor bh, bh
000088A0: mov dx, di
000088A2: mov cx, 1
000088A5: mov al, 0x17
000088A7: push bp
000088A8: mov ah, 0x10
000088AA: int 0x10
000088AC: pop bp
000088AD: add di, 3
000088B0: pop cx
000088B1: pop bx
000088B2: inc bx
000088B3: loop 0x888b
000088B5: jmp 0x88d8
000088B7: cmp word ptr [bp + 0xe], 5
000088BB: jne 0x88df
000088BD: mov bx, word ptr [bp + 0xc]
000088C0: mov cx, word ptr [bp + 0xa]
000088C3: mov ax, bx
000088C5: add ax, cx
000088C7: cmp ax, 0x100
000088CA: jbe 0x88ce
000088CC: jmp 0x88df
000088CE: mov dx, di
000088D0: mov al, 0x17
000088D2: push bp
000088D3: mov ah, 0x10
000088D5: int 0x10
000088D7: pop bp
000088D8: mov word ptr [bp - 2], 0
000088DD: jmp 0x88e4
000088DF: mov word ptr [bp - 2], 0xfff7
000088E4: mov ax, word ptr [bp - 2]
000088E7: pop di
000088E8: pop si
000088E9: pop es
000088EA: pop ds
000088EB: mov sp, bp
000088ED: pop bp
000088EE: retf 0xa
000088F1: push bp
000088F2: mov bp, sp
000088F4: sub sp, 2
000088F7: push ds
000088F8: push es
000088F9: push si
000088FA: push di
000088FB: mov ax, 0x1ab5
000088FE: mov ds, ax
00008900: mov al, byte ptr [0x55f7]
00008903: xor ah, ah
00008905: mov word ptr [bp - 2], ax
00008908: mov ax, word ptr [bp - 2]
0000890B: pop di
0000890C: pop si
0000890D: pop es
0000890E: pop ds
0000890F: mov sp, bp
00008911: pop bp
00008912: retf 
00008913: push bp
00008914: mov bp, sp
00008916: sub sp, 2
00008919: push ds
0000891A: push es
0000891B: push si
0000891C: push di
0000891D: mov ax, 0x1ab5
00008920: mov ds, ax
00008922: mov ax, word ptr [bp + 6]
00008925: mov byte ptr [0x55f7], al
00008928: mov word ptr [bp - 2], 0
0000892D: mov ax, word ptr [bp - 2]
00008930: pop di
00008931: pop si
00008932: pop es
00008933: pop ds
00008934: mov sp, bp
00008936: pop bp
00008937: retf 2
0000893A: push bp
0000893B: mov bp, sp
0000893D: sub sp, 0x80
00008941: push ds
00008942: push es
00008943: push si
00008944: push di
00008945: mov ax, 0x1ab5
00008948: mov ds, ax
0000894A: mov byte ptr [bp - 0x36], 0x78
0000894E: mov byte ptr [bp - 0x35], 0x7e
00008952: mov byte ptr [bp - 0x34], 0x28
00008956: mov byte ptr [bp - 0x33], 0x28
0000895A: mov byte ptr [bp - 0x32], 0x28
0000895E: mov byte ptr [bp - 0x31], 0x28
00008962: mov byte ptr [bp - 0x30], 0x18
00008966: mov byte ptr [bp - 0x2f], 8
0000896A: mov byte ptr [bp - 0x2e], 0x18
0000896E: mov byte ptr [bp - 0x2d], 7
00008972: mov byte ptr [bp - 0x2c], 8
00008976: mov byte ptr [bp - 0x2b], 8
0000897A: mov byte ptr [bp - 0x2a], 8
0000897E: mov byte ptr [bp - 0x29], 8
00008982: mov byte ptr [bp - 0x28], 8
00008986: mov byte ptr [bp - 0x27], 8
0000898A: mov byte ptr [bp - 0x26], 8
0000898E: mov byte ptr [bp - 0x25], 8
00008992: mov byte ptr [bp - 0x24], 8
00008996: mov byte ptr [bp - 0x23], 8
0000899A: mov byte ptr [bp - 0x22], 8
0000899E: mov byte ptr [bp - 0x21], 8
000089A2: mov byte ptr [bp - 0x20], 8
000089A6: mov byte ptr [bp - 0x1f], 8
000089AA: mov byte ptr [bp - 0x1e], 8
000089AE: mov byte ptr [bp - 0x1d], 8
000089B2: mov byte ptr [bp - 0x1c], 8
000089B6: mov byte ptr [bp - 0x1b], 8
000089BA: mov byte ptr [bp - 0x1a], 8
000089BE: mov byte ptr [bp - 0x19], 8
000089C2: mov byte ptr [bp - 0x18], 8
000089C6: mov byte ptr [bp - 0x17], 8
000089CA: mov byte ptr [bp - 0x16], 8
000089CE: mov byte ptr [bp - 0x15], 8
000089D2: mov byte ptr [bp - 0x14], 8
000089D6: mov byte ptr [bp - 0x13], 8
000089DA: mov byte ptr [bp - 0x12], 8
000089DE: mov byte ptr [bp - 0x11], 8
000089E2: mov byte ptr [bp - 0x10], 8
000089E6: mov byte ptr [bp - 0xf], 8
000089EA: mov byte ptr [bp - 0xe], 8
000089EE: mov byte ptr [bp - 0x60], 0x78
000089F2: mov byte ptr [bp - 0x5f], 0x78
000089F6: mov byte ptr [bp - 0x5e], 0x38
000089FA: mov byte ptr [bp - 0x5d], 0x38
000089FE: mov byte ptr [bp - 0x5c], 0x98
00008A02: mov byte ptr [bp - 0x5b], 0x38
00008A06: mov byte ptr [bp - 0x5a], 0x18
00008A0A: mov byte ptr [bp - 0x59], 0x18
00008A0E: mov byte ptr [bp - 0x58], 0x18
00008A12: mov byte ptr [bp - 0x57], 0xa0
00008A16: mov byte ptr [bp - 0x56], 0x18
00008A1A: mov byte ptr [bp - 0x55], 0x18
00008A1E: mov byte ptr [bp - 0x54], 0x18
00008A22: mov byte ptr [bp - 0x53], 0x18
00008A26: mov byte ptr [bp - 0x52], 0x18
00008A2A: mov byte ptr [bp - 0x51], 0x98
00008A2E: mov byte ptr [bp - 0x50], 0x18
00008A32: mov byte ptr [bp - 0x4f], 0x18
00008A36: mov byte ptr [bp - 0x4e], 0x18
00008A3A: mov byte ptr [bp - 0x4d], 0x18
00008A3E: mov byte ptr [bp - 0x4c], 0x18
00008A42: mov byte ptr [bp - 0x4b], 0x18
00008A46: mov byte ptr [bp - 0x4a], 0x18
00008A4A: mov byte ptr [bp - 0x49], 0x18
00008A4E: mov byte ptr [bp - 0x48], 0x18
00008A52: mov byte ptr [bp - 0x47], 0x18
00008A56: mov byte ptr [bp - 0x46], 0x18
00008A5A: mov byte ptr [bp - 0x45], 0x18
00008A5E: mov byte ptr [bp - 0x44], 0x18
00008A62: mov byte ptr [bp - 0x43], 0x18
00008A66: mov byte ptr [bp - 0x42], 0x18
00008A6A: mov byte ptr [bp - 0x41], 0x18
00008A6E: mov byte ptr [bp - 0x40], 0x18
00008A72: mov byte ptr [bp - 0x3f], 0x18
00008A76: mov byte ptr [bp - 0x3e], 0x18
00008A7A: mov byte ptr [bp - 0x3d], 0x18
00008A7E: mov byte ptr [bp - 0x3c], 0x18
00008A82: mov byte ptr [bp - 0x3b], 0x18
00008A86: mov byte ptr [bp - 0x3a], 0x18
00008A8A: mov byte ptr [bp - 0x39], 0x18
00008A8E: mov byte ptr [bp - 0x38], 0x18
00008A92: mov byte ptr [bp - 0x80], 0x88
00008A96: mov byte ptr [bp - 0x7f], 0x88
00008A9A: mov byte ptr [bp - 0x7e], 0x88
00008A9E: mov byte ptr [bp - 0x7d], 0x88
00008AA2: mov byte ptr [bp - 0x7c], 0x40
00008AA6: mov byte ptr [bp - 0x7b], 0x40
00008AAA: mov byte ptr [bp - 0x7a], 0x40
00008AAE: mov byte ptr [bp - 0x79], 0x40
00008AB2: mov byte ptr [bp - 0x78], 0x20
00008AB6: mov byte ptr [bp - 0x77], 0x20
00008ABA: mov byte ptr [bp - 0x76], 0x20
00008ABE: mov byte ptr [bp - 0x75], 0x20
00008AC2: mov byte ptr [bp - 0x74], 0x10
00008AC6: mov byte ptr [bp - 0x73], 0x10
00008ACA: mov byte ptr [bp - 0x72], 0x10
00008ACE: mov byte ptr [bp - 0x71], 0x10
00008AD2: mov byte ptr [bp - 0x70], 8
00008AD6: mov byte ptr [bp - 0x6f], 0x40
00008ADA: mov byte ptr [bp - 0x6e], 0x40
00008ADE: mov byte ptr [bp - 0x6d], 0x20
00008AE2: mov byte ptr [bp - 0x6c], 0x10
00008AE6: mov byte ptr [bp - 0x6b], 4
00008AEA: mov byte ptr [bp - 0x6a], 4
00008AEE: mov byte ptr [bp - 0x69], 4
00008AF2: mov byte ptr [bp - 0x68], 4
00008AF6: mov byte ptr [bp - 0x67], 4
00008AFA: mov byte ptr [bp - 0x66], 0xfc
00008AFE: mov byte ptr [bp - 0x65], 0xfc
00008B02: mov byte ptr [bp - 0x64], 0xfc
00008B06: mov byte ptr [bp - 0x63], 0xfc
00008B0A: mov byte ptr [bp - 0x62], 0xfc
00008B0E: mov si, word ptr [bp + 6]
00008B11: cmp si, 0x28
00008B14: jbe 0x8b19
00008B16: jmp 0x8c11
00008B19: push ss
00008B1A: lea ax, [bp - 6]
00008B1D: push ax
00008B1E: lcall 0xae3, 0
00008B23: or ax, ax
00008B25: je 0x8b2d
00008B27: mov word ptr [bp - 2], ax
00008B2A: jmp 0x8c16
00008B2D: cmp si, 4
00008B30: je 0x8b37
00008B32: cmp si, 0xf
00008B35: jne 0x8b40
00008B37: cmp byte ptr [bp - 4], 0
00008B3B: je 0x8b40
00008B3D: jmp 0x8c11
00008B40: cmp byte ptr [bp - 6], 0x80
00008B44: jb 0x8b4a
00008B46: sub byte ptr [bp - 6], 0x7a
00008B4A: mov cl, byte ptr [bp - 6]
00008B4D: mov al, byte ptr [bp + si - 0x36]
00008B50: clc 
00008B51: shl al, cl
00008B53: jb 0x8b58
00008B55: jmp 0x8c11
00008B58: mov cl, byte ptr [bp - 5]
00008B5B: mov al, byte ptr [bp + si - 0x60]
00008B5E: clc 
00008B5F: shl al, cl
00008B61: jb 0x8b66
00008B63: jmp 0x8c11
00008B66: cmp si, 0xa
00008B69: jae 0x8b6e
00008B6B: jmp 0x8c0a
00008B6E: lcall 0x921, 0x1a5
00008B73: cmp ax, 7
00008B76: jne 0x8bb9
00008B78: cmp si, 0x24
00008B7B: jae 0x8b80
00008B7D: jmp 0x8c11
00008B80: push si
00008B81: lcall 0x98e, 0xdf
00008B86: jae 0x8b8e
00008B88: mov word ptr [bp - 2], ax
00008B8B: jmp 0x8c16
00008B8E: mov es, dx
00008B90: mov di, ax
00008B92: mov cx, word ptr es:[di + 4]
00008B96: mov ax, 0x1ab5
00008B99: mov es, ax
00008B9B: mov di, 0x43bf
00008B9E: mov ah, 0x4f
00008BA0: mov al, 1
00008BA2: int 0x10
00008BA4: cmp ax, 0x4f
00008BA7: je 0x8bb0
00008BA9: mov word ptr [bp - 2], 0xffd8
00008BAE: jmp 0x8c16
00008BB0: test word ptr es:[di], 1
00008BB5: jne 0x8c0a
00008BB7: jmp 0x8c11
00008BB9: cmp ax, 0
00008BBC: jg 0x8bca
00008BBE: lcall 0x921, 0x55
00008BC3: cmp ax, 0
00008BC6: jg 0x8bca
00008BC8: jmp 0x8c11
00008BCA: push ax
00008BCB: push ss
00008BCC: lea ax, [bp - 0xc]
00008BCF: push ax
00008BD0: lcall 0x921, 0x1fc
00008BD5: or ax, ax
00008BD7: je 0x8bde
00008BD9: mov word ptr [bp - 2], ax
00008BDC: jmp 0x8c16
00008BDE: mov cx, word ptr [bp - 0xc]
00008BE1: mov al, byte ptr [bp + si - 0x8a]
00008BE5: clc 
00008BE6: shl al, cl
00008BE8: jb 0x8bec
00008BEA: jmp 0x8c11
00008BEC: cmp si, 0x24
00008BEF: jb 0x8c05
00008BF1: push si
00008BF2: push word ptr [bp - 0xc]
00008BF5: lcall 0x98e, 0xc
00008BFA: mov si, ax
00008BFC: or si, si
00008BFE: jge 0x8c05
00008C00: mov word ptr [bp - 2], ax
00008C03: jmp 0x8c16
00008C05: cmp si, word ptr [bp - 8]
00008C08: ja 0x8c11
00008C0A: mov word ptr [bp - 2], 0
00008C0F: jmp 0x8c16
00008C11: mov word ptr [bp - 2], 0xfffa
00008C16: mov ax, word ptr [bp - 2]
00008C19: pop di
00008C1A: pop si
00008C1B: pop es
00008C1C: pop ds
00008C1D: mov sp, bp
00008C1F: pop bp
00008C20: retf 2
00008C23: push bp
00008C24: mov bp, sp
00008C26: sub sp, 0x26
00008C29: push ds
00008C2A: push es
00008C2B: push si
00008C2C: push di
00008C2D: mov ax, 0x1ab5
00008C30: mov ds, ax
00008C32: cmp word ptr [0x54d4], 1
00008C37: je 0x8c8a
00008C39: cmp word ptr [bp + 8], 1
00008C3D: je 0x8c4e
00008C3F: cmp word ptr [bp + 8], 3
00008C43: je 0x8c7b
00008C45: cmp word ptr [bp + 8], 4
00008C49: je 0x8c7b
00008C4B: jmp 0x8d94
00008C4E: cmp word ptr [bp + 6], 1
00008C52: je 0x8c69
00008C54: cmp word ptr [bp + 6], 2
00008C58: je 0x8c6f
00008C5A: cmp word ptr [bp + 6], 4
00008C5E: je 0x8c84
00008C60: cmp word ptr [bp + 6], 8
00008C64: je 0x8c75
00008C66: jmp 0x8d94
00008C69: mov di, 6
00008C6C: jmp 0x8d9b
00008C6F: mov di, 0
00008C72: jmp 0x8d9b
00008C75: mov di, 8
00008C78: jmp 0x8d9b
00008C7B: cmp word ptr [bp + 6], 1
00008C7F: je 0x8c84
00008C81: jmp 0x8d94
00008C84: mov di, 7
00008C87: jmp 0x8d9b
00008C8A: mov byte ptr [bp - 8], 1
00008C8E: mov byte ptr [bp - 7], 4
00008C92: mov byte ptr [bp - 6], 6
00008C96: mov byte ptr [bp - 5], 9
00008C9A: mov byte ptr [bp - 4], 0xf
00008C9E: mov byte ptr [bp - 0x12], 5
00008CA2: mov byte ptr [bp - 0x11], 7
00008CA6: mov byte ptr [bp - 0x10], 0xa
00008CAA: mov byte ptr [bp - 0xf], 0xe
00008CAE: mov byte ptr [bp - 0xe], 0x12
00008CB2: mov byte ptr [bp - 0xd], 0x16
00008CB6: mov byte ptr [bp - 0xc], 0x1f
00008CBA: mov byte ptr [bp - 0xb], 0x26
00008CBE: mov byte ptr [bp - 0x26], 8
00008CC2: mov byte ptr [bp - 0x25], 0xb
00008CC6: mov byte ptr [bp - 0x24], 0xd
00008CCA: mov byte ptr [bp - 0x23], 0x1a
00008CCE: mov byte ptr [bp - 0x22], 0x10
00008CD2: mov byte ptr [bp - 0x21], 0x1b
00008CD6: mov byte ptr [bp - 0x20], 0x1c
00008CDA: mov byte ptr [bp - 0x1f], 0x13
00008CDE: mov byte ptr [bp - 0x1e], 0x15
00008CE2: mov byte ptr [bp - 0x1d], 0x1d
00008CE6: mov byte ptr [bp - 0x1c], 0x17
00008CEA: mov byte ptr [bp - 0x1b], 0x19
00008CEE: mov byte ptr [bp - 0x1a], 0x1e
00008CF2: mov byte ptr [bp - 0x19], 0x20
00008CF6: mov byte ptr [bp - 0x18], 0x22
00008CFA: mov byte ptr [bp - 0x17], 0x23
00008CFE: mov byte ptr [bp - 0x16], 0x24
00008D02: mov byte ptr [bp - 0x15], 0x27
00008D06: mov byte ptr [bp - 0x14], 0x28
00008D0A: cmp word ptr [bp + 8], 1
00008D0E: je 0x8d1e
00008D10: cmp word ptr [bp + 8], 3
00008D14: je 0x8d76
00008D16: cmp word ptr [bp + 8], 4
00008D1A: je 0x8d76
00008D1C: jmp 0x8d94
00008D1E: cmp word ptr [bp + 6], 1
00008D22: je 0x8d38
00008D24: cmp word ptr [bp + 6], 2
00008D28: je 0x8d50
00008D2A: cmp word ptr [bp + 6], 4
00008D2E: je 0x8d7e
00008D30: cmp word ptr [bp + 6], 8
00008D34: je 0x8d5e
00008D36: jmp 0x8d94
00008D38: mov si, 4
00008D3B: mov al, byte ptr [bp + si - 8]
00008D3E: xor ah, ah
00008D40: mov di, ax
00008D42: push di
00008D43: push cs
00008D44: call 0x893a
00008D47: or ax, ax
00008D49: je 0x8d9b
00008D4B: dec si
00008D4C: jge 0x8d3b
00008D4E: jmp 0x8d94
00008D50: mov di, 0
00008D53: push di
00008D54: push cs
00008D55: call 0x893a
00008D58: or ax, ax
00008D5A: je 0x8d9b
00008D5C: jmp 0x8d94
00008D5E: mov si, 0x12
00008D61: mov al, byte ptr [bp + si - 0x26]
00008D64: xor ah, ah
00008D66: mov di, ax
00008D68: push di
00008D69: push cs
00008D6A: call 0x893a
00008D6D: or ax, ax
00008D6F: je 0x8d9b
00008D71: dec si
00008D72: jge 0x8d61
00008D74: jmp 0x8d94
00008D76: cmp word ptr [bp + 6], 1
00008D7A: je 0x8d7e
00008D7C: jmp 0x8d94
00008D7E: mov si, 7
00008D81: mov al, byte ptr [bp + si - 0x12]
00008D84: xor ah, ah
00008D86: mov di, ax
00008D88: push di
00008D89: push cs
00008D8A: call 0x893a
00008D8D: or ax, ax
00008D8F: je 0x8d9b
00008D91: dec si
00008D92: jge 0x8d81
00008D94: mov word ptr [bp - 2], 0xfffa
00008D99: jmp 0x8d9e
00008D9B: mov word ptr [bp - 2], di
00008D9E: mov ax, word ptr [bp - 2]
00008DA1: pop di
00008DA2: pop si
00008DA3: pop es
00008DA4: pop ds
00008DA5: mov sp, bp
00008DA7: pop bp
00008DA8: retf 4
00008DAB: add byte ptr [di - 0x75], dl
00008DAE: in al, dx
00008DAF: sub sp, 0x36
00008DB2: push ds
00008DB3: push es
00008DB4: push si
00008DB5: push di
00008DB6: mov ax, 0x1ab5
00008DB9: mov ds, ax
00008DBB: cmp byte ptr [0x55f3], 1
00008DC0: je 0x8dc6
00008DC2: push cs
00008DC3: call 0x901a
00008DC6: mov ax, word ptr [0x54d4]
00008DC9: mov word ptr [bp - 4], ax
00008DCC: lcall 0x98e, 0x35e
00008DD1: or ax, ax
00008DD3: jge 0x8ddb
00008DD5: mov word ptr [bp - 2], ax
00008DD8: jmp 0x900d
00008DDB: mov word ptr [bp - 0xc], ax
00008DDE: push ax
00008DDF: lcall 0x98e, 0x12a
00008DE4: jae 0x8dee
00008DE6: mov word ptr [bp - 2], 0xfc19
00008DEB: jmp 0x900d
00008DEE: mov ds, dx
00008DF0: mov si, ax
00008DF2: cmp word ptr [bp - 4], 1
00008DF6: jne 0x8e0f
00008DF8: cmp byte ptr [si], 9
00008DFB: je 0x8e0f
00008DFD: lcall 0x98e, 0x18a
00008E02: cmp al, byte ptr [si + 0x16]
00008E05: je 0x8e0f
00008E07: mov word ptr [bp - 2], 0xfff9
00008E0C: jmp 0x900d
00008E0F: les di, ptr [bp + 0xa]
00008E12: mov al, byte ptr [si + 0x17]
00008E15: xor ah, ah
00008E17: mov word ptr [bp - 0xe], ax
00008E1A: cmp al, byte ptr es:[di + 0x13]
00008E1E: je 0x8e28
00008E20: mov word ptr [bp - 2], 0xfffa
00008E25: jmp 0x900d
00008E28: mov ax, word ptr [bp + 0x16]
00008E2B: or ax, ax
00008E2D: jge 0x8e39
00008E2F: neg ax
00008E31: add word ptr [bp + 8], ax
00008E34: xor ax, ax
00008E36: mov word ptr [bp + 0x16], ax
00008E39: cmp ax, word ptr [si + 0x18]
00008E3C: jb 0x8e46
00008E3E: mov word ptr [bp - 2], 0
00008E43: jmp 0x900d
00008E46: mov ax, word ptr [bp + 0x12]
00008E49: or ax, ax
00008E4B: jge 0x8e55
00008E4D: mov word ptr [bp - 2], 0
00008E52: jmp 0x900d
00008E55: cmp ax, word ptr [si + 0x18]
00008E58: jb 0x8e61
00008E5A: mov ax, word ptr [si + 0x18]
00008E5D: dec ax
00008E5E: mov word ptr [bp + 0x12], ax
00008E61: mov ax, word ptr es:[di + 0xa]
00008E65: cmp word ptr [bp + 8], ax
00008E68: jbe 0x8e72
00008E6A: mov word ptr [bp - 2], 0
00008E6F: jmp 0x900d
00008E72: sub ax, word ptr [bp + 8]
00008E75: inc ax
00008E76: mov bx, word ptr [bp + 0x12]
00008E79: sub bx, word ptr [bp + 0x16]
00008E7C: inc bx
00008E7D: cmp ax, bx
00008E7F: jbe 0x8e83
00008E81: mov ax, bx
00008E83: mov word ptr [bp - 0x12], ax
00008E86: mul word ptr [bp - 0xe]
00008E89: mov word ptr [bp - 0x14], ax
00008E8C: mov bx, 8
00008E8F: div bx
00008E91: or dx, dx
00008E93: je 0x8e96
00008E95: inc ax
00008E96: mov word ptr [bp - 0x1a], ax
00008E99: mov word ptr [bp - 0x1c], ax
00008E9C: mov ax, word ptr [bp + 0x14]
00008E9F: or ax, ax
00008EA1: jge 0x8ead
00008EA3: neg ax
00008EA5: add word ptr [bp + 6], ax
00008EA8: xor ax, ax
00008EAA: mov word ptr [bp + 0x14], ax
00008EAD: cmp ax, word ptr [si + 0x1a]
00008EB0: jb 0x8eba
00008EB2: mov word ptr [bp - 2], 0
00008EB7: jmp 0x900d
00008EBA: mov ax, word ptr [bp + 0x10]
00008EBD: or ax, ax
00008EBF: jge 0x8ec9
00008EC1: mov word ptr [bp - 2], 0
00008EC6: jmp 0x900d
00008EC9: cmp ax, word ptr [si + 0x1a]
00008ECC: jb 0x8ed5
00008ECE: mov ax, word ptr [si + 0x1a]
00008ED1: dec ax
00008ED2: mov word ptr [bp + 0x10], ax
00008ED5: mov ax, word ptr es:[di + 0xc]
00008ED9: cmp word ptr [bp + 6], ax
00008EDC: jbe 0x8ee6
00008EDE: mov word ptr [bp - 2], 0
00008EE3: jmp 0x900d
00008EE6: sub ax, word ptr [bp + 6]
00008EE9: inc ax
00008EEA: mov bx, word ptr [bp + 0x10]
00008EED: sub bx, word ptr [bp + 0x14]
00008EF0: inc bx
00008EF1: cmp ax, bx
00008EF3: jbe 0x8ef7
00008EF5: mov ax, bx
00008EF7: mov word ptr [bp - 0x16], ax
00008EFA: mov bl, byte ptr es:[di + 0x12]
00008EFE: xor bh, bh
00008F00: mov word ptr [bp - 0x10], bx
00008F03: mul bx
00008F05: mov word ptr [bp - 0x18], ax
00008F08: mov word ptr [bp - 0x2c], 0xffff
00008F0D: mov word ptr [bp - 0x2e], 0
00008F12: cmp byte ptr [bp - 0xe], 8
00008F16: jne 0x8f1b
00008F18: jmp 0x8fca
00008F1B: mov ax, word ptr [bp + 8]
00008F1E: mul word ptr [bp - 0xe]
00008F21: mov cx, ax
00008F23: and cx, 7
00008F26: mov bx, 8
00008F29: sub bx, cx
00008F2B: mov word ptr [bp - 0x30], bx
00008F2E: mov dl, 0xff
00008F30: shr dl, cl
00008F32: mov byte ptr [bp - 0x2c], dl
00008F35: add ax, word ptr [bp - 0x14]
00008F38: mov cx, ax
00008F3A: and cx, 7
00008F3D: mov dh, 0xff
00008F3F: shr dh, cl
00008F41: not dh
00008F43: mov byte ptr [bp - 0x2b], dh
00008F46: cmp bx, word ptr [bp - 0x14]
00008F49: jl 0x8f5c
00008F4B: mov bx, word ptr [bp - 0x14]
00008F4E: mov word ptr [bp - 0x30], bx
00008F51: or dh, dh
00008F53: je 0x8f5c
00008F55: and byte ptr [bp - 0x2c], dh
00008F58: mov byte ptr [bp - 0x2b], 0
00008F5C: mov ax, word ptr [bp + 8]
00008F5F: sub ax, word ptr [bp + 0x16]
00008F62: mul word ptr [bp - 0xe]
00008F65: and ax, 7
00008F68: mov word ptr [bp - 0x2e], ax
00008F6B: mov word ptr [bp - 0x32], 1
00008F70: mov ax, word ptr [bp + 0x16]
00008F73: mul word ptr [bp - 0xe]
00008F76: and ax, 7
00008F79: mov bx, ax
00008F7B: mov ax, word ptr [bp + 8]
00008F7E: mul word ptr [bp - 0xe]
00008F81: and ax, 7
00008F84: cmp bx, ax
00008F86: jle 0x8f8b
00008F88: inc word ptr [bp - 0x32]
00008F8B: mov ax, word ptr [bp - 0x14]
00008F8E: sub ax, word ptr [bp - 0x30]
00008F91: mov bx, 8
00008F94: xor dx, dx
00008F96: div bx
00008F98: mov word ptr [bp - 0x34], ax
00008F9B: or dx, dx
00008F9D: jne 0x8fa3
00008F9F: mov byte ptr [bp - 0x2b], 0
00008FA3: mov word ptr [bp - 0x36], 0
00008FA8: cmp dx, word ptr [bp - 0x2e]
00008FAB: jbe 0x8fb0
00008FAD: inc word ptr [bp - 0x36]
00008FB0: mov ax, word ptr [bp - 0x32]
00008FB3: add ax, word ptr [bp - 0x34]
00008FB6: add ax, word ptr [bp - 0x36]
00008FB9: mov word ptr [bp - 0x1a], ax
00008FBC: mov ax, word ptr [bp - 0x34]
00008FBF: inc ax
00008FC0: cmp byte ptr [bp - 0x2b], 0
00008FC4: je 0x8fc7
00008FC6: inc ax
00008FC7: mov word ptr [bp - 0x1c], ax
00008FCA: push es
00008FCB: push di
00008FCC: push word ptr [bp + 8]
00008FCF: push word ptr [bp + 6]
00008FD2: mov ax, 1
00008FD5: push ax
00008FD6: lcall 0xb08, 0xa
00008FDB: or dx, dx
00008FDD: jne 0x8fe4
00008FDF: mov word ptr [bp - 2], ax
00008FE2: jmp 0x900d
00008FE4: mov word ptr [bp - 8], dx
00008FE7: mov word ptr [bp - 0xa], ax
00008FEA: mov ax, word ptr [si + 0x1c]
00008FED: mov word ptr [bp - 0x1e], ax
00008FF0: sub ax, word ptr [bp - 0x1a]
00008FF3: mov word ptr [bp - 0x20], ax
00008FF6: mov ax, word ptr es:[di + 0x14]
00008FFA: neg ax
00008FFC: mov word ptr [bp - 0x2a], ax
00008FFF: mov ax, word ptr es:[di + 0x14]
00009003: sub ax, word ptr [bp - 0x1c]
00009006: mov word ptr [bp - 0x22], ax
00009009: cld 
0000900A: jmp word ptr [si + 0x30]
0000900D: mov ax, word ptr [bp - 2]
00009010: pop di
00009011: pop si
00009012: pop es
00009013: pop ds
00009014: mov sp, bp
00009016: pop bp
00009017: retf 0x12
0000901A: xor ax, ax
0000901C: push ax
0000901D: lcall 0x98e, 0x12a
00009022: mov bx, ax
00009024: mov word ptr [bx + 0x30], 0x312
00009029: add bx, 0x36
0000902C: mov word ptr [bx + 0x30], 0x312
00009031: add bx, 0x36
00009034: mov word ptr [bx + 0x30], 0x43c
00009039: add bx, 0x36
0000903C: mov word ptr [bx + 0x30], 0x43c
00009041: add bx, 0x36
00009044: mov word ptr [bx + 0x30], 0x43c
00009049: add bx, 0x36
0000904C: mov word ptr [bx + 0x30], 0x43c
00009051: add bx, 0x36
00009054: mov word ptr [bx + 0x30], 0x43c
00009059: add bx, 0x36
0000905C: mov word ptr [bx + 0x30], 0x43c
00009061: add bx, 0x36
00009064: mov word ptr [bx + 0x30], 0x5ab
00009069: add bx, 0x36
0000906C: mov word ptr [bx + 0x30], 0x637
00009071: add bx, 0x36
00009074: mov word ptr [bx + 0x30], 0x76e
00009079: add bx, 0x36
0000907C: mov word ptr [bx + 0x30], 0x43c
00009081: add bx, 0x36
00009084: mov word ptr [bx + 0x30], 0x76e
00009089: add bx, 0x36
0000908C: mov word ptr [bx + 0x30], 0x76e
00009091: add bx, 0x36
00009094: mov word ptr [bx + 0x30], 0x43c
00009099: add bx, 0x36
0000909C: mov word ptr [bx + 0x30], 0x76e
000090A1: add bx, 0x36
000090A4: mov word ptr [bx + 0x30], 0x76e
000090A9: add bx, 0x36
000090AC: mov byte ptr [0x55f3], 1
000090B1: retf 
000090B2: mov bx, word ptr [bp + 0x16]
000090B5: mov ax, word ptr [bp + 0x14]
000090B8: lcall [si + 0x26]
000090BB: push dx
000090BC: mov dx, es
000090BE: mov ds, dx
000090C0: pop dx
000090C1: mov si, bx
000090C3: les di, ptr [bp - 0xa]
000090C6: mov ax, word ptr [bp + 0x14]
000090C9: and al, 1
000090CB: mov byte ptr [bp - 6], al
000090CE: mov ax, 0x2000
000090D1: sub ax, word ptr [bp - 0x1a]
000090D4: mov word ptr [bp - 4], ax
000090D7: mov cx, word ptr [bp - 0x2e]
000090DA: cmp byte ptr [bp - 0x32], 1
000090DE: je 0x90e3
000090E0: lodsb al, byte ptr [si]
000090E1: mov ah, al
000090E3: lodsb al, byte ptr [si]
000090E4: mov ch, al
000090E6: ror ax, cl
000090E8: mov bl, byte ptr [bp - 0x2c]
000090EB: and al, bl
000090ED: not bl
000090EF: and byte ptr es:[di], bl
000090F2: or byte ptr es:[di], al
000090F5: inc di
000090F6: mov bx, word ptr [bp - 0x34]
000090F9: or bx, bx
000090FB: je 0x914d
000090FD: or cl, cl
000090FF: jne 0x9106
00009101: cmp di, word ptr [bp - 0x2a]
00009104: jbe 0x912b
00009106: or di, di
00009108: jne 0x911e
0000910A: mov dx, word ptr [bp + 0xc]
0000910D: mov ax, word ptr [bp + 0xa]
00009110: stc 
00009111: lcall 0xb08, 0x17e
00009116: jae 0x911e
00009118: mov word ptr [bp - 2], ax
0000911B: jmp 0x91cf
0000911E: lodsb al, byte ptr [si]
0000911F: mov ah, ch
00009121: mov ch, al
00009123: ror ax, cl
00009125: stosb byte ptr es:[di], al
00009126: dec bx
00009127: jne 0x9106
00009129: jmp 0x914d
0000912B: or di, di
0000912D: jne 0x9143
0000912F: mov dx, word ptr [bp + 0xc]
00009132: mov ax, word ptr [bp + 0xa]
00009135: stc 
00009136: lcall 0xb08, 0x17e
0000913B: jae 0x9143
0000913D: mov word ptr [bp - 2], ax
00009140: jmp 0x91cf
00009143: mov cx, bx
00009145: shr cx, 1
00009147: rep movsw word ptr es:[di], word ptr [si]
00009149: rcl cx, 1
0000914B: rep movsb byte ptr es:[di], byte ptr [si]
0000914D: mov bh, byte ptr [bp - 0x2b]
00009150: or bh, bh
00009152: je 0x9181
00009154: or di, di
00009156: jne 0x916b
00009158: mov dx, word ptr [bp + 0xc]
0000915B: mov ax, word ptr [bp + 0xa]
0000915E: stc 
0000915F: lcall 0xb08, 0x17e
00009164: jae 0x916b
00009166: mov word ptr [bp - 2], ax
00009169: jmp 0x91cf
0000916B: cmp byte ptr [bp - 0x36], 0
0000916F: je 0x9172
00009171: lodsb al, byte ptr [si]
00009172: mov ah, ch
00009174: ror ax, cl
00009176: and al, bh
00009178: not bh
0000917A: and byte ptr es:[di], bh
0000917D: or byte ptr es:[di], al
00009180: inc di
00009181: dec word ptr [bp - 0x18]
00009184: je 0x91ca
00009186: or di, di
00009188: jne 0x919d
0000918A: mov dx, word ptr [bp + 0xc]
0000918D: mov ax, word ptr [bp + 0xa]
00009190: stc 
00009191: lcall 0xb08, 0x17e
00009196: jae 0x919d
00009198: mov word ptr [bp - 2], ax
0000919B: jmp 0x91cf
0000919D: xor byte ptr [bp - 6], 1
000091A1: je 0x91a8
000091A3: add si, word ptr [bp - 4]
000091A6: jmp 0x91af
000091A8: sub si, 0x1fb0
000091AC: sub si, word ptr [bp - 0x1a]
000091AF: add di, word ptr [bp - 0x22]
000091B2: jae 0x91c7
000091B4: mov dx, word ptr [bp + 0xc]
000091B7: mov ax, word ptr [bp + 0xa]
000091BA: stc 
000091BB: lcall 0xb08, 0x17e
000091C0: jae 0x91c7
000091C2: mov word ptr [bp - 2], ax
000091C5: jmp 0x91cf
000091C7: jmp 0x90d7
000091CA: mov word ptr [bp - 2], 0
000091CF: mov ax, word ptr [bp - 2]
000091D2: pop di
000091D3: pop si
000091D4: pop es
000091D5: pop ds
000091D6: mov sp, bp
000091D8: pop bp
000091D9: retf 0x12
000091DC: mov al, 5
000091DE: mov ah, 0
000091E0: mov dx, 0x3ce
000091E3: out dx, ax
000091E4: mov al, 8
000091E6: mov ah, 0xff
000091E8: mov dx, 0x3ce
000091EB: out dx, ax
000091EC: mov word ptr [bp - 0x26], 0x100
000091F1: mov al, 4
000091F3: mov ah, 0
000091F5: mov dx, 0x3ce
000091F8: out dx, ax
000091F9: cmp byte ptr [bp - 0x10], 1
000091FD: je 0x9204
000091FF: mov word ptr [bp - 0x26], 0x400
00009204: mov ax, word ptr [si + 0x22]
00009207: mov dx, word ptr [bp + 0xe]
0000920A: mul dx
0000920C: push ax
0000920D: mov bx, word ptr [bp + 0x16]
00009210: mov ax, word ptr [bp + 0x14]
00009213: lcall [si + 0x26]
00009216: pop ax
00009217: add bx, ax
00009219: push dx
0000921A: mov dx, es
0000921C: mov ds, dx
0000921E: pop dx
0000921F: mov si, bx
00009221: les di, ptr [bp - 0xa]
00009224: mov cx, word ptr [bp - 0x2e]
00009227: cmp byte ptr [bp - 0x32], 1
0000922B: je 0x9230
0000922D: lodsb al, byte ptr [si]
0000922E: mov ah, al
00009230: lodsb al, byte ptr [si]
00009231: mov ch, al
00009233: ror ax, cl
00009235: mov bl, byte ptr [bp - 0x2c]
00009238: and al, bl
0000923A: not bl
0000923C: and byte ptr es:[di], bl
0000923F: or byte ptr es:[di], al
00009242: inc di
00009243: mov bx, word ptr [bp - 0x34]
00009246: or bx, bx
00009248: je 0x929a
0000924A: or cl, cl
0000924C: jne 0x9253
0000924E: cmp di, word ptr [bp - 0x2a]
00009251: jbe 0x9278
00009253: or di, di
00009255: jne 0x926b
00009257: mov dx, word ptr [bp + 0xc]
0000925A: mov ax, word ptr [bp + 0xa]
0000925D: stc 
0000925E: lcall 0xb08, 0x17e
00009263: jae 0x926b
00009265: mov word ptr [bp - 2], ax
00009268: jmp 0x932e
0000926B: lodsb al, byte ptr [si]
0000926C: mov ah, ch
0000926E: mov ch, al
00009270: ror ax, cl
00009272: stosb byte ptr es:[di], al
00009273: dec bx
00009274: jne 0x9253
00009276: jmp 0x929a
00009278: or di, di
0000927A: jne 0x9290
0000927C: mov dx, word ptr [bp + 0xc]
0000927F: mov ax, word ptr [bp + 0xa]
00009282: stc 
00009283: lcall 0xb08, 0x17e
00009288: jae 0x9290
0000928A: mov word ptr [bp - 2], ax
0000928D: jmp 0x932e
00009290: mov cx, bx
00009292: shr cx, 1
00009294: rep movsw word ptr es:[di], word ptr [si]
00009296: rcl cx, 1
00009298: rep movsb byte ptr es:[di], byte ptr [si]
0000929A: mov bh, byte ptr [bp - 0x2b]
0000929D: or bh, bh
0000929F: je 0x92ce
000092A1: or di, di
000092A3: jne 0x92b8
000092A5: mov dx, word ptr [bp + 0xc]
000092A8: mov ax, word ptr [bp + 0xa]
000092AB: stc 
000092AC: lcall 0xb08, 0x17e
000092B1: jae 0x92b8
000092B3: mov word ptr [bp - 2], ax
000092B6: jmp 0x932e
000092B8: cmp byte ptr [bp - 0x36], 0
000092BC: je 0x92bf
000092BE: lodsb al, byte ptr [si]
000092BF: mov ah, ch
000092C1: ror ax, cl
000092C3: and al, bh
000092C5: not bh
000092C7: and byte ptr es:[di], bh
000092CA: or byte ptr es:[di], al
000092CD: inc di
000092CE: dec word ptr [bp - 0x18]
000092D1: je 0x9329
000092D3: or di, di
000092D5: jne 0x92ea
000092D7: mov dx, word ptr [bp + 0xc]
000092DA: mov ax, word ptr [bp + 0xa]
000092DD: stc 
000092DE: lcall 0xb08, 0x17e
000092E3: jae 0x92ea
000092E5: mov word ptr [bp - 2], ax
000092E8: jmp 0x932e
000092EA: add si, word ptr [bp - 0x20]
000092ED: mov dx, word ptr [bp - 0x26]
000092F0: cmp dh, 1
000092F3: je 0x930e
000092F5: sub si, word ptr [bp - 0x1e]
000092F8: inc dl
000092FA: cmp dh, dl
000092FC: ja 0x9303
000092FE: xor dl, dl
00009300: add si, word ptr [bp - 0x1e]
00009303: mov byte ptr [bp - 0x26], dl
00009306: mov al, 4
00009308: mov ah, dl
0000930A: mov dx, 0x3ce
0000930D: out dx, ax
0000930E: add di, word ptr [bp - 0x22]
00009311: jae 0x9326
00009313: mov dx, word ptr [bp + 0xc]
00009316: mov ax, word ptr [bp + 0xa]
00009319: stc 
0000931A: lcall 0xb08, 0x17e
0000931F: jae 0x9326
00009321: mov word ptr [bp - 2], ax
00009324: jmp 0x932e
00009326: jmp 0x9224
00009329: mov word ptr [bp - 2], 0
0000932E: mov al, 8
00009330: mov ah, 0xff
00009332: mov dx, 0x3ce
00009335: out dx, ax
00009336: mov al, 4
00009338: mov ah, 0
0000933A: mov dx, 0x3ce
0000933D: out dx, ax
0000933E: mov ax, word ptr [bp - 2]
00009341: pop di
00009342: pop si
00009343: pop es
00009344: pop ds
00009345: mov sp, bp
00009347: pop bp
00009348: retf 0x12
0000934B: mov bx, word ptr [bp + 0x16]
0000934E: mov ax, word ptr [bp + 0x14]
00009351: lcall [si + 0x26]
00009354: push dx
00009355: mov dx, es
00009357: mov ds, dx
00009359: pop dx
0000935A: mov si, bx
0000935C: les di, ptr [bp - 0xa]
0000935F: mov bx, word ptr [bp - 0x18]
00009362: mov cx, word ptr [bp - 0x1c]
00009365: cmp di, word ptr [bp - 0x2a]
00009368: jbe 0x9386
0000936A: or di, di
0000936C: jne 0x9381
0000936E: mov dx, word ptr [bp + 0xc]
00009371: mov ax, word ptr [bp + 0xa]
00009374: stc 
00009375: lcall 0xb08, 0x17e
0000937A: jae 0x9381
0000937C: mov word ptr [bp - 2], ax
0000937F: jmp 0x93ca
00009381: movsb byte ptr es:[di], byte ptr [si]
00009382: loop 0x936a
00009384: jmp 0x938e
00009386: shr cx, 1
00009388: rep movsw word ptr es:[di], word ptr [si]
0000938A: rcl cx, 1
0000938C: rep movsb byte ptr es:[di], byte ptr [si]
0000938E: dec bx
0000938F: je 0x93c5
00009391: or di, di
00009393: jne 0x93a8
00009395: mov dx, word ptr [bp + 0xc]
00009398: mov ax, word ptr [bp + 0xa]
0000939B: stc 
0000939C: lcall 0xb08, 0x17e
000093A1: jae 0x93a8
000093A3: mov word ptr [bp - 2], ax
000093A6: jmp 0x93ca
000093A8: add si, word ptr [bp - 0x20]
000093AB: add di, word ptr [bp - 0x22]
000093AE: jae 0x93c3
000093B0: mov dx, word ptr [bp + 0xc]
000093B3: mov ax, word ptr [bp + 0xa]
000093B6: stc 
000093B7: lcall 0xb08, 0x17e
000093BC: jae 0x93c3
000093BE: mov word ptr [bp - 2], ax
000093C1: jmp 0x93ca
000093C3: jmp 0x9362
000093C5: mov word ptr [bp - 2], 0
000093CA: mov ax, word ptr [bp - 2]
000093CD: pop di
000093CE: pop si
000093CF: pop es
000093D0: pop ds
000093D1: mov sp, bp
000093D3: pop bp
000093D4: retf 0x12
000093D7: mov ax, word ptr [si + 0x22]
000093DA: mov dx, word ptr [bp + 0xe]
000093DD: mul dx
000093DF: push ax
000093E0: mov bx, word ptr [bp + 0x16]
000093E3: mov ax, word ptr [bp + 0x14]
000093E6: lcall [si + 0x26]
000093E9: pop ax
000093EA: add bx, ax
000093EC: push dx
000093ED: mov dx, es
000093EF: mov ds, dx
000093F1: pop dx
000093F2: mov si, bx
000093F4: les di, ptr [bp - 0xa]
000093F7: mov ax, word ptr [bp + 0x14]
000093FA: xor ah, ah
000093FC: and al, 3
000093FE: mov byte ptr [bp - 6], al
00009401: mov cx, word ptr [bp - 0x2e]
00009404: cmp byte ptr [bp - 0x32], 1
00009408: je 0x940d
0000940A: lodsb al, byte ptr [si]
0000940B: mov ah, al
0000940D: lodsb al, byte ptr [si]
0000940E: mov ch, al
00009410: ror ax, cl
00009412: mov bl, byte ptr [bp - 0x2c]
00009415: and al, bl
00009417: not bl
00009419: and byte ptr es:[di], bl
0000941C: or byte ptr es:[di], al
0000941F: inc di
00009420: mov bx, word ptr [bp - 0x34]
00009423: or bx, bx
00009425: je 0x9477
00009427: or cl, cl
00009429: jne 0x9430
0000942B: cmp di, word ptr [bp - 0x2a]
0000942E: jbe 0x9455
00009430: or di, di
00009432: jne 0x9448
00009434: mov dx, word ptr [bp + 0xc]
00009437: mov ax, word ptr [bp + 0xa]
0000943A: stc 
0000943B: lcall 0xb08, 0x17e
00009440: jae 0x9448
00009442: mov word ptr [bp - 2], ax
00009445: jmp 0x9501
00009448: lodsb al, byte ptr [si]
00009449: mov ah, ch
0000944B: mov ch, al
0000944D: ror ax, cl
0000944F: stosb byte ptr es:[di], al
00009450: dec bx
00009451: jne 0x9430
00009453: jmp 0x9477
00009455: or di, di
00009457: jne 0x946d
00009459: mov dx, word ptr [bp + 0xc]
0000945C: mov ax, word ptr [bp + 0xa]
0000945F: stc 
00009460: lcall 0xb08, 0x17e
00009465: jae 0x946d
00009467: mov word ptr [bp - 2], ax
0000946A: jmp 0x9501
0000946D: mov cx, bx
0000946F: shr cx, 1
00009471: rep movsw word ptr es:[di], word ptr [si]
00009473: rcl cx, 1
00009475: rep movsb byte ptr es:[di], byte ptr [si]
00009477: mov bh, byte ptr [bp - 0x2b]
0000947A: or bh, bh
0000947C: je 0x94ab
0000947E: or di, di
00009480: jne 0x9495
00009482: mov dx, word ptr [bp + 0xc]
00009485: mov ax, word ptr [bp + 0xa]
00009488: stc 
00009489: lcall 0xb08, 0x17e
0000948E: jae 0x9495
00009490: mov word ptr [bp - 2], ax
00009493: jmp 0x9501
00009495: cmp byte ptr [bp - 0x36], 0
00009499: je 0x949c
0000949B: lodsb al, byte ptr [si]
0000949C: mov ah, ch
0000949E: ror ax, cl
000094A0: and al, bh
000094A2: not bh
000094A4: and byte ptr es:[di], bh
000094A7: or byte ptr es:[di], al
000094AA: inc di
000094AB: dec word ptr [bp - 0x18]
000094AE: je 0x94fc
000094B0: or di, di
000094B2: jne 0x94c7
000094B4: mov dx, word ptr [bp + 0xc]
000094B7: mov ax, word ptr [bp + 0xa]
000094BA: stc 
000094BB: lcall 0xb08, 0x17e
000094C0: jae 0x94c7
000094C2: mov word ptr [bp - 2], ax
000094C5: jmp 0x9501
000094C7: sub si, word ptr [bp - 0x1a]
000094CA: inc byte ptr [bp - 6]
000094CD: cmp byte ptr [bp - 6], 4
000094D1: jb 0x94dd
000094D3: sub si, 0x5fa6
000094D7: mov byte ptr [bp - 6], 0
000094DB: jmp 0x94e1
000094DD: add si, 0x2000
000094E1: add di, word ptr [bp - 0x22]
000094E4: jae 0x94f9
000094E6: mov dx, word ptr [bp + 0xc]
000094E9: mov ax, word ptr [bp + 0xa]
000094EC: stc 
000094ED: lcall 0xb08, 0x17e
000094F2: jae 0x94f9
000094F4: mov word ptr [bp - 2], ax
000094F7: jmp 0x9501
000094F9: jmp 0x9401
000094FC: mov word ptr [bp - 2], 0
00009501: mov ax, word ptr [bp - 2]
00009504: pop di
00009505: pop si
00009506: pop es
00009507: pop ds
00009508: mov sp, bp
0000950A: pop bp
0000950B: retf 0x12
0000950E: mov bx, word ptr [bp + 0x16]
00009511: mov ax, word ptr [bp + 0x14]
00009514: lcall [si + 0x26]
00009517: push dx
00009518: mov dx, es
0000951A: mov ds, dx
0000951C: pop dx
0000951D: mov si, bx
0000951F: mov byte ptr [bp - 0x24], dl
00009522: push word ptr [bp - 0xc]
00009525: push word ptr [bp - 0x24]
00009528: lcall 0xa36, 0xe
0000952D: les di, ptr [bp - 0xa]
00009530: mov bx, word ptr [bp - 0x18]
00009533: mov cx, word ptr [bp - 0x1c]
00009536: cmp di, word ptr [bp - 0x2a]
00009539: ja 0x956b
0000953B: cmp si, word ptr [bp - 0x2a]
0000953E: ja 0x956b
00009540: jmp 0x9570
00009542: or si, si
00009544: jne 0x9554
00009546: inc byte ptr [bp - 0x24]
00009549: push word ptr [bp - 0xc]
0000954C: push word ptr [bp - 0x24]
0000954F: lcall 0xa36, 0x63
00009554: or di, di
00009556: jne 0x956b
00009558: mov dx, word ptr [bp + 0xc]
0000955B: mov ax, word ptr [bp + 0xa]
0000955E: stc 
0000955F: lcall 0xb08, 0x17e
00009564: jae 0x956b
00009566: mov word ptr [bp - 2], ax
00009569: jmp 0x95d7
0000956B: movsb byte ptr es:[di], byte ptr [si]
0000956C: loop 0x9542
0000956E: jmp 0x9578
00009570: shr cx, 1
00009572: rep movsw word ptr es:[di], word ptr [si]
00009574: rcl cx, 1
00009576: rep movsb byte ptr es:[di], byte ptr [si]
00009578: dec bx
00009579: je 0x95d2
0000957B: or si, si
0000957D: jne 0x958d
0000957F: inc byte ptr [bp - 0x24]
00009582: push word ptr [bp - 0xc]
00009585: push word ptr [bp - 0x24]
00009588: lcall 0xa36, 0x63
0000958D: add si, word ptr [bp - 0x20]
00009590: jae 0x95a0
00009592: inc byte ptr [bp - 0x24]
00009595: push word ptr [bp - 0xc]
00009598: push word ptr [bp - 0x24]
0000959B: lcall 0xa36, 0x63
000095A0: or di, di
000095A2: jne 0x95b7
000095A4: mov dx, word ptr [bp + 0xc]
000095A7: mov ax, word ptr [bp + 0xa]
000095AA: stc 
000095AB: lcall 0xb08, 0x17e
000095B0: jae 0x95b7
000095B2: mov word ptr [bp - 2], ax
000095B5: jmp 0x95d7
000095B7: add di, word ptr [bp - 0x22]
000095BA: jae 0x95cf
000095BC: mov dx, word ptr [bp + 0xc]
000095BF: mov ax, word ptr [bp + 0xa]
000095C2: stc 
000095C3: lcall 0xb08, 0x17e
000095C8: jae 0x95cf
000095CA: mov word ptr [bp - 2], ax
000095CD: jmp 0x95d7
000095CF: jmp 0x9533
000095D2: mov word ptr [bp - 2], 0
000095D7: push word ptr [bp - 0xc]
000095DA: lcall 0xa36, 0x1a5
000095DF: mov ax, word ptr [bp - 2]
000095E2: pop di
000095E3: pop si
000095E4: pop es
000095E5: pop ds
000095E6: mov sp, bp
000095E8: pop bp
000095E9: retf 0x12
000095EC: push bp
000095ED: mov bp, sp
000095EF: sub sp, 2
000095F2: push ds
000095F3: push es
000095F4: push si
000095F5: push di
000095F6: mov ax, 0x1ab5
000095F9: mov ds, ax
000095FB: mov dx, word ptr [bp + 8]
000095FE: mov ax, word ptr [bp + 6]
00009601: mov si, 0x55e4
00009604: mov bx, word ptr [si]
00009606: add bx, word ptr [si + 2]
00009609: je 0x9611
0000960B: push dx
0000960C: push ax
0000960D: lcall [si]
0000960F: jmp 0x962d
00009611: mov bx, 0x10
00009614: div bx
00009616: or dx, dx
00009618: je 0x961b
0000961A: inc ax
0000961B: mov bx, ax
0000961D: mov ah, 0x48
0000961F: int 0x21
00009621: jae 0x9629
00009623: xor dx, dx
00009625: xor ax, ax
00009627: jmp 0x962d
00009629: mov dx, ax
0000962B: xor ax, ax
0000962D: mov word ptr [bp - 2], ax
00009630: mov ax, word ptr [bp - 2]
00009633: pop di
00009634: pop si
00009635: pop es
00009636: pop ds
00009637: mov sp, bp
00009639: pop bp
0000963A: retf 4
0000963D: push bp
0000963E: mov bp, sp
00009640: sub sp, 2
00009643: push ds
00009644: push es
00009645: push si
00009646: push di
00009647: mov ax, 0x1ab5
0000964A: mov ds, ax
0000964C: les di, ptr [bp + 6]
0000964F: mov si, 0x55e8
00009652: mov bx, word ptr [si]
00009654: add bx, word ptr [si + 2]
00009657: je 0x9668
00009659: push es
0000965A: push di
0000965B: lcall [si]
0000965D: or ax, ax
0000965F: je 0x9675
00009661: mov word ptr [bp - 2], 0xffe7
00009666: jmp 0x967a
00009668: mov ah, 0x49
0000966A: int 0x21
0000966C: jae 0x9675
0000966E: mov word ptr [bp - 2], 0xffe7
00009673: jmp 0x967a
00009675: mov word ptr [bp - 2], 0
0000967A: mov ax, word ptr [bp - 2]
0000967D: pop di
0000967E: pop si
0000967F: pop es
00009680: pop ds
00009681: mov sp, bp
00009683: pop bp
00009684: retf 4
00009687: push bp
00009688: mov bp, sp
0000968A: sub sp, 2
0000968D: push ds
0000968E: push es
0000968F: push si
00009690: push di
00009691: mov ax, 0x1ab5
00009694: mov ds, ax
00009696: mov si, 0x55ec
00009699: mov bx, word ptr [si]
0000969B: add bx, word ptr [si + 2]
0000969E: je 0x96a4
000096A0: lcall [si]
000096A2: jmp 0x96b0
000096A4: mov bx, 0xffff
000096A7: mov ah, 0x48
000096A9: int 0x21
000096AB: mov ax, 0x10
000096AE: mul bx
000096B0: mov word ptr [bp - 2], ax
000096B3: mov ax, word ptr [bp - 2]
000096B6: pop di
000096B7: pop si
000096B8: pop es
000096B9: pop ds
000096BA: mov sp, bp
000096BC: pop bp
000096BD: retf 
000096BE: push bp
000096BF: mov bp, sp
000096C1: sub sp, 2
000096C4: push ds
000096C5: push es
000096C6: push si
000096C7: push di
000096C8: mov ax, 0x1ab5
000096CB: mov ds, ax
000096CD: mov ax, word ptr [bp + 0xe]
000096D0: add ax, word ptr [bp + 0x10]
000096D3: je 0x970b
000096D5: mov ax, word ptr [bp + 0xa]
000096D8: add ax, word ptr [bp + 0xc]
000096DB: je 0x970b
000096DD: mov ax, word ptr [bp + 6]
000096E0: add ax, word ptr [bp + 8]
000096E3: je 0x970b
000096E5: mov ax, word ptr [bp + 0xe]
000096E8: mov word ptr [0x55e4], ax
000096EB: mov ax, word ptr [bp + 0x10]
000096EE: mov word ptr [0x55e6], ax
000096F1: mov ax, word ptr [bp + 0xa]
000096F4: mov word ptr [0x55e8], ax
000096F7: mov ax, word ptr [bp + 0xc]
000096FA: mov word ptr [0x55ea], ax
000096FD: mov ax, word ptr [bp + 6]
00009700: mov word ptr [0x55ec], ax
00009703: mov ax, word ptr [bp + 8]
00009706: mov word ptr [0x55ee], ax
00009709: jmp 0x971d
0000970B: mov word ptr [0x55e4], ax
0000970E: mov word ptr [0x55e6], ax
00009711: mov word ptr [0x55e8], ax
00009714: mov word ptr [0x55ea], ax
00009717: mov word ptr [0x55ec], ax
0000971A: mov word ptr [0x55ee], ax
0000971D: mov word ptr [bp - 2], 0
00009722: mov ax, word ptr [bp - 2]
00009725: pop di
00009726: pop si
00009727: pop es
00009728: pop ds
00009729: mov sp, bp
0000972B: pop bp
0000972C: retf 0xc
0000972F: add byte ptr [di - 0x75], dl
00009732: in al, dx
00009733: sub sp, 0x24
00009736: push ds
00009737: push es
00009738: push si
00009739: push di
0000973A: mov ax, 0x1ab5
0000973D: mov ds, ax
0000973F: cmp byte ptr [0x55f1], 1
00009744: je 0x974a
00009746: push cs
00009747: call 0x987e
0000974A: mov ax, word ptr [0x54d4]
0000974D: mov word ptr [bp - 4], ax
00009750: les di, ptr [bp + 0x10]
00009753: push es
00009754: push di
00009755: xor ax, ax
00009757: push ax
00009758: push ax
00009759: mov ax, 1
0000975C: push ax
0000975D: lcall 0xb08, 0xa
00009762: or dx, dx
00009764: jne 0x976c
00009766: mov word ptr [bp - 2], ax
00009769: jmp 0x9871
0000976C: lcall 0x98e, 0x35e
00009771: or ax, ax
00009773: jge 0x977b
00009775: mov word ptr [bp - 2], ax
00009778: jmp 0x9871
0000977B: mov word ptr [bp - 0x24], ax
0000977E: push ax
0000977F: lcall 0x98e, 0x12a
00009784: jae 0x978e
00009786: mov word ptr [bp - 2], 0xfc19
0000978B: jmp 0x9871
0000978E: mov ds, dx
00009790: mov si, ax
00009792: cmp word ptr [bp - 4], 1
00009796: jne 0x97af
00009798: cmp byte ptr [si], 9
0000979B: je 0x97af
0000979D: lcall 0x98e, 0x18a
000097A2: cmp al, byte ptr [si + 0x16]
000097A5: je 0x97af
000097A7: mov word ptr [bp - 2], 0xfff9
000097AC: jmp 0x9871
000097AF: mov al, byte ptr [si + 0x1e]
000097B2: cmp al, byte ptr es:[di + 0x12]
000097B6: je 0x97c0
000097B8: mov word ptr [bp - 2], 0xfffa
000097BD: jmp 0x9871
000097C0: mov al, byte ptr [si + 0x17]
000097C3: cmp al, byte ptr es:[di + 0x13]
000097C7: je 0x97d1
000097C9: mov word ptr [bp - 2], 0xfffa
000097CE: jmp 0x9871
000097D1: mov ax, word ptr [si + 0x18]
000097D4: cmp word ptr [bp + 0xe], ax
000097D7: jb 0x97e1
000097D9: mov word ptr [bp - 2], 0
000097DE: jmp 0x9871
000097E1: cmp word ptr [bp + 0xa], ax
000097E4: jb 0x97ea
000097E6: dec ax
000097E7: mov word ptr [bp + 0xa], ax
000097EA: mov ax, word ptr es:[di + 0x30]
000097EE: mov word ptr [bp - 0xa], ax
000097F1: mov ax, word ptr [bp + 0xa]
000097F4: sub ax, word ptr [bp + 0xe]
000097F7: inc ax
000097F8: or ax, ax
000097FA: jg 0x9803
000097FC: mov word ptr [bp - 2], 0xffe5
00009801: jmp 0x9871
00009803: cmp ax, word ptr es:[di + 0x2c]
00009807: jge 0x981d
00009809: xor bx, bx
0000980B: mov bl, byte ptr [si + 0x17]
0000980E: mul bx
00009810: mov bx, 8
00009813: div bx
00009815: or dx, dx
00009817: je 0x981a
00009819: inc ax
0000981A: mov word ptr [bp - 0xa], ax
0000981D: mov ax, word ptr [si + 0x1a]
00009820: cmp word ptr [bp + 0xc], ax
00009823: jb 0x982c
00009825: mov word ptr [bp - 2], 0
0000982A: jmp 0x9871
0000982C: cmp word ptr [bp + 8], ax
0000982F: jb 0x9835
00009831: dec ax
00009832: mov word ptr [bp + 8], ax
00009835: mov ax, word ptr es:[di + 0x2e]
00009839: mov word ptr [bp - 8], ax
0000983C: mov ax, word ptr [bp + 8]
0000983F: sub ax, word ptr [bp + 0xc]
00009842: inc ax
00009843: or ax, ax
00009845: jg 0x984e
00009847: mov word ptr [bp - 2], 0xffe5
0000984C: jmp 0x9871
0000984E: cmp ax, word ptr es:[di + 0x2e]
00009852: jge 0x9857
00009854: mov word ptr [bp - 8], ax
00009857: mov ax, word ptr [si + 0x1c]
0000985A: mov word ptr [bp - 0xc], ax
0000985D: sub ax, word ptr [bp - 0xa]
00009860: mov word ptr [bp - 0x1c], ax
00009863: mov ax, word ptr es:[di + 0x14]
00009867: sub ax, word ptr [bp - 0xa]
0000986A: mov word ptr [bp - 0x1e], ax
0000986D: cld 
0000986E: jmp word ptr [si + 0x2c]
00009871: mov ax, word ptr [bp - 2]
00009874: pop di
00009875: pop si
00009876: pop es
00009877: pop ds
00009878: mov sp, bp
0000987A: pop bp
0000987B: retf 0xe
0000987E: xor ax, ax
00009880: push ax
00009881: lcall 0x98e, 0x12a
00009886: mov bx, ax
00009888: mov word ptr [bx + 0x2c], 0x1e6
0000988D: add bx, 0x36
00009890: mov word ptr [bx + 0x2c], 0x1e6
00009895: add bx, 0x36
00009898: mov word ptr [bx + 0x2c], 0x251
0000989D: add bx, 0x36
000098A0: mov word ptr [bx + 0x2c], 0x251
000098A5: add bx, 0x36
000098A8: mov word ptr [bx + 0x2c], 0x251
000098AD: add bx, 0x36
000098B0: mov word ptr [bx + 0x2c], 0x251
000098B5: add bx, 0x36
000098B8: mov word ptr [bx + 0x2c], 0x251
000098BD: add bx, 0x36
000098C0: mov word ptr [bx + 0x2c], 0x251
000098C5: add bx, 0x36
000098C8: mov word ptr [bx + 0x2c], 0x2dd
000098CD: add bx, 0x36
000098D0: mov word ptr [bx + 0x2c], 0x31e
000098D5: add bx, 0x36
000098D8: mov word ptr [bx + 0x2c], 0x38e
000098DD: add bx, 0x36
000098E0: mov word ptr [bx + 0x2c], 0x251
000098E5: add bx, 0x36
000098E8: mov word ptr [bx + 0x2c], 0x38e
000098ED: add bx, 0x36
000098F0: mov word ptr [bx + 0x2c], 0x38e
000098F5: add bx, 0x36
000098F8: mov word ptr [bx + 0x2c], 0x251
000098FD: add bx, 0x36
00009900: mov word ptr [bx + 0x2c], 0x38e
00009905: add bx, 0x36
00009908: mov word ptr [bx + 0x2c], 0x38e
0000990D: add bx, 0x36
00009910: mov byte ptr [0x55f1], 1
00009915: retf 
00009916: mov ax, word ptr [bp + 0xe]
00009919: mov cl, byte ptr [si + 0x17]
0000991C: dec cl
0000991E: shl ax, cl
00009920: and al, 7
00009922: mov byte ptr [bp - 0x20], al
00009925: push es
00009926: mov bx, word ptr [bp + 0xe]
00009929: mov ax, word ptr [bp + 0xc]
0000992C: lcall [si + 0x26]
0000992F: push dx
00009930: mov dx, es
00009932: mov ds, dx
00009934: pop dx
00009935: mov si, bx
00009937: pop es
00009938: mov bx, 0x2000
0000993B: mov ax, word ptr [bp + 0xc]
0000993E: test ax, 1
00009941: je 0x9948
00009943: add dx, bx
00009945: mov bx, 0xe050
00009948: mov word ptr [bp - 4], bx
0000994B: mov cl, byte ptr [bp - 0x20]
0000994E: les di, ptr es:[di + 0x18]
00009952: push si
00009953: mov bx, word ptr [bp - 0xa]
00009956: lodsw ax, word ptr [si]
00009957: dec si
00009958: rol ax, cl
0000995A: stosb byte ptr es:[di], al
0000995B: dec bx
0000995C: jne 0x9956
0000995E: add di, word ptr [bp - 0x1e]
00009961: pop si
00009962: add si, word ptr [bp - 4]
00009965: xor word ptr [bp - 4], 0xc050
0000996A: dec word ptr [bp - 8]
0000996D: jne 0x9952
0000996F: mov word ptr [bp - 2], 0
00009974: mov ax, word ptr [bp - 2]
00009977: pop di
00009978: pop si
00009979: pop es
0000997A: pop ds
0000997B: mov sp, bp
0000997D: pop bp
0000997E: retf 0xe
00009981: mov al, 5
00009983: mov ah, 0
00009985: mov dx, 0x3ce
00009988: out dx, ax
00009989: mov al, 4
0000998B: mov ah, 0
0000998D: mov dx, 0x3ce
00009990: out dx, ax
00009991: mov al, 8
00009993: mov ah, 0xff
00009995: mov dx, 0x3ce
00009998: out dx, ax
00009999: mov ax, word ptr [bp + 0xe]
0000999C: and al, 7
0000999E: mov byte ptr [bp - 0x20], al
000099A1: push es
000099A2: mov bx, word ptr [bp + 0xe]
000099A5: mov ax, word ptr [bp + 0xc]
000099A8: lcall [si + 0x26]
000099AB: mov ax, word ptr [si + 0x22]
000099AE: mov dx, word ptr [bp + 6]
000099B1: mul dx
000099B3: push dx
000099B4: mov dx, es
000099B6: mov ds, dx
000099B8: pop dx
000099B9: add ax, bx
000099BB: mov si, ax
000099BD: pop es
000099BE: mov al, byte ptr es:[di + 0x12]
000099C2: mov byte ptr [bp - 0x10], al
000099C5: xor ch, ch
000099C7: mov cl, byte ptr [bp - 0x20]
000099CA: les di, ptr es:[di + 0x18]
000099CE: mov bx, word ptr [bp - 0xa]
000099D1: push si
000099D2: lodsw ax, word ptr [si]
000099D3: dec si
000099D4: rol ax, cl
000099D6: stosb byte ptr es:[di], al
000099D7: dec bx
000099D8: jne 0x99d2
000099DA: add di, word ptr [bp - 0x1e]
000099DD: pop si
000099DE: inc ch
000099E0: cmp ch, byte ptr [bp - 0x10]
000099E3: jb 0x99f1
000099E5: xor ch, ch
000099E7: add si, word ptr [bp - 0xc]
000099EA: dec word ptr [bp - 8]
000099ED: jne 0x99f1
000099EF: jmp 0x99fb
000099F1: mov al, 4
000099F3: mov ah, ch
000099F5: mov dx, 0x3ce
000099F8: out dx, ax
000099F9: jmp 0x99ce
000099FB: mov word ptr [bp - 2], 0
00009A00: mov ax, word ptr [bp - 2]
00009A03: pop di
00009A04: pop si
00009A05: pop es
00009A06: pop ds
00009A07: mov sp, bp
00009A09: pop bp
00009A0A: retf 0xe
00009A0D: push es
00009A0E: mov bx, word ptr [bp + 0xe]
00009A11: mov ax, word ptr [bp + 0xc]
00009A14: lcall [si + 0x26]
00009A17: push dx
00009A18: mov dx, es
00009A1A: mov ds, dx
00009A1C: pop dx
00009A1D: mov si, bx
00009A1F: pop es
00009A20: mov cx, word ptr [bp - 0xa]
00009A23: les di, ptr es:[di + 0x18]
00009A27: push cx
00009A28: shr cx, 1
00009A2A: rep movsw word ptr es:[di], word ptr [si]
00009A2C: rcl cx, 1
00009A2E: rep movsb byte ptr es:[di], byte ptr [si]
00009A30: pop cx
00009A31: add si, word ptr [bp - 0x1c]
00009A34: add di, word ptr [bp - 0x1e]
00009A37: dec word ptr [bp - 8]
00009A3A: jne 0x9a27
00009A3C: mov word ptr [bp - 2], 0
00009A41: mov ax, word ptr [bp - 2]
00009A44: pop di
00009A45: pop si
00009A46: pop es
00009A47: pop ds
00009A48: mov sp, bp
00009A4A: pop bp
00009A4B: retf 0xe
00009A4E: mov ax, word ptr [bp + 0xe]
00009A51: and al, 7
00009A53: mov byte ptr [bp - 0x20], al
00009A56: push es
00009A57: mov bx, word ptr [bp + 0xe]
00009A5A: mov ax, word ptr [bp + 0xc]
00009A5D: lcall [si + 0x26]
00009A60: mov ax, word ptr [si + 0x22]
00009A63: mov dx, word ptr [bp + 6]
00009A66: mul dx
00009A68: push dx
00009A69: mov dx, es
00009A6B: mov ds, dx
00009A6D: pop dx
00009A6E: add ax, bx
00009A70: mov si, ax
00009A72: pop es
00009A73: mov ax, word ptr [bp + 0xc]
00009A76: and al, 3
00009A78: mov byte ptr [bp - 6], 4
00009A7C: sub byte ptr [bp - 6], al
00009A7F: mov cl, byte ptr [bp - 0x20]
00009A82: les di, ptr es:[di + 0x18]
00009A86: mov bx, word ptr [bp - 0xa]
00009A89: push si
00009A8A: lodsw ax, word ptr [si]
00009A8B: dec si
00009A8C: rol ax, cl
00009A8E: stosb byte ptr es:[di], al
00009A8F: dec bx
00009A90: jne 0x9a8a
00009A92: add di, word ptr [bp - 0x1e]
00009A95: pop si
00009A96: add si, 0x2000
00009A9A: dec byte ptr [bp - 6]
00009A9D: jne 0x9aa7
00009A9F: sub si, 0x7fa6
00009AA3: mov byte ptr [bp - 6], 4
00009AA7: dec word ptr [bp - 8]
00009AAA: jne 0x9a86
00009AAC: mov word ptr [bp - 2], 0
00009AB1: mov ax, word ptr [bp - 2]
00009AB4: pop di
00009AB5: pop si
00009AB6: pop es
00009AB7: pop ds
00009AB8: mov sp, bp
00009ABA: pop bp
00009ABB: retf 0xe
00009ABE: push es
00009ABF: mov bx, word ptr [bp + 0xe]
00009AC2: mov ax, word ptr [bp + 0xc]
00009AC5: lcall [si + 0x26]
00009AC8: push dx
00009AC9: mov dx, es
00009ACB: mov ds, dx
00009ACD: pop dx
00009ACE: mov si, bx
00009AD0: mov byte ptr [bp - 0x14], dl
00009AD3: push word ptr [bp - 0x24]
00009AD6: push word ptr [bp - 0x14]
00009AD9: lcall 0xa36, 0xe
00009ADE: pop es
00009ADF: mov ax, word ptr [bp - 0xa]
00009AE2: not ax
00009AE4: mov word ptr [bp - 0x22], ax
00009AE7: les di, ptr es:[di + 0x18]
00009AEB: mov cx, word ptr [bp - 0xa]
00009AEE: cmp si, word ptr [bp - 0x22]
00009AF1: jbe 0x9b0a
00009AF3: movsb byte ptr es:[di], byte ptr [si]
00009AF4: or si, si
00009AF6: jne 0x9b06
00009AF8: inc byte ptr [bp - 0x14]
00009AFB: push word ptr [bp - 0x24]
00009AFE: push word ptr [bp - 0x14]
00009B01: lcall 0xa36, 0x63
00009B06: loop 0x9af3
00009B08: jmp 0x9b12
00009B0A: shr cx, 1
00009B0C: rep movsw word ptr es:[di], word ptr [si]
00009B0E: rcl cx, 1
00009B10: rep movsb byte ptr es:[di], byte ptr [si]
00009B12: add di, word ptr [bp - 0x1e]
00009B15: add si, word ptr [bp - 0x1c]
00009B18: jae 0x9b28
00009B1A: inc byte ptr [bp - 0x14]
00009B1D: push word ptr [bp - 0x24]
00009B20: push word ptr [bp - 0x14]
00009B23: lcall 0xa36, 0x63
00009B28: dec word ptr [bp - 8]
00009B2B: je 0x9b2f
00009B2D: jmp 0x9aeb
00009B2F: mov word ptr [bp - 2], 0
00009B34: push word ptr [bp - 0x24]
00009B37: lcall 0xa36, 0x1a5
00009B3C: mov ax, word ptr [bp - 2]
00009B3F: pop di
00009B40: pop si
00009B41: pop es
00009B42: pop ds
00009B43: mov sp, bp
00009B45: pop bp
00009B46: retf 0xe
00009B49: add byte ptr [di - 0x75], dl
00009B4C: in al, dx
00009B4D: sub sp, 4
00009B50: push ds
00009B51: push es
00009B52: push si
00009B53: push di
00009B54: mov ax, 0x1ab5
00009B57: mov ds, ax
00009B59: push word ptr [bp + 0x16]
00009B5C: push word ptr [bp + 0x14]
00009B5F: push word ptr [bp + 0x12]
00009B62: push word ptr [bp + 0x10]
00009B65: push ds
00009B66: mov si, 0x43bf
00009B69: push si
00009B6A: lcall 0x80c, 0x56c
00009B6F: or ax, ax
00009B71: jge 0x9b75
00009B73: jmp 0x9be7
00009B75: mov word ptr [bp - 4], ax
00009B78: mov dx, word ptr [bp + 0xe]
00009B7B: mov ax, word ptr [bp + 0xc]
00009B7E: add ax, word ptr [bp + 0xa]
00009B81: adc dx, 0
00009B84: jae 0x9b8b
00009B86: mov ax, 0xffdd
00009B89: jmp 0x9bda
00009B8B: cmp dx, word ptr [si + 0x14]
00009B8E: jb 0x9ba1
00009B90: je 0x9b97
00009B92: mov ax, 0xffdd
00009B95: jmp 0x9bda
00009B97: cmp ax, word ptr [si + 0x12]
00009B9A: jbe 0x9ba1
00009B9C: mov ax, 0xffdd
00009B9F: jmp 0x9bda
00009BA1: mov dx, word ptr [si + 0x10]
00009BA4: mov ax, word ptr [si + 0xe]
00009BA7: add ax, word ptr [bp + 0xc]
00009BAA: adc dx, word ptr [bp + 0xe]
00009BAD: mov bx, word ptr [bp - 4]
00009BB0: mov cx, dx
00009BB2: mov dx, ax
00009BB4: mov al, 0
00009BB6: mov ah, 0x42
00009BB8: int 0x21
00009BBA: jae 0x9bc1
00009BBC: mov ax, 0xfffd
00009BBF: jmp 0x9bda
00009BC1: mov bx, word ptr [bp - 4]
00009BC4: mov cx, word ptr [bp + 0xa]
00009BC7: mov dx, word ptr [bp + 6]
00009BCA: push ds
00009BCB: mov ax, word ptr [bp + 8]
00009BCE: mov ds, ax
00009BD0: mov ah, 0x3f
00009BD2: int 0x21
00009BD4: pop ds
00009BD5: jae 0x9bda
00009BD7: mov ax, 0xfffd
00009BDA: push ax
00009BDB: push word ptr [bp + 0x16]
00009BDE: push word ptr [bp + 0x14]
00009BE1: lcall 0x80c, 0x640
00009BE6: pop ax
00009BE7: cdq 
00009BE8: mov word ptr [bp - 2], ax
00009BEB: mov ax, word ptr [bp - 2]
00009BEE: pop di
00009BEF: pop si
00009BF0: pop es
00009BF1: pop ds
00009BF2: mov sp, bp
00009BF4: pop bp
00009BF5: retf 0x12
00009BF8: push bp
00009BF9: mov bp, sp
00009BFB: push cx
00009BFC: xchg cx, ax
00009BFD: xchg dx, ax
00009BFE: mul bx
00009C00: xchg cx, ax
00009C01: mul bx
00009C03: add dx, cx
00009C05: pop cx
00009C06: mov sp, bp
00009C08: pop bp
00009C09: retf 
00009C0A: push bp
00009C0B: mov bp, sp
00009C0D: push cx
00009C0E: xchg cx, ax
00009C0F: xchg dx, ax
00009C10: mul bx
00009C12: xchg cx, ax
00009C13: or bx, bx
00009C15: jns 0x9c19
00009C17: sub cx, ax
00009C19: mul bx
00009C1B: add dx, cx
00009C1D: pop cx
00009C1E: mov sp, bp
00009C20: pop bp
00009C21: retf 
00009C22: push bp
00009C23: mov bp, sp
00009C25: or bx, bx
00009C27: je 0x9c3c
00009C29: push cx
00009C2A: xor cx, cx
00009C2C: cmp dx, bx
00009C2E: jb 0x9c35
00009C30: xchg cx, ax
00009C31: xchg dx, ax
00009C32: div bx
00009C34: xchg cx, ax
00009C35: div bx
00009C37: mov bx, dx
00009C39: mov dx, cx
00009C3B: pop cx
00009C3C: mov sp, bp
00009C3E: pop bp
00009C3F: retf 
00009C40: push bp
00009C41: mov bp, sp
00009C43: push si
00009C44: push di
00009C45: mov di, ax
00009C47: mov al, dh
00009C49: mov ah, ch
00009C4B: xor ah, dh
00009C4D: push ax
00009C4E: mov ax, di
00009C50: or dx, dx
00009C52: jns 0x9c5b
00009C54: neg dx
00009C56: neg ax
00009C58: sbb dx, 0
00009C5B: or cx, cx
00009C5D: jns 0x9c66
00009C5F: neg cx
00009C61: neg bx
00009C63: sbb cx, 0
00009C66: or cx, cx
00009C68: je 0x9c95
00009C6A: push bx
00009C6B: push cx
00009C6C: push ax
00009C6D: xchg dx, ax
00009C6E: xor dx, dx
00009C70: div cx
00009C72: mov di, ax
00009C74: mov si, dx
00009C76: mul bx
00009C78: mov cx, si
00009C7A: pop bx
00009C7B: sub bx, ax
00009C7D: sbb cx, dx
00009C7F: xor dx, dx
00009C81: mov ax, di
00009C83: pop di
00009C84: pop si
00009C85: or cx, cx
00009C87: jns 0x9cac
00009C89: add bx, si
00009C8B: adc cx, di
00009C8D: sub ax, 1
00009C90: sbb dx, 0
00009C93: jmp 0x9c85
00009C95: or bx, bx
00009C97: je 0x9cac
00009C99: xor cx, cx
00009C9B: cmp dx, bx
00009C9D: jb 0x9ca4
00009C9F: xchg cx, ax
00009CA0: xchg dx, ax
00009CA1: div bx
00009CA3: xchg cx, ax
00009CA4: div bx
00009CA6: xchg cx, dx
00009CA8: xor bx, bx
00009CAA: xchg bx, cx
00009CAC: mov di, bx
00009CAE: pop bx
00009CAF: shl bh, 1
00009CB1: jae 0x9cba
00009CB3: neg dx
00009CB5: neg ax
00009CB7: sbb dx, 0
00009CBA: shl bl, 1
00009CBC: mov bx, di
00009CBE: jae 0x9cc7
00009CC0: neg cx
00009CC2: neg bx
00009CC4: sbb cx, 0
00009CC7: pop di
00009CC8: pop si
00009CC9: mov sp, bp
00009CCB: pop bp
00009CCC: retf 
00009CCD: add byte ptr [di - 0x75], dl
00009CD0: in al, dx
00009CD1: sub sp, 0x82
00009CD5: push ds
00009CD6: push es
00009CD7: push si
00009CD8: push di
00009CD9: mov ax, 0x1ab5
00009CDC: mov ds, ax
00009CDE: mov ax, word ptr [bp + 0x14]
00009CE1: cmp ax, 0
00009CE4: je 0x9cf8
00009CE6: cmp ax, 1
00009CE9: je 0x9d04
00009CEB: cmp ax, 2
00009CEE: je 0x9d04
00009CF0: mov word ptr [bp - 2], 0xfff4
00009CF5: jmp 0x9e62
00009CF8: les di, ptr [bp + 0xc]
00009CFB: mov ax, word ptr [bp + 0x14]
00009CFE: mov byte ptr es:[di], al
00009D01: jmp 0x9e5d
00009D04: push ds
00009D05: cld 
00009D06: push dx
00009D07: mov dx, word ptr [bp + 0x12]
00009D0A: mov ds, dx
00009D0C: pop dx
00009D0D: push dx
00009D0E: mov dx, ss
00009D10: mov es, dx
00009D12: pop dx
00009D13: mov si, word ptr [bp + 0x10]
00009D16: mov di, bp
00009D18: sub di, 0x82
00009D1C: mov word ptr [bp + 0x12], es
00009D1F: mov word ptr [bp + 0x10], di
00009D22: movsb byte ptr es:[di], byte ptr [si]
00009D23: cmp byte ptr [si - 1], 0
00009D27: jne 0x9d22
00009D29: pop ds
00009D2A: push dx
00009D2B: mov dx, ss
00009D2D: mov ds, dx
00009D2F: pop dx
00009D30: mov si, bp
00009D32: sub si, 0x82
00009D36: les di, ptr [bp + 0xc]
00009D39: add di, 1
00009D3C: cld 
00009D3D: mov cx, 0x41
00009D40: movsb byte ptr es:[di], byte ptr [si]
00009D41: cmp byte ptr es:[di - 1], 0
00009D46: je 0x9d4a
00009D48: loop 0x9d40
00009D4A: mov di, word ptr [bp + 0xc]
00009D4D: mov ax, word ptr [bp + 0x14]
00009D50: mov byte ptr es:[di], al
00009D53: xor ax, ax
00009D55: mov word ptr es:[di + 0x48], ax
00009D59: mov word ptr es:[di + 0x46], ax
00009D5D: push ds
00009D5E: mov ah, 0x30
00009D60: int 0x21
00009D62: xor ah, ah
00009D64: cmp al, 2
00009D66: jbe 0x9d6a
00009D68: mov ah, 0x40
00009D6A: mov dx, word ptr [bp + 0x10]
00009D6D: push dx
00009D6E: mov dx, word ptr [bp + 0x12]
00009D71: mov ds, dx
00009D73: pop dx
00009D74: mov al, 0
00009D76: or al, ah
00009D78: mov ah, 0x3d
00009D7A: int 0x21
00009D7C: pop ds
00009D7D: mov word ptr es:[di + 0x42], ax
00009D81: jae 0x9d8b
00009D83: mov word ptr [bp - 2], 0xffff
00009D88: jmp 0x9e62
00009D8B: mov ax, 0x1ab5
00009D8E: mov ds, ax
00009D90: mov si, 0x43bf
00009D93: cmp word ptr [bp + 0x14], 2
00009D97: jne 0x9de9
00009D99: mov bx, word ptr es:[di + 0x42]
00009D9D: mov cx, 0xe
00009DA0: mov dx, si
00009DA2: mov ah, 0x3f
00009DA4: int 0x21
00009DA6: jae 0x9db0
00009DA8: mov word ptr [bp - 2], 0xfffd
00009DAD: jmp 0x9e62
00009DB0: cmp word ptr [si], 0x5a4d
00009DB4: je 0x9dbe
00009DB6: mov word ptr [bp - 2], 0xfff4
00009DBB: jmp 0x9e62
00009DBE: mov ax, word ptr [si + 4]
00009DC1: cmp word ptr [si + 2], 0
00009DC5: je 0x9dc8
00009DC7: dec ax
00009DC8: mov bx, 0x200
00009DCB: mul bx
00009DCD: add ax, word ptr [si + 2]
00009DD0: adc dx, 0
00009DD3: mov word ptr es:[di + 0x48], dx
00009DD7: mov word ptr es:[di + 0x46], ax
00009DDB: mov bx, word ptr es:[di + 0x42]
00009DDF: mov cx, dx
00009DE1: mov dx, ax
00009DE3: mov al, 0
00009DE5: mov ah, 0x42
00009DE7: int 0x21
00009DE9: mov bx, word ptr es:[di + 0x42]
00009DED: mov cx, 0x80
00009DF0: mov dx, si
00009DF2: mov ah, 0x3f
00009DF4: int 0x21
00009DF6: jae 0x9dff
00009DF8: mov word ptr [bp - 2], 0xfffd
00009DFD: jmp 0x9e62
00009DFF: cmp word ptr [si], 0xca01
00009E03: je 0x9e0c
00009E05: mov word ptr [bp - 2], 0xfff4
00009E0A: jmp 0x9e62
00009E0C: mov ax, word ptr [si + 0x5e]
00009E0F: mov word ptr es:[di + 0x44], ax
00009E13: mov word ptr es:[di + 0x4e], 6
00009E19: mov ax, es
00009E1B: mov word ptr es:[di + 0x52], ax
00009E1F: mov ax, di
00009E21: add ax, 0x64
00009E24: mov word ptr es:[di + 0x50], ax
00009E28: mov ax, word ptr [bp + 6]
00009E2B: or ax, ax
00009E2D: je 0x9e48
00009E2F: xor dx, dx
00009E31: mov bx, 0x1a
00009E34: div bx
00009E36: mov word ptr es:[di + 0x4e], ax
00009E3A: mov ax, word ptr [bp + 0xa]
00009E3D: mov word ptr es:[di + 0x52], ax
00009E41: mov ax, word ptr [bp + 8]
00009E44: mov word ptr es:[di + 0x50], ax
00009E48: mov word ptr es:[di + 0x4a], 0xffff
00009E4E: mov word ptr es:[di + 0x4c], 0xffff
00009E54: push es
00009E55: push di
00009E56: xor ax, ax
00009E58: push ax
00009E59: push cs
00009E5A: call 0x9ebd
00009E5D: mov word ptr [bp - 2], 0
00009E62: mov ax, word ptr [bp - 2]
00009E65: pop di
00009E66: pop si
00009E67: pop es
00009E68: pop ds
00009E69: mov sp, bp
00009E6B: pop bp
00009E6C: retf 0x10
00009E6F: push bp
00009E70: mov bp, sp
00009E72: sub sp, 2
00009E75: push ds
00009E76: push es
00009E77: push si
00009E78: push di
00009E79: mov ax, 0x1ab5
00009E7C: mov ds, ax
00009E7E: les di, ptr [bp + 6]
00009E81: cmp byte ptr es:[di], 0
00009E85: je 0x9eab
00009E87: cmp byte ptr es:[di], 1
00009E8B: je 0x9e9a
00009E8D: cmp byte ptr es:[di], 2
00009E91: je 0x9e9a
00009E93: mov word ptr [bp - 2], 0xfff4
00009E98: jmp 0x9eb0
00009E9A: mov bx, word ptr es:[di + 0x42]
00009E9E: mov ah, 0x3e
00009EA0: int 0x21
00009EA2: jae 0x9eab
00009EA4: mov word ptr [bp - 2], 0xffdf
00009EA9: jmp 0x9eb0
00009EAB: mov word ptr [bp - 2], 0
00009EB0: mov ax, word ptr [bp - 2]
00009EB3: pop di
00009EB4: pop si
00009EB5: pop es
00009EB6: pop ds
00009EB7: mov sp, bp
00009EB9: pop bp
00009EBA: retf 4
00009EBD: push bp
00009EBE: mov bp, sp
00009EC0: sub sp, 4
00009EC3: push ds
00009EC4: push es
00009EC5: push si
00009EC6: push di
00009EC7: mov ax, 0x1ab5
00009ECA: mov ds, ax
00009ECC: les di, ptr [bp + 8]
00009ECF: cmp byte ptr es:[di], 1
00009ED3: je 0x9ee3
00009ED5: cmp byte ptr es:[di], 2
00009ED9: je 0x9ee3
00009EDB: mov word ptr [bp - 2], 0xfff4
00009EE0: jmp 0x9f70
00009EE3: mov ax, word ptr [bp + 6]
00009EE6: cmp ax, word ptr es:[di + 0x4a]
00009EEA: jne 0x9eee
00009EEC: jmp 0x9f6b
00009EEE: cmp ax, word ptr es:[di + 0x44]
00009EF2: jbe 0x9efb
00009EF4: mov word ptr [bp - 2], 0xfc19
00009EF9: jmp 0x9f70
00009EFB: mov bx, word ptr es:[di + 0x44]
00009EFF: sub bx, word ptr es:[di + 0x4e]
00009F03: jns 0x9f07
00009F05: xor bx, bx
00009F07: cmp ax, bx
00009F09: jb 0x9f0d
00009F0B: mov ax, bx
00009F0D: mov word ptr [bp - 4], ax
00009F10: mov bx, 0x1a
00009F13: mul bx
00009F15: add ax, word ptr es:[di + 0x46]
00009F19: adc dx, word ptr es:[di + 0x48]
00009F1D: add ax, 0x80
00009F20: adc dx, 0
00009F23: mov bx, word ptr es:[di + 0x42]
00009F27: mov cx, dx
00009F29: mov dx, ax
00009F2B: mov al, 0
00009F2D: mov ah, 0x42
00009F2F: int 0x21
00009F31: mov ax, word ptr es:[di + 0x4e]
00009F35: cmp ax, word ptr es:[di + 0x44]
00009F39: jb 0x9f3f
00009F3B: mov ax, word ptr es:[di + 0x44]
00009F3F: mov bx, 0x1a
00009F42: mul bx
00009F44: lds si, ptr es:[di + 0x50]
00009F48: mov bx, word ptr es:[di + 0x42]
00009F4C: mov cx, ax
00009F4E: mov dx, si
00009F50: mov ah, 0x3f
00009F52: int 0x21
00009F54: jae 0x9f5d
00009F56: mov word ptr [bp - 2], 0xfffd
00009F5B: jmp 0x9f70
00009F5D: mov ax, word ptr [bp - 4]
00009F60: mov word ptr es:[di + 0x4a], ax
00009F64: mov ax, word ptr [bp + 6]
00009F67: mov word ptr es:[di + 0x4c], ax
00009F6B: mov word ptr [bp - 2], 0
00009F70: mov ax, word ptr [bp - 2]
00009F73: pop di
00009F74: pop si
00009F75: pop es
00009F76: pop ds
00009F77: mov sp, bp
00009F79: pop bp
00009F7A: retf 6
00009F7D: push bp
00009F7E: mov bp, sp
00009F80: sub sp, 0x116
00009F84: push ds
00009F85: push es
00009F86: push si
00009F87: push di
00009F88: mov ax, 0x1ab5
00009F8B: mov ds, ax
00009F8D: lds si, ptr [bp + 0x10]
00009F90: cmp byte ptr [si], 0
00009F93: je 0x9faa
00009F95: cmp byte ptr [si], 1
00009F98: je 0x9fa7
00009F9A: cmp byte ptr [si], 2
00009F9D: je 0x9fa7
00009F9F: mov word ptr [bp - 2], 0xfff4
00009FA4: jmp 0xa21f
00009FA7: jmp 0xa0ad
00009FAA: mov ah, 0x2f
00009FAC: int 0x21
00009FAE: mov ax, es
00009FB0: mov word ptr [bp - 6], ax
00009FB3: mov word ptr [bp - 8], bx
00009FB6: push ds
00009FB7: mov ax, ss
00009FB9: mov ds, ax
00009FBB: lea dx, [bp - 0x96]
00009FBF: mov ah, 0x1a
00009FC1: int 0x21
00009FC3: pop ds
00009FC4: cmp word ptr [bp + 6], -1
00009FC8: je 0x9fde
00009FCA: push ds
00009FCB: mov ax, 0x1ab5
00009FCE: mov ds, ax
00009FD0: mov dx, 0x42ac
00009FD3: mov ah, 0x1a
00009FD5: int 0x21
00009FD7: pop ds
00009FD8: cmp word ptr [bp + 6], 1
00009FDC: je 0xa024
00009FDE: mov ax, 0x1ab5
00009FE1: mov ds, ax
00009FE3: push ds
00009FE4: cld 
00009FE5: push dx
00009FE6: mov dx, word ptr [bp + 0xe]
00009FE9: mov ds, dx
00009FEB: pop dx
00009FEC: push dx
00009FED: mov dx, ss
00009FEF: mov es, dx
00009FF1: pop dx
00009FF2: mov si, word ptr [bp + 0xc]
00009FF5: mov di, bp
00009FF7: sub di, 0x116
00009FFB: mov word ptr [bp + 0xe], es
00009FFE: mov word ptr [bp + 0xc], di
0000A001: movsb byte ptr es:[di], byte ptr [si]
0000A002: cmp byte ptr [si - 1], 0
0000A006: jne 0xa001
0000A008: pop ds
0000A009: xor cx, cx
0000A00B: push dx
0000A00C: mov dx, ss
0000A00E: mov ds, dx
0000A010: pop dx
0000A011: mov dx, bp
0000A013: sub dx, 0x116
0000A017: mov ah, 0x4e
0000A019: int 0x21
0000A01B: jae 0xa031
0000A01D: mov word ptr [bp - 2], 0xfff2
0000A022: jmp 0xa0a3
0000A024: mov ah, 0x4f
0000A026: int 0x21
0000A028: jae 0xa031
0000A02A: mov word ptr [bp - 2], 0xfff2
0000A02F: jmp 0xa0a3
0000A031: mov ah, 0x2f
0000A033: int 0x21
0000A035: push dx
0000A036: mov dx, es
0000A038: mov ds, dx
0000A03A: pop dx
0000A03B: mov si, bx
0000A03D: les di, ptr [bp + 8]
0000A040: mov byte ptr es:[di], 0
0000A044: xor ax, ax
0000A046: mov word ptr es:[di + 0xe], ax
0000A04A: mov word ptr es:[di + 0x10], ax
0000A04E: mov ax, word ptr [si + 0x1a]
0000A051: mov word ptr es:[di + 0x12], ax
0000A055: mov ax, word ptr [si + 0x1c]
0000A058: mov word ptr es:[di + 0x14], ax
0000A05C: mov ax, word ptr [si + 0x18]
0000A05F: mov word ptr es:[di + 0x16], ax
0000A063: mov ax, word ptr [si + 0x16]
0000A066: mov word ptr es:[di + 0x18], ax
0000A06A: add si, 0x1e
0000A06D: add di, 1
0000A070: mov cx, 0xc
0000A073: cmp byte ptr [si], 0
0000A076: je 0xa08e
0000A078: cmp byte ptr [si], 0x2e
0000A07B: jne 0xa089
0000A07D: cmp cx, 4
0000A080: je 0xa089
0000A082: mov byte ptr es:[di], 0x20
0000A086: inc di
0000A087: loop 0xa07d
0000A089: movsb byte ptr es:[di], byte ptr [si]
0000A08A: loop 0xa073
0000A08C: jmp 0xa095
0000A08E: mov byte ptr es:[di], 0x20
0000A092: inc di
0000A093: loop 0xa08e
0000A095: mov byte ptr es:[di - 4], 0x2e
0000A09A: mov byte ptr es:[di], 0
0000A09E: mov word ptr [bp - 2], 0
0000A0A3: lds dx, ptr [bp - 8]
0000A0A6: mov ah, 0x1a
0000A0A8: int 0x21
0000A0AA: jmp 0xa21f
0000A0AD: push ds
0000A0AE: cld 
0000A0AF: push dx
0000A0B0: mov dx, word ptr [bp + 0xe]
0000A0B3: mov ds, dx
0000A0B5: pop dx
0000A0B6: push dx
0000A0B7: mov dx, ss
0000A0B9: mov es, dx
0000A0BB: pop dx
0000A0BC: mov si, word ptr [bp + 0xc]
0000A0BF: mov di, bp
0000A0C1: sub di, 0x116
0000A0C5: mov word ptr [bp + 0xe], es
0000A0C8: mov word ptr [bp + 0xc], di
0000A0CB: movsb byte ptr es:[di], byte ptr [si]
0000A0CC: cmp byte ptr [si - 1], 0
0000A0D0: jne 0xa0cb
0000A0D2: pop ds
0000A0D3: push dx
0000A0D4: mov dx, ss
0000A0D6: mov ds, dx
0000A0D8: pop dx
0000A0D9: mov si, bp
0000A0DB: sub si, 0x116
0000A0DF: les di, ptr [bp + 0x10]
0000A0E2: add di, 0x56
0000A0E5: cmp word ptr [bp + 6], -1
0000A0E9: jne 0xa0f4
0000A0EB: push dx
0000A0EC: mov dx, ss
0000A0EE: mov es, dx
0000A0F0: pop dx
0000A0F1: lea di, [bp - 0x16]
0000A0F4: mov ax, es
0000A0F6: mov word ptr [bp + 0xe], ax
0000A0F9: mov word ptr [bp + 0xc], di
0000A0FC: cmp word ptr [bp + 6], 1
0000A100: je 0xa15c
0000A102: push si
0000A103: mov al, byte ptr [si]
0000A105: or al, al
0000A107: je 0xa118
0000A109: cmp al, 0x7a
0000A10B: ja 0xa113
0000A10D: cmp al, 0x61
0000A10F: jb 0xa113
0000A111: and al, 0xdf
0000A113: mov byte ptr [si], al
0000A115: inc si
0000A116: jmp 0xa103
0000A118: pop si
0000A119: xor bx, bx
0000A11B: mov cx, 8
0000A11E: mov al, byte ptr [si]
0000A120: or al, al
0000A122: je 0xa132
0000A124: cmp al, 0x2e
0000A126: je 0xa132
0000A128: cmp al, 0x2a
0000A12A: jne 0xa138
0000A12C: mov byte ptr es:[bx + di], 0x3f
0000A130: jmp 0xa13c
0000A132: mov byte ptr es:[bx + di], 0x20
0000A136: jmp 0xa13c
0000A138: mov byte ptr es:[bx + di], al
0000A13B: inc si
0000A13C: inc bx
0000A13D: loop 0xa11e
0000A13F: cmp bx, 0xc
0000A142: jae 0xa15c
0000A144: mov byte ptr es:[bx + di], 0x2e
0000A148: inc bx
0000A149: cmp byte ptr [si], 0
0000A14C: je 0xa157
0000A14E: cmp byte ptr [si], 0x2e
0000A151: je 0xa156
0000A153: inc si
0000A154: jmp 0xa149
0000A156: inc si
0000A157: mov cx, 3
0000A15A: jmp 0xa11e
0000A15C: lds si, ptr [bp + 0x10]
0000A15F: les di, ptr [si + 0x50]
0000A162: cmp word ptr [bp + 6], 1
0000A166: jne 0xa170
0000A168: mov ax, word ptr [si + 0x54]
0000A16B: mov word ptr [si + 0x4c], ax
0000A16E: jmp 0xa1c7
0000A170: mov word ptr [si + 0x4c], 0
0000A175: cmp word ptr [si + 0x44], 0
0000A179: je 0xa1d5
0000A17B: cmp word ptr [si + 0x4a], 0
0000A17F: je 0xa19c
0000A181: mov ax, word ptr [bp + 0x12]
0000A184: push ax
0000A185: mov ax, word ptr [bp + 0x10]
0000A188: push ax
0000A189: mov ax, word ptr [si + 0x4c]
0000A18C: push ax
0000A18D: push cs
0000A18E: call 0x9ebd
0000A191: cmp ax, 0
0000A194: je 0xa19c
0000A196: mov word ptr [bp - 2], ax
0000A199: jmp 0xa21f
0000A19C: les di, ptr [si + 0x50]
0000A19F: mov ax, word ptr [si + 0x4c]
0000A1A2: sub ax, word ptr [si + 0x4a]
0000A1A5: mov bx, 0x1a
0000A1A8: mul bx
0000A1AA: add di, ax
0000A1AC: lds si, ptr [bp + 0xc]
0000A1AF: mov cx, 0xc
0000A1B2: xor bx, bx
0000A1B4: mov al, byte ptr [bx + si]
0000A1B6: mov ah, byte ptr es:[bx + di + 1]
0000A1BA: inc bx
0000A1BB: cmp al, 0x3f
0000A1BD: jne 0xa1c1
0000A1BF: mov al, ah
0000A1C1: cmp al, ah
0000A1C3: loope 0xa1b4
0000A1C5: je 0xa1e9
0000A1C7: lds si, ptr [bp + 0x10]
0000A1CA: inc word ptr [si + 0x4c]
0000A1CD: mov ax, word ptr [si + 0x4c]
0000A1D0: cmp ax, word ptr [si + 0x44]
0000A1D3: jb 0xa1dc
0000A1D5: mov word ptr [bp - 2], 0xfff2
0000A1DA: jmp 0xa21f
0000A1DC: mov ax, word ptr [si + 0x4c]
0000A1DF: sub ax, word ptr [si + 0x4a]
0000A1E2: cmp ax, word ptr [si + 0x4e]
0000A1E5: jb 0xa19c
0000A1E7: jmp 0xa181
0000A1E9: push dx
0000A1EA: mov dx, es
0000A1EC: mov ds, dx
0000A1EE: pop dx
0000A1EF: mov si, di
0000A1F1: les di, ptr [bp + 8]
0000A1F4: cld 
0000A1F5: mov cx, 0x1a
0000A1F8: rep movsb byte ptr es:[di], byte ptr [si]
0000A1FA: lds si, ptr [bp + 0x10]
0000A1FD: les di, ptr [bp + 8]
0000A200: mov dx, word ptr [si + 0x48]
0000A203: mov ax, word ptr [si + 0x46]
0000A206: add word ptr es:[di + 0xe], ax
0000A20A: adc word ptr es:[di + 0x10], dx
0000A20E: cmp word ptr [bp + 6], -1
0000A212: je 0xa21a
0000A214: mov ax, word ptr [si + 0x4c]
0000A217: mov word ptr [si + 0x54], ax
0000A21A: mov word ptr [bp - 2], 0
0000A21F: mov ax, word ptr [bp - 2]
0000A222: pop di
0000A223: pop si
0000A224: pop es
0000A225: pop ds
0000A226: mov sp, bp
0000A228: pop bp
0000A229: retf 0xe
0000A22C: push bp
0000A22D: mov bp, sp
0000A22F: sub sp, 0x84
0000A233: push ds
0000A234: push es
0000A235: push si
0000A236: push di
0000A237: mov ax, 0x1ab5
0000A23A: mov ds, ax
0000A23C: mov ax, word ptr [bp + 0x10]
0000A23F: push ax
0000A240: mov ax, word ptr [bp + 0xe]
0000A243: push ax
0000A244: mov ax, word ptr [bp + 0xc]
0000A247: push ax
0000A248: mov ax, word ptr [bp + 0xa]
0000A24B: push ax
0000A24C: mov ax, word ptr [bp + 8]
0000A24F: push ax
0000A250: mov ax, word ptr [bp + 6]
0000A253: push ax
0000A254: mov ax, 0xffff
0000A257: push ax
0000A258: push cs
0000A259: call 0x9f7d
0000A25C: cmp ax, 0
0000A25F: je 0xa267
0000A261: mov word ptr [bp - 2], ax
0000A264: jmp 0xa2f3
0000A267: lds si, ptr [bp + 0xe]
0000A26A: cmp byte ptr [si], 0
0000A26D: je 0xa280
0000A26F: cmp byte ptr [si], 1
0000A272: je 0xa2da
0000A274: cmp byte ptr [si], 2
0000A277: je 0xa2da
0000A279: mov word ptr [bp - 2], 0xfff4
0000A27E: jmp 0xa2f3
0000A280: push ds
0000A281: cld 
0000A282: push dx
0000A283: mov dx, word ptr [bp + 0xc]
0000A286: mov ds, dx
0000A288: pop dx
0000A289: push dx
0000A28A: mov dx, ss
0000A28C: mov es, dx
0000A28E: pop dx
0000A28F: mov si, word ptr [bp + 0xa]
0000A292: mov di, bp
0000A294: sub di, 0x84
0000A298: mov word ptr [bp + 0xc], es
0000A29B: mov word ptr [bp + 0xa], di
0000A29E: movsb byte ptr es:[di], byte ptr [si]
0000A29F: cmp byte ptr [si - 1], 0
0000A2A3: jne 0xa29e
0000A2A5: pop ds
0000A2A6: push ds
0000A2A7: mov ah, 0x30
0000A2A9: int 0x21
0000A2AB: xor ah, ah
0000A2AD: cmp al, 2
0000A2AF: jbe 0xa2b3
0000A2B1: mov ah, 0x40
0000A2B3: mov dx, word ptr [bp + 0xa]
0000A2B6: push dx
0000A2B7: mov dx, word ptr [bp + 0xc]
0000A2BA: mov ds, dx
0000A2BC: pop dx
0000A2BD: mov al, 0
0000A2BF: or al, ah
0000A2C1: mov ah, 0x3d
0000A2C3: int 0x21
0000A2C5: pop ds
0000A2C6: jae 0xa2cf
0000A2C8: mov word ptr [bp - 2], 0xffff
0000A2CD: jmp 0xa2f3
0000A2CF: lds si, ptr [bp + 0xe]
0000A2D2: mov word ptr [si + 0x42], ax
0000A2D5: mov word ptr [bp - 2], ax
0000A2D8: jmp 0xa2f3
0000A2DA: mov ax, word ptr [si + 0x42]
0000A2DD: mov word ptr [bp - 2], ax
0000A2E0: les di, ptr [bp + 6]
0000A2E3: mov bx, ax
0000A2E5: mov cx, word ptr es:[di + 0x10]
0000A2E9: mov dx, word ptr es:[di + 0xe]
0000A2ED: mov al, 0
0000A2EF: mov ah, 0x42
0000A2F1: int 0x21
0000A2F3: mov ax, word ptr [bp - 2]
0000A2F6: pop di
0000A2F7: pop si
0000A2F8: pop es
0000A2F9: pop ds
0000A2FA: mov sp, bp
0000A2FC: pop bp
0000A2FD: retf 0xc
0000A300: push bp
0000A301: mov bp, sp
0000A303: sub sp, 2
0000A306: push ds
0000A307: push es
0000A308: push si
0000A309: push di
0000A30A: mov ax, 0x1ab5
0000A30D: mov ds, ax
0000A30F: lds si, ptr [bp + 6]
0000A312: cmp byte ptr [si], 0
0000A315: je 0xa328
0000A317: cmp byte ptr [si], 1
0000A31A: je 0xa338
0000A31C: cmp byte ptr [si], 2
0000A31F: je 0xa338
0000A321: mov word ptr [bp - 2], 0xfff4
0000A326: jmp 0xa33d
0000A328: mov bx, word ptr [si + 0x42]
0000A32B: mov ah, 0x3e
0000A32D: int 0x21
0000A32F: jae 0xa338
0000A331: mov word ptr [bp - 2], 0xffdf
0000A336: jmp 0xa33d
0000A338: mov word ptr [bp - 2], 0
0000A33D: mov ax, word ptr [bp - 2]
0000A340: pop di
0000A341: pop si
0000A342: pop es
0000A343: pop ds
0000A344: mov sp, bp
0000A346: pop bp
0000A347: retf 4
0000A34A: push bp
0000A34B: mov bp, sp
0000A34D: sub sp, 0x84
0000A351: push ds
0000A352: push es
0000A353: push si
0000A354: push di
0000A355: mov ax, 0x1ab5
0000A358: mov ds, ax
0000A35A: lds si, ptr [bp + 0xa]
0000A35D: cmp byte ptr [si], 0
0000A360: je 0xa373
0000A362: cmp byte ptr [si], 1
0000A365: je 0xa3b5
0000A367: cmp byte ptr [si], 2
0000A36A: je 0xa3b5
0000A36C: mov word ptr [bp - 2], 0xfff4
0000A371: jmp 0xa3c5
0000A373: push ds
0000A374: cld 
0000A375: push dx
0000A376: mov dx, word ptr [bp + 8]
0000A379: mov ds, dx
0000A37B: pop dx
0000A37C: push dx
0000A37D: mov dx, ss
0000A37F: mov es, dx
0000A381: pop dx
0000A382: mov si, word ptr [bp + 6]
0000A385: mov di, bp
0000A387: sub di, 0x84
0000A38B: mov word ptr [bp + 8], es
0000A38E: mov word ptr [bp + 6], di
0000A391: movsb byte ptr es:[di], byte ptr [si]
0000A392: cmp byte ptr [si - 1], 0
0000A396: jne 0xa391
0000A398: pop ds
0000A399: push ds
0000A39A: mov cx, 0
0000A39D: mov dx, word ptr [bp + 6]
0000A3A0: push dx
0000A3A1: mov dx, word ptr [bp + 8]
0000A3A4: mov ds, dx
0000A3A6: pop dx
0000A3A7: mov ah, 0x3c
0000A3A9: int 0x21
0000A3AB: pop ds
0000A3AC: jae 0xa3bc
0000A3AE: mov word ptr [bp - 2], 0xffff
0000A3B3: jmp 0xa3c5
0000A3B5: mov word ptr [bp - 2], 0xffff
0000A3BA: jmp 0xa3c5
0000A3BC: lds si, ptr [bp + 0xa]
0000A3BF: mov word ptr [si + 0x42], ax
0000A3C2: mov word ptr [bp - 2], ax
0000A3C5: mov ax, word ptr [bp - 2]
0000A3C8: pop di
0000A3C9: pop si
0000A3CA: pop es
0000A3CB: pop ds
0000A3CC: mov sp, bp
0000A3CE: pop bp
0000A3CF: retf 8
0000A3D2: push bp
0000A3D3: mov bp, sp
0000A3D5: sub sp, 0x82
0000A3D9: push ds
0000A3DA: push es
0000A3DB: push si
0000A3DC: push di
0000A3DD: mov ax, 0x1ab5
0000A3E0: mov ds, ax
0000A3E2: lds si, ptr [bp + 0xa]
0000A3E5: cmp byte ptr [si], 0
0000A3E8: je 0xa3fb
0000A3EA: cmp byte ptr [si], 1
0000A3ED: je 0xa437
0000A3EF: cmp byte ptr [si], 2
0000A3F2: je 0xa437
0000A3F4: mov word ptr [bp - 2], 0xfff4
0000A3F9: jmp 0xa443
0000A3FB: push ds
0000A3FC: cld 
0000A3FD: push dx
0000A3FE: mov dx, word ptr [bp + 8]
0000A401: mov ds, dx
0000A403: pop dx
0000A404: push dx
0000A405: mov dx, ss
0000A407: mov es, dx
0000A409: pop dx
0000A40A: mov si, word ptr [bp + 6]
0000A40D: mov di, bp
0000A40F: sub di, 0x82
0000A413: mov word ptr [bp + 8], es
0000A416: mov word ptr [bp + 6], di
0000A419: movsb byte ptr es:[di], byte ptr [si]
0000A41A: cmp byte ptr [si - 1], 0
0000A41E: jne 0xa419
0000A420: pop ds
0000A421: lea dx, [bp - 0x7e]
0000A424: push ds
0000A425: mov ax, ss
0000A427: mov ds, ax
0000A429: mov ah, 0x41
0000A42B: int 0x21
0000A42D: pop ds
0000A42E: jae 0xa43e
0000A430: mov word ptr [bp - 2], 0xfffc
0000A435: jmp 0xa443
0000A437: mov word ptr [bp - 2], 0xfffc
0000A43C: jmp 0xa443
0000A43E: mov word ptr [bp - 2], 0
0000A443: mov ax, word ptr [bp - 2]
0000A446: pop di
0000A447: pop si
0000A448: pop es
0000A449: pop ds
0000A44A: mov sp, bp
0000A44C: pop bp
0000A44D: retf 8
0000A450: mov cl, bl
0000A452: xchg al, ah
0000A454: shr ax, 1
0000A456: add bh, al
0000A458: xor al, al
0000A45A: add bx, ax
0000A45C: shr ax, 1
0000A45E: shr ax, 1
0000A460: add bx, ax
0000A462: shr bx, 1
0000A464: shr bx, 1
0000A466: mov ax, 0xb800
0000A469: mov es, ax
0000A46B: mov ah, 3
0000A46D: and cl, ah
0000A46F: xor cl, ah
0000A471: shl cl, 1
0000A473: retf 
0000A474: mov cl, bl
0000A476: xchg al, ah
0000A478: shr bx, 1
0000A47A: shr ax, 1
0000A47C: add bh, al
0000A47E: xor al, al
0000A480: add bx, ax
0000A482: shr ax, 1
0000A484: shr ax, 1
0000A486: add bx, ax
0000A488: shr bx, 1
0000A48A: shr bx, 1
0000A48C: mov ax, 0xb800
0000A48F: mov es, ax
0000A491: and cl, 7
0000A494: xor cl, 7
0000A497: mov ah, 1
0000A499: retf 
0000A49A: mov cl, bl
0000A49C: shr ax, 1
0000A49E: rcr bx, 1
0000A4A0: shr ax, 1
0000A4A2: rcr bx, 1
0000A4A4: shr bx, 1
0000A4A6: mov ah, 0x5a
0000A4A8: mul ah
0000A4AA: add bx, ax
0000A4AC: mov ax, 0xb000
0000A4AF: mov es, ax
0000A4B1: and cl, 7
0000A4B4: xor cl, 7
0000A4B7: mov ah, 1
0000A4B9: retf 
0000A4BA: mov cl, bl
0000A4BC: push dx
0000A4BD: mov dx, 0x50
0000A4C0: shr dx, 1
0000A4C2: mul dx
0000A4C4: pop dx
0000A4C5: shr bx, 1
0000A4C7: shr bx, 1
0000A4C9: shr bx, 1
0000A4CB: add bx, ax
0000A4CD: mov ax, 0xa000
0000A4D0: mov es, ax
0000A4D2: and cl, 7
0000A4D5: xor cl, 7
0000A4D8: mov ah, 1
0000A4DA: retf 
0000A4DB: mov cl, bl
0000A4DD: push dx
0000A4DE: mov dx, 0x50
0000A4E1: mul dx
0000A4E3: pop dx
0000A4E4: shr bx, 1
0000A4E6: shr bx, 1
0000A4E8: shr bx, 1
0000A4EA: add bx, ax
0000A4EC: mov ax, 0xa000
0000A4EF: mov es, ax
0000A4F1: and cl, 7
0000A4F4: xor cl, 7
0000A4F7: mov ah, 1
0000A4F9: retf 
0000A4FA: xchg al, ah
0000A4FC: add bx, ax
0000A4FE: shr ax, 1
0000A500: shr ax, 1
0000A502: add bx, ax
0000A504: mov ax, 0xa000
0000A507: mov es, ax
0000A509: retf 
0000A50A: mov cl, bl
0000A50C: push dx
0000A50D: mov dx, 0x64
0000A510: mul dx
0000A512: pop dx
0000A513: shr bx, 1
0000A515: shr bx, 1
0000A517: shr bx, 1
0000A519: add bx, ax
0000A51B: mov ax, 0xa000
0000A51E: mov es, ax
0000A520: and cl, 7
0000A523: xor cl, 7
0000A526: mov ah, 1
0000A528: retf 
0000A529: push ds
0000A52A: push ax
0000A52B: mov ax, 0x1ab5
0000A52E: mov ds, ax
0000A530: pop ax
0000A531: mov dx, word ptr [0x43bd]
0000A535: mul dx
0000A537: add bx, ax
0000A539: adc dx, 0
0000A53C: mov ax, 0xa000
0000A53F: mov es, ax
0000A541: pop ds
0000A542: retf 
0000A543: push ds
0000A544: push ax
0000A545: mov ax, 0x1ab5
0000A548: mov ds, ax
0000A54A: pop ax
0000A54B: mov dx, word ptr [0x43bd]
0000A54F: mul dx
0000A551: add bx, ax
0000A553: adc dx, 0
0000A556: mov ax, 0xa000
0000A559: mov es, ax
0000A55B: pop ds
0000A55C: retf 
0000A55D: push ds
0000A55E: push ax
0000A55F: mov ax, 0x1ab5
0000A562: mov ds, ax
0000A564: pop ax
0000A565: mov dx, word ptr [0x43bd]
0000A569: mul dx
0000A56B: add bx, ax
0000A56D: adc dx, 0
0000A570: mov ax, 0xa000
0000A573: mov es, ax
0000A575: pop ds
0000A576: retf 
0000A577: mov cl, bl
0000A579: push dx
0000A57A: mov dx, 0x50
0000A57D: mul dx
0000A57F: pop dx
0000A580: shr bx, 1
0000A582: shr bx, 1
0000A584: shr bx, 1
0000A586: add bx, ax
0000A588: mov ax, 0xa000
0000A58B: mov es, ax
0000A58D: and cl, 7
0000A590: xor cl, 7
0000A593: mov ah, 1
0000A595: retf 
0000A596: mov cl, bl
0000A598: push dx
0000A599: mov dx, 0x50
0000A59C: mul dx
0000A59E: pop dx
0000A59F: shr bx, 1
0000A5A1: shr bx, 1
0000A5A3: shr bx, 1
0000A5A5: add bx, ax
0000A5A7: push dx
0000A5A8: mov dx, 0xa000
0000A5AB: mov es, dx
0000A5AD: pop dx
0000A5AE: and cl, 7
0000A5B1: xor cl, 7
0000A5B4: mov ah, 1
0000A5B6: retf 
0000A5B7: mov dx, word ptr [si + 0x14]
0000A5BA: mul dx
0000A5BC: mov cl, bl
0000A5BE: shr bx, 1
0000A5C0: shr bx, 1
0000A5C2: shr bx, 1
0000A5C4: add bx, ax
0000A5C6: adc dx, 0
0000A5C9: and cl, 7
0000A5CC: xor cl, 7
0000A5CF: mov ah, 1
0000A5D1: retf 
0000A5D2: mov cl, bl
0000A5D4: push dx
0000A5D5: mov dx, 0x50
0000A5D8: mul dx
0000A5DA: pop dx
0000A5DB: shr bx, 1
0000A5DD: shr bx, 1
0000A5DF: shr bx, 1
0000A5E1: add bx, ax
0000A5E3: push dx
0000A5E4: mov dx, 0xa000
0000A5E7: mov es, dx
0000A5E9: pop dx
0000A5EA: and cl, 7
0000A5ED: xor cl, 7
0000A5F0: mov ah, 1
0000A5F2: retf 
0000A5F3: add byte ptr [di - 0x75], dl
0000A5F6: in al, dx
0000A5F7: sub sp, 0x26
0000A5FA: push ds
0000A5FB: push es
0000A5FC: push si
0000A5FD: push di
0000A5FE: mov ax, 0x1ab5
0000A601: mov ds, ax
0000A603: cmp byte ptr [0x55f0], 1
0000A608: je 0xa60e
0000A60A: push cs
0000A60B: call 0xa70d
0000A60E: mov ax, word ptr [0x54d4]
0000A611: mov word ptr [bp - 4], ax
0000A614: lds si, ptr [bp + 0xe]
0000A617: push ds
0000A618: push si
0000A619: xor ax, ax
0000A61B: push ax
0000A61C: push ax
0000A61D: mov ax, 0
0000A620: push ax
0000A621: lcall 0xb08, 0xa
0000A626: or dx, dx
0000A628: jne 0xa630
0000A62A: mov word ptr [bp - 2], ax
0000A62D: jmp 0xa700
0000A630: lcall 0x98e, 0x35e
0000A635: or ax, ax
0000A637: jge 0xa63f
0000A639: mov word ptr [bp - 2], ax
0000A63C: jmp 0xa700
0000A63F: mov word ptr [bp - 0x26], ax
0000A642: push ax
0000A643: lcall 0x98e, 0x12a
0000A648: jae 0xa652
0000A64A: mov word ptr [bp - 2], 0xfc19
0000A64F: jmp 0xa700
0000A652: mov es, dx
0000A654: mov di, ax
0000A656: cmp word ptr [bp - 4], 1
0000A65A: jne 0xa675
0000A65C: cmp byte ptr es:[di], 9
0000A660: je 0xa675
0000A662: lcall 0x98e, 0x18a
0000A667: cmp al, byte ptr es:[di + 0x16]
0000A66B: je 0xa675
0000A66D: mov word ptr [bp - 2], 0xfff9
0000A672: jmp 0xa700
0000A675: mov ax, word ptr [si + 0x32]
0000A678: mov word ptr [bp - 0x1e], ax
0000A67B: mov ax, word ptr [si + 0x30]
0000A67E: mov word ptr [bp - 0xa], ax
0000A681: mov ax, word ptr es:[di + 0x18]
0000A685: sub ax, word ptr [bp + 0xa]
0000A688: jg 0xa691
0000A68A: mov word ptr [bp - 2], 0
0000A68F: jmp 0xa700
0000A691: cmp ax, word ptr [si + 0x2c]
0000A694: jge 0xa6be
0000A696: xor bx, bx
0000A698: mov bl, byte ptr es:[di + 0x17]
0000A69C: mul bx
0000A69E: mov bx, 8
0000A6A1: div bx
0000A6A3: or dx, dx
0000A6A5: je 0xa6a8
0000A6A7: inc ax
0000A6A8: mov word ptr [bp - 0xa], ax
0000A6AB: mov cl, dl
0000A6AD: xor cl, 7
0000A6B0: inc cl
0000A6B2: and cl, 7
0000A6B5: mov ch, 0xff
0000A6B7: shl ch, cl
0000A6B9: mov cl, ch
0000A6BB: mov word ptr [bp - 0x1e], cx
0000A6BE: mov ax, word ptr [si + 0x2e]
0000A6C1: mov word ptr [bp - 8], ax
0000A6C4: mov ax, word ptr es:[di + 0x1a]
0000A6C8: sub ax, word ptr [bp + 8]
0000A6CB: jg 0xa6d4
0000A6CD: mov word ptr [bp - 2], 0
0000A6D2: jmp 0xa700
0000A6D4: cmp ax, word ptr [si + 0x2e]
0000A6D7: jge 0xa6dc
0000A6D9: mov word ptr [bp - 8], ax
0000A6DC: mov al, byte ptr [si + 0x12]
0000A6DF: mov byte ptr [bp - 0x10], al
0000A6E2: mov ax, word ptr [si + 0x14]
0000A6E5: mov word ptr [bp - 0xe], ax
0000A6E8: sub ax, word ptr [bp - 0xa]
0000A6EB: mov word ptr [bp - 0x1a], ax
0000A6EE: mov ax, word ptr es:[di + 0x1c]
0000A6F2: mov word ptr [bp - 0xc], ax
0000A6F5: sub ax, word ptr [bp - 0xa]
0000A6F8: mov word ptr [bp - 0x1c], ax
0000A6FB: cld 
0000A6FC: jmp word ptr es:[di + 0x2a]
0000A700: mov ax, word ptr [bp - 2]
0000A703: pop di
0000A704: pop si
0000A705: pop es
0000A706: pop ds
0000A707: mov sp, bp
0000A709: pop bp
0000A70A: retf 0xc
0000A70D: xor ax, ax
0000A70F: push ax
0000A710: lcall 0x98e, 0x12a
0000A715: mov bx, ax
0000A717: mov word ptr [bx + 0x2a], 0x1b5
0000A71C: add bx, 0x36
0000A71F: mov word ptr [bx + 0x2a], 0x1b5
0000A724: add bx, 0x36
0000A727: mov word ptr [bx + 0x2a], 0x318
0000A72C: add bx, 0x36
0000A72F: mov word ptr [bx + 0x2a], 0x318
0000A734: add bx, 0x36
0000A737: mov word ptr [bx + 0x2a], 0x318
0000A73C: add bx, 0x36
0000A73F: mov word ptr [bx + 0x2a], 0x318
0000A744: add bx, 0x36
0000A747: mov word ptr [bx + 0x2a], 0x318
0000A74C: add bx, 0x36
0000A74F: mov word ptr [bx + 0x2a], 0x318
0000A754: add bx, 0x36
0000A757: mov word ptr [bx + 0x2a], 0x4ba
0000A75C: add bx, 0x36
0000A75F: mov word ptr [bx + 0x2a], 0x548
0000A764: add bx, 0x36
0000A767: mov word ptr [bx + 0x2a], 0x6e4
0000A76C: add bx, 0x36
0000A76F: mov word ptr [bx + 0x2a], 0x318
0000A774: add bx, 0x36
0000A777: mov word ptr [bx + 0x2a], 0x6e4
0000A77C: add bx, 0x36
0000A77F: mov word ptr [bx + 0x2a], 0x6e4
0000A784: add bx, 0x36
0000A787: mov word ptr [bx + 0x2a], 0x318
0000A78C: add bx, 0x36
0000A78F: mov word ptr [bx + 0x2a], 0x6e4
0000A794: add bx, 0x36
0000A797: mov word ptr [bx + 0x2a], 0x6e4
0000A79C: add bx, 0x36
0000A79F: mov byte ptr [0x55f0], 1
0000A7A4: retf 
0000A7A5: mov ax, word ptr [bp + 0xa]
0000A7A8: cmp byte ptr [si + 0x13], 1
0000A7AC: je 0xa7b0
0000A7AE: shl ax, 1
0000A7B0: and al, 7
0000A7B2: mov ah, byte ptr [bp - 0x1e]
0000A7B5: mov word ptr [bp - 0x1e], ax
0000A7B8: mov bx, word ptr [bp + 0xa]
0000A7BB: mov ax, word ptr [bp + 8]
0000A7BE: lcall es:[di + 0x26]
0000A7C2: mov di, bx
0000A7C4: mov ax, 0x2000
0000A7C7: test word ptr [bp + 8], 1
0000A7CC: je 0xa7d1
0000A7CE: mov ax, 0xe050
0000A7D1: mov word ptr [bp - 4], ax
0000A7D4: mov cx, word ptr [bp - 0x1e]
0000A7D7: lds si, ptr [si + 0x18]
0000A7DA: mov ax, word ptr [bp + 0xc]
0000A7DD: cmp ax, 0
0000A7E0: jne 0xa850
0000A7E2: cmp cx, 0xff00
0000A7E6: jne 0xa808
0000A7E8: push di
0000A7E9: mov cx, word ptr [bp - 0xa]
0000A7EC: shr cx, 1
0000A7EE: rep movsw word ptr es:[di], word ptr [si]
0000A7F0: rcl cx, 1
0000A7F2: rep movsb byte ptr es:[di], byte ptr [si]
0000A7F4: pop di
0000A7F5: add di, word ptr [bp - 4]
0000A7F8: xor word ptr [bp - 4], 0xc050
0000A7FD: add si, word ptr [bp - 0x1a]
0000A800: dec word ptr [bp - 8]
0000A803: jne 0xa7e8
0000A805: jmp 0xa8f6
0000A808: mov dx, 0xff00
0000A80B: ror dx, cl
0000A80D: mov bx, word ptr [bp - 0xa]
0000A810: dec bx
0000A811: push di
0000A812: test bx, bx
0000A814: je 0xa827
0000A816: push bx
0000A817: lodsb al, byte ptr [si]
0000A818: xor ah, ah
0000A81A: ror ax, cl
0000A81C: and word ptr es:[di], dx
0000A81F: or word ptr es:[di], ax
0000A822: inc di
0000A823: dec bx
0000A824: jne 0xa817
0000A826: pop bx
0000A827: mov al, ch
0000A829: not al
0000A82B: mov ah, 0xff
0000A82D: ror ax, cl
0000A82F: and word ptr es:[di], ax
0000A832: lodsb al, byte ptr [si]
0000A833: and al, ch
0000A835: xor ah, ah
0000A837: ror ax, cl
0000A839: or word ptr es:[di], ax
0000A83C: add si, word ptr [bp - 0x1a]
0000A83F: pop di
0000A840: add di, word ptr [bp - 4]
0000A843: xor word ptr [bp - 4], 0xc050
0000A848: dec word ptr [bp - 8]
0000A84B: jne 0xa811
0000A84D: jmp 0xa8f6
0000A850: cmp ax, 3
0000A853: jne 0xa889
0000A855: mov bx, word ptr [bp - 0xa]
0000A858: dec bx
0000A859: push di
0000A85A: test bx, bx
0000A85C: je 0xa86c
0000A85E: push bx
0000A85F: lodsb al, byte ptr [si]
0000A860: xor ah, ah
0000A862: ror ax, cl
0000A864: xor word ptr es:[di], ax
0000A867: inc di
0000A868: dec bx
0000A869: jne 0xa85f
0000A86B: pop bx
0000A86C: lodsb al, byte ptr [si]
0000A86D: and al, ch
0000A86F: xor ah, ah
0000A871: ror ax, cl
0000A873: xor word ptr es:[di], ax
0000A876: add si, word ptr [bp - 0x1a]
0000A879: pop di
0000A87A: add di, word ptr [bp - 4]
0000A87D: xor word ptr [bp - 4], 0xc050
0000A882: dec word ptr [bp - 8]
0000A885: jne 0xa859
0000A887: jmp 0xa8f6
0000A889: cmp ax, 1
0000A88C: jne 0xa8c4
0000A88E: not ch
0000A890: mov bx, word ptr [bp - 0xa]
0000A893: dec bx
0000A894: push di
0000A895: test bx, bx
0000A897: je 0xa8a7
0000A899: push bx
0000A89A: lodsb al, byte ptr [si]
0000A89B: mov ah, 0xff
0000A89D: ror ax, cl
0000A89F: and word ptr es:[di], ax
0000A8A2: inc di
0000A8A3: dec bx
0000A8A4: jne 0xa89a
0000A8A6: pop bx
0000A8A7: lodsb al, byte ptr [si]
0000A8A8: or al, ch
0000A8AA: mov ah, 0xff
0000A8AC: ror ax, cl
0000A8AE: and word ptr es:[di], ax
0000A8B1: add si, word ptr [bp - 0x1a]
0000A8B4: pop di
0000A8B5: add di, word ptr [bp - 4]
0000A8B8: xor word ptr [bp - 4], 0xc050
0000A8BD: dec word ptr [bp - 8]
0000A8C0: jne 0xa894
0000A8C2: jmp 0xa8f6
0000A8C4: mov bx, word ptr [bp - 0xa]
0000A8C7: dec bx
0000A8C8: push di
0000A8C9: test bx, bx
0000A8CB: je 0xa8db
0000A8CD: push bx
0000A8CE: lodsb al, byte ptr [si]
0000A8CF: xor ah, ah
0000A8D1: ror ax, cl
0000A8D3: or word ptr es:[di], ax
0000A8D6: inc di
0000A8D7: dec bx
0000A8D8: jne 0xa8ce
0000A8DA: pop bx
0000A8DB: lodsb al, byte ptr [si]
0000A8DC: and al, ch
0000A8DE: xor ah, ah
0000A8E0: ror ax, cl
0000A8E2: or word ptr es:[di], ax
0000A8E5: add si, word ptr [bp - 0x1a]
0000A8E8: pop di
0000A8E9: add di, word ptr [bp - 4]
0000A8EC: xor word ptr [bp - 4], 0xc050
0000A8F1: dec word ptr [bp - 8]
0000A8F4: jne 0xa8c8
0000A8F6: mov word ptr [bp - 2], 0
0000A8FB: mov ax, word ptr [bp - 2]
0000A8FE: pop di
0000A8FF: pop si
0000A900: pop es
0000A901: pop ds
0000A902: mov sp, bp
0000A904: pop bp
0000A905: retf 0xc
0000A908: mov ax, word ptr [bp + 0xa]
0000A90B: xor al, 7
0000A90D: inc al
0000A90F: and al, 7
0000A911: mov ah, byte ptr [bp - 0x1e]
0000A914: mov word ptr [bp - 0x1e], ax
0000A917: mov al, 5
0000A919: mov ah, 8
0000A91B: mov dx, 0x3ce
0000A91E: out dx, ax
0000A91F: mov al, 7
0000A921: mov ah, 0
0000A923: mov dx, 0x3ce
0000A926: out dx, ax
0000A927: mov al, 8
0000A929: mov ah, 0xff
0000A92B: mov dx, 0x3ce
0000A92E: out dx, ax
0000A92F: mov word ptr [bp - 0x14], 1
0000A934: mov word ptr [bp - 0x16], 0xf
0000A939: mov byte ptr [bp - 0x12], 0xf
0000A93D: mov al, 2
0000A93F: mov ah, byte ptr [bp - 0x12]
0000A942: mov dx, 0x3c4
0000A945: out dx, ax
0000A946: cmp byte ptr [bp - 0x10], 1
0000A94A: je 0xa963
0000A94C: mov word ptr [bp - 0x16], 1
0000A951: mov byte ptr [bp - 0x12], 1
0000A955: mov al, 2
0000A957: mov ah, byte ptr [bp - 0x12]
0000A95A: mov dx, 0x3c4
0000A95D: out dx, ax
0000A95E: mov word ptr [bp - 0x14], 8
0000A963: mov ax, word ptr es:[di + 0x22]
0000A967: mov bx, word ptr [bp + 6]
0000A96A: mul bx
0000A96C: push ax
0000A96D: mov bx, word ptr [bp + 0xa]
0000A970: mov ax, word ptr [bp + 8]
0000A973: lcall es:[di + 0x26]
0000A977: pop ax
0000A978: add ax, bx
0000A97A: mov di, ax
0000A97C: mov bx, word ptr [bp + 0xc]
0000A97F: mov cl, 3
0000A981: shl bx, cl
0000A983: mov al, 3
0000A985: mov ah, bl
0000A987: mov dx, 0x3ce
0000A98A: out dx, ax
0000A98B: mov cx, word ptr [bp - 0x1e]
0000A98E: lds si, ptr [si + 0x18]
0000A991: cmp cx, 0xff00
0000A995: jne 0xa9d3
0000A997: push di
0000A998: mov cx, word ptr [bp - 0xa]
0000A99B: lodsb al, byte ptr [si]
0000A99C: and byte ptr es:[di], al
0000A99F: inc di
0000A9A0: loop 0xa99b
0000A9A2: pop di
0000A9A3: add si, word ptr [bp - 0x1a]
0000A9A6: cmp byte ptr [bp - 0x10], 1
0000A9AA: je 0xa9bd
0000A9AC: mov dx, word ptr [bp - 0x14]
0000A9AF: shl byte ptr [bp - 0x12], 1
0000A9B2: cmp byte ptr [bp - 0x12], dl
0000A9B5: jbe 0xa9c8
0000A9B7: mov dx, word ptr [bp - 0x16]
0000A9BA: mov byte ptr [bp - 0x12], dl
0000A9BD: add di, word ptr [bp - 0xc]
0000A9C0: dec word ptr [bp - 8]
0000A9C3: jne 0xa9c8
0000A9C5: jmp 0xaa70
0000A9C8: mov al, 2
0000A9CA: mov ah, byte ptr [bp - 0x12]
0000A9CD: mov dx, 0x3c4
0000A9D0: out dx, ax
0000A9D1: jmp 0xa997
0000A9D3: mov bx, 0xff
0000A9D6: mov al, ch
0000A9D8: cwde 
0000A9D9: cmp word ptr [bp - 0xa], 1
0000A9DD: jne 0xa9e5
0000A9DF: mov bl, ch
0000A9E1: mov ah, ch
0000A9E3: xor al, al
0000A9E5: shl ax, cl
0000A9E7: shl bx, cl
0000A9E9: mov byte ptr [bp - 0x20], ah
0000A9EC: mov byte ptr [bp - 0x22], al
0000A9EF: mov byte ptr [bp - 0x1e], bh
0000A9F2: mov bx, word ptr [bp - 0xa]
0000A9F5: push di
0000A9F6: push si
0000A9F7: push bx
0000A9F8: mov al, 8
0000A9FA: mov ah, byte ptr [bp - 0x1e]
0000A9FD: mov dx, 0x3ce
0000AA00: out dx, ax
0000AA01: lodsw ax, word ptr [si]
0000AA02: dec si
0000AA03: test cl, cl
0000AA05: jne 0xaa0c
0000AA07: dec bx
0000AA08: jne 0xaa13
0000AA0A: jmp 0xaa2b
0000AA0C: rol ax, cl
0000AA0E: and byte ptr es:[di], ah
0000AA11: inc di
0000AA12: dec bx
0000AA13: push ax
0000AA14: mov al, 8
0000AA16: mov ah, 0xff
0000AA18: mov dx, 0x3ce
0000AA1B: out dx, ax
0000AA1C: pop ax
0000AA1D: dec bx
0000AA1E: jle 0xaa2b
0000AA20: and byte ptr es:[di], al
0000AA23: inc di
0000AA24: lodsw ax, word ptr [si]
0000AA25: dec si
0000AA26: rol ax, cl
0000AA28: dec bx
0000AA29: jne 0xaa20
0000AA2B: mov bx, ax
0000AA2D: mov al, 8
0000AA2F: mov ah, byte ptr [bp - 0x20]
0000AA32: mov dx, 0x3ce
0000AA35: out dx, ax
0000AA36: and byte ptr es:[di], bl
0000AA39: mov al, 8
0000AA3B: mov ah, byte ptr [bp - 0x22]
0000AA3E: mov dx, 0x3ce
0000AA41: out dx, ax
0000AA42: and byte ptr es:[di + 1], bh
0000AA46: pop bx
0000AA47: pop si
0000AA48: pop di
0000AA49: add si, word ptr [bp - 0xe]
0000AA4C: mov dx, word ptr [bp - 0x14]
0000AA4F: shl byte ptr [bp - 0x12], 1
0000AA52: cmp byte ptr [bp - 0x12], dl
0000AA55: jbe 0xaa65
0000AA57: mov dx, word ptr [bp - 0x16]
0000AA5A: mov byte ptr [bp - 0x12], dl
0000AA5D: add di, word ptr [bp - 0xc]
0000AA60: dec word ptr [bp - 8]
0000AA63: je 0xaa70
0000AA65: mov al, 2
0000AA67: mov ah, byte ptr [bp - 0x12]
0000AA6A: mov dx, 0x3c4
0000AA6D: out dx, ax
0000AA6E: jmp 0xa9f5
0000AA70: mov al, 5
0000AA72: mov ah, 0
0000AA74: mov dx, 0x3ce
0000AA77: out dx, ax
0000AA78: mov al, 7
0000AA7A: mov ah, 0xf
0000AA7C: mov dx, 0x3ce
0000AA7F: out dx, ax
0000AA80: mov al, 8
0000AA82: mov ah, 0xff
0000AA84: mov dx, 0x3ce
0000AA87: out dx, ax
0000AA88: mov al, 2
0000AA8A: mov ah, 0xf
0000AA8C: mov dx, 0x3c4
0000AA8F: out dx, ax
0000AA90: mov al, 3
0000AA92: mov ah, 0
0000AA94: mov dx, 0x3ce
0000AA97: out dx, ax
0000AA98: mov word ptr [bp - 2], 0
0000AA9D: mov ax, word ptr [bp - 2]
0000AAA0: pop di
0000AAA1: pop si
0000AAA2: pop es
0000AAA3: pop ds
0000AAA4: mov sp, bp
0000AAA6: pop bp
0000AAA7: retf 0xc
0000AAAA: mov bx, word ptr [bp + 0xa]
0000AAAD: mov ax, word ptr [bp + 8]
0000AAB0: lcall es:[di + 0x26]
0000AAB4: mov di, bx
0000AAB6: mov dx, word ptr [bp - 0x1a]
0000AAB9: mov bx, word ptr [bp - 0x1c]
0000AABC: lds si, ptr [si + 0x18]
0000AABF: mov ax, word ptr [bp + 0xc]
0000AAC2: cmp ax, 0
0000AAC5: je 0xaad3
0000AAC7: cmp ax, 3
0000AACA: je 0xaae9
0000AACC: cmp ax, 1
0000AACF: je 0xaafe
0000AAD1: jmp 0xab13
0000AAD3: mov cx, word ptr [bp - 0xa]
0000AAD6: shr cx, 1
0000AAD8: rep movsw word ptr es:[di], word ptr [si]
0000AADA: rcl cx, 1
0000AADC: rep movsb byte ptr es:[di], byte ptr [si]
0000AADE: add si, dx
0000AAE0: add di, bx
0000AAE2: dec word ptr [bp - 8]
0000AAE5: jne 0xaad3
0000AAE7: jmp 0xab26
0000AAE9: mov cx, word ptr [bp - 0xa]
0000AAEC: lodsb al, byte ptr [si]
0000AAED: xor byte ptr es:[di], al
0000AAF0: inc di
0000AAF1: loop 0xaaec
0000AAF3: add si, dx
0000AAF5: add di, bx
0000AAF7: dec word ptr [bp - 8]
0000AAFA: jne 0xaae9
0000AAFC: jmp 0xab26
0000AAFE: mov cx, word ptr [bp - 0xa]
0000AB01: lodsb al, byte ptr [si]
0000AB02: and byte ptr es:[di], al
0000AB05: inc di
0000AB06: loop 0xab01
0000AB08: add si, dx
0000AB0A: add di, bx
0000AB0C: dec word ptr [bp - 8]
0000AB0F: jne 0xaafe
0000AB11: jmp 0xab26
0000AB13: mov cx, word ptr [bp - 0xa]
0000AB16: lodsb al, byte ptr [si]
0000AB17: or byte ptr es:[di], al
0000AB1A: inc di
0000AB1B: loop 0xab16
0000AB1D: add si, dx
0000AB1F: add di, bx
0000AB21: dec word ptr [bp - 8]
0000AB24: jne 0xab13
0000AB26: mov word ptr [bp - 2], 0
0000AB2B: mov ax, word ptr [bp - 2]
0000AB2E: pop di
0000AB2F: pop si
0000AB30: pop es
0000AB31: pop ds
0000AB32: mov sp, bp
0000AB34: pop bp
0000AB35: retf 0xc
0000AB38: mov ax, word ptr [bp + 0xa]
0000AB3B: xor ah, ah
0000AB3D: and al, 7
0000AB3F: mov ah, byte ptr [bp - 0x1e]
0000AB42: mov word ptr [bp - 0x1e], ax
0000AB45: mov ax, word ptr es:[di + 0x22]
0000AB49: mov bx, word ptr [bp + 6]
0000AB4C: mul bx
0000AB4E: push ax
0000AB4F: mov bx, word ptr [bp + 0xa]
0000AB52: mov ax, word ptr [bp + 8]
0000AB55: lcall es:[di + 0x26]
0000AB59: pop ax
0000AB5A: add ax, bx
0000AB5C: mov di, ax
0000AB5E: mov ax, word ptr [bp + 8]
0000AB61: xor ah, ah
0000AB63: and al, 3
0000AB65: mov byte ptr [bp - 6], 4
0000AB69: sub byte ptr [bp - 6], al
0000AB6C: mov cx, word ptr [bp - 0x1e]
0000AB6F: lds si, ptr [si + 0x18]
0000AB72: mov ax, word ptr [bp + 0xc]
0000AB75: cmp ax, 0
0000AB78: je 0xab7d
0000AB7A: jmp 0xabfd
0000AB7D: cmp cx, 0xff00
0000AB81: jne 0xabac
0000AB83: push di
0000AB84: mov cx, word ptr [bp - 0xa]
0000AB87: shr cx, 1
0000AB89: rep movsw word ptr es:[di], word ptr [si]
0000AB8B: rcl cx, 1
0000AB8D: rep movsb byte ptr es:[di], byte ptr [si]
0000AB8F: pop di
0000AB90: add si, word ptr [bp - 0x1a]
0000AB93: add di, 0x2000
0000AB97: dec byte ptr [bp - 6]
0000AB9A: jne 0xaba4
0000AB9C: sub di, 0x7fa6
0000ABA0: mov byte ptr [bp - 6], 4
0000ABA4: dec word ptr [bp - 8]
0000ABA7: jne 0xab83
0000ABA9: jmp 0xacc2
0000ABAC: mov dx, 0xff00
0000ABAF: ror dx, cl
0000ABB1: mov bx, word ptr [bp - 0xa]
0000ABB4: dec bx
0000ABB5: push di
0000ABB6: test bx, bx
0000ABB8: je 0xabcb
0000ABBA: push bx
0000ABBB: and word ptr es:[di], dx
0000ABBE: lodsb al, byte ptr [si]
0000ABBF: xor ah, ah
0000ABC1: ror ax, cl
0000ABC3: or word ptr es:[di], ax
0000ABC6: inc di
0000ABC7: dec bx
0000ABC8: jne 0xabbb
0000ABCA: pop bx
0000ABCB: mov al, ch
0000ABCD: not al
0000ABCF: mov ah, 0xff
0000ABD1: ror ax, cl
0000ABD3: and word ptr es:[di], ax
0000ABD6: lodsb al, byte ptr [si]
0000ABD7: and al, ch
0000ABD9: xor ah, ah
0000ABDB: ror ax, cl
0000ABDD: or word ptr es:[di], ax
0000ABE0: add si, word ptr [bp - 0x1a]
0000ABE3: pop di
0000ABE4: add di, 0x2000
0000ABE8: dec byte ptr [bp - 6]
0000ABEB: jne 0xabf5
0000ABED: sub di, 0x7fa6
0000ABF1: mov byte ptr [bp - 6], 4
0000ABF5: dec word ptr [bp - 8]
0000ABF8: jne 0xabb5
0000ABFA: jmp 0xacc2
0000ABFD: cmp ax, 3
0000AC00: jne 0xac40
0000AC02: mov bx, word ptr [bp - 0xa]
0000AC05: dec bx
0000AC06: push di
0000AC07: test bx, bx
0000AC09: je 0xac19
0000AC0B: push bx
0000AC0C: lodsb al, byte ptr [si]
0000AC0D: xor ah, ah
0000AC0F: ror ax, cl
0000AC11: xor word ptr es:[di], ax
0000AC14: inc di
0000AC15: dec bx
0000AC16: jne 0xac0c
0000AC18: pop bx
0000AC19: lodsb al, byte ptr [si]
0000AC1A: and al, ch
0000AC1C: xor ah, ah
0000AC1E: ror ax, cl
0000AC20: xor word ptr es:[di], ax
0000AC23: add si, word ptr [bp - 0x1a]
0000AC26: pop di
0000AC27: add di, 0x2000
0000AC2B: dec byte ptr [bp - 6]
0000AC2E: jne 0xac38
0000AC30: sub di, 0x7fa6
0000AC34: mov byte ptr [bp - 6], 4
0000AC38: dec word ptr [bp - 8]
0000AC3B: jne 0xac06
0000AC3D: jmp 0xacc2
0000AC40: cmp ax, 1
0000AC43: jne 0xac84
0000AC45: not ch
0000AC47: mov bx, word ptr [bp - 0xa]
0000AC4A: dec bx
0000AC4B: push di
0000AC4C: test bx, bx
0000AC4E: je 0xac5e
0000AC50: push bx
0000AC51: lodsb al, byte ptr [si]
0000AC52: mov ah, 0xff
0000AC54: ror ax, cl
0000AC56: and word ptr es:[di], ax
0000AC59: inc di
0000AC5A: dec bx
0000AC5B: jne 0xac51
0000AC5D: pop bx
0000AC5E: lodsb al, byte ptr [si]
0000AC5F: or al, ch
0000AC61: mov ah, 0xff
0000AC63: ror ax, cl
0000AC65: and word ptr es:[di], ax
0000AC68: add si, word ptr [bp - 0x1a]
0000AC6B: pop di
0000AC6C: add di, 0x2000
0000AC70: dec byte ptr [bp - 6]
0000AC73: jne 0xac7d
0000AC75: sub di, 0x7fa6
0000AC79: mov byte ptr [bp - 6], 4
0000AC7D: dec word ptr [bp - 8]
0000AC80: jne 0xac4b
0000AC82: jmp 0xacc2
0000AC84: mov bx, word ptr [bp - 0xa]
0000AC87: dec bx
0000AC88: push di
0000AC89: test bx, bx
0000AC8B: je 0xac9e
0000AC8D: push bx
0000AC8E: lodsb al, byte ptr [si]
0000AC8F: xor ah, ah
0000AC91: ror ax, cl
0000AC93: or word ptr es:[di], ax
0000AC96: inc di
0000AC97: dec bx
0000AC98: jne 0xac8e
0000AC9A: add si, word ptr [bp - 0x1a]
0000AC9D: pop bx
0000AC9E: lodsb al, byte ptr [si]
0000AC9F: and al, ch
0000ACA1: xor ah, ah
0000ACA3: ror ax, cl
0000ACA5: or word ptr es:[di], ax
0000ACA8: add si, word ptr [bp - 0x1a]
0000ACAB: pop di
0000ACAC: add di, 0x2000
0000ACB0: dec byte ptr [bp - 6]
0000ACB3: jne 0xacbd
0000ACB5: sub di, 0x7fa6
0000ACB9: mov byte ptr [bp - 6], 4
0000ACBD: dec word ptr [bp - 8]
0000ACC0: jne 0xac88
0000ACC2: mov word ptr [bp - 2], 0
0000ACC7: mov ax, word ptr [bp - 2]
0000ACCA: pop di
0000ACCB: pop si
0000ACCC: pop es
0000ACCD: pop ds
0000ACCE: mov sp, bp
0000ACD0: pop bp
0000ACD1: retf 0xc
0000ACD4: mov bx, word ptr [bp + 0xa]
0000ACD7: mov ax, word ptr [bp + 8]
0000ACDA: lcall es:[di + 0x26]
0000ACDE: mov di, bx
0000ACE0: mov byte ptr [bp - 0x18], dl
0000ACE3: push word ptr [bp - 0x26]
0000ACE6: push word ptr [bp - 0x18]
0000ACE9: lcall 0xa36, 0xe
0000ACEE: mov bx, 0xffff
0000ACF1: sub bx, word ptr [bp - 0xa]
0000ACF4: mov word ptr [bp - 0x24], bx
0000ACF7: mov dx, word ptr [bp - 0x1a]
0000ACFA: mov bx, word ptr [bp - 0x1c]
0000ACFD: lds si, ptr [si + 0x18]
0000AD00: mov ax, word ptr [bp + 0xc]
0000AD03: cmp ax, 0
0000AD06: jne 0xad0a
0000AD08: jmp 0xad1b
0000AD0A: cmp ax, 3
0000AD0D: jne 0xad11
0000AD0F: jmp 0xad5e
0000AD11: cmp ax, 1
0000AD14: jne 0xad18
0000AD16: jmp 0xad93
0000AD18: jmp 0xadc8
0000AD1B: mov cx, word ptr [bp - 0xa]
0000AD1E: cmp di, word ptr [bp - 0x24]
0000AD21: jbe 0xad3a
0000AD23: movsb byte ptr es:[di], byte ptr [si]
0000AD24: or di, di
0000AD26: jne 0xad36
0000AD28: inc byte ptr [bp - 0x18]
0000AD2B: push word ptr [bp - 0x26]
0000AD2E: push word ptr [bp - 0x18]
0000AD31: lcall 0xa36, 0x63
0000AD36: loop 0xad23
0000AD38: jmp 0xad42
0000AD3A: shr cx, 1
0000AD3C: rep movsw word ptr es:[di], word ptr [si]
0000AD3E: rcl cx, 1
0000AD40: rep movsb byte ptr es:[di], byte ptr [si]
0000AD42: add si, dx
0000AD44: add di, bx
0000AD46: jae 0xad56
0000AD48: inc byte ptr [bp - 0x18]
0000AD4B: push word ptr [bp - 0x26]
0000AD4E: push word ptr [bp - 0x18]
0000AD51: lcall 0xa36, 0x63
0000AD56: dec word ptr [bp - 8]
0000AD59: jne 0xad1b
0000AD5B: jmp 0xadfb
0000AD5E: mov cx, word ptr [bp - 0xa]
0000AD61: lodsb al, byte ptr [si]
0000AD62: xor byte ptr es:[di], al
0000AD65: inc di
0000AD66: jne 0xad76
0000AD68: inc byte ptr [bp - 0x18]
0000AD6B: push word ptr [bp - 0x26]
0000AD6E: push word ptr [bp - 0x18]
0000AD71: lcall 0xa36, 0x63
0000AD76: loop 0xad61
0000AD78: add si, dx
0000AD7A: add di, bx
0000AD7C: jae 0xad8c
0000AD7E: inc byte ptr [bp - 0x18]
0000AD81: push word ptr [bp - 0x26]
0000AD84: push word ptr [bp - 0x18]
0000AD87: lcall 0xa36, 0x63
0000AD8C: dec word ptr [bp - 8]
0000AD8F: jne 0xad5e
0000AD91: jmp 0xadfb
0000AD93: mov cx, word ptr [bp - 0xa]
0000AD96: lodsb al, byte ptr [si]
0000AD97: and byte ptr es:[di], al
0000AD9A: inc di
0000AD9B: jne 0xadab
0000AD9D: inc byte ptr [bp - 0x18]
0000ADA0: push word ptr [bp - 0x26]
0000ADA3: push word ptr [bp - 0x18]
0000ADA6: lcall 0xa36, 0x63
0000ADAB: loop 0xad96
0000ADAD: add si, dx
0000ADAF: add di, bx
0000ADB1: jae 0xadc1
0000ADB3: inc byte ptr [bp - 0x18]
0000ADB6: push word ptr [bp - 0x26]
0000ADB9: push word ptr [bp - 0x18]
0000ADBC: lcall 0xa36, 0x63
0000ADC1: dec word ptr [bp - 8]
0000ADC4: jne 0xad93
0000ADC6: jmp 0xadfb
0000ADC8: mov cx, word ptr [bp - 0xa]
0000ADCB: lodsb al, byte ptr [si]
0000ADCC: or byte ptr es:[di], al
0000ADCF: inc di
0000ADD0: jne 0xade0
0000ADD2: inc byte ptr [bp - 0x18]
0000ADD5: push word ptr [bp - 0x26]
0000ADD8: push word ptr [bp - 0x18]
0000ADDB: lcall 0xa36, 0x63
0000ADE0: loop 0xadcb
0000ADE2: add si, dx
0000ADE4: add di, bx
0000ADE6: jae 0xadf6
0000ADE8: inc byte ptr [bp - 0x18]
0000ADEB: push word ptr [bp - 0x26]
0000ADEE: push word ptr [bp - 0x18]
0000ADF1: lcall 0xa36, 0x63
0000ADF6: dec word ptr [bp - 8]
0000ADF9: jne 0xadc8
0000ADFB: mov word ptr [bp - 2], 0
0000AE00: push word ptr [bp - 0x26]
0000AE03: lcall 0xa36, 0x1a5
0000AE08: mov ax, word ptr [bp - 2]
0000AE0B: pop di
0000AE0C: pop si
0000AE0D: pop es
0000AE0E: pop ds
0000AE0F: mov sp, bp
0000AE11: pop bp
0000AE12: retf 0xc
0000AE15: add byte ptr [di - 0x75], dl
0000AE18: in al, dx
0000AE19: sub sp, 2
0000AE1C: push ds
0000AE1D: push es
0000AE1E: push si
0000AE1F: push di
0000AE20: mov ax, 0x1ab5
0000AE23: mov ds, ax
0000AE25: mov word ptr [bp - 2], 0xffd9
0000AE2A: les di, ptr [bp + 6]
0000AE2D: mov ah, 0x4f
0000AE2F: mov al, 0
0000AE31: int 0x10
0000AE33: cmp ax, 0x4f
0000AE36: jne 0xae58
0000AE38: cmp byte ptr es:[di], 0x56
0000AE3C: jne 0xae58
0000AE3E: cmp byte ptr es:[di + 1], 0x45
0000AE43: jne 0xae58
0000AE45: cmp byte ptr es:[di + 2], 0x53
0000AE4A: jne 0xae58
0000AE4C: cmp byte ptr es:[di + 3], 0x41
0000AE51: jne 0xae58
0000AE53: mov word ptr [bp - 2], 0
0000AE58: mov ax, word ptr [bp - 2]
0000AE5B: pop di
0000AE5C: pop si
0000AE5D: pop es
0000AE5E: pop ds
0000AE5F: mov sp, bp
0000AE61: pop bp
0000AE62: retf 4
0000AE65: push bp
0000AE66: mov bp, sp
0000AE68: sub sp, 6
0000AE6B: push ds
0000AE6C: push es
0000AE6D: push si
0000AE6E: push di
0000AE6F: mov ax, 0x1ab5
0000AE72: mov ds, ax
0000AE74: push ss
0000AE75: lea ax, [bp - 6]
0000AE78: push ax
0000AE79: lcall 0xae3, 0
0000AE7E: cmp byte ptr [bp - 6], 5
0000AE82: je 0xae87
0000AE84: jmp 0xaf5d
0000AE87: push dx
0000AE88: mov dx, 0xc000
0000AE8B: mov es, dx
0000AE8D: pop dx
0000AE8E: mov di, 0x40
0000AE91: cmp byte ptr es:[di], 0x33
0000AE95: jne 0xaea6
0000AE97: cmp byte ptr es:[di + 1], 0x31
0000AE9C: jne 0xaea6
0000AE9E: mov word ptr [bp - 2], 4
0000AEA3: jmp 0xaf62
0000AEA6: xor al, al
0000AEA8: push bp
0000AEA9: mov ah, 0x6f
0000AEAB: int 0x10
0000AEAD: pop bp
0000AEAE: cmp bx, 0x5637
0000AEB2: jne 0xaebc
0000AEB4: mov word ptr [bp - 2], 3
0000AEB9: jmp 0xaf62
0000AEBC: mov dx, 0x3ce
0000AEBF: mov al, 0xf
0000AEC1: out dx, al
0000AEC2: inc dx
0000AEC3: mov al, 5
0000AEC5: out dx, al
0000AEC6: dec dx
0000AEC7: mov al, 9
0000AEC9: out dx, al
0000AECA: inc dx
0000AECB: in al, dx
0000AECC: mov bh, al
0000AECE: mov al, 5
0000AED0: out dx, al
0000AED1: xor al, al
0000AED3: in al, dx
0000AED4: cmp al, 5
0000AED6: jne 0xaeec
0000AED8: mov al, 0xa
0000AEDA: out dx, al
0000AEDB: xor al, al
0000AEDD: in al, dx
0000AEDE: cmp al, 0xa
0000AEE0: jne 0xaeec
0000AEE2: mov al, bh
0000AEE4: out dx, al
0000AEE5: mov word ptr [bp - 2], 2
0000AEEA: jmp 0xaf62
0000AEEC: mov dx, 0x3cd
0000AEEF: in al, dx
0000AEF0: mov cl, al
0000AEF2: mov al, 0xaa
0000AEF4: out dx, al
0000AEF5: in al, dx
0000AEF6: cmp al, 0xaa
0000AEF8: jne 0xaf4a
0000AEFA: mov al, 0x55
0000AEFC: out dx, al
0000AEFD: in al, dx
0000AEFE: cmp al, 0x55
0000AF00: jne 0xaf4a
0000AF02: mov al, cl
0000AF04: out dx, al
0000AF05: mov word ptr [bp - 2], 1
0000AF0A: push dx
0000AF0B: mov dx, 0x40
0000AF0E: mov es, dx
0000AF10: pop dx
0000AF11: mov dx, word ptr es:[0x63]
0000AF16: mov al, 0x33
0000AF18: out dx, al
0000AF19: inc dx
0000AF1A: in al, dx
0000AF1B: mov cl, al
0000AF1D: dec dx
0000AF1E: mov ax, 0xa33
0000AF21: out dx, ax
0000AF22: mov al, 0x33
0000AF24: out dx, al
0000AF25: inc dx
0000AF26: in al, dx
0000AF27: and al, 0xf
0000AF29: cmp al, 0xa
0000AF2B: jne 0xaf62
0000AF2D: dec dx
0000AF2E: mov ax, 0x533
0000AF31: out dx, ax
0000AF32: mov al, 0x33
0000AF34: out dx, al
0000AF35: inc dx
0000AF36: in al, dx
0000AF37: and al, 0xf
0000AF39: cmp al, 5
0000AF3B: jne 0xaf62
0000AF3D: dec dx
0000AF3E: mov al, 0x33
0000AF40: mov ah, cl
0000AF42: out dx, ax
0000AF43: mov word ptr [bp - 2], 5
0000AF48: jmp 0xaf62
0000AF4A: mov dx, 0x3c4
0000AF4D: mov al, 0xb
0000AF4F: out dx, al
0000AF50: inc dx
0000AF51: in al, dx
0000AF52: test al, 0xe
0000AF54: je 0xaf5d
0000AF56: mov word ptr [bp - 2], 6
0000AF5B: jmp 0xaf62
0000AF5D: mov word ptr [bp - 2], 0
0000AF62: mov ax, word ptr [bp - 2]
0000AF65: pop di
0000AF66: pop si
0000AF67: pop es
0000AF68: pop ds
0000AF69: mov sp, bp
0000AF6B: pop bp
0000AF6C: retf 
0000AF6D: push bp
0000AF6E: mov bp, sp
0000AF70: sub sp, 2
0000AF73: push ds
0000AF74: push es
0000AF75: push si
0000AF76: push di
0000AF77: mov ax, 0x1ab5
0000AF7A: mov ds, ax
0000AF7C: mov word ptr [bp - 2], 0xffde
0000AF81: mov di, word ptr [bp + 6]
0000AF84: cmp di, 7
0000AF87: ja 0xafa8
0000AF89: jb 0xaf9f
0000AF8B: push ds
0000AF8C: mov si, 0x43bf
0000AF8F: push si
0000AF90: push cs
0000AF91: call 0xae16
0000AF94: or ax, ax
0000AF96: je 0xaf9f
0000AF98: mov word ptr [bp - 2], 0xffd9
0000AF9D: jmp 0xafa8
0000AF9F: mov word ptr [0x43b9], di
0000AFA3: mov word ptr [bp - 2], 0
0000AFA8: mov ax, word ptr [bp - 2]
0000AFAB: pop di
0000AFAC: pop si
0000AFAD: pop es
0000AFAE: pop ds
0000AFAF: mov sp, bp
0000AFB1: pop bp
0000AFB2: retf 2
0000AFB5: push bp
0000AFB6: mov bp, sp
0000AFB8: sub sp, 2
0000AFBB: push ds
0000AFBC: push es
0000AFBD: push si
0000AFBE: push di
0000AFBF: mov ax, 0x1ab5
0000AFC2: mov ds, ax
0000AFC4: mov ax, word ptr [0x43b9]
0000AFC7: mov word ptr [bp - 2], ax
0000AFCA: mov ax, word ptr [bp - 2]
0000AFCD: pop di
0000AFCE: pop si
0000AFCF: pop es
0000AFD0: pop ds
0000AFD1: mov sp, bp
0000AFD3: pop bp
0000AFD4: retf 
0000AFD5: push bp
0000AFD6: mov bp, sp
0000AFD8: sub sp, 2
0000AFDB: push ds
0000AFDC: push es
0000AFDD: push si
0000AFDE: push di
0000AFDF: mov ax, 0x1ab5
0000AFE2: mov ds, ax
0000AFE4: push cs
0000AFE5: call 0xafb5
0000AFE8: cmp ax, 0
0000AFEB: jne 0xaff1
0000AFED: push cs
0000AFEE: call 0xae65
0000AFF1: push ax
0000AFF2: push word ptr [bp + 8]
0000AFF5: push word ptr [bp + 6]
0000AFF8: push cs
0000AFF9: call 0xb00c
0000AFFC: mov word ptr [bp - 2], ax
0000AFFF: mov ax, word ptr [bp - 2]
0000B002: pop di
0000B003: pop si
0000B004: pop es
0000B005: pop ds
0000B006: mov sp, bp
0000B008: pop bp
0000B009: retf 4
0000B00C: push bp
0000B00D: mov bp, sp
0000B00F: sub sp, 2
0000B012: push ds
0000B013: push es
0000B014: push si
0000B015: push di
0000B016: mov ax, 0x1ab5
0000B019: mov ds, ax
0000B01B: mov word ptr [bp - 2], 0
0000B020: les di, ptr [bp + 6]
0000B023: mov ax, word ptr [bp + 0xa]
0000B026: cmp ax, 1
0000B029: jne 0xb034
0000B02B: mov bx, 0x200
0000B02E: mov cx, 0xd
0000B031: jmp 0xb18b
0000B034: cmp ax, 2
0000B037: jne 0xb060
0000B039: mov dx, 0x3ce
0000B03C: mov al, 0xb
0000B03E: out dx, al
0000B03F: inc dx
0000B040: in al, dx
0000B041: and al, 0xc0
0000B043: mov bx, 0x400
0000B046: mov cx, 0x1c
0000B049: cmp al, 0xc0
0000B04B: je 0xb05d
0000B04D: mov bx, 0x200
0000B050: mov cx, 0x11
0000B053: cmp al, 0x80
0000B055: je 0xb05d
0000B057: mov bx, 0x100
0000B05A: mov cx, 0x10
0000B05D: jmp 0xb18b
0000B060: cmp ax, 3
0000B063: jne 0xb08c
0000B065: mov ax, 0x6f07
0000B068: int 0x10
0000B06A: and ah, 0x7f
0000B06D: mov bx, 0x400
0000B070: mov cx, 0x1d
0000B073: cmp ah, 4
0000B076: jae 0xb089
0000B078: mov bx, 0x200
0000B07B: mov cx, 0x15
0000B07E: cmp ah, 2
0000B081: jae 0xb089
0000B083: mov bx, 0x100
0000B086: mov cx, 0x13
0000B089: jmp 0xb18b
0000B08C: cmp ax, 4
0000B08F: jne 0xb0dd
0000B091: mov ax, 0xc000
0000B094: mov ds, ax
0000B096: mov dx, word ptr [0x10]
0000B09A: mov bl, byte ptr [0x43]
0000B09E: mov bh, 1
0000B0A0: mov cx, 0x17
0000B0A3: cmp bl, 0x33
0000B0A6: jae 0xb0ba
0000B0A8: cli 
0000B0A9: mov al, 0xbb
0000B0AB: out dx, al
0000B0AC: inc dx
0000B0AD: in al, dx
0000B0AE: sti 
0000B0AF: test al, 0x20
0000B0B1: je 0xb0d8
0000B0B3: mov bh, 2
0000B0B5: mov cx, 0x19
0000B0B8: jmp 0xb0d8
0000B0BA: cli 
0000B0BB: mov al, 0xb0
0000B0BD: out dx, al
0000B0BE: inc dx
0000B0BF: in al, dx
0000B0C0: sti 
0000B0C1: test al, 0x10
0000B0C3: je 0xb0ca
0000B0C5: mov bh, 2
0000B0C7: mov cx, 0x19
0000B0CA: cmp bl, 0x34
0000B0CD: jb 0xb0d8
0000B0CF: test al, 8
0000B0D1: je 0xb0d8
0000B0D3: mov bh, 4
0000B0D5: mov cx, 0x1e
0000B0D8: xor bl, bl
0000B0DA: jmp 0xb18b
0000B0DD: cmp ax, 5
0000B0E0: jne 0xb110
0000B0E2: push dx
0000B0E3: mov dx, 0x40
0000B0E6: mov ds, dx
0000B0E8: pop dx
0000B0E9: mov dx, word ptr [0x63]
0000B0ED: mov al, 0x37
0000B0EF: out dx, al
0000B0F0: inc dx
0000B0F1: in al, dx
0000B0F2: and al, 3
0000B0F4: mov bx, 0x400
0000B0F7: mov cx, 0x1a
0000B0FA: cmp al, 3
0000B0FC: je 0xb10e
0000B0FE: mov bx, 0x200
0000B101: mov cx, 0xd
0000B104: cmp al, 2
0000B106: je 0xb10e
0000B108: mov bx, 0x100
0000B10B: mov cx, 0xb
0000B10E: jmp 0xb18b
0000B110: cmp ax, 6
0000B113: jne 0xb143
0000B115: push dx
0000B116: mov dx, 0x40
0000B119: mov ds, dx
0000B11B: pop dx
0000B11C: mov dx, word ptr [0x63]
0000B120: mov al, 0x1f
0000B122: out dx, al
0000B123: inc dx
0000B124: in al, dx
0000B125: and al, 3
0000B127: mov bx, 0x400
0000B12A: mov cx, 0x23
0000B12D: cmp al, 3
0000B12F: je 0xb141
0000B131: mov bx, 0x200
0000B134: mov cx, 0x22
0000B137: cmp al, 1
0000B139: je 0xb141
0000B13B: mov bx, 0x100
0000B13E: mov cx, 0x20
0000B141: jmp 0xb18b
0000B143: cmp ax, 7
0000B146: jne 0xb17b
0000B148: mov ax, 0x1ab5
0000B14B: mov ds, ax
0000B14D: mov si, 0x43bf
0000B150: push ds
0000B151: push si
0000B152: push cs
0000B153: call 0xae16
0000B156: or ax, ax
0000B158: jne 0xb17b
0000B15A: mov ax, word ptr [si + 0x12]
0000B15D: mov bx, 0x400
0000B160: mov cx, 0x28
0000B163: cmp ax, 0x10
0000B166: jae 0xb179
0000B168: mov bx, 0x200
0000B16B: mov cx, 0x27
0000B16E: cmp ax, 8
0000B171: jae 0xb179
0000B173: mov bx, 0x100
0000B176: mov cx, 0x24
0000B179: jmp 0xb18b
0000B17B: mov word ptr [bp - 2], 0xffde
0000B180: mov ax, 0
0000B183: mov word ptr [bp + 0xa], ax
0000B186: xor bx, bx
0000B188: mov cx, 0xffff
0000B18B: mov ax, word ptr [bp + 0xa]
0000B18E: mov word ptr es:[di], ax
0000B191: mov word ptr es:[di + 2], bx
0000B195: mov word ptr es:[di + 4], cx
0000B199: mov ax, word ptr [bp - 2]
0000B19C: pop di
0000B19D: pop si
0000B19E: pop es
0000B19F: pop ds
0000B1A0: mov sp, bp
0000B1A2: pop bp
0000B1A3: retf 6
0000B1A6: push bp
0000B1A7: mov bp, sp
0000B1A9: sub sp, 0xe
0000B1AC: push ds
0000B1AD: push es
0000B1AE: push si
0000B1AF: push di
0000B1B0: mov ax, 0x1ab5
0000B1B3: mov ds, ax
0000B1B5: les di, ptr [bp + 8]
0000B1B8: push es
0000B1B9: push di
0000B1BA: xor ax, ax
0000B1BC: push ax
0000B1BD: push ax
0000B1BE: mov ax, 1
0000B1C1: push ax
0000B1C2: lcall 0xb08, 0xa
0000B1C7: or dx, dx
0000B1C9: jne 0xb1d1
0000B1CB: mov word ptr [bp - 2], ax
0000B1CE: jmp 0xb2aa
0000B1D1: mov word ptr [bp - 4], dx
0000B1D4: mov word ptr [bp - 6], ax
0000B1D7: mov byte ptr [bp - 0xe], 0
0000B1DB: mov byte ptr [bp - 0xd], 0x55
0000B1DF: mov byte ptr [bp - 0xc], 0xaa
0000B1E3: mov byte ptr [bp - 0xb], 0xff
0000B1E7: mov ax, word ptr [bp + 6]
0000B1EA: mov bx, word ptr es:[di + 0x34]
0000B1EE: mov word ptr [bp - 0xa], bx
0000B1F1: xor bx, bx
0000B1F3: mov bl, byte ptr es:[di + 0x12]
0000B1F7: mov word ptr [bp - 8], bx
0000B1FA: cmp bx, 1
0000B1FD: jne 0xb22b
0000B1FF: cmp byte ptr es:[di + 0x13], 1
0000B204: jne 0xb212
0000B206: test ax, 1
0000B209: je 0xb23e
0000B20B: mov al, 0xff
0000B20D: mov byte ptr [bp - 0xe], al
0000B210: jmp 0xb23e
0000B212: cmp byte ptr es:[di + 0x13], 2
0000B217: jne 0xb226
0000B219: and ax, 3
0000B21C: mov si, ax
0000B21E: mov al, byte ptr [bp + si - 0xe]
0000B221: mov byte ptr [bp - 0xe], al
0000B224: jmp 0xb23e
0000B226: mov byte ptr [bp - 0xe], al
0000B229: jmp 0xb23e
0000B22B: xor si, si
0000B22D: mov byte ptr [bp + si - 0xe], 0xff
0000B231: rcr ax, 1
0000B233: jb 0xb238
0000B235: not byte ptr [bp + si - 0xe]
0000B238: inc si
0000B239: cmp si, word ptr [bp - 8]
0000B23C: jb 0xb22d
0000B23E: xor si, si
0000B240: mov dx, word ptr es:[di + 0x14]
0000B244: mov bx, dx
0000B246: not bx
0000B248: les di, ptr [bp - 6]
0000B24B: cld 
0000B24C: mov al, byte ptr [bp + si - 0xe]
0000B24F: mov cx, dx
0000B251: cmp di, bx
0000B253: ja 0xb272
0000B255: jmp 0xb277
0000B257: or di, di
0000B259: jne 0xb272
0000B25B: push dx
0000B25C: push ax
0000B25D: mov dx, word ptr [bp + 0xa]
0000B260: mov ax, word ptr [bp + 8]
0000B263: stc 
0000B264: lcall 0xb08, 0x17e
0000B269: mov word ptr [bp - 2], ax
0000B26C: pop ax
0000B26D: pop dx
0000B26E: jae 0xb272
0000B270: jmp 0xb2aa
0000B272: stosb byte ptr es:[di], al
0000B273: loop 0xb257
0000B275: jmp 0xb27d
0000B277: shr cx, 1
0000B279: mov ah, al
0000B27B: rep stosw word ptr es:[di], ax
0000B27D: inc si
0000B27E: cmp si, word ptr [bp - 8]
0000B281: jb 0xb285
0000B283: xor si, si
0000B285: dec word ptr [bp - 0xa]
0000B288: je 0xb2a5
0000B28A: or di, di
0000B28C: jne 0xb2a3
0000B28E: push dx
0000B28F: mov dx, word ptr [bp + 0xa]
0000B292: mov ax, word ptr [bp + 8]
0000B295: stc 
0000B296: lcall 0xb08, 0x17e
0000B29B: pop dx
0000B29C: jae 0xb2a3
0000B29E: mov word ptr [bp - 2], ax
0000B2A1: jmp 0xb2aa
0000B2A3: jmp 0xb24c
0000B2A5: mov word ptr [bp - 2], 0
0000B2AA: mov ax, word ptr [bp - 2]
0000B2AD: pop di
0000B2AE: pop si
0000B2AF: pop es
0000B2B0: pop ds
0000B2B1: mov sp, bp
0000B2B3: pop bp
0000B2B4: retf 6
0000B2B7: add byte ptr [di - 0x75], dl
0000B2BA: in al, dx
0000B2BB: sub sp, 2
0000B2BE: push ds
0000B2BF: push es
0000B2C0: push si
0000B2C1: push di
0000B2C2: mov ax, 0x1ab5
0000B2C5: mov ds, ax
0000B2C7: mov ax, word ptr [bp + 6]
0000B2CA: or ax, ax
0000B2CC: je 0xb2da
0000B2CE: cmp ax, 0x800
0000B2D1: jae 0xb2ed
0000B2D3: mov word ptr [bp - 2], 0xfffe
0000B2D8: jmp 0xb309
0000B2DA: mov ax, ds
0000B2DC: mov word ptr [0x54c3], ax
0000B2DF: mov word ptr [0x54c1], 0x44bf
0000B2E5: mov word ptr [0x54bf], 0x1000
0000B2EB: jmp 0xb2ff
0000B2ED: mov ax, word ptr [bp + 0xa]
0000B2F0: mov word ptr [0x54c3], ax
0000B2F3: mov ax, word ptr [bp + 8]
0000B2F6: mov word ptr [0x54c1], ax
0000B2F9: mov ax, word ptr [bp + 6]
0000B2FC: mov word ptr [0x54bf], ax
0000B2FF: mov byte ptr [0x54c5], 0
0000B304: mov word ptr [bp - 2], 0
0000B309: mov ax, word ptr [bp - 2]
0000B30C: pop di
0000B30D: pop si
0000B30E: pop es
0000B30F: pop ds
0000B310: mov sp, bp
0000B312: pop bp
0000B313: retf 6
0000B316: push bp
0000B317: mov bp, sp
0000B319: sub sp, 2
0000B31C: push ds
0000B31D: push es
0000B31E: push si
0000B31F: push di
0000B320: mov ax, 0x1ab5
0000B323: mov ds, ax
0000B325: les di, ptr [bp + 0xa]
0000B328: mov ax, word ptr [0x54c3]
0000B32B: mov word ptr es:[di + 2], ax
0000B32F: mov ax, word ptr [0x54c1]
0000B332: mov word ptr es:[di], ax
0000B335: les di, ptr [bp + 6]
0000B338: mov ax, word ptr [0x54bf]
0000B33B: mov word ptr es:[di], ax
0000B33E: mov word ptr [bp - 2], 0
0000B343: mov ax, word ptr [bp - 2]
0000B346: pop di
0000B347: pop si
0000B348: pop es
0000B349: pop ds
0000B34A: mov sp, bp
0000B34C: pop bp
0000B34D: retf 8
0000B350: push bp
0000B351: mov bp, sp
0000B353: sub sp, 8
0000B356: push ds
0000B357: push es
0000B358: push si
0000B359: push di
0000B35A: mov ax, 0x1ab5
0000B35D: mov ds, ax
0000B35F: push bx
0000B360: push cx
0000B361: push dx
0000B362: cmp word ptr [0x54c6], -1
0000B367: jne 0xb371
0000B369: stc 
0000B36A: mov word ptr [bp - 2], 0xffff
0000B36F: jmp 0xb3ac
0000B371: les di, ptr [0x54c1]
0000B375: mov ax, word ptr [bp + 6]
0000B378: sub ax, di
0000B37A: add word ptr [0x54ca], ax
0000B37E: adc word ptr [0x54c8], 0
0000B383: mov bx, word ptr [0x54c6]
0000B387: mov cx, word ptr [0x54c8]
0000B38B: mov dx, word ptr [0x54ca]
0000B38F: mov al, 0
0000B391: mov ah, 0x42
0000B393: int 0x21
0000B395: mov bx, word ptr [0x54c6]
0000B399: mov cx, word ptr [0x54bf]
0000B39D: mov dx, di
0000B39F: push ds
0000B3A0: mov ax, es
0000B3A2: mov ds, ax
0000B3A4: mov ah, 0x3f
0000B3A6: int 0x21
0000B3A8: pop ds
0000B3A9: mov word ptr [bp - 2], di
0000B3AC: pop dx
0000B3AD: pop cx
0000B3AE: pop bx
0000B3AF: mov ax, word ptr [bp - 2]
0000B3B2: pop di
0000B3B3: pop si
0000B3B4: pop es
0000B3B5: pop ds
0000B3B6: mov sp, bp
0000B3B8: pop bp
0000B3B9: retf 2
0000B3BC: push bp
0000B3BD: mov bp, sp
0000B3BF: sub sp, 2
0000B3C2: push ds
0000B3C3: push es
0000B3C4: push si
0000B3C5: push di
0000B3C6: mov ax, 0x1ab5
0000B3C9: mov ds, ax
0000B3CB: push bx
0000B3CC: push cx
0000B3CD: push dx
0000B3CE: cmp word ptr [0x54c6], -1
0000B3D3: jne 0xb3dd
0000B3D5: stc 
0000B3D6: mov word ptr [bp - 2], 0xfffe
0000B3DB: jmp 0xb406
0000B3DD: les di, ptr [0x54c1]
0000B3E1: mov si, word ptr [bp + 6]
0000B3E4: sub si, di
0000B3E6: mov bx, word ptr [0x54c6]
0000B3EA: mov cx, si
0000B3EC: mov dx, di
0000B3EE: push ds
0000B3EF: mov ax, es
0000B3F1: mov ds, ax
0000B3F3: mov ah, 0x40
0000B3F5: int 0x21
0000B3F7: pop ds
0000B3F8: clc 
0000B3F9: mov word ptr [bp - 2], di
0000B3FC: cmp ax, si
0000B3FE: je 0xb406
0000B400: stc 
0000B401: mov word ptr [bp - 2], 0xfffc
0000B406: pop dx
0000B407: pop cx
0000B408: pop bx
0000B409: mov ax, word ptr [bp - 2]
0000B40C: pop di
0000B40D: pop si
0000B40E: pop es
0000B40F: pop ds
0000B410: mov sp, bp
0000B412: pop bp
0000B413: retf 2
0000B416: push bp
0000B417: mov bp, sp
0000B419: sub sp, 2
0000B41C: push ds
0000B41D: push es
0000B41E: push si
0000B41F: push di
0000B420: mov ax, 0x1ab5
0000B423: mov ds, ax
0000B425: mov ax, word ptr [bp + 0x14]
0000B428: mov word ptr [0x54c6], ax
0000B42B: push word ptr [bp + 0xc]
0000B42E: push word ptr [bp + 0xa]
0000B431: push word ptr [bp + 8]
0000B434: push word ptr [bp + 6]
0000B437: push cs
0000B438: call 0xb316
0000B43B: mov ax, word ptr [bp + 0x12]
0000B43E: mov word ptr [0x54c8], ax
0000B441: mov ax, word ptr [bp + 0x10]
0000B444: mov word ptr [0x54ca], ax
0000B447: cmp word ptr [bp + 0xe], 0
0000B44B: jne 0xb45e
0000B44D: push word ptr [0x54c1]
0000B451: push cs
0000B452: call 0xb350
0000B455: jae 0xb45e
0000B457: mov word ptr [bp - 2], 0xfffd
0000B45C: jmp 0xb463
0000B45E: mov word ptr [bp - 2], 0
0000B463: mov ax, word ptr [bp - 2]
0000B466: pop di
0000B467: pop si
0000B468: pop es
0000B469: pop ds
0000B46A: mov sp, bp
0000B46C: pop bp
0000B46D: retf 0x10
0000B470: push bp
0000B471: mov bp, sp
0000B473: sub sp, 2
0000B476: push ds
0000B477: push es
0000B478: push si
0000B479: push di
0000B47A: mov ax, 0x1ab5
0000B47D: mov ds, ax
0000B47F: mov word ptr [0x54c6], 0xffff
0000B485: mov word ptr [bp - 2], 0
0000B48A: mov ax, word ptr [bp - 2]
0000B48D: pop di
0000B48E: pop si
0000B48F: pop es
0000B490: pop ds
0000B491: mov sp, bp
0000B493: pop bp
0000B494: retf 
0000B495: push bp
0000B496: mov bp, sp
0000B498: sub sp, 2
0000B49B: push ds
0000B49C: push es
0000B49D: push si
0000B49E: push di
0000B49F: mov ax, 0x1ab5
0000B4A2: mov ds, ax
0000B4A4: cmp byte ptr [0x54c5], 1
0000B4A9: jne 0xb4b2
0000B4AB: mov word ptr [bp - 2], 0xfc19
0000B4B0: jmp 0xb4bc
0000B4B2: mov byte ptr [0x54c5], 1
0000B4B7: mov word ptr [bp - 2], 0
0000B4BC: mov ax, word ptr [bp - 2]
0000B4BF: pop di
0000B4C0: pop si
0000B4C1: pop es
0000B4C2: pop ds
0000B4C3: mov sp, bp
0000B4C5: pop bp
0000B4C6: retf 
0000B4C7: push bp
0000B4C8: mov bp, sp
0000B4CA: sub sp, 2
0000B4CD: push ds
0000B4CE: push es
0000B4CF: push si
0000B4D0: push di
0000B4D1: mov ax, 0x1ab5
0000B4D4: mov ds, ax
0000B4D6: mov byte ptr [0x54c5], 0
0000B4DB: mov word ptr [bp - 2], 0
0000B4E0: mov ax, word ptr [bp - 2]
0000B4E3: pop di
0000B4E4: pop si
0000B4E5: pop es
0000B4E6: pop ds
0000B4E7: mov sp, bp
0000B4E9: pop bp
0000B4EA: retf 
0000B4EB: add byte ptr [di - 0x75], dl
0000B4EE: in al, dx
0000B4EF: sub sp, 2
0000B4F2: push ds
0000B4F3: push es
0000B4F4: push si
0000B4F5: push di
0000B4F6: mov ax, 0x1ab5
0000B4F9: mov ds, ax
0000B4FB: mov ax, word ptr [bp + 8]
0000B4FE: cmp ax, 0x24
0000B501: jb 0xb508
0000B503: cmp ax, 0x28
0000B506: jbe 0xb50f
0000B508: mov word ptr [bp - 2], 0xfffa
0000B50D: jmp 0xb535
0000B50F: mov si, 0x598e
0000B512: mov bx, word ptr [bp + 6]
0000B515: mov cx, 0x2c
0000B518: cmp bl, byte ptr [si + 1]
0000B51B: jne 0xb52b
0000B51D: cmp al, byte ptr [si + 2]
0000B520: jne 0xb52b
0000B522: mov al, byte ptr [si]
0000B524: xor ah, ah
0000B526: mov word ptr [bp - 2], ax
0000B529: jmp 0xb535
0000B52B: add si, 6
0000B52E: loop 0xb518
0000B530: mov word ptr [bp - 2], 0xfffa
0000B535: mov ax, word ptr [bp - 2]
0000B538: pop di
0000B539: pop si
0000B53A: pop es
0000B53B: pop ds
0000B53C: mov sp, bp
0000B53E: pop bp
0000B53F: retf 4
0000B542: push bp
0000B543: mov bp, sp
0000B545: sub sp, 2
0000B548: push ds
0000B549: push es
0000B54A: push si
0000B54B: push di
0000B54C: mov ax, 0x1ab5
0000B54F: mov ds, ax
0000B551: mov ax, word ptr [bp + 6]
0000B554: cmp ax, 0x24
0000B557: jb 0xb560
0000B559: mov word ptr [bp - 2], 0xfffa
0000B55E: jmp 0xb579
0000B560: push ax
0000B561: push cs
0000B562: call 0xb5bf
0000B565: jae 0xb56c
0000B567: mov word ptr [bp - 2], ax
0000B56A: jmp 0xb579
0000B56C: mov es, dx
0000B56E: mov di, ax
0000B570: mov al, byte ptr es:[di + 2]
0000B574: xor ah, ah
0000B576: mov word ptr [bp - 2], ax
0000B579: mov ax, word ptr [bp - 2]
0000B57C: pop di
0000B57D: pop si
0000B57E: pop es
0000B57F: pop ds
0000B580: mov sp, bp
0000B582: pop bp
0000B583: retf 4
0000B586: push bp
0000B587: mov bp, sp
0000B589: sub sp, 2
0000B58C: push ds
0000B58D: push es
0000B58E: push si
0000B58F: push di
0000B590: mov ax, 0x1ab5
0000B593: mov ds, ax
0000B595: push word ptr [bp + 6]
0000B598: push cs
0000B599: call 0xb5bf
0000B59C: jae 0xb5a5
0000B59E: mov word ptr [bp - 2], 0xfc19
0000B5A3: jmp 0xb5b2
0000B5A5: mov es, dx
0000B5A7: mov di, ax
0000B5A9: mov al, byte ptr es:[di + 3]
0000B5AD: xor ah, ah
0000B5AF: mov word ptr [bp - 2], ax
0000B5B2: mov ax, word ptr [bp - 2]
0000B5B5: pop di
0000B5B6: pop si
0000B5B7: pop es
0000B5B8: pop ds
0000B5B9: mov sp, bp
0000B5BB: pop bp
0000B5BC: retf 2
0000B5BF: push bp
0000B5C0: mov bp, sp
0000B5C2: sub sp, 2
0000B5C5: push ds
0000B5C6: push es
0000B5C7: push si
0000B5C8: push di
0000B5C9: mov ax, 0x1ab5
0000B5CC: mov ds, ax
0000B5CE: mov ax, word ptr [bp + 6]
0000B5D1: cmp ax, 0x28
0000B5D4: jbe 0xb5de
0000B5D6: mov word ptr [bp - 2], 0xfffa
0000B5DB: stc 
0000B5DC: jmp 0xb5fd
0000B5DE: mov si, 0x598e
0000B5E1: mov cx, 0x2c
0000B5E4: cmp al, byte ptr [si]
0000B5E6: je 0xb5f5
0000B5E8: add si, 6
0000B5EB: loop 0xb5e4
0000B5ED: mov word ptr [bp - 2], 0xfc19
0000B5F2: stc 
0000B5F3: jmp 0xb5fd
0000B5F5: mov dx, ds
0000B5F7: mov ax, si
0000B5F9: mov word ptr [bp - 2], ax
0000B5FC: clc 
0000B5FD: mov ax, word ptr [bp - 2]
0000B600: pop di
0000B601: pop si
0000B602: pop es
0000B603: pop ds
0000B604: mov sp, bp
0000B606: pop bp
0000B607: retf 2
0000B60A: push bp
0000B60B: mov bp, sp
0000B60D: sub sp, 2
0000B610: push ds
0000B611: push es
0000B612: push si
0000B613: push di
0000B614: mov ax, 0x1ab5
0000B617: mov ds, ax
0000B619: mov ax, word ptr [bp + 6]
0000B61C: cmp ax, 0x28
0000B61F: jbe 0xb629
0000B621: mov word ptr [bp - 2], 0xfffa
0000B626: stc 
0000B627: jmp 0xb65d
0000B629: push ax
0000B62A: push cs
0000B62B: call 0xb5bf
0000B62E: jae 0xb636
0000B630: mov word ptr [bp - 2], ax
0000B633: stc 
0000B634: jmp 0xb65d
0000B636: mov es, dx
0000B638: mov di, ax
0000B63A: mov si, 0x55f8
0000B63D: mov al, 0x36
0000B63F: mul byte ptr es:[di + 3]
0000B643: add si, ax
0000B645: mov al, byte ptr es:[di + 2]
0000B649: cmp al, byte ptr [si]
0000B64B: je 0xb655
0000B64D: mov word ptr [bp - 2], 0xfc19
0000B652: stc 
0000B653: jmp 0xb65d
0000B655: mov dx, ds
0000B657: mov ax, si
0000B659: mov word ptr [bp - 2], ax
0000B65C: clc 
0000B65D: mov ax, word ptr [bp - 2]
0000B660: pop di
0000B661: pop si
0000B662: pop es
0000B663: pop ds
0000B664: mov sp, bp
0000B666: pop bp
0000B667: retf 2
0000B66A: push bp
0000B66B: mov bp, sp
0000B66D: sub sp, 2
0000B670: push ds
0000B671: push es
0000B672: push si
0000B673: push di
0000B674: mov ax, 0x1ab5
0000B677: mov ds, ax
0000B679: cmp word ptr [0x43b9], 7
0000B67E: jne 0xb691
0000B680: mov ah, 0x4f
0000B682: mov al, 3
0000B684: int 0x10
0000B686: xchg bx, ax
0000B687: cmp bx, 0x4f
0000B68A: je 0xb69a
0000B68C: mov ax, 0xffd8
0000B68F: jmp 0xb69d
0000B691: push bp
0000B692: mov ah, 0xf
0000B694: int 0x10
0000B696: pop bp
0000B697: and ax, 0x7f
0000B69A: mov word ptr [bp - 2], ax
0000B69D: mov ax, word ptr [bp - 2]
0000B6A0: pop di
0000B6A1: pop si
0000B6A2: pop es
0000B6A3: pop ds
0000B6A4: mov sp, bp
0000B6A6: pop bp
0000B6A7: retf 
0000B6A8: push bp
0000B6A9: mov bp, sp
0000B6AB: sub sp, 2
0000B6AE: push ds
0000B6AF: push es
0000B6B0: push si
0000B6B1: push di
0000B6B2: mov ax, 0x1ab5
0000B6B5: mov ds, ax
0000B6B7: mov ax, word ptr [bp + 6]
0000B6BA: or ah, ah
0000B6BC: je 0xb6e0
0000B6BE: cmp word ptr [0x43b9], 7
0000B6C3: je 0xb6cc
0000B6C5: mov word ptr [bp - 2], 0xfffa
0000B6CA: jmp 0xb6eb
0000B6CC: mov bx, ax
0000B6CE: mov ah, 0x4f
0000B6D0: mov al, 2
0000B6D2: int 0x10
0000B6D4: cmp ax, 0x4f
0000B6D7: je 0xb6e6
0000B6D9: mov word ptr [bp - 2], 0xffd8
0000B6DE: jmp 0xb6eb
0000B6E0: push bp
0000B6E1: mov ah, 0
0000B6E3: int 0x10
0000B6E5: pop bp
0000B6E6: mov word ptr [bp - 2], 0
0000B6EB: mov ax, word ptr [bp - 2]
0000B6EE: pop di
0000B6EF: pop si
0000B6F0: pop es
0000B6F1: pop ds
0000B6F2: mov sp, bp
0000B6F4: pop bp
0000B6F5: retf 2
0000B6F8: push bp
0000B6F9: mov bp, sp
0000B6FB: sub sp, 2
0000B6FE: push ds
0000B6FF: push es
0000B700: push si
0000B701: push di
0000B702: mov ax, 0x1ab5
0000B705: mov ds, ax
0000B707: les di, ptr [bp + 0xa]
0000B70A: mov word ptr es:[di], 2
0000B70F: les di, ptr [bp + 6]
0000B712: mov word ptr es:[di], 2
0000B717: mov word ptr [bp - 2], 0
0000B71C: mov ax, word ptr [bp - 2]
0000B71F: pop di
0000B720: pop si
0000B721: pop es
0000B722: pop ds
0000B723: mov sp, bp
0000B725: pop bp
0000B726: retf 8
0000B729: push bp
0000B72A: mov bp, sp
0000B72C: sub sp, 6
0000B72F: push ds
0000B730: push es
0000B731: push si
0000B732: push di
0000B733: mov ax, 0x1ab5
0000B736: mov ds, ax
0000B738: mov word ptr [bp - 6], 0
0000B73D: mov si, word ptr [bp + 6]
0000B740: cmp si, 0x28
0000B743: jbe 0xb74d
0000B745: mov word ptr [bp - 2], 0xfffa
0000B74A: jmp 0xb831
0000B74D: mov ax, word ptr [0x43b9]
0000B750: mov word ptr [bp - 4], ax
0000B753: cmp si, 9
0000B756: ja 0xb75b
0000B758: jmp 0xb80c
0000B75B: cmp ax, 0
0000B75E: jg 0xb772
0000B760: lcall 0x921, 0x55
0000B765: cmp ax, 0
0000B768: jg 0xb772
0000B76A: mov word ptr [bp - 2], 0xffde
0000B76F: jmp 0xb831
0000B772: mov word ptr [bp - 4], ax
0000B775: cmp ax, 7
0000B778: jne 0xb787
0000B77A: cmp si, 0x24
0000B77D: jae 0xb7a1
0000B77F: mov word ptr [bp - 2], 0xfffa
0000B784: jmp 0xb831
0000B787: cmp si, 0x24
0000B78A: jb 0xb7a1
0000B78C: push si
0000B78D: push ax
0000B78E: push cs
0000B78F: call 0xb4ec
0000B792: mov word ptr [bp + 6], ax
0000B795: mov si, ax
0000B797: or ax, ax
0000B799: jge 0xb7a1
0000B79B: mov word ptr [bp - 2], ax
0000B79E: jmp 0xb831
0000B7A1: push si
0000B7A2: push cs
0000B7A3: call 0xb5bf
0000B7A6: jae 0xb7ae
0000B7A8: mov word ptr [bp - 2], ax
0000B7AB: jmp 0xb831
0000B7AE: mov ds, dx
0000B7B0: mov si, ax
0000B7B2: cmp word ptr [bp - 4], 7
0000B7B6: jne 0xb7e8
0000B7B8: mov ax, 0x1ab5
0000B7BB: mov es, ax
0000B7BD: mov di, 0x43bf
0000B7C0: mov cx, word ptr [si + 4]
0000B7C3: mov ah, 0x4f
0000B7C5: mov al, 1
0000B7C7: int 0x10
0000B7C9: cmp ax, 0x4f
0000B7CC: je 0xb7d5
0000B7CE: mov word ptr [bp - 2], 0xffd8
0000B7D3: jmp 0xb831
0000B7D5: mov cx, word ptr es:[di + 4]
0000B7D9: mov ax, 0x40
0000B7DC: div cl
0000B7DE: mov word ptr [0x43bb], ax
0000B7E1: mov ax, word ptr es:[di + 0x10]
0000B7E5: mov word ptr [bp - 6], ax
0000B7E8: push word ptr [bp + 6]
0000B7EB: push cs
0000B7EC: call 0xb60a
0000B7EF: jae 0xb7f6
0000B7F1: mov word ptr [bp - 2], ax
0000B7F4: jmp 0xb831
0000B7F6: mov es, dx
0000B7F8: mov di, ax
0000B7FA: mov ax, word ptr [si + 4]
0000B7FD: mov byte ptr es:[di + 0x16], al
0000B801: mov ax, word ptr [bp - 6]
0000B804: or ax, ax
0000B806: je 0xb80c
0000B808: mov word ptr es:[di + 0x1c], ax
0000B80C: mov ax, 0x1ab5
0000B80F: mov ds, ax
0000B811: mov ax, word ptr [bp - 4]
0000B814: mov word ptr [0x43b9], ax
0000B817: mov ax, word ptr [bp + 6]
0000B81A: mov word ptr [0x43b1], ax
0000B81D: push ax
0000B81E: push cs
0000B81F: call 0xb586
0000B822: mov word ptr [0x43b3], ax
0000B825: mov ax, word ptr es:[di + 0x1c]
0000B829: mov word ptr [0x43bd], ax
0000B82C: mov word ptr [bp - 2], 0
0000B831: mov ax, word ptr [bp - 2]
0000B834: pop di
0000B835: pop si
0000B836: pop es
0000B837: pop ds
0000B838: mov sp, bp
0000B83A: pop bp
0000B83B: retf 2
0000B83E: push bp
0000B83F: mov bp, sp
0000B841: sub sp, 2
0000B844: push ds
0000B845: push es
0000B846: push si
0000B847: push di
0000B848: mov ax, 0x1ab5
0000B84B: mov ds, ax
0000B84D: mov word ptr [bp - 2], 0xfffa
0000B852: mov ax, word ptr [0x43b1]
0000B855: cmp ax, 0x28
0000B858: ja 0xb85d
0000B85A: mov word ptr [bp - 2], ax
0000B85D: mov ax, word ptr [bp - 2]
0000B860: pop di
0000B861: pop si
0000B862: pop es
0000B863: pop ds
0000B864: mov sp, bp
0000B866: pop bp
0000B867: retf 
0000B868: push bp
0000B869: mov bp, sp
0000B86B: sub sp, 2
0000B86E: push ds
0000B86F: push es
0000B870: push si
0000B871: push di
0000B872: mov ax, 0x1ab5
0000B875: mov ds, ax
0000B877: push word ptr [bp + 0xa]
0000B87A: push cs
0000B87B: call 0xb60a
0000B87E: jae 0xb885
0000B880: mov word ptr [bp - 2], ax
0000B883: jmp 0xb897
0000B885: mov ds, dx
0000B887: mov si, ax
0000B889: les di, ptr [bp + 6]
0000B88C: mov cx, 0x26
0000B88F: cld 
0000B890: rep movsb byte ptr es:[di], byte ptr [si]
0000B892: mov word ptr [bp - 2], 0
0000B897: mov ax, word ptr [bp - 2]
0000B89A: pop di
0000B89B: pop si
0000B89C: pop es
0000B89D: pop ds
0000B89E: mov sp, bp
0000B8A0: pop bp
0000B8A1: retf 6
0000B8A4: push bp
0000B8A5: mov bp, sp
0000B8A7: sub sp, 2
0000B8AA: push ds
0000B8AB: push es
0000B8AC: push si
0000B8AD: push di
0000B8AE: mov ax, 0x1ab5
0000B8B1: mov ds, ax
0000B8B3: mov word ptr [bp - 2], 0
0000B8B8: mov ax, word ptr [0x43b1]
0000B8BB: cmp ax, 0x24
0000B8BE: jb 0xb8d3
0000B8C0: push ax
0000B8C1: push word ptr [0x43b9]
0000B8C5: push cs
0000B8C6: call 0xb4ec
0000B8C9: or ax, ax
0000B8CB: jge 0xb8d3
0000B8CD: mov word ptr [bp - 2], ax
0000B8D0: jmp 0xb968
0000B8D3: push ax
0000B8D4: push cs
0000B8D5: call 0xb5bf
0000B8D8: jae 0xb8e0
0000B8DA: mov word ptr [bp - 2], ax
0000B8DD: jmp 0xb968
0000B8E0: mov es, dx
0000B8E2: mov di, ax
0000B8E4: cmp word ptr [bp + 6], 1
0000B8E8: jne 0xb938
0000B8EA: mov word ptr [0x43b5], 1
0000B8F0: mov word ptr [0x43b7], 0
0000B8F6: cmp byte ptr es:[di], 9
0000B8FA: je 0xb92f
0000B8FC: push cs
0000B8FD: call 0xb66a
0000B900: cmp ax, word ptr es:[di + 4]
0000B904: je 0xb968
0000B906: push word ptr es:[di + 4]
0000B90A: push cs
0000B90B: call 0xb6a8
0000B90E: or ax, ax
0000B910: je 0xb917
0000B912: mov word ptr [bp - 2], ax
0000B915: jmp 0xb968
0000B917: cmp word ptr [0x54d4], 1
0000B91C: jne 0xb968
0000B91E: push cs
0000B91F: call 0xb66a
0000B922: cmp ax, word ptr es:[di + 4]
0000B926: je 0xb968
0000B928: mov word ptr [bp - 2], 0xfffa
0000B92D: jmp 0xb968
0000B92F: mov ax, 2
0000B932: push cs
0000B933: call 0xb995
0000B936: jmp 0xb968
0000B938: cmp word ptr [bp + 6], 0
0000B93C: jne 0xb963
0000B93E: mov word ptr [0x43b5], 0
0000B944: mov word ptr [0x43b7], 0
0000B94A: cmp byte ptr es:[di], 9
0000B94E: je 0xb95a
0000B950: mov ax, 3
0000B953: push ax
0000B954: push cs
0000B955: call 0xb6a8
0000B958: jmp 0xb968
0000B95A: mov ax, 0x20
0000B95D: push cs
0000B95E: call 0xb995
0000B961: jmp 0xb968
0000B963: mov word ptr [bp - 2], 0xfff9
0000B968: mov ax, word ptr [bp - 2]
0000B96B: pop di
0000B96C: pop si
0000B96D: pop es
0000B96E: pop ds
0000B96F: mov sp, bp
0000B971: pop bp
0000B972: retf 2
0000B975: push bp
0000B976: mov bp, sp
0000B978: sub sp, 2
0000B97B: push ds
0000B97C: push es
0000B97D: push si
0000B97E: push di
0000B97F: mov ax, 0x1ab5
0000B982: mov ds, ax
0000B984: mov ax, word ptr [0x43b5]
0000B987: mov word ptr [bp - 2], ax
0000B98A: mov ax, word ptr [bp - 2]
0000B98D: pop di
0000B98E: pop si
0000B98F: pop es
0000B990: pop ds
0000B991: mov sp, bp
0000B993: pop bp
0000B994: retf 
0000B995: push ax
0000B996: cmp al, 2
0000B998: je 0xb9a7
0000B99A: mov si, 0x5aa2
0000B99D: mov bx, 0x720
0000B9A0: push bx
0000B9A1: mov bx, 0x7d0
0000B9A4: push bx
0000B9A5: jmp 0xb9b1
0000B9A7: mov si, 0x5a96
0000B9AA: xor bx, bx
0000B9AC: push bx
0000B9AD: mov bx, 0x4000
0000B9B0: push bx
0000B9B1: mov ah, al
0000B9B3: mov al, ah
0000B9B5: mov dx, 0x3b8
0000B9B8: out dx, al
0000B9B9: mov cx, 0xc
0000B9BC: xor ah, ah
0000B9BE: cld 
0000B9BF: mov al, ah
0000B9C1: mov dx, 0x3b4
0000B9C4: out dx, al
0000B9C5: lodsb al, byte ptr [si]
0000B9C6: mov bl, al
0000B9C8: mov al, bl
0000B9CA: mov dx, 0x3b5
0000B9CD: out dx, al
0000B9CE: inc ah
0000B9D0: loop 0xb9bf
0000B9D2: pop cx
0000B9D3: push dx
0000B9D4: mov dx, 0xb000
0000B9D7: mov es, dx
0000B9D9: pop dx
0000B9DA: xor di, di
0000B9DC: pop ax
0000B9DD: rep stosw word ptr es:[di], ax
0000B9DF: pop bx
0000B9E0: add bl, 8
0000B9E3: mov al, bl
0000B9E5: mov dx, 0x3b8
0000B9E8: out dx, al
0000B9E9: retf 
0000B9EA: push bp
0000B9EB: mov bp, sp
0000B9ED: sub sp, 2
0000B9F0: push ds
0000B9F1: push es
0000B9F2: push si
0000B9F3: push di
0000B9F4: mov ax, 0x1ab5
0000B9F7: mov ds, ax
0000B9F9: mov ax, word ptr [bp + 6]
0000B9FC: cmp ax, 3
0000B9FF: je 0xba04
0000BA01: mov ax, 1
0000BA04: mov dx, 0x3bf
0000BA07: out dx, al
0000BA08: mov word ptr [bp - 2], 0
0000BA0D: mov ax, word ptr [bp - 2]
0000BA10: pop di
0000BA11: pop si
0000BA12: pop es
0000BA13: pop ds
0000BA14: mov sp, bp
0000BA16: pop bp
0000BA17: retf 2
0000BA1A: push bp
0000BA1B: mov bp, sp
0000BA1D: sub sp, 2
0000BA20: push ds
0000BA21: push es
0000BA22: push si
0000BA23: push di
0000BA24: mov ax, 0x1ab5
0000BA27: mov ds, ax
0000BA29: mov ax, word ptr [0x54d4]
0000BA2C: mov word ptr [bp - 2], ax
0000BA2F: mov ax, word ptr [bp + 6]
0000BA32: cmp ax, 0
0000BA35: je 0xba3a
0000BA37: mov ax, 1
0000BA3A: mov word ptr [0x54d4], ax
0000BA3D: mov ax, word ptr [bp - 2]
0000BA40: pop di
0000BA41: pop si
0000BA42: pop es
0000BA43: pop ds
0000BA44: mov sp, bp
0000BA46: pop bp
0000BA47: retf 2
0000BA4A: push bp
0000BA4B: mov bp, sp
0000BA4D: sub sp, 2
0000BA50: push ds
0000BA51: push es
0000BA52: push si
0000BA53: push di
0000BA54: mov ax, 0x1ab5
0000BA57: mov ds, ax
0000BA59: mov ax, word ptr [0x54d6]
0000BA5C: mov word ptr [bp - 2], ax
0000BA5F: mov ax, word ptr [bp + 6]
0000BA62: cmp ax, 0
0000BA65: je 0xba6a
0000BA67: mov ax, 1
0000BA6A: mov word ptr [0x54d6], ax
0000BA6D: mov ax, word ptr [bp - 2]
0000BA70: pop di
0000BA71: pop si
0000BA72: pop es
0000BA73: pop ds
0000BA74: mov sp, bp
0000BA76: pop bp
0000BA77: retf 2
0000BA7A: push bp
0000BA7B: mov bp, sp
0000BA7D: sub sp, 0xa
0000BA80: push ds
0000BA81: push es
0000BA82: push si
0000BA83: push di
0000BA84: mov ax, 0x1ab5
0000BA87: mov ds, ax
0000BA89: lds si, ptr [bp + 0xc]
0000BA8C: les di, ptr [bp + 6]
0000BA8F: mov al, byte ptr [si + 0x12]
0000BA92: xor ah, ah
0000BA94: mov word ptr [bp - 4], ax
0000BA97: mov ax, word ptr [si + 0x14]
0000BA9A: mov word ptr [bp - 6], ax
0000BA9D: mov ax, word ptr [si + 0x2a]
0000BAA0: mov bx, 0x4000
0000BAA3: mul bx
0000BAA5: mov word ptr [bp - 0xa], ax
0000BAA8: dec ax
0000BAA9: sub ax, word ptr [bp - 6]
0000BAAC: mov word ptr [bp - 8], ax
0000BAAF: mov ax, word ptr [si + 0xc]
0000BAB2: cmp ax, word ptr [bp + 0xa]
0000BAB5: jae 0xbabe
0000BAB7: mov word ptr [bp - 2], 0xffe5
0000BABC: jmp 0xbb13
0000BABE: push ds
0000BABF: push si
0000BAC0: xor ax, ax
0000BAC2: push ax
0000BAC3: mov ax, word ptr [bp + 0xa]
0000BAC6: push ax
0000BAC7: mov ax, 0
0000BACA: push ax
0000BACB: lcall 0xb08, 0xa
0000BAD0: or dx, dx
0000BAD2: jne 0xbad9
0000BAD4: mov word ptr [bp - 2], ax
0000BAD7: jmp 0xbb13
0000BAD9: mov ds, dx
0000BADB: mov si, ax
0000BADD: mov bx, word ptr [bp - 8]
0000BAE0: cld 
0000BAE1: mov cx, word ptr [bp - 6]
0000BAE4: cmp si, bx
0000BAE6: jbe 0xbb05
0000BAE8: cmp si, word ptr [bp - 0xa]
0000BAEB: jne 0xbb00
0000BAED: mov dx, word ptr [bp + 0xe]
0000BAF0: mov ax, word ptr [bp + 0xc]
0000BAF3: clc 
0000BAF4: lcall 0xb08, 0x17e
0000BAF9: jae 0xbb00
0000BAFB: mov word ptr [bp - 2], ax
0000BAFE: jmp 0xbb13
0000BB00: movsb byte ptr es:[di], byte ptr [si]
0000BB01: loop 0xbae8
0000BB03: jmp 0xbb09
0000BB05: shr cx, 1
0000BB07: rep movsw word ptr es:[di], word ptr [si]
0000BB09: dec word ptr [bp - 4]
0000BB0C: jne 0xbae1
0000BB0E: mov word ptr [bp - 2], 0
0000BB13: mov ax, word ptr [bp - 2]
0000BB16: pop di
0000BB17: pop si
0000BB18: pop es
0000BB19: pop ds
0000BB1A: mov sp, bp
0000BB1C: pop bp
0000BB1D: retf 0xa
0000BB20: push bp
0000BB21: mov bp, sp
0000BB23: sub sp, 0xa
0000BB26: push ds
0000BB27: push es
0000BB28: push si
0000BB29: push di
0000BB2A: mov ax, 0x1ab5
0000BB2D: mov ds, ax
0000BB2F: les di, ptr [bp + 0xc]
0000BB32: lds si, ptr [bp + 6]
0000BB35: mov al, byte ptr es:[di + 0x12]
0000BB39: xor ah, ah
0000BB3B: mov word ptr [bp - 4], ax
0000BB3E: mov ax, word ptr es:[di + 0x14]
0000BB42: mov word ptr [bp - 6], ax
0000BB45: mov ax, word ptr es:[di + 0x2a]
0000BB49: mov bx, 0x4000
0000BB4C: mul bx
0000BB4E: mov word ptr [bp - 0xa], ax
0000BB51: dec ax
0000BB52: sub ax, word ptr [bp - 6]
0000BB55: mov word ptr [bp - 8], ax
0000BB58: mov ax, word ptr es:[di + 0xc]
0000BB5C: cmp ax, word ptr [bp + 0xa]
0000BB5F: jae 0xbb68
0000BB61: mov word ptr [bp - 2], 0xffe5
0000BB66: jmp 0xbbbd
0000BB68: push es
0000BB69: push di
0000BB6A: xor ax, ax
0000BB6C: push ax
0000BB6D: mov ax, word ptr [bp + 0xa]
0000BB70: push ax
0000BB71: mov ax, 1
0000BB74: push ax
0000BB75: lcall 0xb08, 0xa
0000BB7A: or dx, dx
0000BB7C: jne 0xbb83
0000BB7E: mov word ptr [bp - 2], ax
0000BB81: jmp 0xbbbd
0000BB83: mov es, dx
0000BB85: mov di, ax
0000BB87: mov bx, word ptr [bp - 8]
0000BB8A: cld 
0000BB8B: mov cx, word ptr [bp - 6]
0000BB8E: cmp di, bx
0000BB90: jbe 0xbbaf
0000BB92: cmp di, word ptr [bp - 0xa]
0000BB95: jne 0xbbaa
0000BB97: mov dx, word ptr [bp + 0xe]
0000BB9A: mov ax, word ptr [bp + 0xc]
0000BB9D: stc 
0000BB9E: lcall 0xb08, 0x17e
0000BBA3: jae 0xbbaa
0000BBA5: mov word ptr [bp - 2], ax
0000BBA8: jmp 0xbbbd
0000BBAA: movsb byte ptr es:[di], byte ptr [si]
0000BBAB: loop 0xbb92
0000BBAD: jmp 0xbbb3
0000BBAF: shr cx, 1
0000BBB1: rep movsw word ptr es:[di], word ptr [si]
0000BBB3: dec word ptr [bp - 4]
0000BBB6: jne 0xbb8b
0000BBB8: mov word ptr [bp - 2], 0
0000BBBD: mov ax, word ptr [bp - 2]
0000BBC0: pop di
0000BBC1: pop si
0000BBC2: pop es
0000BBC3: pop ds
0000BBC4: mov sp, bp
0000BBC6: pop bp
0000BBC7: retf 0xa
0000BBCA: push bp
0000BBCB: mov bp, sp
0000BBCD: sub sp, 4
0000BBD0: push ds
0000BBD1: push es
0000BBD2: push si
0000BBD3: push di
0000BBD4: mov ax, 0x1ab5
0000BBD7: mov ds, ax
0000BBD9: mov ax, word ptr [bp + 8]
0000BBDC: xor dx, dx
0000BBDE: mov bx, word ptr [bp + 6]
0000BBE1: cmp ax, bx
0000BBE3: jg 0xbbe6
0000BBE5: xchg bx, ax
0000BBE6: mov word ptr [bp - 4], bx
0000BBE9: div bx
0000BBEB: lds si, ptr [bp + 0xa]
0000BBEE: add dx, word ptr [si]
0000BBF0: cmp dx, word ptr [bp - 4]
0000BBF3: jb 0xbbf9
0000BBF5: sub dx, word ptr [bp - 4]
0000BBF8: inc ax
0000BBF9: mov word ptr [si], dx
0000BBFB: lds si, ptr [bp + 0xe]
0000BBFE: add word ptr [si], ax
0000BC00: mov word ptr [bp - 2], 0
0000BC05: mov ax, word ptr [bp - 2]
0000BC08: pop di
0000BC09: pop si
0000BC0A: pop es
0000BC0B: pop ds
0000BC0C: mov sp, bp
0000BC0E: pop bp
0000BC0F: retf 0xc
0000BC12: push bp
0000BC13: mov bp, sp
0000BC15: sub sp, 0x12
0000BC18: push ds
0000BC19: push es
0000BC1A: push si
0000BC1B: push di
0000BC1C: mov ax, 0x1ab5
0000BC1F: mov ds, ax
0000BC21: lds si, ptr [bp + 0x14]
0000BC24: les di, ptr [bp + 6]
0000BC27: mov word ptr [bp - 6], 0
0000BC2C: mov ax, word ptr [bp + 0x10]
0000BC2F: xor dx, dx
0000BC31: mov bx, word ptr [bp + 0xa]
0000BC34: mov word ptr [bp - 8], 1
0000BC39: cmp ax, bx
0000BC3B: jge 0xbc43
0000BC3D: xchg bx, ax
0000BC3E: mov word ptr [bp - 8], 0
0000BC43: mov word ptr [bp - 0xe], bx
0000BC46: div bx
0000BC48: cmp ax, 0
0000BC4B: je 0xbc4e
0000BC4D: dec ax
0000BC4E: mov word ptr [bp - 0xa], ax
0000BC51: mov word ptr [bp - 0xc], dx
0000BC54: mov ax, word ptr [bp + 0xe]
0000BC57: mov bx, word ptr [bp + 0xc]
0000BC5A: cmp ax, 1
0000BC5D: je 0xbc6b
0000BC5F: cmp ax, 3
0000BC62: je 0xbc80
0000BC64: cmp ax, 4
0000BC67: je 0xbc80
0000BC69: jmp 0xbc85
0000BC6B: cmp bx, 1
0000BC6E: je 0xbca6
0000BC70: cmp bx, 2
0000BC73: jne 0xbc78
0000BC75: jmp 0xbd9f
0000BC78: cmp bx, 8
0000BC7B: jne 0xbc85
0000BC7D: jmp 0xbe7e
0000BC80: cmp bx, 1
0000BC83: je 0xbc8d
0000BC85: mov word ptr [bp - 2], 0xfffa
0000BC8A: jmp 0xbed5
0000BC8D: mov ax, word ptr [bp + 0xa]
0000BC90: xor dx, dx
0000BC92: mov bx, 8
0000BC95: div bx
0000BC97: or dx, dx
0000BC99: je 0xbc9c
0000BC9B: inc ax
0000BC9C: mov bx, ax
0000BC9E: and bx, 1
0000BCA1: add ax, bx
0000BCA3: mov word ptr [bp - 0x12], ax
0000BCA6: cmp word ptr [bp - 8], 1
0000BCAA: je 0xbcae
0000BCAC: jmp 0xbd0f
0000BCAE: mov ax, word ptr [bp + 0xa]
0000BCB1: mov word ptr [bp - 0x10], ax
0000BCB4: mov bx, word ptr [bp - 0xc]
0000BCB7: xor dl, dl
0000BCB9: mov dh, 0
0000BCBB: mov ah, 0
0000BCBD: mov al, byte ptr [si]
0000BCBF: mov cl, ah
0000BCC1: rol al, cl
0000BCC3: and al, 0x80
0000BCC5: mov cl, dh
0000BCC7: ror al, cl
0000BCC9: or dl, al
0000BCCB: inc dh
0000BCCD: cmp dh, 8
0000BCD0: jne 0xbcd8
0000BCD2: mov byte ptr es:[di], dl
0000BCD5: inc di
0000BCD6: xor dx, dx
0000BCD8: xor cx, cx
0000BCDA: mov cl, ah
0000BCDC: inc cx
0000BCDD: add cx, word ptr [bp - 0xa]
0000BCE0: add bx, word ptr [bp - 0xc]
0000BCE3: cmp bx, word ptr [bp - 0xe]
0000BCE6: jb 0xbcec
0000BCE8: sub bx, word ptr [bp - 0xe]
0000BCEB: inc cx
0000BCEC: cmp cx, 8
0000BCEF: jb 0xbcfe
0000BCF1: push cx
0000BCF2: shr cx, 1
0000BCF4: shr cx, 1
0000BCF6: shr cx, 1
0000BCF8: add si, cx
0000BCFA: pop cx
0000BCFB: and cx, 7
0000BCFE: mov ah, cl
0000BD00: dec word ptr [bp - 0x10]
0000BD03: jne 0xbcbd
0000BD05: or dx, dx
0000BD07: je 0xbd0d
0000BD09: mov byte ptr es:[di], dl
0000BD0C: inc di
0000BD0D: jmp 0xbd72
0000BD0F: mov ax, word ptr [bp + 0xa]
0000BD12: mov word ptr [bp - 0x10], ax
0000BD15: mov bx, word ptr [bp - 0xc]
0000BD18: xor dl, dl
0000BD1A: mov dh, 0
0000BD1C: mov ah, byte ptr [si]
0000BD1E: mov word ptr [bp - 4], 0
0000BD23: mov al, ah
0000BD25: and al, 0x80
0000BD27: rol ah, 1
0000BD29: inc word ptr [bp - 4]
0000BD2C: cmp word ptr [bp - 4], 8
0000BD30: jne 0xbd3a
0000BD32: mov word ptr [bp - 4], 0
0000BD37: inc si
0000BD38: mov ah, byte ptr [si]
0000BD3A: mov cx, word ptr [bp - 0xa]
0000BD3D: inc cx
0000BD3E: add bx, word ptr [bp - 0xc]
0000BD41: cmp bx, word ptr [bp - 0xe]
0000BD44: jb 0xbd4a
0000BD46: sub bx, word ptr [bp - 0xe]
0000BD49: inc cx
0000BD4A: push cx
0000BD4B: push ax
0000BD4C: mov cl, dh
0000BD4E: ror al, cl
0000BD50: or dl, al
0000BD52: pop ax
0000BD53: inc dh
0000BD55: cmp dh, 8
0000BD58: jne 0xbd60
0000BD5A: mov byte ptr es:[di], dl
0000BD5D: inc di
0000BD5E: xor dx, dx
0000BD60: pop cx
0000BD61: dec word ptr [bp - 0x10]
0000BD64: je 0xbd6a
0000BD66: loop 0xbd4a
0000BD68: jmp 0xbd23
0000BD6A: or dx, dx
0000BD6C: je 0xbd72
0000BD6E: mov byte ptr es:[di], dl
0000BD71: inc di
0000BD72: inc word ptr [bp - 6]
0000BD75: mov ax, word ptr [bp - 6]
0000BD78: cmp ax, word ptr [bp + 0xe]
0000BD7B: je 0xbd97
0000BD7D: mov si, word ptr [bp + 0x14]
0000BD80: mov bx, word ptr [bp + 0x12]
0000BD83: mul bx
0000BD85: add si, ax
0000BD87: mov di, word ptr [bp + 6]
0000BD8A: mov ax, word ptr [bp - 6]
0000BD8D: mov bx, word ptr [bp - 0x12]
0000BD90: mul bx
0000BD92: add di, ax
0000BD94: jmp 0xbca6
0000BD97: mov word ptr [bp - 2], 0
0000BD9C: jmp 0xbed5
0000BD9F: cmp word ptr [bp - 8], 1
0000BDA3: je 0xbda7
0000BDA5: jmp 0xbe10
0000BDA7: mov ax, word ptr [bp + 0xa]
0000BDAA: mov word ptr [bp - 0x10], ax
0000BDAD: mov bx, word ptr [bp - 0xc]
0000BDB0: xor dl, dl
0000BDB2: mov dh, 0
0000BDB4: mov ah, 0
0000BDB6: mov al, byte ptr [si]
0000BDB8: mov cl, ah
0000BDBA: shl cl, 1
0000BDBC: rol al, cl
0000BDBE: and al, 0xc0
0000BDC0: mov cl, dh
0000BDC2: ror al, cl
0000BDC4: or dl, al
0000BDC6: inc dh
0000BDC8: inc dh
0000BDCA: cmp dh, 8
0000BDCD: jne 0xbdd5
0000BDCF: mov byte ptr es:[di], dl
0000BDD2: inc di
0000BDD3: xor dx, dx
0000BDD5: xor cx, cx
0000BDD7: mov cl, ah
0000BDD9: inc cx
0000BDDA: add cx, word ptr [bp - 0xa]
0000BDDD: add bx, word ptr [bp - 0xc]
0000BDE0: cmp bx, word ptr [bp - 0xe]
0000BDE3: jb 0xbde9
0000BDE5: sub bx, word ptr [bp - 0xe]
0000BDE8: inc cx
0000BDE9: cmp cx, 4
0000BDEC: jb 0xbdf9
0000BDEE: push cx
0000BDEF: shr cx, 1
0000BDF1: shr cx, 1
0000BDF3: add si, cx
0000BDF5: pop cx
0000BDF6: and cx, 3
0000BDF9: mov ah, cl
0000BDFB: dec word ptr [bp - 0x10]
0000BDFE: jne 0xbdb6
0000BE00: or dx, dx
0000BE02: je 0xbe08
0000BE04: mov byte ptr es:[di], dl
0000BE07: inc di
0000BE08: mov word ptr [bp - 2], 0
0000BE0D: jmp 0xbed5
0000BE10: mov ax, word ptr [bp + 0xa]
0000BE13: mov word ptr [bp - 0x10], ax
0000BE16: mov bx, word ptr [bp - 0xc]
0000BE19: xor dl, dl
0000BE1B: mov dh, 0
0000BE1D: mov ah, byte ptr [si]
0000BE1F: mov word ptr [bp - 4], 0
0000BE24: mov al, ah
0000BE26: and al, 0xc0
0000BE28: rol ah, 1
0000BE2A: rol ah, 1
0000BE2C: inc word ptr [bp - 4]
0000BE2F: cmp word ptr [bp - 4], 4
0000BE33: jne 0xbe3d
0000BE35: mov word ptr [bp - 4], 0
0000BE3A: inc si
0000BE3B: mov ah, byte ptr [si]
0000BE3D: mov cx, word ptr [bp - 0xa]
0000BE40: inc cx
0000BE41: add bx, word ptr [bp - 0xc]
0000BE44: cmp bx, word ptr [bp - 0xe]
0000BE47: jb 0xbe4d
0000BE49: sub bx, word ptr [bp - 0xe]
0000BE4C: inc cx
0000BE4D: push cx
0000BE4E: push ax
0000BE4F: mov cl, dh
0000BE51: ror al, cl
0000BE53: or dl, al
0000BE55: pop ax
0000BE56: inc dh
0000BE58: inc dh
0000BE5A: cmp dh, 8
0000BE5D: jne 0xbe65
0000BE5F: mov byte ptr es:[di], dl
0000BE62: inc di
0000BE63: xor dx, dx
0000BE65: pop cx
0000BE66: dec word ptr [bp - 0x10]
0000BE69: je 0xbe6f
0000BE6B: loop 0xbe4d
0000BE6D: jmp 0xbe24
0000BE6F: or dx, dx
0000BE71: je 0xbe77
0000BE73: mov byte ptr es:[di], dl
0000BE76: inc di
0000BE77: mov word ptr [bp - 2], 0
0000BE7C: jmp 0xbed5
0000BE7E: cmp word ptr [bp - 8], 1
0000BE82: jne 0xbea3
0000BE84: mov bx, word ptr [bp - 0xc]
0000BE87: mov cx, word ptr [bp + 0xa]
0000BE8A: movsb byte ptr es:[di], byte ptr [si]
0000BE8B: add si, word ptr [bp - 0xa]
0000BE8E: add bx, word ptr [bp - 0xc]
0000BE91: cmp bx, word ptr [bp - 0xe]
0000BE94: jb 0xbe9a
0000BE96: sub bx, word ptr [bp - 0xe]
0000BE99: inc si
0000BE9A: loop 0xbe8a
0000BE9C: mov word ptr [bp - 2], 0
0000BEA1: jmp 0xbed5
0000BEA3: mov bx, word ptr [bp - 0xc]
0000BEA6: mov cx, word ptr [bp + 0xa]
0000BEA9: lodsb al, byte ptr [si]
0000BEAA: stosb byte ptr es:[di], al
0000BEAB: cmp cx, word ptr [bp - 0xa]
0000BEAE: jl 0xbeba
0000BEB0: push cx
0000BEB1: mov cx, word ptr [bp - 0xa]
0000BEB4: rep stosb byte ptr es:[di], al
0000BEB6: pop cx
0000BEB7: sub cx, word ptr [bp - 0xa]
0000BEBA: add bx, word ptr [bp - 0xc]
0000BEBD: cmp bx, word ptr [bp - 0xe]
0000BEC0: jb 0xbecc
0000BEC2: sub bx, word ptr [bp - 0xe]
0000BEC5: cmp cx, 1
0000BEC8: jl 0xbecc
0000BECA: stosb byte ptr es:[di], al
0000BECB: dec cx
0000BECC: loop 0xbea9
0000BECE: mov word ptr [bp - 2], 0
0000BED3: jmp 0xbed5
0000BED5: mov ax, word ptr [bp - 2]
0000BED8: pop di
0000BED9: pop si
0000BEDA: pop es
0000BEDB: pop ds
0000BEDC: mov sp, bp
0000BEDE: pop bp
0000BEDF: retf 0x12
0000BEE2: push bp
0000BEE3: mov bp, sp
0000BEE5: sub sp, 2
0000BEE8: push ds
0000BEE9: push es
0000BEEA: push si
0000BEEB: push di
0000BEEC: mov ax, 0x1ab5
0000BEEF: mov ds, ax
0000BEF1: mov ax, word ptr [bp + 6]
0000BEF4: mov word ptr [0x5aae], ax
0000BEF7: mov word ptr [0x5ab0], 0
0000BEFD: mov word ptr [bp - 2], 0
0000BF02: mov ax, word ptr [bp - 2]
0000BF05: pop di
0000BF06: pop si
0000BF07: pop es
0000BF08: pop ds
0000BF09: mov sp, bp
0000BF0B: pop bp
0000BF0C: retf 2
0000BF0F: push bp
0000BF10: mov bp, sp
0000BF12: sub sp, 2
0000BF15: push ds
0000BF16: push es
0000BF17: push si
0000BF18: push di
0000BF19: mov ax, 0x1ab5
0000BF1C: mov ds, ax
0000BF1E: push bx
0000BF1F: push cx
0000BF20: push dx
0000BF21: mov ax, 0xc
0000BF24: mov bx, word ptr [0x5ab0]
0000BF28: mul bx
0000BF2A: mov cx, ax
0000BF2C: mov ax, 0xdada
0000BF2F: mul word ptr [0x5aae]
0000BF33: add cx, ax
0000BF35: mov ax, 0xdada
0000BF38: mul bx
0000BF3A: add dx, cx
0000BF3C: add ax, 0xfeed
0000BF3F: adc dx, 0xc
0000BF42: mov word ptr [0x5aae], ax
0000BF45: mov word ptr [0x5ab0], dx
0000BF49: mov ax, dx
0000BF4B: and ah, 0x7f
0000BF4E: xor dx, dx
0000BF50: mov bx, word ptr [bp + 6]
0000BF53: mul bx
0000BF55: mov bx, 0x7fff
0000BF58: div bx
0000BF5A: mov word ptr [bp - 2], ax
0000BF5D: pop dx
0000BF5E: pop cx
0000BF5F: pop bx
0000BF60: mov ax, word ptr [bp - 2]
0000BF63: pop di
0000BF64: pop si
0000BF65: pop es
0000BF66: pop ds
0000BF67: mov sp, bp
0000BF69: pop bp
0000BF6A: retf 2
0000BF6D: add byte ptr [di - 0x75], dl
0000BF70: in al, dx
0000BF71: sub sp, 8
0000BF74: push ds
0000BF75: push es
0000BF76: push si
0000BF77: push di
0000BF78: mov ax, 0x1ab5
0000BF7B: mov ds, ax
0000BF7D: mov ax, word ptr [0x43b9]
0000BF80: cmp ax, 3
0000BF83: jne 0xbf8f
0000BF85: mov al, 6
0000BF87: mov ah, 0xea
0000BF89: mov dx, 0x3c4
0000BF8C: out dx, ax
0000BF8D: jmp 0xbfa9
0000BF8F: cmp ax, 6
0000BF92: jne 0xbfa9
0000BF94: mov dx, 0x3c4
0000BF97: mov al, 0xb
0000BF99: out dx, al
0000BF9A: inc dx
0000BF9B: in al, dx
0000BF9C: mov dx, 0x3ce
0000BF9F: mov al, 6
0000BFA1: out dx, al
0000BFA2: inc dx
0000BFA3: in al, dx
0000BFA4: and al, 0xf3
0000BFA6: or al, 4
0000BFA8: out dx, al
0000BFA9: push word ptr [bp + 8]
0000BFAC: push word ptr [bp + 6]
0000BFAF: push cs
0000BFB0: call 0xbfc3
0000BFB3: mov word ptr [bp - 2], ax
0000BFB6: mov ax, word ptr [bp - 2]
0000BFB9: pop di
0000BFBA: pop si
0000BFBB: pop es
0000BFBC: pop ds
0000BFBD: mov sp, bp
0000BFBF: pop bp
0000BFC0: retf 4
0000BFC3: push bp
0000BFC4: mov bp, sp
0000BFC6: sub sp, 2
0000BFC9: push ds
0000BFCA: push es
0000BFCB: push si
0000BFCC: push di
0000BFCD: mov ax, 0x1ab5
0000BFD0: mov ds, ax
0000BFD2: push bx
0000BFD3: push cx
0000BFD4: push dx
0000BFD5: mov word ptr [bp - 2], 0
0000BFDA: mov ax, word ptr [0x43b9]
0000BFDD: cmp ax, 1
0000BFE0: jne 0xbff8
0000BFE2: mov al, byte ptr [bp + 6]
0000BFE5: mov ah, al
0000BFE7: shl ah, 1
0000BFE9: shl ah, 1
0000BFEB: shl ah, 1
0000BFED: or al, ah
0000BFEF: or al, 0x40
0000BFF1: mov dx, 0x3cd
0000BFF4: out dx, al
0000BFF5: jmp 0xc0f5
0000BFF8: cmp ax, 2
0000BFFB: jne 0xc011
0000BFFD: push cx
0000BFFE: mov ch, byte ptr [bp + 6]
0000C001: mov cl, 4
0000C003: shl ch, cl
0000C005: mov al, 9
0000C007: mov ah, ch
0000C009: mov dx, 0x3ce
0000C00C: out dx, ax
0000C00D: pop cx
0000C00E: jmp 0xc0f5
0000C011: cmp ax, 3
0000C014: jne 0xc05e
0000C016: push bx
0000C017: mov bh, byte ptr [bp + 6]
0000C01A: mov bl, bh
0000C01C: and bl, 1
0000C01F: mov al, 0xf9
0000C021: mov ah, bl
0000C023: mov dx, 0x3c4
0000C026: out dx, ax
0000C027: mov bl, bh
0000C029: and bl, 2
0000C02C: shl bl, 1
0000C02E: shl bl, 1
0000C030: shl bl, 1
0000C032: shl bl, 1
0000C034: mov dx, 0x3cc
0000C037: in al, dx
0000C038: and al, 0xdf
0000C03A: or bl, al
0000C03C: mov al, bl
0000C03E: mov dx, 0x3c2
0000C041: out dx, al
0000C042: mov al, 0xf6
0000C044: mov dx, 0x3c4
0000C047: out dx, al
0000C048: inc dx
0000C049: in al, dx
0000C04A: and al, 0xf0
0000C04C: and bh, 0xc
0000C04F: mov bl, bh
0000C051: shr bl, 1
0000C053: shr bl, 1
0000C055: or al, bh
0000C057: or al, bl
0000C059: out dx, al
0000C05A: pop bx
0000C05B: jmp 0xc0f5
0000C05E: cmp ax, 4
0000C061: jne 0xc083
0000C063: push cx
0000C064: mov ch, byte ptr [bp + 6]
0000C067: cli 
0000C068: mov dx, 0x1ce
0000C06B: mov al, 0xb2
0000C06D: out dx, al
0000C06E: inc dl
0000C070: in al, dx
0000C071: mov ah, al
0000C073: and ah, 0xe1
0000C076: shl ch, 1
0000C078: or ah, ch
0000C07A: dec dl
0000C07C: mov al, 0xb2
0000C07E: out dx, ax
0000C07F: sti 
0000C080: pop cx
0000C081: jmp 0xc0f5
0000C083: cmp ax, 5
0000C086: jne 0xc0ac
0000C088: mov al, byte ptr [bp + 6]
0000C08B: mov ah, al
0000C08D: mov dx, 0x3bf
0000C090: mov al, 3
0000C092: out dx, al
0000C093: mov dl, 0xd8
0000C095: mov al, 0xa0
0000C097: out dx, al
0000C098: and ah, 0xf
0000C09B: mov al, ah
0000C09D: shl al, 1
0000C09F: shl al, 1
0000C0A1: shl al, 1
0000C0A3: shl al, 1
0000C0A5: or al, ah
0000C0A7: mov dl, 0xcd
0000C0A9: out dx, al
0000C0AA: jmp 0xc0f5
0000C0AC: cmp ax, 6
0000C0AF: jne 0xc0c9
0000C0B1: mov al, byte ptr [bp + 6]
0000C0B4: and al, 0xf
0000C0B6: xor al, 2
0000C0B8: mov ah, al
0000C0BA: mov dx, 0x3c4
0000C0BD: mov al, 0xe
0000C0BF: out dx, al
0000C0C0: inc dx
0000C0C1: in al, dx
0000C0C2: and al, 0xf0
0000C0C4: or al, ah
0000C0C6: out dx, al
0000C0C7: jmp 0xc0f5
0000C0C9: cmp ax, 7
0000C0CC: jne 0xc0f0
0000C0CE: push bx
0000C0CF: mov al, byte ptr [bp + 6]
0000C0D2: mov bl, byte ptr [0x43bb]
0000C0D6: mul bl
0000C0D8: mov bx, 1
0000C0DB: mov dx, ax
0000C0DD: push dx
0000C0DE: mov ah, 0x4f
0000C0E0: mov al, 5
0000C0E2: int 0x10
0000C0E4: pop dx
0000C0E5: xor bx, bx
0000C0E7: mov ah, 0x4f
0000C0E9: mov al, 5
0000C0EB: int 0x10
0000C0ED: pop bx
0000C0EE: jmp 0xc0f5
0000C0F0: mov word ptr [bp - 2], 0xffde
0000C0F5: pop dx
0000C0F6: pop cx
0000C0F7: pop bx
0000C0F8: mov ax, word ptr [bp - 2]
0000C0FB: pop di
0000C0FC: pop si
0000C0FD: pop es
0000C0FE: pop ds
0000C0FF: mov sp, bp
0000C101: pop bp
0000C102: retf 4
0000C105: push bp
0000C106: mov bp, sp
0000C108: sub sp, 2
0000C10B: push ds
0000C10C: push es
0000C10D: push si
0000C10E: push di
0000C10F: mov ax, 0x1ab5
0000C112: mov ds, ax
0000C114: xor ax, ax
0000C116: push ax
0000C117: push ax
0000C118: push cs
0000C119: call 0xbfc3
0000C11C: mov word ptr [bp - 2], 0
0000C121: mov ax, word ptr [bp - 2]
0000C124: pop di
0000C125: pop si
0000C126: pop es
0000C127: pop ds
0000C128: mov sp, bp
0000C12A: pop bp
0000C12B: retf 2
0000C12E: push bp
0000C12F: mov bp, sp
0000C131: sub sp, 0x38
0000C134: push ds
0000C135: push es
0000C136: push si
0000C137: push di
0000C138: mov ax, 0x1ab5
0000C13B: mov ds, ax
0000C13D: mov ax, word ptr [0x54d6]
0000C140: mov word ptr [bp - 0x38], ax
0000C143: push dx
0000C144: mov dx, 0x40
0000C147: mov es, dx
0000C149: pop dx
0000C14A: mov dx, word ptr es:[0x63]
0000C14F: add dx, 6
0000C152: mov word ptr [bp - 0x36], dx
0000C155: cmp byte ptr [0x55f2], 1
0000C15A: je 0xc160
0000C15C: push cs
0000C15D: call 0xc3b3
0000C160: lcall 0x98e, 0x35e
0000C165: or ax, ax
0000C167: jge 0xc16f
0000C169: mov word ptr [bp - 2], ax
0000C16C: jmp 0xc3a6
0000C16F: mov word ptr [bp - 0xc], ax
0000C172: push ax
0000C173: lcall 0x98e, 0x12a
0000C178: jae 0xc182
0000C17A: mov word ptr [bp - 2], 0xfc19
0000C17F: jmp 0xc3a6
0000C182: mov es, dx
0000C184: mov di, ax
0000C186: cmp word ptr [bp - 4], 1
0000C18A: jne 0xc1a5
0000C18C: cmp byte ptr es:[di], 9
0000C190: je 0xc1a5
0000C192: lcall 0x98e, 0x18a
0000C197: cmp al, byte ptr es:[di + 0x16]
0000C19B: je 0xc1a5
0000C19D: mov word ptr [bp - 2], 0xfff9
0000C1A2: jmp 0xc3a6
0000C1A5: lds si, ptr [bp + 0x14]
0000C1A8: mov al, byte ptr es:[di + 0x17]
0000C1AC: xor ah, ah
0000C1AE: mov word ptr [bp - 0xe], ax
0000C1B1: cmp al, byte ptr [si + 0x13]
0000C1B4: je 0xc1be
0000C1B6: mov word ptr [bp - 2], 0xfffa
0000C1BB: jmp 0xc3a6
0000C1BE: mov ax, word ptr [bp + 0xe]
0000C1C1: or ax, ax
0000C1C3: jge 0xc1cf
0000C1C5: neg ax
0000C1C7: add word ptr [bp + 0x12], ax
0000C1CA: xor ax, ax
0000C1CC: mov word ptr [bp + 0xe], ax
0000C1CF: cmp ax, word ptr es:[di + 0x18]
0000C1D3: jb 0xc1dd
0000C1D5: mov word ptr [bp - 2], 0
0000C1DA: jmp 0xc3a6
0000C1DD: mov ax, word ptr [bp + 0xa]
0000C1E0: or ax, ax
0000C1E2: jge 0xc1ec
0000C1E4: mov word ptr [bp - 2], 0
0000C1E9: jmp 0xc3a6
0000C1EC: cmp ax, word ptr es:[di + 0x18]
0000C1F0: jb 0xc1fa
0000C1F2: mov ax, word ptr es:[di + 0x18]
0000C1F6: dec ax
0000C1F7: mov word ptr [bp + 0xa], ax
0000C1FA: mov ax, word ptr [si + 0xa]
0000C1FD: cmp word ptr [bp + 0x12], ax
0000C200: jbe 0xc20a
0000C202: mov word ptr [bp - 2], 0
0000C207: jmp 0xc3a6
0000C20A: sub ax, word ptr [bp + 0x12]
0000C20D: inc ax
0000C20E: mov bx, word ptr [bp + 0xa]
0000C211: sub bx, word ptr [bp + 0xe]
0000C214: inc bx
0000C215: cmp ax, bx
0000C217: jbe 0xc21b
0000C219: mov ax, bx
0000C21B: mov word ptr [bp - 0x12], ax
0000C21E: mul word ptr [bp - 0xe]
0000C221: mov word ptr [bp - 0x14], ax
0000C224: mov bx, 8
0000C227: div bx
0000C229: or dx, dx
0000C22B: je 0xc22e
0000C22D: inc ax
0000C22E: mov word ptr [bp - 0x1a], ax
0000C231: mov word ptr [bp - 0x1c], ax
0000C234: mov ax, word ptr [bp + 0xc]
0000C237: or ax, ax
0000C239: jge 0xc245
0000C23B: neg ax
0000C23D: add word ptr [bp + 0x10], ax
0000C240: xor ax, ax
0000C242: mov word ptr [bp + 0xc], ax
0000C245: cmp ax, word ptr es:[di + 0x1a]
0000C249: jb 0xc253
0000C24B: mov word ptr [bp - 2], 0
0000C250: jmp 0xc3a6
0000C253: mov ax, word ptr [bp + 8]
0000C256: or ax, ax
0000C258: jge 0xc262
0000C25A: mov word ptr [bp - 2], 0
0000C25F: jmp 0xc3a6
0000C262: cmp ax, word ptr es:[di + 0x1a]
0000C266: jb 0xc270
0000C268: mov ax, word ptr es:[di + 0x1a]
0000C26C: dec ax
0000C26D: mov word ptr [bp + 8], ax
0000C270: mov ax, word ptr [si + 0xc]
0000C273: cmp word ptr [bp + 0x10], ax
0000C276: jbe 0xc280
0000C278: mov word ptr [bp - 2], 0
0000C27D: jmp 0xc3a6
0000C280: sub ax, word ptr [bp + 0x10]
0000C283: inc ax
0000C284: mov bx, word ptr [bp + 8]
0000C287: sub bx, word ptr [bp + 0xc]
0000C28A: inc bx
0000C28B: cmp ax, bx
0000C28D: jbe 0xc291
0000C28F: mov ax, bx
0000C291: mov word ptr [bp - 0x16], ax
0000C294: mov bl, byte ptr [si + 0x12]
0000C297: xor bh, bh
0000C299: mov word ptr [bp - 0x10], bx
0000C29C: mul bx
0000C29E: mov word ptr [bp - 0x18], ax
0000C2A1: mov word ptr [bp - 0x2a], 0xffff
0000C2A6: mov word ptr [bp - 0x2c], 0
0000C2AB: cmp byte ptr [bp - 0xe], 8
0000C2AF: jne 0xc2b4
0000C2B1: jmp 0xc363
0000C2B4: mov ax, word ptr [bp + 0xe]
0000C2B7: mul word ptr [bp - 0xe]
0000C2BA: mov cx, ax
0000C2BC: and cx, 7
0000C2BF: mov bx, 8
0000C2C2: sub bx, cx
0000C2C4: mov word ptr [bp - 0x2e], bx
0000C2C7: mov dl, 0xff
0000C2C9: shr dl, cl
0000C2CB: mov byte ptr [bp - 0x2a], dl
0000C2CE: add ax, word ptr [bp - 0x14]
0000C2D1: mov cx, ax
0000C2D3: and cx, 7
0000C2D6: mov dh, 0xff
0000C2D8: shr dh, cl
0000C2DA: not dh
0000C2DC: mov byte ptr [bp - 0x29], dh
0000C2DF: cmp bx, word ptr [bp - 0x14]
0000C2E2: jl 0xc2f5
0000C2E4: mov bx, word ptr [bp - 0x14]
0000C2E7: mov word ptr [bp - 0x2e], bx
0000C2EA: or dh, dh
0000C2EC: je 0xc2f5
0000C2EE: and byte ptr [bp - 0x2a], dh
0000C2F1: mov byte ptr [bp - 0x29], 0
0000C2F5: mov ax, word ptr [bp + 0xe]
0000C2F8: sub ax, word ptr [bp + 0x12]
0000C2FB: mul word ptr [bp - 0xe]
0000C2FE: and ax, 7
0000C301: mov word ptr [bp - 0x2c], ax
0000C304: mov word ptr [bp - 0x30], 1
0000C309: mov ax, word ptr [bp + 0x12]
0000C30C: mul word ptr [bp - 0xe]
0000C30F: and ax, 7
0000C312: mov bx, ax
0000C314: mov ax, word ptr [bp + 0xe]
0000C317: mul word ptr [bp - 0xe]
0000C31A: and ax, 7
0000C31D: cmp bx, ax
0000C31F: jle 0xc324
0000C321: inc word ptr [bp - 0x30]
0000C324: mov ax, word ptr [bp - 0x14]
0000C327: sub ax, word ptr [bp - 0x2e]
0000C32A: mov bx, 8
0000C32D: xor dx, dx
0000C32F: div bx
0000C331: mov word ptr [bp - 0x32], ax
0000C334: or dx, dx
0000C336: jne 0xc33c
0000C338: mov byte ptr [bp - 0x29], 0
0000C33C: mov word ptr [bp - 0x34], 0
0000C341: cmp dx, word ptr [bp - 0x2c]
0000C344: jbe 0xc349
0000C346: inc word ptr [bp - 0x34]
0000C349: mov ax, word ptr [bp - 0x30]
0000C34C: add ax, word ptr [bp - 0x32]
0000C34F: add ax, word ptr [bp - 0x34]
0000C352: mov word ptr [bp - 0x1a], ax
0000C355: mov ax, word ptr [bp - 0x32]
0000C358: inc ax
0000C359: cmp byte ptr [bp - 0x29], 0
0000C35D: je 0xc360
0000C35F: inc ax
0000C360: mov word ptr [bp - 0x1c], ax
0000C363: push ds
0000C364: push si
0000C365: push word ptr [bp + 0x12]
0000C368: push word ptr [bp + 0x10]
0000C36B: mov ax, 0
0000C36E: push ax
0000C36F: lcall 0xb08, 0xa
0000C374: or dx, dx
0000C376: jne 0xc37d
0000C378: mov word ptr [bp - 2], ax
0000C37B: jmp 0xc3a6
0000C37D: mov word ptr [bp - 8], dx
0000C380: mov word ptr [bp - 0xa], ax
0000C383: mov ax, word ptr [si + 0x14]
0000C386: neg ax
0000C388: mov word ptr [bp - 0x28], ax
0000C38B: mov ax, word ptr [si + 0x14]
0000C38E: sub ax, word ptr [bp - 0x1a]
0000C391: mov word ptr [bp - 0x20], ax
0000C394: mov ax, word ptr es:[di + 0x1c]
0000C398: mov word ptr [bp - 0x1e], ax
0000C39B: sub ax, word ptr [bp - 0x1c]
0000C39E: mov word ptr [bp - 0x22], ax
0000C3A1: cld 
0000C3A2: jmp word ptr es:[di + 0x2e]
0000C3A6: mov ax, word ptr [bp - 2]
0000C3A9: pop di
0000C3AA: pop si
0000C3AB: pop es
0000C3AC: pop ds
0000C3AD: mov sp, bp
0000C3AF: pop bp
0000C3B0: retf 0x12
0000C3B3: xor ax, ax
0000C3B5: push ax
0000C3B6: lcall 0x98e, 0x12a
0000C3BB: mov bx, ax
0000C3BD: mov word ptr [bx + 0x2e], 0x32b
0000C3C2: add bx, 0x36
0000C3C5: mov word ptr [bx + 0x2e], 0x32b
0000C3CA: add bx, 0x36
0000C3CD: mov word ptr [bx + 0x2e], 0x478
0000C3D2: add bx, 0x36
0000C3D5: mov word ptr [bx + 0x2e], 0x478
0000C3DA: add bx, 0x36
0000C3DD: mov word ptr [bx + 0x2e], 0x478
0000C3E2: add bx, 0x36
0000C3E5: mov word ptr [bx + 0x2e], 0x478
0000C3EA: add bx, 0x36
0000C3ED: mov word ptr [bx + 0x2e], 0x478
0000C3F2: add bx, 0x36
0000C3F5: mov word ptr [bx + 0x2e], 0x478
0000C3FA: add bx, 0x36
0000C3FD: mov word ptr [bx + 0x2e], 0x639
0000C402: add bx, 0x36
0000C405: mov word ptr [bx + 0x2e], 0x6ce
0000C40A: add bx, 0x36
0000C40D: mov word ptr [bx + 0x2e], 0x829
0000C412: add bx, 0x36
0000C415: mov word ptr [bx + 0x2e], 0x478
0000C41A: add bx, 0x36
0000C41D: mov word ptr [bx + 0x2e], 0x829
0000C422: add bx, 0x36
0000C425: mov word ptr [bx + 0x2e], 0x829
0000C42A: add bx, 0x36
0000C42D: mov word ptr [bx + 0x2e], 0x478
0000C432: add bx, 0x36
0000C435: mov word ptr [bx + 0x2e], 0x829
0000C43A: add bx, 0x36
0000C43D: mov word ptr [bx + 0x2e], 0x829
0000C442: add bx, 0x36
0000C445: mov byte ptr [0x55f2], 1
0000C44A: retf 
0000C44B: mov bx, word ptr [bp + 0xe]
0000C44E: mov ax, word ptr [bp + 0xc]
0000C451: lcall es:[di + 0x26]
0000C455: mov di, bx
0000C457: lds si, ptr [bp - 0xa]
0000C45A: mov ax, word ptr [bp + 0xc]
0000C45D: and al, 1
0000C45F: mov byte ptr [bp - 6], al
0000C462: mov ax, 0x2000
0000C465: sub ax, word ptr [bp - 0x1c]
0000C468: mov word ptr [bp - 4], ax
0000C46B: cmp word ptr [bp - 0x38], 0
0000C46F: je 0xc479
0000C471: mov dx, word ptr [bp - 0x36]
0000C474: in al, dx
0000C475: test al, 8
0000C477: je 0xc474
0000C479: mov cx, word ptr [bp - 0x2c]
0000C47C: cmp byte ptr [bp - 0x30], 1
0000C480: je 0xc49d
0000C482: lodsb al, byte ptr [si]
0000C483: mov ch, al
0000C485: or si, si
0000C487: jne 0xc49d
0000C489: mov dx, word ptr [bp + 0x16]
0000C48C: mov ax, word ptr [bp + 0x14]
0000C48F: clc 
0000C490: lcall 0xb08, 0x17e
0000C495: jae 0xc49d
0000C497: mov word ptr [bp - 2], ax
0000C49A: jmp 0xc58b
0000C49D: lodsb al, byte ptr [si]
0000C49E: mov ah, ch
0000C4A0: mov ch, al
0000C4A2: ror ax, cl
0000C4A4: mov bl, byte ptr [bp - 0x2a]
0000C4A7: and al, bl
0000C4A9: not bl
0000C4AB: and byte ptr es:[di], bl
0000C4AE: or byte ptr es:[di], al
0000C4B1: inc di
0000C4B2: mov bx, word ptr [bp - 0x32]
0000C4B5: or bx, bx
0000C4B7: je 0xc509
0000C4B9: or cl, cl
0000C4BB: jne 0xc4c2
0000C4BD: cmp si, word ptr [bp - 0x28]
0000C4C0: jbe 0xc4e7
0000C4C2: or si, si
0000C4C4: jne 0xc4da
0000C4C6: mov dx, word ptr [bp + 0x16]
0000C4C9: mov ax, word ptr [bp + 0x14]
0000C4CC: clc 
0000C4CD: lcall 0xb08, 0x17e
0000C4D2: jae 0xc4da
0000C4D4: mov word ptr [bp - 2], ax
0000C4D7: jmp 0xc58b
0000C4DA: lodsb al, byte ptr [si]
0000C4DB: mov ah, ch
0000C4DD: mov ch, al
0000C4DF: ror ax, cl
0000C4E1: stosb byte ptr es:[di], al
0000C4E2: dec bx
0000C4E3: jne 0xc4c2
0000C4E5: jmp 0xc509
0000C4E7: or si, si
0000C4E9: jne 0xc4ff
0000C4EB: mov dx, word ptr [bp + 0x16]
0000C4EE: mov ax, word ptr [bp + 0x14]
0000C4F1: clc 
0000C4F2: lcall 0xb08, 0x17e
0000C4F7: jae 0xc4ff
0000C4F9: mov word ptr [bp - 2], ax
0000C4FC: jmp 0xc58b
0000C4FF: mov cx, bx
0000C501: shr cx, 1
0000C503: rep movsw word ptr es:[di], word ptr [si]
0000C505: rcl cx, 1
0000C507: rep movsb byte ptr es:[di], byte ptr [si]
0000C509: mov bh, byte ptr [bp - 0x29]
0000C50C: or bh, bh
0000C50E: je 0xc53d
0000C510: cmp byte ptr [bp - 0x34], 0
0000C514: je 0xc52e
0000C516: or si, si
0000C518: jne 0xc52d
0000C51A: mov dx, word ptr [bp + 0x16]
0000C51D: mov ax, word ptr [bp + 0x14]
0000C520: clc 
0000C521: lcall 0xb08, 0x17e
0000C526: jae 0xc52d
0000C528: mov word ptr [bp - 2], ax
0000C52B: jmp 0xc58b
0000C52D: lodsb al, byte ptr [si]
0000C52E: mov ah, ch
0000C530: ror ax, cl
0000C532: and al, bh
0000C534: not bh
0000C536: and byte ptr es:[di], bh
0000C539: or byte ptr es:[di], al
0000C53C: inc di
0000C53D: dec word ptr [bp - 0x18]
0000C540: je 0xc586
0000C542: or si, si
0000C544: jne 0xc559
0000C546: mov dx, word ptr [bp + 0x16]
0000C549: mov ax, word ptr [bp + 0x14]
0000C54C: clc 
0000C54D: lcall 0xb08, 0x17e
0000C552: jae 0xc559
0000C554: mov word ptr [bp - 2], ax
0000C557: jmp 0xc58b
0000C559: add si, word ptr [bp - 0x20]
0000C55C: jae 0xc571
0000C55E: mov dx, word ptr [bp + 0x16]
0000C561: mov ax, word ptr [bp + 0x14]
0000C564: clc 
0000C565: lcall 0xb08, 0x17e
0000C56A: jae 0xc571
0000C56C: mov word ptr [bp - 2], ax
0000C56F: jmp 0xc58b
0000C571: xor byte ptr [bp - 6], 1
0000C575: je 0xc57c
0000C577: add di, word ptr [bp - 4]
0000C57A: jmp 0xc583
0000C57C: sub di, 0x1fb0
0000C580: sub di, word ptr [bp - 0x1c]
0000C583: jmp 0xc479
0000C586: mov word ptr [bp - 2], 0
0000C58B: mov ax, word ptr [bp - 2]
0000C58E: pop di
0000C58F: pop si
0000C590: pop es
0000C591: pop ds
0000C592: mov sp, bp
0000C594: pop bp
0000C595: retf 0x12
0000C598: mov al, 5
0000C59A: mov ah, 8
0000C59C: mov dx, 0x3ce
0000C59F: out dx, ax
0000C5A0: mov al, 3
0000C5A2: mov ah, 0
0000C5A4: mov dx, 0x3ce
0000C5A7: out dx, ax
0000C5A8: mov al, 7
0000C5AA: mov ah, 0
0000C5AC: mov dx, 0x3ce
0000C5AF: out dx, ax
0000C5B0: mov al, 8
0000C5B2: mov ah, 0xff
0000C5B4: mov dx, 0x3ce
0000C5B7: out dx, ax
0000C5B8: mov word ptr [bp - 0x26], 0x10f
0000C5BD: mov al, 2
0000C5BF: mov ah, 0xf
0000C5C1: mov dx, 0x3c4
0000C5C4: out dx, ax
0000C5C5: cmp byte ptr [bp - 0x10], 1
0000C5C9: je 0xc5d8
0000C5CB: mov word ptr [bp - 0x26], 0x801
0000C5D0: mov al, 2
0000C5D2: mov ah, 1
0000C5D4: mov dx, 0x3c4
0000C5D7: out dx, ax
0000C5D8: mov ax, word ptr es:[di + 0x22]
0000C5DC: mov dx, word ptr [bp + 6]
0000C5DF: mul dx
0000C5E1: push ax
0000C5E2: mov bx, word ptr [bp + 0xe]
0000C5E5: mov ax, word ptr [bp + 0xc]
0000C5E8: lcall es:[di + 0x26]
0000C5EC: pop ax
0000C5ED: add ax, bx
0000C5EF: mov di, ax
0000C5F1: lds si, ptr [bp - 0xa]
0000C5F4: cmp word ptr [bp - 0x38], 0
0000C5F8: je 0xc602
0000C5FA: mov dx, word ptr [bp - 0x36]
0000C5FD: in al, dx
0000C5FE: test al, 8
0000C600: je 0xc5fd
0000C602: mov al, 8
0000C604: mov ah, byte ptr [bp - 0x2a]
0000C607: mov dx, 0x3ce
0000C60A: out dx, ax
0000C60B: mov cx, word ptr [bp - 0x2c]
0000C60E: cmp byte ptr [bp - 0x30], 1
0000C612: je 0xc62f
0000C614: lodsb al, byte ptr [si]
0000C615: mov ch, al
0000C617: or si, si
0000C619: jne 0xc62f
0000C61B: mov dx, word ptr [bp + 0x16]
0000C61E: mov ax, word ptr [bp + 0x14]
0000C621: clc 
0000C622: lcall 0xb08, 0x17e
0000C627: jae 0xc62f
0000C629: mov word ptr [bp - 2], ax
0000C62C: jmp 0xc72c
0000C62F: lodsb al, byte ptr [si]
0000C630: mov ah, ch
0000C632: mov ch, al
0000C634: ror ax, cl
0000C636: and byte ptr es:[di], al
0000C639: inc di
0000C63A: mov bx, word ptr [bp - 0x32]
0000C63D: or bx, bx
0000C63F: je 0xc699
0000C641: mov al, 8
0000C643: mov ah, 0xff
0000C645: mov dx, 0x3ce
0000C648: out dx, ax
0000C649: or cl, cl
0000C64B: jne 0xc652
0000C64D: cmp si, word ptr [bp - 0x28]
0000C650: jbe 0xc677
0000C652: or si, si
0000C654: jne 0xc66a
0000C656: mov dx, word ptr [bp + 0x16]
0000C659: mov ax, word ptr [bp + 0x14]
0000C65C: clc 
0000C65D: lcall 0xb08, 0x17e
0000C662: jae 0xc66a
0000C664: mov word ptr [bp - 2], ax
0000C667: jmp 0xc72c
0000C66A: lodsb al, byte ptr [si]
0000C66B: mov ah, ch
0000C66D: mov ch, al
0000C66F: ror ax, cl
0000C671: stosb byte ptr es:[di], al
0000C672: dec bx
0000C673: jne 0xc652
0000C675: jmp 0xc699
0000C677: or si, si
0000C679: jne 0xc68f
0000C67B: mov dx, word ptr [bp + 0x16]
0000C67E: mov ax, word ptr [bp + 0x14]
0000C681: clc 
0000C682: lcall 0xb08, 0x17e
0000C687: jae 0xc68f
0000C689: mov word ptr [bp - 2], ax
0000C68C: jmp 0xc72c
0000C68F: mov cx, bx
0000C691: shr cx, 1
0000C693: rep movsw word ptr es:[di], word ptr [si]
0000C695: rcl cx, 1
0000C697: rep movsb byte ptr es:[di], byte ptr [si]
0000C699: mov ah, byte ptr [bp - 0x29]
0000C69C: or ah, ah
0000C69E: je 0xc6cc
0000C6A0: mov al, 8
0000C6A2: mov dx, 0x3ce
0000C6A5: out dx, ax
0000C6A6: cmp byte ptr [bp - 0x34], 0
0000C6AA: je 0xc6c4
0000C6AC: or si, si
0000C6AE: jne 0xc6c3
0000C6B0: mov dx, word ptr [bp + 0x16]
0000C6B3: mov ax, word ptr [bp + 0x14]
0000C6B6: clc 
0000C6B7: lcall 0xb08, 0x17e
0000C6BC: jae 0xc6c3
0000C6BE: mov word ptr [bp - 2], ax
0000C6C1: jmp 0xc72c
0000C6C3: lodsb al, byte ptr [si]
0000C6C4: mov ah, ch
0000C6C6: ror ax, cl
0000C6C8: and byte ptr es:[di], al
0000C6CB: inc di
0000C6CC: dec word ptr [bp - 0x18]
0000C6CF: je 0xc727
0000C6D1: or si, si
0000C6D3: jne 0xc6e8
0000C6D5: mov dx, word ptr [bp + 0x16]
0000C6D8: mov ax, word ptr [bp + 0x14]
0000C6DB: clc 
0000C6DC: lcall 0xb08, 0x17e
0000C6E1: jae 0xc6e8
0000C6E3: mov word ptr [bp - 2], ax
0000C6E6: jmp 0xc72c
0000C6E8: add si, word ptr [bp - 0x20]
0000C6EB: jae 0xc700
0000C6ED: mov dx, word ptr [bp + 0x16]
0000C6F0: mov ax, word ptr [bp + 0x14]
0000C6F3: clc 
0000C6F4: lcall 0xb08, 0x17e
0000C6F9: jae 0xc700
0000C6FB: mov word ptr [bp - 2], ax
0000C6FE: jmp 0xc72c
0000C700: add di, word ptr [bp - 0x22]
0000C703: mov dx, word ptr [bp - 0x26]
0000C706: cmp dh, 1
0000C709: je 0xc724
0000C70B: sub di, word ptr [bp - 0x1e]
0000C70E: shl dl, 1
0000C710: cmp dh, dl
0000C712: jae 0xc719
0000C714: mov dl, 1
0000C716: add di, word ptr [bp - 0x1e]
0000C719: mov byte ptr [bp - 0x26], dl
0000C71C: mov al, 2
0000C71E: mov ah, dl
0000C720: mov dx, 0x3c4
0000C723: out dx, ax
0000C724: jmp 0xc602
0000C727: mov word ptr [bp - 2], 0
0000C72C: mov al, 5
0000C72E: mov ah, 0
0000C730: mov dx, 0x3ce
0000C733: out dx, ax
0000C734: mov al, 3
0000C736: mov ah, 0
0000C738: mov dx, 0x3ce
0000C73B: out dx, ax
0000C73C: mov al, 8
0000C73E: mov ah, 0xff
0000C740: mov dx, 0x3ce
0000C743: out dx, ax
0000C744: mov al, 2
0000C746: mov ah, 0xf
0000C748: mov dx, 0x3c4
0000C74B: out dx, ax
0000C74C: mov ax, word ptr [bp - 2]
0000C74F: pop di
0000C750: pop si
0000C751: pop es
0000C752: pop ds
0000C753: mov sp, bp
0000C755: pop bp
0000C756: retf 0x12
0000C759: mov bx, word ptr [bp + 0xe]
0000C75C: mov ax, word ptr [bp + 0xc]
0000C75F: lcall es:[di + 0x26]
0000C763: mov di, bx
0000C765: lds si, ptr [bp - 0xa]
0000C768: mov bx, word ptr [bp - 0x18]
0000C76B: cmp word ptr [bp - 0x38], 0
0000C76F: je 0xc779
0000C771: mov dx, word ptr [bp - 0x36]
0000C774: in al, dx
0000C775: test al, 8
0000C777: je 0xc774
0000C779: mov cx, word ptr [bp - 0x1c]
0000C77C: cmp si, word ptr [bp - 0x28]
0000C77F: jbe 0xc79d
0000C781: or si, si
0000C783: jne 0xc798
0000C785: mov dx, word ptr [bp + 0x16]
0000C788: mov ax, word ptr [bp + 0x14]
0000C78B: clc 
0000C78C: lcall 0xb08, 0x17e
0000C791: jae 0xc798
0000C793: mov word ptr [bp - 2], ax
0000C796: jmp 0xc7e1
0000C798: movsb byte ptr es:[di], byte ptr [si]
0000C799: loop 0xc781
0000C79B: jmp 0xc7a5
0000C79D: shr cx, 1
0000C79F: rep movsw word ptr es:[di], word ptr [si]
0000C7A1: rcl cx, 1
0000C7A3: rep movsb byte ptr es:[di], byte ptr [si]
0000C7A5: dec bx
0000C7A6: je 0xc7dc
0000C7A8: or si, si
0000C7AA: jne 0xc7bf
0000C7AC: mov dx, word ptr [bp + 0x16]
0000C7AF: mov ax, word ptr [bp + 0x14]
0000C7B2: clc 
0000C7B3: lcall 0xb08, 0x17e
0000C7B8: jae 0xc7bf
0000C7BA: mov word ptr [bp - 2], ax
0000C7BD: jmp 0xc7e1
0000C7BF: add si, word ptr [bp - 0x20]
0000C7C2: jae 0xc7d7
0000C7C4: mov dx, word ptr [bp + 0x16]
0000C7C7: mov ax, word ptr [bp + 0x14]
0000C7CA: clc 
0000C7CB: lcall 0xb08, 0x17e
0000C7D0: jae 0xc7d7
0000C7D2: mov word ptr [bp - 2], ax
0000C7D5: jmp 0xc7e1
0000C7D7: add di, word ptr [bp - 0x22]
0000C7DA: jmp 0xc779
0000C7DC: mov word ptr [bp - 2], 0
0000C7E1: mov ax, word ptr [bp - 2]
0000C7E4: pop di
0000C7E5: pop si
0000C7E6: pop es
0000C7E7: pop ds
0000C7E8: mov sp, bp
0000C7EA: pop bp
0000C7EB: retf 0x12
0000C7EE: mov ax, word ptr es:[di + 0x22]
0000C7F2: mov dx, word ptr [bp + 6]
0000C7F5: mul dx
0000C7F7: push ax
0000C7F8: mov bx, word ptr [bp + 0xe]
0000C7FB: mov ax, word ptr [bp + 0xc]
0000C7FE: lcall es:[di + 0x26]
0000C802: pop ax
0000C803: add ax, bx
0000C805: mov di, ax
0000C807: lds si, ptr [bp - 0xa]
0000C80A: mov ax, word ptr [bp + 0xc]
0000C80D: xor ah, ah
0000C80F: and al, 3
0000C811: mov byte ptr [bp - 6], al
0000C814: cmp word ptr [bp - 0x38], 0
0000C818: je 0xc822
0000C81A: mov dx, word ptr [bp - 0x36]
0000C81D: in al, dx
0000C81E: test al, 8
0000C820: je 0xc81d
0000C822: mov cx, word ptr [bp - 0x2c]
0000C825: cmp byte ptr [bp - 0x30], 1
0000C829: je 0xc846
0000C82B: lodsb al, byte ptr [si]
0000C82C: mov ch, al
0000C82E: or si, si
0000C830: jne 0xc846
0000C832: mov dx, word ptr [bp + 0x16]
0000C835: mov ax, word ptr [bp + 0x14]
0000C838: clc 
0000C839: lcall 0xb08, 0x17e
0000C83E: jae 0xc846
0000C840: mov word ptr [bp - 2], ax
0000C843: jmp 0xc93c
0000C846: lodsb al, byte ptr [si]
0000C847: mov ah, ch
0000C849: mov ch, al
0000C84B: ror ax, cl
0000C84D: mov bl, byte ptr [bp - 0x2a]
0000C850: and al, bl
0000C852: not bl
0000C854: and byte ptr es:[di], bl
0000C857: or byte ptr es:[di], al
0000C85A: inc di
0000C85B: mov bx, word ptr [bp - 0x32]
0000C85E: or bx, bx
0000C860: je 0xc8b2
0000C862: or cl, cl
0000C864: jne 0xc86b
0000C866: cmp si, word ptr [bp - 0x28]
0000C869: jbe 0xc890
0000C86B: or si, si
0000C86D: jne 0xc883
0000C86F: mov dx, word ptr [bp + 0x16]
0000C872: mov ax, word ptr [bp + 0x14]
0000C875: clc 
0000C876: lcall 0xb08, 0x17e
0000C87B: jae 0xc883
0000C87D: mov word ptr [bp - 2], ax
0000C880: jmp 0xc93c
0000C883: lodsb al, byte ptr [si]
0000C884: mov ah, ch
0000C886: mov ch, al
0000C888: ror ax, cl
0000C88A: stosb byte ptr es:[di], al
0000C88B: dec bx
0000C88C: jne 0xc86b
0000C88E: jmp 0xc8b2
0000C890: or si, si
0000C892: jne 0xc8a8
0000C894: mov dx, word ptr [bp + 0x16]
0000C897: mov ax, word ptr [bp + 0x14]
0000C89A: clc 
0000C89B: lcall 0xb08, 0x17e
0000C8A0: jae 0xc8a8
0000C8A2: mov word ptr [bp - 2], ax
0000C8A5: jmp 0xc93c
0000C8A8: mov cx, bx
0000C8AA: shr cx, 1
0000C8AC: rep movsw word ptr es:[di], word ptr [si]
0000C8AE: rcl cx, 1
0000C8B0: rep movsb byte ptr es:[di], byte ptr [si]
0000C8B2: mov bh, byte ptr [bp - 0x29]
0000C8B5: or bh, bh
0000C8B7: je 0xc8e6
0000C8B9: cmp byte ptr [bp - 0x34], 0
0000C8BD: je 0xc8d7
0000C8BF: or si, si
0000C8C1: jne 0xc8d6
0000C8C3: mov dx, word ptr [bp + 0x16]
0000C8C6: mov ax, word ptr [bp + 0x14]
0000C8C9: clc 
0000C8CA: lcall 0xb08, 0x17e
0000C8CF: jae 0xc8d6
0000C8D1: mov word ptr [bp - 2], ax
0000C8D4: jmp 0xc93c
0000C8D6: lodsb al, byte ptr [si]
0000C8D7: mov ah, ch
0000C8D9: ror ax, cl
0000C8DB: and al, bh
0000C8DD: not bh
0000C8DF: and byte ptr es:[di], bh
0000C8E2: or byte ptr es:[di], al
0000C8E5: inc di
0000C8E6: dec word ptr [bp - 0x18]
0000C8E9: je 0xc937
0000C8EB: or si, si
0000C8ED: jne 0xc902
0000C8EF: mov dx, word ptr [bp + 0x16]
0000C8F2: mov ax, word ptr [bp + 0x14]
0000C8F5: clc 
0000C8F6: lcall 0xb08, 0x17e
0000C8FB: jae 0xc902
0000C8FD: mov word ptr [bp - 2], ax
0000C900: jmp 0xc93c
0000C902: add si, word ptr [bp - 0x20]
0000C905: jae 0xc91a
0000C907: mov dx, word ptr [bp + 0x16]
0000C90A: mov ax, word ptr [bp + 0x14]
0000C90D: clc 
0000C90E: lcall 0xb08, 0x17e
0000C913: jae 0xc91a
0000C915: mov word ptr [bp - 2], ax
0000C918: jmp 0xc93c
0000C91A: sub di, word ptr [bp - 0x1c]
0000C91D: inc byte ptr [bp - 6]
0000C920: cmp byte ptr [bp - 6], 4
0000C924: jb 0xc930
0000C926: sub di, 0x5fa6
0000C92A: mov byte ptr [bp - 6], 0
0000C92E: jmp 0xc934
0000C930: add di, 0x2000
0000C934: jmp 0xc822
0000C937: mov word ptr [bp - 2], 0
0000C93C: mov ax, word ptr [bp - 2]
0000C93F: pop di
0000C940: pop si
0000C941: pop es
0000C942: pop ds
0000C943: mov sp, bp
0000C945: pop bp
0000C946: retf 0x12
0000C949: mov bx, word ptr [bp + 0xe]
0000C94C: mov ax, word ptr [bp + 0xc]
0000C94F: lcall es:[di + 0x26]
0000C953: mov di, bx
0000C955: mov byte ptr [bp - 0x24], dl
0000C958: push word ptr [bp - 0xc]
0000C95B: push word ptr [bp - 0x24]
0000C95E: lcall 0xa36, 0xe
0000C963: lds si, ptr [bp - 0xa]
0000C966: mov bx, word ptr [bp - 0x18]
0000C969: cmp word ptr [bp - 0x38], 0
0000C96D: je 0xc977
0000C96F: mov dx, word ptr [bp - 0x36]
0000C972: in al, dx
0000C973: test al, 8
0000C975: je 0xc972
0000C977: mov cx, word ptr [bp - 0x1c]
0000C97A: cmp si, word ptr [bp - 0x28]
0000C97D: ja 0xc9af
0000C97F: cmp di, word ptr [bp - 0x28]
0000C982: ja 0xc9af
0000C984: jmp 0xc9b4
0000C986: or si, si
0000C988: jne 0xc99d
0000C98A: mov dx, word ptr [bp + 0x16]
0000C98D: mov ax, word ptr [bp + 0x14]
0000C990: clc 
0000C991: lcall 0xb08, 0x17e
0000C996: jae 0xc99d
0000C998: mov word ptr [bp - 2], ax
0000C99B: jmp 0xca1b
0000C99D: or di, di
0000C99F: jne 0xc9af
0000C9A1: inc byte ptr [bp - 0x24]
0000C9A4: push word ptr [bp - 0xc]
0000C9A7: push word ptr [bp - 0x24]
0000C9AA: lcall 0xa36, 0x63
0000C9AF: movsb byte ptr es:[di], byte ptr [si]
0000C9B0: loop 0xc986
0000C9B2: jmp 0xc9bc
0000C9B4: shr cx, 1
0000C9B6: rep movsw word ptr es:[di], word ptr [si]
0000C9B8: rcl cx, 1
0000C9BA: rep movsb byte ptr es:[di], byte ptr [si]
0000C9BC: dec bx
0000C9BD: je 0xca16
0000C9BF: or si, si
0000C9C1: jne 0xc9d6
0000C9C3: mov dx, word ptr [bp + 0x16]
0000C9C6: mov ax, word ptr [bp + 0x14]
0000C9C9: clc 
0000C9CA: lcall 0xb08, 0x17e
0000C9CF: jae 0xc9d6
0000C9D1: mov word ptr [bp - 2], ax
0000C9D4: jmp 0xca1b
0000C9D6: add si, word ptr [bp - 0x20]
0000C9D9: jae 0xc9ee
0000C9DB: mov dx, word ptr [bp + 0x16]
0000C9DE: mov ax, word ptr [bp + 0x14]
0000C9E1: clc 
0000C9E2: lcall 0xb08, 0x17e
0000C9E7: jae 0xc9ee
0000C9E9: mov word ptr [bp - 2], ax
0000C9EC: jmp 0xca1b
0000C9EE: or di, di
0000C9F0: jne 0xca00
0000C9F2: inc byte ptr [bp - 0x24]
0000C9F5: push word ptr [bp - 0xc]
0000C9F8: push word ptr [bp - 0x24]
0000C9FB: lcall 0xa36, 0x63
0000CA00: add di, word ptr [bp - 0x22]
0000CA03: jae 0xca13
0000CA05: inc byte ptr [bp - 0x24]
0000CA08: push word ptr [bp - 0xc]
0000CA0B: push word ptr [bp - 0x24]
0000CA0E: lcall 0xa36, 0x63
0000CA13: jmp 0xc977
0000CA16: mov word ptr [bp - 2], 0
0000CA1B: push word ptr [bp - 0xc]
0000CA1E: lcall 0xa36, 0x1a5
0000CA23: mov ax, word ptr [bp - 2]
0000CA26: pop di
0000CA27: pop si
0000CA28: pop es
0000CA29: pop ds
0000CA2A: mov sp, bp
0000CA2C: pop bp
0000CA2D: retf 0x12
0000CA30: push bp
0000CA31: mov bp, sp
0000CA33: sub sp, 0xa
0000CA36: push ds
0000CA37: push es
0000CA38: push si
0000CA39: push di
0000CA3A: mov ax, 0x1ab5
0000CA3D: mov ds, ax
0000CA3F: les di, ptr [bp + 6]
0000CA42: mov word ptr es:[di], 0
0000CA47: mov word ptr es:[di + 2], 0
0000CA4D: mov byte ptr [bp - 4], 1
0000CA51: mov byte ptr [bp - 6], 1
0000CA55: mov byte ptr [bp - 8], 1
0000CA59: mov byte ptr [bp - 0xa], 1
0000CA5D: cmp byte ptr [bp - 4], 1
0000CA61: jne 0xca67
0000CA63: push cs
0000CA64: call 0xca9b
0000CA67: cmp byte ptr [bp - 6], 1
0000CA6B: jne 0xca71
0000CA6D: push cs
0000CA6E: call 0xcb80
0000CA71: cmp byte ptr [bp - 8], 1
0000CA75: jne 0xca7b
0000CA77: push cs
0000CA78: call 0xcbcf
0000CA7B: cmp byte ptr [bp - 0xa], 1
0000CA7F: jne 0xca85
0000CA81: push cs
0000CA82: call 0xcbe1
0000CA85: push cs
0000CA86: call 0xcc40
0000CA89: mov word ptr [bp - 2], 0
0000CA8E: mov ax, word ptr [bp - 2]
0000CA91: pop di
0000CA92: pop si
0000CA93: pop es
0000CA94: pop ds
0000CA95: mov sp, bp
0000CA97: pop bp
0000CA98: retf 4
0000CA9B: xor al, al
0000CA9D: push bp
0000CA9E: mov ah, 0x1a
0000CAA0: int 0x10
0000CAA2: pop bp
0000CAA3: cmp al, 0x1a
0000CAA5: je 0xcaaa
0000CAA7: jmp 0xcb7f
0000CAAA: mov cx, 2
0000CAAD: or bl, bl
0000CAAF: jne 0xcabd
0000CAB1: mov byte ptr es:[di], 0
0000CAB5: mov byte ptr es:[di + 1], 0
0000CABA: jmp 0xcb4b
0000CABD: cmp bl, 1
0000CAC0: jne 0xcacd
0000CAC2: mov byte ptr es:[di], 1
0000CAC6: mov byte ptr es:[di + 1], 1
0000CACB: jmp 0xcb4b
0000CACD: cmp bl, 2
0000CAD0: jne 0xcadd
0000CAD2: mov byte ptr es:[di], 2
0000CAD6: mov byte ptr es:[di + 1], 2
0000CADB: jmp 0xcb4b
0000CADD: cmp bl, 4
0000CAE0: jne 0xcaed
0000CAE2: mov byte ptr es:[di], 3
0000CAE6: mov byte ptr es:[di + 1], 3
0000CAEB: jmp 0xcb4b
0000CAED: cmp bl, 5
0000CAF0: jne 0xcafd
0000CAF2: mov byte ptr es:[di], 3
0000CAF6: mov byte ptr es:[di + 1], 1
0000CAFB: jmp 0xcb4b
0000CAFD: cmp bl, 7
0000CB00: jne 0xcb0d
0000CB02: mov byte ptr es:[di], 5
0000CB06: mov byte ptr es:[di + 1], 4
0000CB0B: jmp 0xcb4b
0000CB0D: cmp bl, 8
0000CB10: jne 0xcb1d
0000CB12: mov byte ptr es:[di], 5
0000CB16: mov byte ptr es:[di + 1], 5
0000CB1B: jmp 0xcb4b
0000CB1D: cmp bl, 0xa
0000CB20: jne 0xcb2d
0000CB22: mov byte ptr es:[di], 4
0000CB26: mov byte ptr es:[di + 1], 3
0000CB2B: jmp 0xcb4b
0000CB2D: cmp bl, 0xb
0000CB30: jne 0xcb3d
0000CB32: mov byte ptr es:[di], 4
0000CB36: mov byte ptr es:[di + 1], 4
0000CB3B: jmp 0xcb4b
0000CB3D: cmp bl, 0xc
0000CB40: jne 0xcb4b
0000CB42: mov byte ptr es:[di], 4
0000CB46: mov byte ptr es:[di + 1], 5
0000CB4B: dec cx
0000CB4C: je 0xcb56
0000CB4E: mov bl, bh
0000CB50: add di, 2
0000CB53: jmp 0xcaad
0000CB56: sub di, 2
0000CB59: mov byte ptr [bp - 6], 0
0000CB5D: mov byte ptr [bp - 8], 0
0000CB61: mov byte ptr [bp - 0xa], 0
0000CB65: push di
0000CB66: cmp byte ptr es:[di], 1
0000CB6A: je 0xcb75
0000CB6C: add di, 2
0000CB6F: cmp byte ptr es:[di], 1
0000CB73: jne 0xcb7e
0000CB75: mov byte ptr [bp - 0xa], 1
0000CB79: mov word ptr es:[di], 0
0000CB7E: pop di
0000CB7F: retf 
0000CB80: mov bl, 0x10
0000CB82: push bp
0000CB83: mov ah, 0x12
0000CB85: int 0x10
0000CB87: pop bp
0000CB88: cmp bl, 0x10
0000CB8B: je 0xcbce
0000CB8D: mov al, cl
0000CB8F: cmp al, 1
0000CB91: ja 0xcb97
0000CB93: mov ah, 2
0000CB95: jmp 0xcbb9
0000CB97: cmp al, 3
0000CB99: ja 0xcb9f
0000CB9B: mov ah, 3
0000CB9D: jmp 0xcbb9
0000CB9F: cmp al, 5
0000CBA1: ja 0xcba7
0000CBA3: mov ah, 1
0000CBA5: jmp 0xcbb9
0000CBA7: cmp al, 7
0000CBA9: ja 0xcbaf
0000CBAB: mov ah, 2
0000CBAD: jmp 0xcbb9
0000CBAF: cmp al, 9
0000CBB1: ja 0xcbb7
0000CBB3: mov ah, 3
0000CBB5: jmp 0xcbb9
0000CBB7: mov ah, 1
0000CBB9: mov al, 3
0000CBBB: push cs
0000CBBC: call 0xcc7a
0000CBBF: cmp ah, 1
0000CBC2: je 0xcbca
0000CBC4: mov byte ptr [bp - 8], 0
0000CBC8: jmp 0xcbce
0000CBCA: mov byte ptr [bp - 0xa], 0
0000CBCE: retf 
0000CBCF: mov dx, 0x3d4
0000CBD2: push cs
0000CBD3: call 0xcc23
0000CBD6: jb 0xcbe0
0000CBD8: mov al, 2
0000CBDA: mov ah, 2
0000CBDC: push cs
0000CBDD: call 0xcc7a
0000CBE0: retf 
0000CBE1: mov dx, 0x3b4
0000CBE4: push cs
0000CBE5: call 0xcc23
0000CBE8: jb 0xcc22
0000CBEA: mov dx, 0x3ba
0000CBED: in al, dx
0000CBEE: and al, 0x80
0000CBF0: mov ah, al
0000CBF2: mov cx, 0x8000
0000CBF5: in al, dx
0000CBF6: and al, 0x80
0000CBF8: cmp ah, al
0000CBFA: loope 0xcbf5
0000CBFC: jne 0xcc04
0000CBFE: mov al, 1
0000CC00: mov ah, 1
0000CC02: jmp 0xcc1e
0000CC04: in al, dx
0000CC05: mov dl, al
0000CC07: and dl, 0x70
0000CC0A: mov ah, 1
0000CC0C: mov al, 0x81
0000CC0E: cmp dl, 0x10
0000CC11: je 0xcc1e
0000CC13: mov al, 0x80
0000CC15: cmp dl, 0x50
0000CC18: jne 0xcc1e
0000CC1A: mov al, 0x82
0000CC1C: mov ah, 3
0000CC1E: push cs
0000CC1F: call 0xcc7a
0000CC22: retf 
0000CC23: mov al, 0xf
0000CC25: out dx, al
0000CC26: inc dx
0000CC27: in al, dx
0000CC28: mov ah, al
0000CC2A: mov al, 0x66
0000CC2C: out dx, al
0000CC2D: mov cx, 0x100
0000CC30: loop 0xcc30
0000CC32: in al, dx
0000CC33: xchg al, ah
0000CC35: out dx, al
0000CC36: cmp ah, 0x66
0000CC39: je 0xcc3e
0000CC3B: stc 
0000CC3C: jmp 0xcc3f
0000CC3E: clc 
0000CC3F: retf 
0000CC40: cmp byte ptr es:[di + 2], 0
0000CC45: je 0xcc79
0000CC47: cmp byte ptr es:[di], 4
0000CC4B: jge 0xcc79
0000CC4D: cmp byte ptr es:[di + 2], 4
0000CC52: jge 0xcc79
0000CC54: lcall 0x98e, 0x18a
0000CC59: and al, 7
0000CC5B: cmp al, 7
0000CC5D: je 0xcc68
0000CC5F: cmp byte ptr es:[di + 1], 1
0000CC64: jne 0xcc79
0000CC66: jmp 0xcc6f
0000CC68: cmp byte ptr es:[di + 1], 1
0000CC6D: je 0xcc79
0000CC6F: mov ax, word ptr es:[di]
0000CC72: xchg word ptr es:[di + 2], ax
0000CC76: mov word ptr es:[di], ax
0000CC79: retf 
0000CC7A: cmp byte ptr es:[di], 0
0000CC7E: jne 0xcc85
0000CC80: mov word ptr es:[di], ax
0000CC83: jmp 0xcc89
0000CC85: mov word ptr es:[di + 2], ax
0000CC89: retf 
0000CC8A: push bp
0000CC8B: mov bp, sp
0000CC8D: sub sp, 8
0000CC90: push ds
0000CC91: push es
0000CC92: push si
0000CC93: push di
0000CC94: mov ax, 0x1ab5
0000CC97: mov ds, ax
0000CC99: les di, ptr [bp + 0xc]
0000CC9C: cmp word ptr es:[di], 0xca00
0000CCA1: je 0xccba
0000CCA3: xor dx, dx
0000CCA5: mov ax, 0xffe4
0000CCA8: jmp 0xcdee
0000CCAB: cmp word ptr es:[di + 0x16], 3
0000CCB0: jbe 0xccba
0000CCB2: xor dx, dx
0000CCB4: mov ax, 0xffe8
0000CCB7: jmp 0xcdee
0000CCBA: mov ax, word ptr es:[di + 0xa]
0000CCBE: cmp word ptr [bp + 0xa], ax
0000CCC1: ja 0xcccc
0000CCC3: mov ax, word ptr es:[di + 0xc]
0000CCC7: cmp word ptr [bp + 8], ax
0000CCCA: jbe 0xccd4
0000CCCC: xor dx, dx
0000CCCE: mov ax, 0xffe5
0000CCD1: jmp 0xcdee
0000CCD4: xor ax, ax
0000CCD6: mov al, byte ptr es:[di + 0x13]
0000CCDA: mul word ptr [bp + 0xa]
0000CCDD: mov cl, 3
0000CCDF: shr ax, cl
0000CCE1: push ax
0000CCE2: xor ax, ax
0000CCE4: mov al, byte ptr es:[di + 0x12]
0000CCE8: mul word ptr es:[di + 0x14]
0000CCEC: mul word ptr [bp + 8]
0000CCEF: pop bx
0000CCF0: add ax, bx
0000CCF2: adc dx, 0
0000CCF5: mov word ptr [bp - 4], dx
0000CCF8: mov word ptr [bp - 6], ax
0000CCFB: cmp word ptr es:[di + 0x16], 0
0000CD00: jne 0xcd19
0000CD02: mov bx, 0x10
0000CD05: div bx
0000CD07: xchg dx, ax
0000CD08: add dx, word ptr es:[di + 0x1a]
0000CD0C: add ax, word ptr es:[di + 0x18]
0000CD10: jae 0xcd16
0000CD12: add dx, 0x1000
0000CD16: jmp 0xcdee
0000CD19: mov bx, word ptr es:[di + 0x28]
0000CD1D: mov word ptr [bp - 8], bx
0000CD20: shl ax, 1
0000CD22: rcl dx, 1
0000CD24: shl ax, 1
0000CD26: rcl dx, 1
0000CD28: mov word ptr es:[di + 0x26], dx
0000CD2C: shr ax, 1
0000CD2E: shr ax, 1
0000CD30: mov word ptr [bp - 6], ax
0000CD33: mov cx, word ptr es:[di + 0x24]
0000CD37: sub cx, word ptr es:[di + 0x26]
0000CD3B: ja 0xcd45
0000CD3D: xor dx, dx
0000CD3F: mov ax, 0xfc19
0000CD42: jmp 0xcdee
0000CD45: cmp cx, word ptr es:[di + 0x2a]
0000CD49: jbe 0xcd4f
0000CD4B: mov cx, word ptr es:[di + 0x2a]
0000CD4F: cmp word ptr es:[di + 0x16], 1
0000CD54: jne 0xcd79
0000CD56: mov dx, word ptr es:[di + 0x22]
0000CD5A: mov bx, word ptr es:[di + 0x26]
0000CD5E: inc word ptr es:[di + 0x26]
0000CD62: mov ax, word ptr [bp - 8]
0000CD65: inc word ptr [bp - 8]
0000CD68: mov ah, 0x44
0000CD6A: int 0x67
0000CD6C: or ah, ah
0000CD6E: loope 0xcd56
0000CD70: je 0xcdda
0000CD72: xor dx, dx
0000CD74: mov ax, 0xffea
0000CD77: jmp 0xcdee
0000CD79: cmp word ptr es:[di + 0x16], 3
0000CD7E: jne 0xcdac
0000CD80: mov dx, word ptr es:[di + 0x22]
0000CD84: mov bx, word ptr es:[di + 0x26]
0000CD88: inc word ptr es:[di + 0x26]
0000CD8C: mov ax, word ptr [bp - 8]
0000CD8F: inc word ptr [bp - 8]
0000CD92: push cx
0000CD93: mov cx, word ptr [bp + 6]
0000CD96: mov ah, 0x44
0000CD98: push ax
0000CD99: lcall 0xb95, 0x179
0000CD9E: or ah, ah
0000CDA0: pop cx
0000CDA1: loope 0xcd80
0000CDA3: je 0xcdda
0000CDA5: xor dx, dx
0000CDA7: mov ax, 0xffdb
0000CDAA: jmp 0xcdee
0000CDAC: mov dx, word ptr es:[di + 0x22]
0000CDB0: mov bx, word ptr es:[di + 0x26]
0000CDB4: inc word ptr es:[di + 0x26]
0000CDB8: mov ax, word ptr [bp - 8]
0000CDBB: inc word ptr [bp - 8]
0000CDBE: push cx
0000CDBF: mov cx, word ptr [bp + 6]
0000CDC2: mov ah, 0x44
0000CDC4: push ax
0000CDC5: lcall 0x620, 0x219
0000CDCA: or ah, ah
0000CDCC: pop cx
0000CDCD: loope 0xcdac
0000CDCF: je 0xcdda
0000CDD1: xor dx, dx
0000CDD3: mov word ptr [bp - 2], 0xffe2
0000CDD8: jmp 0xcdf1
0000CDDA: mov ax, 0x4000
0000CDDD: mul word ptr es:[di + 0x28]
0000CDE1: mov cl, 4
0000CDE3: shr ax, cl
0000CDE5: add ax, word ptr es:[di + 0x1a]
0000CDE9: mov dx, ax
0000CDEB: mov ax, word ptr [bp - 6]
0000CDEE: mov word ptr [bp - 2], ax
0000CDF1: mov ax, word ptr [bp - 2]
0000CDF4: pop di
0000CDF5: pop si
0000CDF6: pop es
0000CDF7: pop ds
0000CDF8: mov sp, bp
0000CDFA: pop bp
0000CDFB: retf 0xa
0000CDFE: push bp
0000CDFF: mov bp, sp
0000CE01: push bx
0000CE02: push cx
0000CE03: push di
0000CE04: push es
0000CE05: mov bx, 0
0000CE08: jae 0xce0d
0000CE0A: mov bx, 1
0000CE0D: push bx
0000CE0E: mov es, dx
0000CE10: mov di, ax
0000CE12: mov ax, word ptr es:[di + 0x16]
0000CE16: cmp ax, 0
0000CE19: jne 0xce33
0000CE1B: cmp word ptr [bp - 0xa], 0
0000CE1F: jne 0xce2b
0000CE21: mov ax, ds
0000CE23: add ax, 0x1000
0000CE26: mov ds, ax
0000CE28: jmp 0xcf56
0000CE2B: add word ptr [bp - 8], 0x1000
0000CE30: jmp 0xcf56
0000CE33: cmp ax, 1
0000CE36: jne 0xce8f
0000CE38: mov ax, word ptr es:[di + 0x2a]
0000CE3C: mov bx, 0x4000
0000CE3F: mul bx
0000CE41: cmp word ptr [bp - 0xa], 0
0000CE45: jne 0xce4b
0000CE47: sub si, ax
0000CE49: jmp 0xce4e
0000CE4B: sub word ptr [bp - 6], ax
0000CE4E: mov cx, word ptr es:[di + 0x24]
0000CE52: sub cx, word ptr es:[di + 0x26]
0000CE56: ja 0xce5e
0000CE58: mov ax, 0xfc19
0000CE5B: jmp 0xcf53
0000CE5E: mov ax, word ptr es:[di + 0x28]
0000CE62: dec ax
0000CE63: cmp cx, word ptr es:[di + 0x2a]
0000CE67: jbe 0xce6d
0000CE69: mov cx, word ptr es:[di + 0x2a]
0000CE6D: mov dx, word ptr es:[di + 0x22]
0000CE71: mov bx, word ptr es:[di + 0x26]
0000CE75: inc word ptr es:[di + 0x26]
0000CE79: inc ax
0000CE7A: push ax
0000CE7B: mov ah, 0x44
0000CE7D: int 0x67
0000CE7F: or ah, ah
0000CE81: pop ax
0000CE82: loope 0xce6d
0000CE84: jne 0xce89
0000CE86: jmp 0xcf56
0000CE89: mov ax, 0xffea
0000CE8C: jmp 0xcf53
0000CE8F: cmp ax, 3
0000CE92: jne 0xcef0
0000CE94: mov ax, word ptr es:[di + 0x2a]
0000CE98: mov bx, 0x4000
0000CE9B: mul bx
0000CE9D: cmp word ptr [bp - 0xa], 0
0000CEA1: jne 0xcea7
0000CEA3: sub si, ax
0000CEA5: jmp 0xceaa
0000CEA7: sub word ptr [bp - 6], ax
0000CEAA: mov cx, word ptr es:[di + 0x24]
0000CEAE: sub cx, word ptr es:[di + 0x26]
0000CEB2: ja 0xceba
0000CEB4: mov ax, 0xfc19
0000CEB7: jmp 0xcf53
0000CEBA: mov ax, word ptr es:[di + 0x28]
0000CEBE: dec ax
0000CEBF: cmp cx, word ptr es:[di + 0x2a]
0000CEC3: jbe 0xcec9
0000CEC5: mov cx, word ptr es:[di + 0x2a]
0000CEC9: mov dx, word ptr es:[di + 0x22]
0000CECD: mov bx, word ptr es:[di + 0x26]
0000CED1: inc word ptr es:[di + 0x26]
0000CED5: inc ax
0000CED6: push ax
0000CED7: push cx
0000CED8: mov cx, word ptr [bp - 0xa]
0000CEDB: mov ah, 0x44
0000CEDD: push ax
0000CEDE: lcall 0xb95, 0x179
0000CEE3: or ah, ah
0000CEE5: pop cx
0000CEE6: pop ax
0000CEE7: loope 0xcec9
0000CEE9: je 0xcf56
0000CEEB: mov ax, 0xffdb
0000CEEE: jmp 0xcf57
0000CEF0: cmp ax, 2
0000CEF3: jne 0xcf50
0000CEF5: mov ax, word ptr es:[di + 0x2a]
0000CEF9: mov bx, 0x4000
0000CEFC: mul bx
0000CEFE: cmp word ptr [bp - 0xa], 0
0000CF02: jne 0xcf08
0000CF04: sub si, ax
0000CF06: jmp 0xcf0b
0000CF08: sub word ptr [bp - 6], ax
0000CF0B: mov cx, word ptr es:[di + 0x24]
0000CF0F: sub cx, word ptr es:[di + 0x26]
0000CF13: ja 0xcf1a
0000CF15: mov ax, 0xfc19
0000CF18: jmp 0xcf53
0000CF1A: mov ax, word ptr es:[di + 0x28]
0000CF1E: dec ax
0000CF1F: cmp cx, word ptr es:[di + 0x2a]
0000CF23: jbe 0xcf29
0000CF25: mov cx, word ptr es:[di + 0x2a]
0000CF29: mov dx, word ptr es:[di + 0x22]
0000CF2D: mov bx, word ptr es:[di + 0x26]
0000CF31: inc word ptr es:[di + 0x26]
0000CF35: inc ax
0000CF36: push ax
0000CF37: push cx
0000CF38: mov cx, word ptr [bp - 0xa]
0000CF3B: mov ah, 0x44
0000CF3D: push ax
0000CF3E: lcall 0x620, 0x219
0000CF43: or ah, ah
0000CF45: pop cx
0000CF46: pop ax
0000CF47: loope 0xcf29
0000CF49: je 0xcf56
0000CF4B: mov ax, 0xffe2
0000CF4E: jmp 0xcf53
0000CF50: mov ax, 0xffe8
0000CF53: stc 
0000CF54: jmp 0xcf57
0000CF56: clc 
0000CF57: mov es, word ptr [bp - 8]
0000CF5A: mov di, word ptr [bp - 6]
0000CF5D: mov cx, word ptr [bp - 4]
0000CF60: mov bx, word ptr [bp - 2]
0000CF63: mov sp, bp
0000CF65: pop bp
0000CF66: retf 
0000CF67: push bp
0000CF68: mov bp, sp
0000CF6A: sub sp, 2
0000CF6D: push ds
0000CF6E: push es
0000CF6F: push si
0000CF70: push di
0000CF71: mov ax, 0x1ab5
0000CF74: mov ds, ax
0000CF76: mov ax, word ptr [bp + 0xa]
0000CF79: push ax
0000CF7A: lcall 0x98e, 0x12a
0000CF7F: jae 0xcf87
0000CF81: mov ax, 0xfc19
0000CF84: cdq 
0000CF85: jmp 0xcfb3
0000CF87: mov di, ax
0000CF89: mov es, dx
0000CF8B: xor ax, ax
0000CF8D: mov al, byte ptr es:[di + 0x17]
0000CF91: mov bx, word ptr [bp + 8]
0000CF94: mul bx
0000CF96: mov bx, 8
0000CF99: div bx
0000CF9B: or dx, dx
0000CF9D: je 0xcfa0
0000CF9F: inc ax
0000CFA0: test ax, 1
0000CFA3: je 0xcfa6
0000CFA5: inc ax
0000CFA6: xor bx, bx
0000CFA8: mov bl, byte ptr es:[di + 0x1e]
0000CFAC: mul bx
0000CFAE: mov bx, word ptr [bp + 6]
0000CFB1: mul bx
0000CFB3: mov word ptr [bp - 2], ax
0000CFB6: mov ax, word ptr [bp - 2]
0000CFB9: pop di
0000CFBA: pop si
0000CFBB: pop es
0000CFBC: pop ds
0000CFBD: mov sp, bp
0000CFBF: pop bp
0000CFC0: retf 6
0000CFC3: push bp
0000CFC4: mov bp, sp
0000CFC6: sub sp, 2
0000CFC9: push ds
0000CFCA: push es
0000CFCB: push si
0000CFCC: push di
0000CFCD: mov ax, 0x1ab5
0000CFD0: mov ds, ax
0000CFD2: mov ax, word ptr [bp + 6]
0000CFD5: cmp ax, 0
0000CFD8: jne 0xcfe1
0000CFDA: lcall 0x79e, 0xa7
0000CFDF: jmp 0xd03b
0000CFE1: cmp ax, 1
0000CFE4: jne 0xcffb
0000CFE6: mov ah, 0x42
0000CFE8: int 0x67
0000CFEA: or ah, ah
0000CFEC: jne 0xcff5
0000CFEE: mov ax, 0x4000
0000CFF1: mul bx
0000CFF3: jmp 0xd03b
0000CFF5: mov ax, 0xffea
0000CFF8: cdq 
0000CFF9: jmp 0xd03b
0000CFFB: cmp ax, 3
0000CFFE: jne 0xd019
0000D000: mov ah, 0x42
0000D002: push ax
0000D003: lcall 0xb95, 0x179
0000D008: or ah, ah
0000D00A: jne 0xd013
0000D00C: mov ax, 0x4000
0000D00F: mul bx
0000D011: jmp 0xd03b
0000D013: mov ax, 0xffdb
0000D016: cdq 
0000D017: jmp 0xd03b
0000D019: cmp ax, 2
0000D01C: jne 0xd037
0000D01E: mov ah, 0x42
0000D020: push ax
0000D021: lcall 0x620, 0x219
0000D026: or ah, ah
0000D028: jne 0xd031
0000D02A: mov ax, 0x4000
0000D02D: mul bx
0000D02F: jmp 0xd03b
0000D031: mov ax, 0xffe2
0000D034: cdq 
0000D035: jmp 0xd03b
0000D037: mov ax, 0xffe8
0000D03A: cdq 
0000D03B: mov word ptr [bp - 2], ax
0000D03E: mov ax, word ptr [bp - 2]
0000D041: pop di
0000D042: pop si
0000D043: pop es
0000D044: pop ds
0000D045: mov sp, bp
0000D047: pop bp
0000D048: retf 2
0000D04B: add byte ptr [di - 0x75], dl
0000D04E: in al, dx
0000D04F: sub sp, 0xb2
0000D053: push ds
0000D054: push es
0000D055: push si
0000D056: push di
0000D057: mov ax, 0x1ab5
0000D05A: mov ds, ax
0000D05C: mov word ptr [bp - 0x16], 0
0000D061: mov word ptr [bp - 0x20], 0
0000D066: lds si, ptr [bp + 0x18]
0000D069: les di, ptr [bp + 0xc]
0000D06C: mov al, byte ptr [si + 0x12]
0000D06F: cmp al, byte ptr es:[di + 0x12]
0000D073: je 0xd07d
0000D075: mov word ptr [bp - 2], 0xfffa
0000D07A: jmp 0xd529
0000D07D: mov al, byte ptr [si + 0x13]
0000D080: xor ah, ah
0000D082: mov word ptr [bp - 4], ax
0000D085: cmp al, byte ptr es:[di + 0x13]
0000D089: je 0xd093
0000D08B: mov word ptr [bp - 2], 0xfffa
0000D090: jmp 0xd529
0000D093: mov ax, word ptr [bp + 0x16]
0000D096: or ax, ax
0000D098: jge 0xd0a4
0000D09A: neg ax
0000D09C: add word ptr [bp + 0xa], ax
0000D09F: xor ax, ax
0000D0A1: mov word ptr [bp + 0x16], ax
0000D0A4: cmp ax, word ptr [si + 0xa]
0000D0A7: jbe 0xd0b1
0000D0A9: mov word ptr [bp - 2], 0
0000D0AE: jmp 0xd529
0000D0B1: mov ax, word ptr [bp + 0x12]
0000D0B4: or ax, ax
0000D0B6: jge 0xd0c0
0000D0B8: mov word ptr [bp - 2], 0
0000D0BD: jmp 0xd529
0000D0C0: cmp ax, word ptr [si + 0xa]
0000D0C3: jbe 0xd0cb
0000D0C5: mov ax, word ptr [si + 0xa]
0000D0C8: mov word ptr [bp + 0x12], ax
0000D0CB: mov ax, word ptr es:[di + 0xa]
0000D0CF: cmp word ptr [bp + 0xa], ax
0000D0D2: jbe 0xd0dc
0000D0D4: mov word ptr [bp - 2], 0
0000D0D9: jmp 0xd529
0000D0DC: sub ax, word ptr [bp + 0xa]
0000D0DF: inc ax
0000D0E0: mov bx, word ptr [bp + 0x12]
0000D0E3: sub bx, word ptr [bp + 0x16]
0000D0E6: inc bx
0000D0E7: cmp ax, bx
0000D0E9: jbe 0xd0ed
0000D0EB: mov ax, bx
0000D0ED: mul word ptr [bp - 4]
0000D0F0: mov word ptr [bp - 6], ax
0000D0F3: mov bx, 8
0000D0F6: div bx
0000D0F8: xor bx, bx
0000D0FA: or dx, dx
0000D0FC: je 0xd100
0000D0FE: inc ax
0000D0FF: inc bx
0000D100: mov word ptr [bp - 0xa], ax
0000D103: mov word ptr [bp - 0xc], ax
0000D106: mov word ptr [bp - 0x28], 1
0000D10B: dec ax
0000D10C: mov word ptr [bp - 0x2a], ax
0000D10F: mov word ptr [bp - 0x2c], bx
0000D112: mov ax, word ptr [bp + 0x14]
0000D115: or ax, ax
0000D117: jge 0xd123
0000D119: neg ax
0000D11B: add word ptr [bp + 8], ax
0000D11E: xor ax, ax
0000D120: mov word ptr [bp + 0x14], ax
0000D123: cmp ax, word ptr [si + 0xc]
0000D126: jbe 0xd130
0000D128: mov word ptr [bp - 2], 0
0000D12D: jmp 0xd529
0000D130: mov ax, word ptr [bp + 0x10]
0000D133: or ax, ax
0000D135: jge 0xd13f
0000D137: mov word ptr [bp - 2], 0
0000D13C: jmp 0xd529
0000D13F: cmp ax, word ptr [si + 0xc]
0000D142: jbe 0xd14a
0000D144: mov ax, word ptr [si + 0xc]
0000D147: mov word ptr [bp + 0x10], ax
0000D14A: mov ax, word ptr es:[di + 0xc]
0000D14E: cmp word ptr [bp + 8], ax
0000D151: jbe 0xd15b
0000D153: mov word ptr [bp - 2], 0
0000D158: jmp 0xd529
0000D15B: sub ax, word ptr [bp + 8]
0000D15E: inc ax
0000D15F: mov bx, word ptr [bp + 0x10]
0000D162: sub bx, word ptr [bp + 0x14]
0000D165: inc bx
0000D166: cmp ax, bx
0000D168: jbe 0xd16c
0000D16A: mov ax, bx
0000D16C: mov bl, byte ptr es:[di + 0x12]
0000D170: xor bh, bh
0000D172: mul bx
0000D174: mov word ptr [bp - 8], ax
0000D177: cmp si, di
0000D179: jne 0xd19a
0000D17B: push ds
0000D17C: pop ax
0000D17D: push es
0000D17E: pop bx
0000D17F: cmp ax, bx
0000D181: jne 0xd19a
0000D183: mov ax, ss
0000D185: mov es, ax
0000D187: lea di, [bp - 0xb2]
0000D18B: mov word ptr [bp + 0xe], ax
0000D18E: mov word ptr [bp + 0xc], di
0000D191: mov cx, 0x40
0000D194: push si
0000D195: push di
0000D196: rep movsw word ptr es:[di], word ptr [si]
0000D198: pop di
0000D199: pop si
0000D19A: mov ax, word ptr [si + 0x16]
0000D19D: cmp ax, word ptr es:[di + 0x16]
0000D1A1: jne 0xd1c7
0000D1A3: cmp ax, 0
0000D1A6: je 0xd1c7
0000D1A8: mov bx, 0x8000
0000D1AB: mov word ptr [si + 0x28], 0
0000D1B0: mov word ptr [si + 0x2a], 2
0000D1B5: mov word ptr [bp - 0x16], bx
0000D1B8: mov word ptr es:[di + 0x28], 2
0000D1BE: mov word ptr es:[di + 0x2a], 2
0000D1C4: mov word ptr [bp - 0x20], bx
0000D1C7: mov word ptr [bp - 0x22], 0xff
0000D1CC: mov word ptr [bp - 0x24], 0
0000D1D1: cmp byte ptr [bp - 4], 8
0000D1D5: jne 0xd1da
0000D1D7: jmp 0xd28b
0000D1DA: mov ax, word ptr [bp + 0xa]
0000D1DD: mul word ptr [bp - 4]
0000D1E0: push ax
0000D1E1: and ax, 7
0000D1E4: mov cx, ax
0000D1E6: mov al, 0xff
0000D1E8: shr al, cl
0000D1EA: mov byte ptr [bp - 0x22], al
0000D1ED: mov bx, 8
0000D1F0: sub bx, cx
0000D1F2: mov word ptr [bp - 0x26], bx
0000D1F5: pop ax
0000D1F6: add ax, word ptr [bp - 6]
0000D1F9: and ax, 7
0000D1FC: mov cx, ax
0000D1FE: mov ah, 0xff
0000D200: shr ah, cl
0000D202: not ah
0000D204: mov byte ptr [bp - 0x21], ah
0000D207: cmp bx, word ptr [bp - 6]
0000D20A: jl 0xd21d
0000D20C: mov bx, word ptr [bp - 6]
0000D20F: mov word ptr [bp - 0x26], bx
0000D212: or ah, ah
0000D214: je 0xd21d
0000D216: and byte ptr [bp - 0x22], ah
0000D219: mov byte ptr [bp - 0x21], 0
0000D21D: mov ax, word ptr [bp + 0xa]
0000D220: sub ax, word ptr [bp + 0x16]
0000D223: mul word ptr [bp - 4]
0000D226: and ax, 7
0000D229: mov word ptr [bp - 0x24], ax
0000D22C: mov word ptr [bp - 0x28], 1
0000D231: mov ax, word ptr [bp + 0x16]
0000D234: mul word ptr [bp - 4]
0000D237: and ax, 7
0000D23A: mov bx, ax
0000D23C: mov ax, word ptr [bp + 0xa]
0000D23F: mul word ptr [bp - 4]
0000D242: and ax, 7
0000D245: cmp bx, ax
0000D247: jle 0xd24c
0000D249: inc word ptr [bp - 0x28]
0000D24C: mov ax, word ptr [bp - 6]
0000D24F: sub ax, word ptr [bp - 0x26]
0000D252: mov bx, 8
0000D255: xor dx, dx
0000D257: div bx
0000D259: mov word ptr [bp - 0x2a], ax
0000D25C: or dx, dx
0000D25E: jne 0xd264
0000D260: mov byte ptr [bp - 0x21], 0
0000D264: mov word ptr [bp - 0x2c], 0
0000D269: cmp dx, word ptr [bp - 0x24]
0000D26C: jbe 0xd271
0000D26E: inc word ptr [bp - 0x2c]
0000D271: mov ax, word ptr [bp - 0x28]
0000D274: add ax, word ptr [bp - 0x2a]
0000D277: add ax, word ptr [bp - 0x2c]
0000D27A: mov word ptr [bp - 0xa], ax
0000D27D: mov ax, word ptr [bp - 0x2a]
0000D280: inc ax
0000D281: cmp byte ptr [bp - 0x21], 0
0000D285: je 0xd288
0000D287: inc ax
0000D288: mov word ptr [bp - 0xc], ax
0000D28B: mov ax, word ptr [bp - 0x16]
0000D28E: sub ax, word ptr [bp - 0xa]
0000D291: mov word ptr [bp - 0x14], ax
0000D294: mov ax, word ptr [si + 0x14]
0000D297: sub ax, word ptr [bp - 0xa]
0000D29A: mov word ptr [bp - 0x12], ax
0000D29D: mov ax, word ptr [bp - 0x20]
0000D2A0: sub ax, word ptr [bp - 0xc]
0000D2A3: mov word ptr [bp - 0x1e], ax
0000D2A6: mov ax, word ptr es:[di + 0x14]
0000D2AA: sub ax, word ptr [bp - 0xc]
0000D2AD: mov word ptr [bp - 0x1c], ax
0000D2B0: mov ax, word ptr [bp + 6]
0000D2B3: cmp ax, 3
0000D2B6: je 0xd2d3
0000D2B8: cmp ax, 1
0000D2BB: je 0xd2e4
0000D2BD: cmp ax, 2
0000D2C0: je 0xd2f5
0000D2C2: mov word ptr [bp - 0x2e], 0x34a
0000D2C7: mov word ptr [bp - 0x30], 0x3bc
0000D2CC: mov word ptr [bp - 0x32], 0x45f
0000D2D1: jmp 0xd304
0000D2D3: mov word ptr [bp - 0x2e], 0x337
0000D2D8: mov word ptr [bp - 0x30], 0x3ad
0000D2DD: mov word ptr [bp - 0x32], 0x44e
0000D2E2: jmp 0xd304
0000D2E4: mov word ptr [bp - 0x2e], 0x33c
0000D2E9: mov word ptr [bp - 0x30], 0x3b2
0000D2EE: mov word ptr [bp - 0x32], 0x453
0000D2F3: jmp 0xd304
0000D2F5: mov word ptr [bp - 0x2e], 0x345
0000D2FA: mov word ptr [bp - 0x30], 0x3b7
0000D2FF: mov word ptr [bp - 0x32], 0x45a
0000D304: push ds
0000D305: push si
0000D306: push word ptr [bp + 0x16]
0000D309: push word ptr [bp + 0x14]
0000D30C: mov ax, 0
0000D30F: push ax
0000D310: lcall 0xb08, 0xa
0000D315: or dx, dx
0000D317: jne 0xd31f
0000D319: mov word ptr [bp - 2], ax
0000D31C: jmp 0xd529
0000D31F: mov ds, dx
0000D321: mov si, ax
0000D323: push es
0000D324: push di
0000D325: push word ptr [bp + 0xa]
0000D328: push word ptr [bp + 8]
0000D32B: mov ax, 1
0000D32E: push ax
0000D32F: lcall 0xb08, 0xa
0000D334: or dx, dx
0000D336: jne 0xd33e
0000D338: mov word ptr [bp - 2], ax
0000D33B: jmp 0xd529
0000D33E: mov es, dx
0000D340: mov di, ax
0000D342: cld 
0000D343: mov cx, word ptr [bp - 0x24]
0000D346: cmp byte ptr [bp - 0x28], 1
0000D34A: je 0xd368
0000D34C: lodsb al, byte ptr [si]
0000D34D: mov ch, al
0000D34F: cmp si, word ptr [bp - 0x16]
0000D352: jne 0xd368
0000D354: mov dx, word ptr [bp + 0x1a]
0000D357: mov ax, word ptr [bp + 0x18]
0000D35A: clc 
0000D35B: lcall 0xb08, 0x17e
0000D360: jae 0xd368
0000D362: mov word ptr [bp - 2], ax
0000D365: jmp 0xd529
0000D368: lodsb al, byte ptr [si]
0000D369: mov ah, ch
0000D36B: mov ch, al
0000D36D: ror ax, cl
0000D36F: mov bl, byte ptr [bp - 0x22]
0000D372: and al, bl
0000D374: jmp word ptr [bp - 0x2e]
0000D377: xor byte ptr es:[di], al
0000D37A: jmp 0xd392
0000D37C: not bl
0000D37E: or al, bl
0000D380: and byte ptr es:[di], al
0000D383: jmp 0xd392
0000D385: or byte ptr es:[di], al
0000D388: jmp 0xd392
0000D38A: not bl
0000D38C: and byte ptr es:[di], bl
0000D38F: or byte ptr es:[di], al
0000D392: inc di
0000D393: mov bx, word ptr [bp - 0x2a]
0000D396: or bx, bx
0000D398: jne 0xd39d
0000D39A: jmp 0xd441
0000D39D: cmp word ptr [bp + 6], 0
0000D3A1: jne 0xd3b1
0000D3A3: or cl, cl
0000D3A5: jne 0xd3b1
0000D3A7: cmp si, word ptr [bp - 0x14]
0000D3AA: ja 0xd3b1
0000D3AC: cmp di, word ptr [bp - 0x1e]
0000D3AF: jbe 0xd405
0000D3B1: cmp di, word ptr [bp - 0x20]
0000D3B4: jne 0xd3ca
0000D3B6: mov dx, word ptr [bp + 0xe]
0000D3B9: mov ax, word ptr [bp + 0xc]
0000D3BC: stc 
0000D3BD: lcall 0xb08, 0x17e
0000D3C2: jae 0xd3ca
0000D3C4: mov word ptr [bp - 2], ax
0000D3C7: jmp 0xd529
0000D3CA: cmp si, word ptr [bp - 0x16]
0000D3CD: jne 0xd3e3
0000D3CF: mov dx, word ptr [bp + 0x1a]
0000D3D2: mov ax, word ptr [bp + 0x18]
0000D3D5: clc 
0000D3D6: lcall 0xb08, 0x17e
0000D3DB: jae 0xd3e3
0000D3DD: mov word ptr [bp - 2], ax
0000D3E0: jmp 0xd529
0000D3E3: lodsb al, byte ptr [si]
0000D3E4: mov ah, ch
0000D3E6: mov ch, al
0000D3E8: ror ax, cl
0000D3EA: jmp word ptr [bp - 0x30]
0000D3ED: xor byte ptr es:[di], al
0000D3F0: jmp 0xd3ff
0000D3F2: and byte ptr es:[di], al
0000D3F5: jmp 0xd3ff
0000D3F7: or byte ptr es:[di], al
0000D3FA: jmp 0xd3ff
0000D3FC: mov byte ptr es:[di], al
0000D3FF: inc di
0000D400: dec bx
0000D401: jne 0xd3b1
0000D403: jmp 0xd441
0000D405: cmp di, word ptr [bp - 0x20]
0000D408: jne 0xd41e
0000D40A: mov dx, word ptr [bp + 0xe]
0000D40D: mov ax, word ptr [bp + 0xc]
0000D410: stc 
0000D411: lcall 0xb08, 0x17e
0000D416: jae 0xd41e
0000D418: mov word ptr [bp - 2], ax
0000D41B: jmp 0xd529
0000D41E: cmp si, word ptr [bp - 0x16]
0000D421: jne 0xd437
0000D423: mov dx, word ptr [bp + 0x1a]
0000D426: mov ax, word ptr [bp + 0x18]
0000D429: clc 
0000D42A: lcall 0xb08, 0x17e
0000D42F: jae 0xd437
0000D431: mov word ptr [bp - 2], ax
0000D434: jmp 0xd529
0000D437: mov cx, bx
0000D439: shr cx, 1
0000D43B: rep movsw word ptr es:[di], word ptr [si]
0000D43D: rcl cx, 1
0000D43F: rep movsb byte ptr es:[di], byte ptr [si]
0000D441: mov bh, byte ptr [bp - 0x21]
0000D444: or bh, bh
0000D446: je 0xd4a6
0000D448: cmp di, word ptr [bp - 0x20]
0000D44B: jne 0xd461
0000D44D: mov dx, word ptr [bp + 0xe]
0000D450: mov ax, word ptr [bp + 0xc]
0000D453: stc 
0000D454: lcall 0xb08, 0x17e
0000D459: jae 0xd461
0000D45B: mov word ptr [bp - 2], ax
0000D45E: jmp 0xd529
0000D461: cmp byte ptr [bp - 0x2c], 0
0000D465: je 0xd481
0000D467: cmp si, word ptr [bp - 0x16]
0000D46A: jne 0xd480
0000D46C: mov dx, word ptr [bp + 0x1a]
0000D46F: mov ax, word ptr [bp + 0x18]
0000D472: clc 
0000D473: lcall 0xb08, 0x17e
0000D478: jae 0xd480
0000D47A: mov word ptr [bp - 2], ax
0000D47D: jmp 0xd529
0000D480: lodsb al, byte ptr [si]
0000D481: mov ah, ch
0000D483: ror ax, cl
0000D485: mov dx, bx
0000D487: not dx
0000D489: and al, bh
0000D48B: jmp word ptr [bp - 0x32]
0000D48E: xor byte ptr es:[di], al
0000D491: jmp 0xd4a5
0000D493: or al, dh
0000D495: and byte ptr es:[di], al
0000D498: jmp 0xd4a5
0000D49A: or byte ptr es:[di], al
0000D49D: jmp 0xd4a5
0000D49F: and byte ptr es:[di], dh
0000D4A2: or byte ptr es:[di], al
0000D4A5: inc di
0000D4A6: dec word ptr [bp - 8]
0000D4A9: je 0xd524
0000D4AB: cmp di, word ptr [bp - 0x20]
0000D4AE: jne 0xd4c3
0000D4B0: mov dx, word ptr [bp + 0xe]
0000D4B3: mov ax, word ptr [bp + 0xc]
0000D4B6: stc 
0000D4B7: lcall 0xb08, 0x17e
0000D4BC: jae 0xd4c3
0000D4BE: mov word ptr [bp - 2], ax
0000D4C1: jmp 0xd529
0000D4C3: cmp si, word ptr [bp - 0x16]
0000D4C6: jne 0xd4db
0000D4C8: mov dx, word ptr [bp + 0x1a]
0000D4CB: mov ax, word ptr [bp + 0x18]
0000D4CE: clc 
0000D4CF: lcall 0xb08, 0x17e
0000D4D4: jae 0xd4db
0000D4D6: mov word ptr [bp - 2], ax
0000D4D9: jmp 0xd529
0000D4DB: add si, word ptr [bp - 0x12]
0000D4DE: jb 0xd4eb
0000D4E0: cmp word ptr [bp - 0x16], 0
0000D4E4: je 0xd4fe
0000D4E6: cmp si, word ptr [bp - 0x16]
0000D4E9: jb 0xd4fe
0000D4EB: mov dx, word ptr [bp + 0x1a]
0000D4EE: mov ax, word ptr [bp + 0x18]
0000D4F1: clc 
0000D4F2: lcall 0xb08, 0x17e
0000D4F7: jae 0xd4fe
0000D4F9: mov word ptr [bp - 2], ax
0000D4FC: jmp 0xd529
0000D4FE: add di, word ptr [bp - 0x1c]
0000D501: jb 0xd50e
0000D503: cmp word ptr [bp - 0x20], 0
0000D507: je 0xd521
0000D509: cmp di, word ptr [bp - 0x20]
0000D50C: jb 0xd521
0000D50E: mov dx, word ptr [bp + 0xe]
0000D511: mov ax, word ptr [bp + 0xc]
0000D514: stc 
0000D515: lcall 0xb08, 0x17e
0000D51A: jae 0xd521
0000D51C: mov word ptr [bp - 2], ax
0000D51F: jmp 0xd529
0000D521: jmp 0xd343
0000D524: mov word ptr [bp - 2], 0
0000D529: lds si, ptr [bp + 0x18]
0000D52C: mov word ptr [si + 0x28], 0
0000D531: mov word ptr [si + 0x2a], 4
0000D536: les di, ptr [bp + 0xc]
0000D539: mov word ptr es:[di + 0x28], 0
0000D53F: mov word ptr es:[di + 0x2a], 4
0000D545: mov ax, word ptr [bp - 2]
0000D548: pop di
0000D549: pop si
0000D54A: pop es
0000D54B: pop ds
0000D54C: mov sp, bp
0000D54E: pop bp
0000D54F: retf 0x16
0000D552: push bp
0000D553: mov bp, sp
0000D555: sub sp, 2
0000D558: push ds
0000D559: push es
0000D55A: push si
0000D55B: push di
0000D55C: mov ax, 0x1ab5
0000D55F: mov ds, ax
0000D561: mov ax, 0x4300
0000D564: int 0x2f
0000D566: cmp al, 0x80
0000D568: je 0xd571
0000D56A: mov word ptr [bp - 2], 0xffdc
0000D56F: jmp 0xd595
0000D571: mov ax, 0x4310
0000D574: int 0x2f
0000D576: mov word ptr [0x5ab2], bx
0000D57A: mov word ptr [0x5ab4], es
0000D57E: mov ah, 0
0000D580: lcall [0x5ab2]
0000D584: cmp ax, 0x200
0000D587: jae 0xd590
0000D589: mov word ptr [bp - 2], 0xffdc
0000D58E: jmp 0xd595
0000D590: mov word ptr [bp - 2], 0
0000D595: mov ax, word ptr [bp - 2]
0000D598: pop di
0000D599: pop si
0000D59A: pop es
0000D59B: pop ds
0000D59C: mov sp, bp
0000D59E: pop bp
0000D59F: retf 
0000D5A0: push bp
0000D5A1: mov bp, sp
0000D5A3: sub sp, 2
0000D5A6: push ds
0000D5A7: push es
0000D5A8: push si
0000D5A9: push di
0000D5AA: mov ax, 0x1ab5
0000D5AD: mov ds, ax
0000D5AF: mov word ptr [bp - 2], 0
0000D5B4: cmp byte ptr [0x54e2], 1
0000D5B9: je 0xd5c0
0000D5BB: mov word ptr [bp - 2], 0xffdc
0000D5C0: mov ax, word ptr [bp - 2]
0000D5C3: pop di
0000D5C4: pop si
0000D5C5: pop es
0000D5C6: pop ds
0000D5C7: mov sp, bp
0000D5C9: pop bp
0000D5CA: retf 
0000D5CB: push bp
0000D5CC: mov bp, sp
0000D5CE: sub sp, 2
0000D5D1: push ds
0000D5D2: push es
0000D5D3: push si
0000D5D4: push di
0000D5D5: mov ax, 0x1ab5
0000D5D8: mov ds, ax
0000D5DA: cmp byte ptr [0x54e2], 1
0000D5DF: jne 0xd5e4
0000D5E1: jmp 0xd668
0000D5E4: push cs
0000D5E5: call 0xd552
0000D5E8: or ax, ax
0000D5EA: je 0xd5f3
0000D5EC: mov word ptr [bp - 2], 0xffdc
0000D5F1: jmp 0xd66d
0000D5F3: mov dx, word ptr [bp + 6]
0000D5F6: xor ax, ax
0000D5F8: mov word ptr [0x5abc], dx
0000D5FC: mov word ptr [0x5aba], ax
0000D5FF: mov word ptr [0x5ab6], dx
0000D603: cmp dx, 0
0000D606: jne 0xd634
0000D608: mov dx, 1
0000D60B: push dx
0000D60C: mov ax, 0x10
0000D60F: push ax
0000D610: lcall 0x79e, 0xc
0000D615: or dx, dx
0000D617: jne 0xd620
0000D619: mov word ptr [bp - 2], 0xffe6
0000D61E: jmp 0xd66d
0000D620: mov word ptr [0x5abc], dx
0000D624: mov word ptr [0x5aba], ax
0000D627: or ax, ax
0000D629: je 0xd634
0000D62B: add ax, 0x10
0000D62E: mov cl, 4
0000D630: shr ax, cl
0000D632: add dx, ax
0000D634: mov word ptr [0x5ab8], dx
0000D638: mov si, 0x5abe
0000D63B: mov cx, 4
0000D63E: mov word ptr [si], 0xffff
0000D642: mov word ptr [si + 2], 0xffff
0000D647: mov word ptr [si + 4], 0xffff
0000D64C: mov word ptr [si + 6], 0
0000D651: add si, 8
0000D654: loop 0xd63e
0000D656: mov si, 0x5ade
0000D659: mov ax, 0x4000
0000D65C: mov word ptr [si], ax
0000D65E: mov word ptr [si + 2], 0
0000D663: mov byte ptr [0x54e2], 1
0000D668: mov word ptr [bp - 2], 0
0000D66D: mov ax, word ptr [bp - 2]
0000D670: pop di
0000D671: pop si
0000D672: pop es
0000D673: pop ds
0000D674: mov sp, bp
0000D676: pop bp
0000D677: retf 2
0000D67A: push bp
0000D67B: mov bp, sp
0000D67D: sub sp, 2
0000D680: push ds
0000D681: push es
0000D682: push si
0000D683: push di
0000D684: mov ax, 0x1ab5
0000D687: mov ds, ax
0000D689: mov word ptr [bp - 2], 0
0000D68E: cmp byte ptr [0x54e2], 0
0000D693: je 0xd6b4
0000D695: cmp word ptr [0x5ab6], 0
0000D69A: jne 0xd6b4
0000D69C: push word ptr [0x5abc]
0000D6A0: push word ptr [0x5aba]
0000D6A4: lcall 0x79e, 0x5d
0000D6A9: or ax, ax
0000D6AB: je 0xd6b4
0000D6AD: mov word ptr [bp - 2], 0xffe7
0000D6B2: jmp 0xd6be
0000D6B4: mov byte ptr [0x54e2], 0
0000D6B9: mov word ptr [bp - 2], 0
0000D6BE: mov ax, word ptr [bp - 2]
0000D6C1: pop di
0000D6C2: pop si
0000D6C3: pop es
0000D6C4: pop ds
0000D6C5: mov sp, bp
0000D6C7: pop bp
0000D6C8: retf 
0000D6C9: push bp
0000D6CA: mov bp, sp
0000D6CC: sub sp, 0xe
0000D6CF: push ds
0000D6D0: push es
0000D6D1: push si
0000D6D2: push di
0000D6D3: mov ax, 0x1ab5
0000D6D6: mov ds, ax
0000D6D8: mov word ptr [bp - 4], bx
0000D6DB: mov word ptr [bp - 6], cx
0000D6DE: mov word ptr [bp - 8], dx
0000D6E1: mov ah, byte ptr [bp + 7]
0000D6E4: mov byte ptr [bp + 7], 0
0000D6E8: cmp ah, 0x42
0000D6EB: jne 0xd6f0
0000D6ED: jmp 0xd8c8
0000D6F0: cmp byte ptr [0x54e2], 1
0000D6F5: je 0xd6ff
0000D6F7: mov word ptr [bp - 2], 0xffdc
0000D6FC: jmp 0xd96a
0000D6FF: cmp ah, 0x44
0000D702: jne 0xd706
0000D704: jmp 0xd72e
0000D706: cmp ah, 0x41
0000D709: jne 0xd70e
0000D70B: jmp 0xd8bc
0000D70E: cmp ah, 0x4c
0000D711: jne 0xd716
0000D713: jmp 0xd8f2
0000D716: cmp ah, 0x43
0000D719: jne 0xd71e
0000D71B: jmp 0xd913
0000D71E: cmp ah, 0x45
0000D721: jne 0xd726
0000D723: jmp 0xd932
0000D726: mov word ptr [bp - 2], 0xffdb
0000D72B: jmp 0xd96a
0000D72E: mov ax, 0x1ab5
0000D731: mov es, ax
0000D733: mov di, 0x5abe
0000D736: mov si, 0x5ade
0000D739: mov dx, word ptr [bp - 8]
0000D73C: mov bx, word ptr [bp - 4]
0000D73F: xor ax, ax
0000D741: mov cx, 0xffff
0000D744: mov word ptr [bp - 0xa], 0xffff
0000D749: cmp word ptr es:[di], dx
0000D74C: jne 0xd76b
0000D74E: cmp word ptr es:[di + 2], bx
0000D752: jne 0xd76b
0000D754: cmp word ptr es:[di + 4], cx
0000D758: jle 0xd76b
0000D75A: mov cx, word ptr es:[di + 6]
0000D75E: mov word ptr [bp - 0xe], cx
0000D761: mov cx, word ptr es:[di + 4]
0000D765: mov word ptr [bp - 0xc], cx
0000D768: mov word ptr [bp - 0xa], ax
0000D76B: add di, 8
0000D76E: inc al
0000D770: cmp al, 4
0000D772: jb 0xd749
0000D774: mov ax, word ptr [bp - 0xa]
0000D777: cmp ax, -1
0000D77A: je 0xd7aa
0000D77C: cmp byte ptr [bp + 6], al
0000D77F: jne 0xd7aa
0000D781: mov di, 0x5abe
0000D784: mov bl, 8
0000D786: mul bl
0000D788: add di, ax
0000D78A: cmp word ptr es:[di + 4], -1
0000D78F: je 0xd7aa
0000D791: mov cx, word ptr [bp - 6]
0000D794: cmp word ptr es:[di + 4], cx
0000D798: jne 0xd79d
0000D79A: jmp 0xd8ac
0000D79D: mov word ptr es:[di + 4], cx
0000D7A1: mov word ptr es:[di + 6], 1
0000D7A7: jmp 0xd8ac
0000D7AA: mov di, 0x5abe
0000D7AD: mov al, 8
0000D7AF: mul byte ptr [bp + 6]
0000D7B2: add di, ax
0000D7B4: cmp word ptr es:[di], -1
0000D7B8: je 0xd7f4
0000D7BA: cmp word ptr es:[di + 6], 0
0000D7BF: je 0xd7f4
0000D7C1: mov word ptr [si + 4], 0
0000D7C6: mov ax, word ptr [bp + 6]
0000D7C9: mul word ptr [si]
0000D7CB: mov dx, word ptr [0x5ab8]
0000D7CF: mov word ptr [si + 8], dx
0000D7D2: mov word ptr [si + 6], ax
0000D7D5: mov dx, word ptr es:[di]
0000D7D8: mov word ptr [si + 0xa], dx
0000D7DB: mov ax, word ptr es:[di + 2]
0000D7DF: mul word ptr [si]
0000D7E1: mov word ptr [si + 0xe], dx
0000D7E4: mov word ptr [si + 0xc], ax
0000D7E7: mov ah, 0xb
0000D7E9: lcall [0x5ab2]
0000D7ED: or ax, ax
0000D7EF: jne 0xd7f4
0000D7F1: jmp 0xd8b4
0000D7F4: mov dx, word ptr [bp - 8]
0000D7F7: mov word ptr es:[di], dx
0000D7FA: mov bx, word ptr [bp - 4]
0000D7FD: mov word ptr es:[di + 2], bx
0000D801: mov cx, word ptr [bp - 6]
0000D804: mov word ptr es:[di + 4], cx
0000D808: mov word ptr es:[di + 6], cx
0000D80C: cmp byte ptr [bp - 0xa], 0xff
0000D810: jne 0xd83f
0000D812: mov word ptr [si + 4], dx
0000D815: mov ax, bx
0000D817: mul word ptr [si]
0000D819: mov word ptr [si + 8], dx
0000D81C: mov word ptr [si + 6], ax
0000D81F: mov word ptr [si + 0xa], 0
0000D824: mov ax, word ptr [bp + 6]
0000D827: mul word ptr [si]
0000D829: mov dx, word ptr [0x5ab8]
0000D82D: mov word ptr [si + 0xe], dx
0000D830: mov word ptr [si + 0xc], ax
0000D833: mov ah, 0xb
0000D835: lcall [0x5ab2]
0000D839: or ax, ax
0000D83B: jne 0xd8ac
0000D83D: jmp 0xd8b4
0000D83F: cmp word ptr [bp - 0xe], 1
0000D843: jne 0xd84c
0000D845: mov ax, word ptr [bp - 0xe]
0000D848: mov word ptr es:[di + 6], ax
0000D84C: mov bx, word ptr [0x5ab8]
0000D850: mov cx, 0x4000
0000D853: mov ds, bx
0000D855: mov ax, word ptr [bp - 0xa]
0000D858: mul cx
0000D85A: mov si, ax
0000D85C: mov es, bx
0000D85E: mov ax, word ptr [bp + 6]
0000D861: mul cx
0000D863: mov di, ax
0000D865: shr cx, 1
0000D867: rep movsw word ptr es:[di], word ptr [si]
0000D869: mov ax, 0x1ab5
0000D86C: mov es, ax
0000D86E: mov di, 0x5abe
0000D871: mov al, 8
0000D873: mul byte ptr [bp - 0xa]
0000D876: add di, ax
0000D878: mov cx, word ptr [bp - 6]
0000D87B: cmp word ptr [bp - 0xa], 0xffff
0000D880: je 0xd889
0000D882: cmp word ptr es:[di + 4], 0
0000D887: je 0xd8a0
0000D889: cmp word ptr es:[di + 4], cx
0000D88D: jne 0xd8ac
0000D88F: mov word ptr es:[di], 0xffff
0000D894: mov word ptr es:[di + 2], 0xffff
0000D89A: mov word ptr es:[di + 4], 0xffff
0000D8A0: mov word ptr es:[di + 4], 0xffff
0000D8A6: mov word ptr es:[di + 6], 0
0000D8AC: mov word ptr [bp - 2], 0
0000D8B1: jmp 0xd96a
0000D8B4: mov word ptr [bp - 2], 0xffdb
0000D8B9: jmp 0xd96a
0000D8BC: mov bx, word ptr [0x5ab8]
0000D8C0: mov word ptr [bp - 2], 0
0000D8C5: jmp 0xd96a
0000D8C8: cmp byte ptr [0x54e2], 1
0000D8CD: je 0xd8dd
0000D8CF: push cs
0000D8D0: call 0xd552
0000D8D3: or ax, ax
0000D8D5: je 0xd8dd
0000D8D7: mov word ptr [bp - 2], ax
0000D8DA: jmp 0xd96a
0000D8DD: mov ah, 8
0000D8DF: lcall [0x5ab2]
0000D8E3: mov cl, 4
0000D8E5: shr ax, cl
0000D8E7: shr dx, cl
0000D8E9: mov bx, ax
0000D8EB: mov word ptr [bp - 2], 0
0000D8F0: jmp 0xd96a
0000D8F2: mov dx, word ptr [bp - 8]
0000D8F5: mov ah, 0xe
0000D8F7: lcall [0x5ab2]
0000D8FB: or ax, ax
0000D8FD: je 0xd90c
0000D8FF: mov cl, 4
0000D901: shr dx, cl
0000D903: mov bx, dx
0000D905: mov word ptr [bp - 2], 0
0000D90A: jmp 0xd96a
0000D90C: mov word ptr [bp - 2], 0xffdb
0000D911: jmp 0xd96a
0000D913: mov dx, word ptr [bp - 4]
0000D916: mov cl, 4
0000D918: shl dx, cl
0000D91A: mov ah, 9
0000D91C: lcall [0x5ab2]
0000D920: or ax, ax
0000D922: je 0xd92b
0000D924: mov word ptr [bp - 2], 0
0000D929: jmp 0xd96a
0000D92B: mov word ptr [bp - 2], 0xffda
0000D930: jmp 0xd96a
0000D932: mov si, 0x5abe
0000D935: mov dx, word ptr [bp - 8]
0000D938: mov ax, 0xffff
0000D93B: mov cx, 4
0000D93E: cmp word ptr [si], dx
0000D940: jne 0xd94c
0000D942: mov word ptr [si], ax
0000D944: mov word ptr [si + 2], ax
0000D947: mov word ptr [si + 4], 0
0000D94C: add si, 8
0000D94F: loop 0xd93e
0000D951: mov dx, word ptr [bp - 8]
0000D954: mov ah, 0xa
0000D956: lcall [0x5ab2]
0000D95A: or ax, ax
0000D95C: je 0xd965
0000D95E: mov word ptr [bp - 2], 0
0000D963: jmp 0xd96a
0000D965: mov word ptr [bp - 2], 0xffdb
0000D96A: mov ax, word ptr [bp - 2]
0000D96D: pop di
0000D96E: pop si
0000D96F: pop es
0000D970: pop ds
0000D971: mov sp, bp
0000D973: pop bp
0000D974: retf 2
0000D977: add byte ptr [di - 0x75], dl
0000D97A: in al, dx
0000D97B: sub sp, 0x28
0000D97E: push ds
0000D97F: push es
0000D980: push si
0000D981: push di
0000D982: mov ax, 0x1ab5
0000D985: mov ds, ax
0000D987: cmp byte ptr [0x6d35], 1
0000D98C: je 0xd992
0000D98E: push cs
0000D98F: call 0xda6e
0000D992: mov si, 0x6cda
0000D995: cmp word ptr [si + 0x3c], 1
0000D999: jne 0xd9c7
0000D99B: push word ptr [bp + 0xc]
0000D99E: lcall 0x1214, 0x21c
0000D9A3: mov word ptr [bp + 0xc], ax
0000D9A6: push word ptr [bp + 0xa]
0000D9A9: lcall 0x1214, 0x26c
0000D9AE: mov word ptr [bp + 0xa], ax
0000D9B1: push word ptr [bp + 8]
0000D9B4: lcall 0x1214, 0x21c
0000D9B9: mov word ptr [bp + 8], ax
0000D9BC: push word ptr [bp + 6]
0000D9BF: lcall 0x1214, 0x26c
0000D9C4: mov word ptr [bp + 6], ax
0000D9C7: mov ax, word ptr [si + 0x30]
0000D9CA: mov bx, ax
0000D9CC: or bx, word ptr [si + 0x32]
0000D9CF: je 0xd9e0
0000D9D1: mov bx, word ptr [si + 0x32]
0000D9D4: add word ptr [bp + 0xc], ax
0000D9D7: add word ptr [bp + 0xa], bx
0000D9DA: add word ptr [bp + 8], ax
0000D9DD: add word ptr [bp + 6], bx
0000D9E0: cmp word ptr [si + 0x18], 1
0000D9E4: jne 0xda0c
0000D9E6: push word ptr [bp + 0xc]
0000D9E9: push word ptr [bp + 0xa]
0000D9EC: push word ptr [bp + 8]
0000D9EF: push word ptr [bp + 6]
0000D9F2: lcall 0xc6c, 0x220
0000D9F7: jae 0xda00
0000D9F9: mov word ptr [bp - 2], 0
0000D9FE: jmp 0xda61
0000DA00: mov word ptr [bp + 0xc], ax
0000DA03: mov word ptr [bp + 0xa], bx
0000DA06: mov word ptr [bp + 8], cx
0000DA09: mov word ptr [bp + 6], dx
0000DA0C: mov ax, word ptr [si + 0xe]
0000DA0F: mov word ptr [bp - 0x10], ax
0000DA12: mov cx, word ptr [bp + 6]
0000DA15: sub cx, word ptr [bp + 0xa]
0000DA18: jns 0xda25
0000DA1A: neg cx
0000DA1C: mov ax, word ptr [bp + 6]
0000DA1F: xchg word ptr [bp + 0xa], ax
0000DA22: mov word ptr [bp + 6], ax
0000DA25: inc cx
0000DA26: mov word ptr [bp - 0xa], cx
0000DA29: cmp word ptr [si], 1
0000DA2C: jne 0xda36
0000DA2E: mov dx, word ptr [si + 2]
0000DA31: mov si, 0x6e87
0000DA34: jmp 0xda4e
0000DA36: mov si, 0x6d99
0000DA39: mov dx, word ptr [0x43b3]
0000DA3D: cmp dx, 0
0000DA40: jb 0xda47
0000DA42: cmp dx, 0x10
0000DA45: jbe 0xda4e
0000DA47: mov word ptr [bp - 2], 0xfffa
0000DA4C: jmp 0xda61
0000DA4E: mov ax, 0xe
0000DA51: mul dx
0000DA53: add si, ax
0000DA55: mov ax, word ptr [si + 2]
0000DA58: mov word ptr [bp - 8], ax
0000DA5B: ljmp [si + 0xa]
0000DA5E: mov word ptr [bp - 2], ax
0000DA61: mov ax, word ptr [bp - 2]
0000DA64: pop di
0000DA65: pop si
0000DA66: pop es
0000DA67: pop ds
0000DA68: mov sp, bp
0000DA6A: pop bp
0000DA6B: retf 8
0000DA6E: mov bx, 0x6d99
0000DA71: mov word ptr [bx + 0xa], 0x275
0000DA76: mov word ptr [bx + 0xc], 0xbd7
0000DA7B: add bx, 0xe
0000DA7E: mov word ptr [bx + 0xa], 0x335
0000DA83: mov word ptr [bx + 0xc], 0xbd7
0000DA88: add bx, 0xe
0000DA8B: mov word ptr [bx + 0xa], 0x4cd
0000DA90: mov word ptr [bx + 0xc], 0xbd7
0000DA95: add bx, 0xe
0000DA98: mov word ptr [bx + 0xa], 0x4cd
0000DA9D: mov word ptr [bx + 0xc], 0xbd7
0000DAA2: add bx, 0xe
0000DAA5: mov word ptr [bx + 0xa], 0x576
0000DAAA: mov word ptr [bx + 0xc], 0xbd7
0000DAAF: add bx, 0xe
0000DAB2: mov word ptr [bx + 0xa], 0x4cd
0000DAB7: mov word ptr [bx + 0xc], 0xbd7
0000DABC: add bx, 0xe
0000DABF: mov word ptr [bx + 0xa], 0x576
0000DAC4: mov word ptr [bx + 0xc], 0xbd7
0000DAC9: add bx, 0xe
0000DACC: mov word ptr [bx + 0xa], 0x4cd
0000DAD1: mov word ptr [bx + 0xc], 0xbd7
0000DAD6: add bx, 0xe
0000DAD9: mov word ptr [bx + 0xa], 0x61a
0000DADE: mov word ptr [bx + 0xc], 0xbd7
0000DAE3: add bx, 0xe
0000DAE6: mov word ptr [bx + 0xa], 0x3e9
0000DAEB: mov word ptr [bx + 0xc], 0xbd7
0000DAF0: add bx, 0xe
0000DAF3: mov word ptr [bx + 0xa], 0x677
0000DAF8: mov word ptr [bx + 0xc], 0xbd7
0000DAFD: add bx, 0xe
0000DB00: mov word ptr [bx + 0xa], 0x4cd
0000DB05: mov word ptr [bx + 0xc], 0xbd7
0000DB0A: add bx, 0xe
0000DB0D: mov word ptr [bx + 0xa], 0x677
0000DB12: mov word ptr [bx + 0xc], 0xbd7
0000DB17: add bx, 0xe
0000DB1A: mov word ptr [bx + 0xa], 0x677
0000DB1F: mov word ptr [bx + 0xc], 0xbd7
0000DB24: add bx, 0xe
0000DB27: mov word ptr [bx + 0xa], 0x4cd
0000DB2C: mov word ptr [bx + 0xc], 0xbd7
0000DB31: add bx, 0xe
0000DB34: mov word ptr [bx + 0xa], 0x677
0000DB39: mov word ptr [bx + 0xc], 0xbd7
0000DB3E: add bx, 0xe
0000DB41: mov word ptr [bx + 0xa], 0x677
0000DB46: mov word ptr [bx + 0xc], 0xbd7
0000DB4B: add bx, 0xe
0000DB4E: mov bx, 0x6e87
0000DB51: mov word ptr [bx + 0xa], 0x703
0000DB56: mov word ptr [bx + 0xc], 0xbd7
0000DB5B: add bx, 0xe
0000DB5E: mov word ptr [bx + 0xa], 0x703
0000DB63: mov word ptr [bx + 0xc], 0xbd7
0000DB68: add bx, 0xe
0000DB6B: mov word ptr [bx + 0xa], 0x703
0000DB70: mov word ptr [bx + 0xc], 0xbd7
0000DB75: add bx, 0xe
0000DB78: mov word ptr [bx + 0xa], 0x703
0000DB7D: mov word ptr [bx + 0xc], 0xbd7
0000DB82: add bx, 0xe
0000DB85: mov byte ptr [0x6d35], 1
0000DB8A: retf 
0000DB8B: mov si, 0x6cda
0000DB8E: mov bx, word ptr [si + 0xc]
0000DB91: mov word ptr [bp - 0x12], bx
0000DB94: mov bx, word ptr [si + 0xe]
0000DB97: mov word ptr [si + 0xc], bx
0000DB9A: mov bx, word ptr [si + 0x28]
0000DB9D: mov word ptr [bp - 0x14], bx
0000DBA0: mov bx, word ptr [si + 0x2a]
0000DBA3: mov word ptr [bp - 0x16], bx
0000DBA6: mov word ptr [si + 0x2a], 1
0000DBAB: mov di, word ptr [bp + 0xa]
0000DBAE: push word ptr [bp + 0xc]
0000DBB1: push di
0000DBB2: push word ptr [bp + 8]
0000DBB5: push di
0000DBB6: lcall 0xd9f, 0x178
0000DBBB: inc di
0000DBBC: cmp di, word ptr [bp + 6]
0000DBBF: jle 0xdbae
0000DBC1: mov ax, word ptr [bp - 0x12]
0000DBC4: mov word ptr [si + 0xc], ax
0000DBC7: mov ax, word ptr [bp - 0x14]
0000DBCA: mov word ptr [si + 0x28], ax
0000DBCD: mov ax, word ptr [bp - 0x16]
0000DBD0: mov word ptr [si + 0x2a], ax
0000DBD3: mov word ptr [bp - 2], 0
0000DBD8: mov ax, word ptr [bp - 2]
0000DBDB: pop di
0000DBDC: pop si
0000DBDD: pop es
0000DBDE: pop ds
0000DBDF: mov sp, bp
0000DBE1: pop bp
0000DBE2: retf 8
0000DBE5: mov byte ptr [0x5aee], 0
0000DBEA: mov byte ptr [0x5aef], 0x55
0000DBEF: mov byte ptr [0x5af0], 0xaa
0000DBF4: mov byte ptr [0x5af1], 0xff
0000DBF9: mov si, 0x2000
0000DBFC: mov word ptr [bp - 4], 0xe050
0000DC01: mov cx, word ptr [bp + 8]
0000DC04: sub cx, word ptr [bp + 0xc]
0000DC07: jns 0xdc14
0000DC09: neg cx
0000DC0B: mov bx, word ptr [bp + 8]
0000DC0E: xchg word ptr [bp + 0xc], bx
0000DC11: mov word ptr [bp + 8], bx
0000DC14: mov ax, word ptr [bp + 0xa]
0000DC17: mov bx, word ptr [bp + 0xc]
0000DC1A: lcall 0x885, 0
0000DC1F: mov di, bx
0000DC21: mov dh, ah
0000DC23: not dh
0000DC25: mov dl, 0xff
0000DC27: shl dh, cl
0000DC29: not dh
0000DC2B: mov cx, word ptr [bp + 8]
0000DC2E: and cl, 3
0000DC31: xor cl, 3
0000DC34: shl cl, 1
0000DC36: shl dl, cl
0000DC38: mov ax, word ptr [bp + 8]
0000DC3B: mov bx, word ptr [bp + 0xc]
0000DC3E: mov cl, 2
0000DC40: shr ax, cl
0000DC42: shr bx, cl
0000DC44: mov cx, ax
0000DC46: sub cx, bx
0000DC48: mov bx, 0x5aee
0000DC4B: mov al, byte ptr [bp - 0x10]
0000DC4E: and al, 3
0000DC50: xlatb 
0000DC51: mov bx, word ptr [bp - 0xa]
0000DC54: test si, di
0000DC56: je 0xdc5b
0000DC58: xchg word ptr [bp - 4], si
0000DC5B: push di
0000DC5C: push dx
0000DC5D: push cx
0000DC5E: or dh, dh
0000DC60: js 0xdc78
0000DC62: or cx, cx
0000DC64: jne 0xdc6a
0000DC66: and dl, dh
0000DC68: jmp 0xdc7a
0000DC6A: mov ah, al
0000DC6C: and ah, dh
0000DC6E: not dh
0000DC70: and byte ptr es:[di], dh
0000DC73: or byte ptr es:[di], ah
0000DC76: inc di
0000DC77: dec cx
0000DC78: rep stosb byte ptr es:[di], al
0000DC7A: mov ah, al
0000DC7C: and ah, dl
0000DC7E: not dl
0000DC80: and byte ptr es:[di], dl
0000DC83: or byte ptr es:[di], ah
0000DC86: pop cx
0000DC87: pop dx
0000DC88: pop di
0000DC89: dec bx
0000DC8A: je 0xdc93
0000DC8C: add di, si
0000DC8E: xchg word ptr [bp - 4], si
0000DC91: jmp 0xdc5b
0000DC93: mov word ptr [bp - 2], 0
0000DC98: mov ax, word ptr [bp - 2]
0000DC9B: pop di
0000DC9C: pop si
0000DC9D: pop es
0000DC9E: pop ds
0000DC9F: mov sp, bp
0000DCA1: pop bp
0000DCA2: retf 8
0000DCA5: mov byte ptr [0x5aee], 0
0000DCAA: mov byte ptr [0x5aef], 0xff
0000DCAF: mov si, 0x2000
0000DCB2: mov word ptr [bp - 4], 0xe050
0000DCB7: mov cx, word ptr [bp + 8]
0000DCBA: sub cx, word ptr [bp + 0xc]
0000DCBD: jns 0xdcca
0000DCBF: neg cx
0000DCC1: mov bx, word ptr [bp + 8]
0000DCC4: xchg word ptr [bp + 0xc], bx
0000DCC7: mov word ptr [bp + 8], bx
0000DCCA: mov ax, word ptr [bp + 0xa]
0000DCCD: mov bx, word ptr [bp + 0xc]
0000DCD0: lcall 0x885, 0x24
0000DCD5: mov di, bx
0000DCD7: mov dh, ah
0000DCD9: not dh
0000DCDB: mov dl, 0xff
0000DCDD: shl dh, cl
0000DCDF: not dh
0000DCE1: mov cx, word ptr [bp + 8]
0000DCE4: and cl, 7
0000DCE7: xor cl, 7
0000DCEA: shl dl, cl
0000DCEC: mov ax, word ptr [bp + 8]
0000DCEF: mov bx, word ptr [bp + 0xc]
0000DCF2: mov cl, 3
0000DCF4: shr ax, cl
0000DCF6: shr bx, cl
0000DCF8: mov cx, ax
0000DCFA: sub cx, bx
0000DCFC: mov bx, 0x5aee
0000DCFF: mov al, byte ptr [bp - 0x10]
0000DD02: and al, 1
0000DD04: xlatb 
0000DD05: mov bx, word ptr [bp - 0xa]
0000DD08: test si, di
0000DD0A: je 0xdd0f
0000DD0C: xchg word ptr [bp - 4], si
0000DD0F: push di
0000DD10: push dx
0000DD11: push cx
0000DD12: or dh, dh
0000DD14: js 0xdd2c
0000DD16: or cx, cx
0000DD18: jne 0xdd1e
0000DD1A: and dl, dh
0000DD1C: jmp 0xdd2e
0000DD1E: mov ah, al
0000DD20: and ah, dh
0000DD22: not dh
0000DD24: and byte ptr es:[di], dh
0000DD27: or byte ptr es:[di], ah
0000DD2A: inc di
0000DD2B: dec cx
0000DD2C: rep stosb byte ptr es:[di], al
0000DD2E: mov ah, al
0000DD30: and ah, dl
0000DD32: not dl
0000DD34: and byte ptr es:[di], dl
0000DD37: or byte ptr es:[di], ah
0000DD3A: pop cx
0000DD3B: pop dx
0000DD3C: pop di
0000DD3D: dec bx
0000DD3E: je 0xdd47
0000DD40: add di, si
0000DD42: xchg word ptr [bp - 4], si
0000DD45: jmp 0xdd0f
0000DD47: mov word ptr [bp - 2], 0
0000DD4C: mov ax, word ptr [bp - 2]
0000DD4F: pop di
0000DD50: pop si
0000DD51: pop es
0000DD52: pop ds
0000DD53: mov sp, bp
0000DD55: pop bp
0000DD56: retf 8
0000DD59: mov byte ptr [0x5aee], 0
0000DD5E: mov byte ptr [0x5aef], 0xff
0000DD63: mov si, 0x6cda
0000DD66: mov ax, word ptr [si + 0xa]
0000DD69: mov word ptr [bp - 0xc], ax
0000DD6C: mov si, 0x2000
0000DD6F: mov word ptr [bp - 4], 0x805a
0000DD74: mov cx, word ptr [bp + 8]
0000DD77: sub cx, word ptr [bp + 0xc]
0000DD7A: jns 0xdd87
0000DD7C: neg cx
0000DD7E: mov bx, word ptr [bp + 8]
0000DD81: xchg word ptr [bp + 0xc], bx
0000DD84: mov word ptr [bp + 8], bx
0000DD87: mov ax, word ptr [bp + 0xa]
0000DD8A: mov bx, word ptr [bp + 0xc]
0000DD8D: lcall 0x885, 0x4a
0000DD92: add bx, word ptr [bp - 0xc]
0000DD95: mov di, bx
0000DD97: mov dh, ah
0000DD99: not dh
0000DD9B: mov dl, 0xff
0000DD9D: shl dh, cl
0000DD9F: not dh
0000DDA1: mov cx, word ptr [bp + 8]
0000DDA4: and cl, 7
0000DDA7: xor cl, 7
0000DDAA: shl dl, cl
0000DDAC: mov ax, word ptr [bp + 8]
0000DDAF: mov bx, word ptr [bp + 0xc]
0000DDB2: mov cl, 3
0000DDB4: shr ax, cl
0000DDB6: shr bx, cl
0000DDB8: mov cx, ax
0000DDBA: sub cx, bx
0000DDBC: mov bx, 0x5aee
0000DDBF: mov al, byte ptr [bp - 0x10]
0000DDC2: and al, 1
0000DDC4: xlatb 
0000DDC5: mov bx, word ptr [bp - 0xa]
0000DDC8: push di
0000DDC9: push dx
0000DDCA: push cx
0000DDCB: or dh, dh
0000DDCD: js 0xdde5
0000DDCF: or cx, cx
0000DDD1: jne 0xddd7
0000DDD3: and dl, dh
0000DDD5: jmp 0xdde7
0000DDD7: mov ah, al
0000DDD9: and ah, dh
0000DDDB: not dh
0000DDDD: and byte ptr es:[di], dh
0000DDE0: or byte ptr es:[di], ah
0000DDE3: inc di
0000DDE4: dec cx
0000DDE5: rep stosb byte ptr es:[di], al
0000DDE7: mov ah, al
0000DDE9: and ah, dl
0000DDEB: not dl
0000DDED: and byte ptr es:[di], dl
0000DDF0: or byte ptr es:[di], ah
0000DDF3: pop cx
0000DDF4: pop dx
0000DDF5: pop di
0000DDF6: add di, si
0000DDF8: jns 0xddfd
0000DDFA: add di, word ptr [bp - 4]
0000DDFD: dec bx
0000DDFE: je 0xde02
0000DE00: jmp 0xddc8
0000DE02: mov word ptr [bp - 2], 0
0000DE07: mov ax, word ptr [bp - 2]
0000DE0A: pop di
0000DE0B: pop si
0000DE0C: pop es
0000DE0D: pop ds
0000DE0E: mov sp, bp
0000DE10: pop bp
0000DE11: retf 8
0000DE14: push si
0000DE15: mov cl, bl
0000DE17: push dx
0000DE18: mov dx, word ptr [bp - 8]
0000DE1B: mul dx
0000DE1D: pop dx
0000DE1E: shr bx, 1
0000DE20: shr bx, 1
0000DE22: shr bx, 1
0000DE24: add bx, ax
0000DE26: mov si, 0x6cda
0000DE29: add bx, word ptr [si + 0xa]
0000DE2C: push dx
0000DE2D: mov dx, 0xa000
0000DE30: mov es, dx
0000DE32: pop dx
0000DE33: and cl, 7
0000DE36: xor cl, 7
0000DE39: mov ah, 1
0000DE3B: pop si
0000DE3C: retf 
0000DE3D: mov dx, 0x3ce
0000DE40: mov ah, byte ptr [bp - 0x10]
0000DE43: xor al, al
0000DE45: out dx, ax
0000DE46: mov ax, 0xf01
0000DE49: out dx, ax
0000DE4A: mov ah, 0
0000DE4C: mov al, 3
0000DE4E: out dx, ax
0000DE4F: mov cx, word ptr [bp + 8]
0000DE52: sub cx, word ptr [bp + 0xc]
0000DE55: jns 0xde62
0000DE57: neg cx
0000DE59: mov bx, word ptr [bp + 8]
0000DE5C: xchg word ptr [bp + 0xc], bx
0000DE5F: mov word ptr [bp + 8], bx
0000DE62: mov ax, word ptr [bp + 0xa]
0000DE65: mov bx, word ptr [bp + 0xc]
0000DE68: push cs
0000DE69: call 0xde14
0000DE6C: mov di, bx
0000DE6E: mov dh, ah
0000DE70: not dh
0000DE72: shl dh, cl
0000DE74: not dh
0000DE76: mov cx, word ptr [bp + 8]
0000DE79: and cl, 7
0000DE7C: xor cl, 7
0000DE7F: mov dl, 0xff
0000DE81: shl dl, cl
0000DE83: mov ax, word ptr [bp + 8]
0000DE86: mov bx, word ptr [bp + 0xc]
0000DE89: mov cl, 3
0000DE8B: shr ax, cl
0000DE8D: shr bx, cl
0000DE8F: mov cx, ax
0000DE91: sub cx, bx
0000DE93: mov bx, dx
0000DE95: mov dx, 0x3ce
0000DE98: mov al, 8
0000DE9A: push es
0000DE9B: pop ds
0000DE9C: mov si, di
0000DE9E: push di
0000DE9F: push cx
0000DEA0: or bh, bh
0000DEA2: js 0xdeb1
0000DEA4: or cx, cx
0000DEA6: jne 0xdeac
0000DEA8: and bl, bh
0000DEAA: jmp 0xdeb6
0000DEAC: mov ah, bh
0000DEAE: out dx, ax
0000DEAF: movsb byte ptr es:[di], byte ptr [si]
0000DEB0: dec cx
0000DEB1: mov ah, 0xff
0000DEB3: out dx, ax
0000DEB4: rep movsb byte ptr es:[di], byte ptr [si]
0000DEB6: mov ah, bl
0000DEB8: out dx, ax
0000DEB9: movsb byte ptr es:[di], byte ptr [si]
0000DEBA: pop cx
0000DEBB: pop di
0000DEBC: dec word ptr [bp - 0xa]
0000DEBF: je 0xdec8
0000DEC1: add di, word ptr [bp - 8]
0000DEC4: mov si, di
0000DEC6: jmp 0xde9e
0000DEC8: xor ax, ax
0000DECA: out dx, ax
0000DECB: inc ax
0000DECC: out dx, ax
0000DECD: mov al, 3
0000DECF: out dx, ax
0000DED0: mov ax, 0xff08
0000DED3: out dx, ax
0000DED4: mov word ptr [bp - 2], 0
0000DED9: mov ax, word ptr [bp - 2]
0000DEDC: pop di
0000DEDD: pop si
0000DEDE: pop es
0000DEDF: pop ds
0000DEE0: mov sp, bp
0000DEE2: pop bp
0000DEE3: retf 8
0000DEE6: mov byte ptr [0x5aee], 0
0000DEEB: mov byte ptr [0x5aef], 0xff
0000DEF0: mov si, word ptr [bp - 8]
0000DEF3: mov cx, word ptr [bp + 8]
0000DEF6: sub cx, word ptr [bp + 0xc]
0000DEF9: jns 0xdf06
0000DEFB: neg cx
0000DEFD: mov bx, word ptr [bp + 8]
0000DF00: xchg word ptr [bp + 0xc], bx
0000DF03: mov word ptr [bp + 8], bx
0000DF06: mov ax, word ptr [bp + 0xa]
0000DF09: mov bx, word ptr [bp + 0xc]
0000DF0C: push cs
0000DF0D: call 0xde14
0000DF10: mov di, bx
0000DF12: mov dh, ah
0000DF14: not dh
0000DF16: mov dl, 0xff
0000DF18: shl dh, cl
0000DF1A: not dh
0000DF1C: mov cx, word ptr [bp + 8]
0000DF1F: and cl, 7
0000DF22: xor cl, 7
0000DF25: shl dl, cl
0000DF27: mov ax, word ptr [bp + 8]
0000DF2A: mov bx, word ptr [bp + 0xc]
0000DF2D: mov cl, 3
0000DF2F: shr ax, cl
0000DF31: shr bx, cl
0000DF33: mov cx, ax
0000DF35: sub cx, bx
0000DF37: mov bx, 0x5aee
0000DF3A: mov al, byte ptr [bp - 0x10]
0000DF3D: and al, 1
0000DF3F: xlatb 
0000DF40: mov bx, word ptr [bp - 0xa]
0000DF43: push di
0000DF44: push dx
0000DF45: push cx
0000DF46: or dh, dh
0000DF48: js 0xdf60
0000DF4A: or cx, cx
0000DF4C: jne 0xdf52
0000DF4E: and dl, dh
0000DF50: jmp 0xdf62
0000DF52: mov ah, al
0000DF54: and ah, dh
0000DF56: not dh
0000DF58: and byte ptr es:[di], dh
0000DF5B: or byte ptr es:[di], ah
0000DF5E: inc di
0000DF5F: dec cx
0000DF60: rep stosb byte ptr es:[di], al
0000DF62: mov ah, al
0000DF64: and ah, dl
0000DF66: not dl
0000DF68: and byte ptr es:[di], dl
0000DF6B: or byte ptr es:[di], ah
0000DF6E: pop cx
0000DF6F: pop dx
0000DF70: pop di
0000DF71: dec bx
0000DF72: je 0xdf78
0000DF74: add di, si
0000DF76: jmp 0xdf43
0000DF78: mov word ptr [bp - 2], 0
0000DF7D: mov ax, word ptr [bp - 2]
0000DF80: pop di
0000DF81: pop si
0000DF82: pop es
0000DF83: pop ds
0000DF84: mov sp, bp
0000DF86: pop bp
0000DF87: retf 8
0000DF8A: mov si, word ptr [bp - 8]
0000DF8D: mov cx, word ptr [bp + 8]
0000DF90: sub cx, word ptr [bp + 0xc]
0000DF93: jns 0xdfa0
0000DF95: neg cx
0000DF97: mov bx, word ptr [bp + 8]
0000DF9A: xchg word ptr [bp + 0xc], bx
0000DF9D: mov word ptr [bp + 8], bx
0000DFA0: push cx
0000DFA1: mov ax, word ptr [bp + 0xa]
0000DFA4: mov bx, word ptr [bp + 0xc]
0000DFA7: lcall 0x885, 0xaa
0000DFAC: mov di, bx
0000DFAE: pop cx
0000DFAF: inc cx
0000DFB0: sub si, cx
0000DFB2: mov al, byte ptr [bp - 0x10]
0000DFB5: mov bx, word ptr [bp - 0xa]
0000DFB8: push cx
0000DFB9: rep stosb byte ptr es:[di], al
0000DFBB: pop cx
0000DFBC: dec bx
0000DFBD: je 0xdfc3
0000DFBF: add di, si
0000DFC1: jmp 0xdfb8
0000DFC3: mov word ptr [bp - 2], 0
0000DFC8: mov ax, word ptr [bp - 2]
0000DFCB: pop di
0000DFCC: pop si
0000DFCD: pop es
0000DFCE: pop ds
0000DFCF: mov sp, bp
0000DFD1: pop bp
0000DFD2: retf 8
0000DFD5: mov dx, word ptr [bp - 8]
0000DFD8: mul dx
0000DFDA: add bx, ax
0000DFDC: adc dx, 0
0000DFDF: push dx
0000DFE0: mov dx, 0xa000
0000DFE3: mov es, dx
0000DFE5: pop dx
0000DFE6: retf 
0000DFE7: mov si, word ptr [bp - 8]
0000DFEA: mov cx, word ptr [bp + 8]
0000DFED: sub cx, word ptr [bp + 0xc]
0000DFF0: jns 0xdffd
0000DFF2: neg cx
0000DFF4: mov bx, word ptr [bp + 8]
0000DFF7: xchg word ptr [bp + 0xc], bx
0000DFFA: mov word ptr [bp + 8], bx
0000DFFD: push cx
0000DFFE: mov ax, word ptr [bp + 0xa]
0000E001: mov bx, word ptr [bp + 0xc]
0000E004: push cs
0000E005: call 0xdfd5
0000E008: mov di, bx
0000E00A: xor dh, dh
0000E00C: mov word ptr [bp - 6], dx
0000E00F: push dx
0000E010: push dx
0000E011: lcall 0xa36, 0xe
0000E016: pop cx
0000E017: inc cx
0000E018: sub si, cx
0000E01A: mov dl, byte ptr [bp - 0x10]
0000E01D: mov bx, word ptr [bp - 0xa]
0000E020: push cx
0000E021: cmp di, 0xfbff
0000E025: jb 0xe03f
0000E027: mov byte ptr es:[di], dl
0000E02A: inc di
0000E02B: jne 0xe03b
0000E02D: inc byte ptr [bp - 6]
0000E030: push word ptr [bp - 6]
0000E033: push word ptr [bp - 6]
0000E036: lcall 0xa36, 0x63
0000E03B: loop 0xe027
0000E03D: jmp 0xe043
0000E03F: mov al, dl
0000E041: rep stosb byte ptr es:[di], al
0000E043: pop cx
0000E044: dec bx
0000E045: je 0xe05b
0000E047: add di, si
0000E049: jae 0xe020
0000E04B: inc byte ptr [bp - 6]
0000E04E: push word ptr [bp - 6]
0000E051: push word ptr [bp - 6]
0000E054: lcall 0xa36, 0x63
0000E059: jmp 0xe020
0000E05B: push ax
0000E05C: lcall 0xa36, 0x1a5
0000E061: mov word ptr [bp - 2], 0
0000E066: mov ax, word ptr [bp - 2]
0000E069: pop di
0000E06A: pop si
0000E06B: pop es
0000E06C: pop ds
0000E06D: mov sp, bp
0000E06F: pop bp
0000E070: retf 8
0000E073: mov si, 0x6cda
0000E076: push dx
0000E077: mov dx, word ptr [si + 6]
0000E07A: mov es, dx
0000E07C: pop dx
0000E07D: mov di, word ptr [si + 4]
0000E080: mov ax, word ptr es:[di + 0x14]
0000E084: mov word ptr [bp - 8], ax
0000E087: mov bx, 0xffff
0000E08A: sub bx, ax
0000E08C: mov word ptr [bp - 0x1c], bx
0000E08F: mov al, byte ptr es:[di + 0x12]
0000E093: xor ah, ah
0000E095: cmp al, 1
0000E097: je 0xe09b
0000E099: mov al, 4
0000E09B: mov word ptr [bp - 0x1a], ax
0000E09E: mov ax, word ptr [bp + 0xc]
0000E0A1: cmp ax, word ptr es:[di + 0xa]
0000E0A5: jbe 0xe0af
0000E0A7: mov word ptr [bp - 2], 0xffe5
0000E0AC: jmp 0xe2be
0000E0AF: mov ax, word ptr [bp + 8]
0000E0B2: sub ax, word ptr [bp + 0xc]
0000E0B5: inc ax
0000E0B6: mov bx, word ptr es:[di + 0xa]
0000E0BA: sub bx, word ptr es:[di + 6]
0000E0BE: inc bx
0000E0BF: cmp ax, bx
0000E0C1: jbe 0xe0c5
0000E0C3: mov ax, bx
0000E0C5: mov word ptr [bp - 0x1e], ax
0000E0C8: add ax, word ptr [bp + 0xc]
0000E0CB: dec ax
0000E0CC: mov word ptr [bp + 8], ax
0000E0CF: mov ax, word ptr [bp + 0xc]
0000E0D2: mov bl, byte ptr es:[di + 0x13]
0000E0D6: xor bh, bh
0000E0D8: mul bx
0000E0DA: mov bx, 8
0000E0DD: div bx
0000E0DF: mov cx, dx
0000E0E1: mov ch, 0xff
0000E0E3: shr ch, cl
0000E0E5: mov cl, ch
0000E0E7: xor ch, ch
0000E0E9: mov word ptr [bp - 0x24], cx
0000E0EC: push dx
0000E0ED: mov ax, word ptr [bp - 0x1e]
0000E0F0: mov bl, byte ptr es:[di + 0x13]
0000E0F4: xor bh, bh
0000E0F6: mul bx
0000E0F8: pop bx
0000E0F9: add ax, bx
0000E0FB: adc dx, 0
0000E0FE: mov bx, 8
0000E101: div bx
0000E103: or dx, dx
0000E105: je 0xe108
0000E107: inc ax
0000E108: mov word ptr [bp - 0x18], ax
0000E10B: mov ax, word ptr [bp + 8]
0000E10E: mov bl, byte ptr es:[di + 0x13]
0000E112: xor bh, bh
0000E114: mul bx
0000E116: mov bx, 8
0000E119: div bx
0000E11B: add dl, byte ptr es:[di + 0x13]
0000E11F: and dl, 7
0000E122: mov cl, dl
0000E124: xor cl, 7
0000E127: inc cl
0000E129: and cl, 7
0000E12C: mov ch, 0xff
0000E12E: shl ch, cl
0000E130: xor cl, cl
0000E132: or word ptr [bp - 0x24], cx
0000E135: mov ax, word ptr [bp + 0xa]
0000E138: cmp ax, word ptr es:[di + 0xc]
0000E13C: jbe 0xe146
0000E13E: mov word ptr [bp - 2], 0xffe5
0000E143: jmp 0xe2be
0000E146: mov ax, word ptr [bp + 6]
0000E149: sub ax, word ptr [bp + 0xa]
0000E14C: inc ax
0000E14D: mov bx, word ptr es:[di + 0xc]
0000E151: sub bx, word ptr es:[di + 8]
0000E155: inc bx
0000E156: cmp ax, bx
0000E158: jbe 0xe15c
0000E15A: mov ax, bx
0000E15C: mov bx, word ptr [bp - 0x1a]
0000E15F: mul bx
0000E161: mov word ptr [bp - 0xa], ax
0000E164: mov ax, word ptr [bp - 0x10]
0000E167: mov byte ptr [bp - 0x28], 0
0000E16B: mov byte ptr [bp - 0x27], 0x55
0000E16F: mov byte ptr [bp - 0x26], 0xaa
0000E173: mov byte ptr [bp - 0x25], 0xff
0000E177: cmp word ptr [bp - 0x1a], 1
0000E17B: jne 0xe1a9
0000E17D: cmp byte ptr es:[di + 0x13], 1
0000E182: jne 0xe190
0000E184: test ax, 1
0000E187: je 0xe1bc
0000E189: mov al, 0xff
0000E18B: mov byte ptr [bp - 0x28], al
0000E18E: jmp 0xe1bc
0000E190: cmp byte ptr es:[di + 0x13], 2
0000E195: jne 0xe1a4
0000E197: and ax, 3
0000E19A: mov si, ax
0000E19C: mov al, byte ptr [bp + si - 0x28]
0000E19F: mov byte ptr [bp - 0x28], al
0000E1A2: jmp 0xe1bc
0000E1A4: mov byte ptr [bp - 0x28], al
0000E1A7: jmp 0xe1bc
0000E1A9: xor si, si
0000E1AB: mov byte ptr [bp + si - 0x28], 0xff
0000E1AF: rcr ax, 1
0000E1B1: jb 0xe1b6
0000E1B3: not byte ptr [bp + si - 0x28]
0000E1B6: inc si
0000E1B7: cmp si, word ptr [bp - 0x1a]
0000E1BA: jb 0xe1ab
0000E1BC: push es
0000E1BD: push di
0000E1BE: push word ptr [bp + 0xc]
0000E1C1: push word ptr [bp + 0xa]
0000E1C4: mov ax, 1
0000E1C7: push ax
0000E1C8: lcall 0xb08, 0xa
0000E1CD: or dx, dx
0000E1CF: jne 0xe1d7
0000E1D1: mov word ptr [bp - 2], ax
0000E1D4: jmp 0xe2be
0000E1D7: mov es, dx
0000E1D9: mov di, ax
0000E1DB: mov word ptr [bp - 0x20], dx
0000E1DE: mov word ptr [bp - 0x22], ax
0000E1E1: xor si, si
0000E1E3: mov bx, word ptr [bp - 8]
0000E1E6: sub bx, word ptr [bp - 0x18]
0000E1E9: cld 
0000E1EA: mov al, byte ptr [bp + si - 0x28]
0000E1ED: mov cx, word ptr [bp - 0x18]
0000E1F0: mov dx, word ptr [bp - 0x24]
0000E1F3: cmp cx, 1
0000E1F6: ja 0xe1fc
0000E1F8: and dh, dl
0000E1FA: jmp 0xe263
0000E1FC: push ax
0000E1FD: and al, dl
0000E1FF: not dl
0000E201: mov ah, byte ptr es:[di]
0000E204: and ah, dl
0000E206: or al, ah
0000E208: stosb byte ptr es:[di], al
0000E209: pop ax
0000E20A: dec cx
0000E20B: or di, di
0000E20D: jne 0xe22a
0000E20F: push ax
0000E210: push si
0000E211: mov si, 0x6cda
0000E214: mov dx, word ptr [si + 6]
0000E217: mov ax, word ptr [si + 4]
0000E21A: stc 
0000E21B: lcall 0xb08, 0x17e
0000E220: mov word ptr [bp - 2], ax
0000E223: pop si
0000E224: pop ax
0000E225: jae 0xe22a
0000E227: jmp 0xe2be
0000E22A: dec cx
0000E22B: je 0xe263
0000E22D: cmp di, word ptr [bp - 0x1c]
0000E230: jbe 0xe253
0000E232: stosb byte ptr es:[di], al
0000E233: or di, di
0000E235: jne 0xe24f
0000E237: push ax
0000E238: push si
0000E239: mov si, 0x6cda
0000E23C: mov dx, word ptr [si + 6]
0000E23F: mov ax, word ptr [si + 4]
0000E242: stc 
0000E243: lcall 0xb08, 0x17e
0000E248: mov word ptr [bp - 2], ax
0000E24B: pop si
0000E24C: pop ax
0000E24D: jb 0xe2be
0000E24F: loop 0xe232
0000E251: jmp 0xe263
0000E253: test cx, 1
0000E257: je 0xe25d
0000E259: stosb byte ptr es:[di], al
0000E25A: dec cx
0000E25B: je 0xe263
0000E25D: shr cx, 1
0000E25F: mov ah, al
0000E261: rep stosw word ptr es:[di], ax
0000E263: and al, dh
0000E265: not dh
0000E267: mov ah, byte ptr es:[di]
0000E26A: and ah, dh
0000E26C: or al, ah
0000E26E: stosb byte ptr es:[di], al
0000E26F: or di, di
0000E271: jne 0xe28b
0000E273: push ax
0000E274: push si
0000E275: mov si, 0x6cda
0000E278: mov dx, word ptr [si + 6]
0000E27B: mov ax, word ptr [si + 4]
0000E27E: stc 
0000E27F: lcall 0xb08, 0x17e
0000E284: mov word ptr [bp - 2], ax
0000E287: pop si
0000E288: pop ax
0000E289: jb 0xe2be
0000E28B: inc si
0000E28C: cmp si, word ptr [bp - 0x1a]
0000E28F: jb 0xe293
0000E291: xor si, si
0000E293: add di, bx
0000E295: jae 0xe2af
0000E297: push ax
0000E298: push si
0000E299: mov si, 0x6cda
0000E29C: mov dx, word ptr [si + 6]
0000E29F: mov ax, word ptr [si + 4]
0000E2A2: stc 
0000E2A3: lcall 0xb08, 0x17e
0000E2A8: mov word ptr [bp - 2], ax
0000E2AB: pop si
0000E2AC: pop ax
0000E2AD: jb 0xe2be
0000E2AF: dec word ptr [bp - 0xa]
0000E2B2: je 0xe2b7
0000E2B4: jmp 0xe1ea
0000E2B7: mov word ptr [bp - 2], 0
0000E2BC: jmp 0xe2be
0000E2BE: mov ax, word ptr [bp - 2]
0000E2C1: pop di
0000E2C2: pop si
0000E2C3: pop es
0000E2C4: pop ds
0000E2C5: mov sp, bp
0000E2C7: pop bp
0000E2C8: retf 8
0000E2CB: add byte ptr [di - 0x75], dl
0000E2CE: in al, dx
0000E2CF: sub sp, 2
0000E2D2: push ds
0000E2D3: push es
0000E2D4: push si
0000E2D5: push di
0000E2D6: mov ax, 0x1ab5
0000E2D9: mov ds, ax
0000E2DB: mov ax, word ptr [bp + 6]
0000E2DE: cmp ax, 1
0000E2E1: je 0xe2e6
0000E2E3: mov ax, 0
0000E2E6: mov si, 0x6cda
0000E2E9: mov word ptr [si + 0x18], ax
0000E2EC: mov word ptr [bp - 2], 0
0000E2F1: mov ax, word ptr [bp - 2]
0000E2F4: pop di
0000E2F5: pop si
0000E2F6: pop es
0000E2F7: pop ds
0000E2F8: mov sp, bp
0000E2FA: pop bp
0000E2FB: retf 2
0000E2FE: push bp
0000E2FF: mov bp, sp
0000E301: sub sp, 2
0000E304: push ds
0000E305: push es
0000E306: push si
0000E307: push di
0000E308: mov ax, 0x1ab5
0000E30B: mov ds, ax
0000E30D: mov si, 0x6cda
0000E310: mov ax, word ptr [si + 0x18]
0000E313: mov word ptr [bp - 2], ax
0000E316: mov ax, word ptr [bp - 2]
0000E319: pop di
0000E31A: pop si
0000E31B: pop es
0000E31C: pop ds
0000E31D: mov sp, bp
0000E31F: pop bp
0000E320: retf 
0000E321: push bp
0000E322: mov bp, sp
0000E324: sub sp, 2
0000E327: push ds
0000E328: push es
0000E329: push si
0000E32A: push di
0000E32B: mov ax, 0x1ab5
0000E32E: mov ds, ax
0000E330: mov si, 0x6cda
0000E333: mov ax, word ptr [bp + 0xc]
0000E336: mov word ptr [si + 0x1a], ax
0000E339: mov ax, word ptr [bp + 0xa]
0000E33C: mov word ptr [si + 0x1c], ax
0000E33F: mov ax, word ptr [bp + 8]
0000E342: mov word ptr [si + 0x1e], ax
0000E345: mov ax, word ptr [bp + 6]
0000E348: mov word ptr [si + 0x20], ax
0000E34B: mov word ptr [bp - 2], 0
0000E350: mov ax, word ptr [bp - 2]
0000E353: pop di
0000E354: pop si
0000E355: pop es
0000E356: pop ds
0000E357: mov sp, bp
0000E359: pop bp
0000E35A: retf 8
0000E35D: push bp
0000E35E: mov bp, sp
0000E360: sub sp, 2
0000E363: push ds
0000E364: push es
0000E365: push si
0000E366: push di
0000E367: mov ax, 0x1ab5
0000E36A: mov ds, ax
0000E36C: mov si, 0x6cda
0000E36F: les di, ptr [bp + 0x12]
0000E372: mov ax, word ptr [si + 0x1a]
0000E375: mov word ptr es:[di], ax
0000E378: les di, ptr [bp + 0xe]
0000E37B: mov ax, word ptr [si + 0x1c]
0000E37E: mov word ptr es:[di], ax
0000E381: les di, ptr [bp + 0xa]
0000E384: mov ax, word ptr [si + 0x1e]
0000E387: mov word ptr es:[di], ax
0000E38A: les di, ptr [bp + 6]
0000E38D: mov ax, word ptr [si + 0x20]
0000E390: mov word ptr es:[di], ax
0000E393: mov word ptr [bp - 2], 0
0000E398: mov ax, word ptr [bp - 2]
0000E39B: pop di
0000E39C: pop si
0000E39D: pop es
0000E39E: pop ds
0000E39F: mov sp, bp
0000E3A1: pop bp
0000E3A2: retf 0x10
0000E3A5: push ds
0000E3A6: push si
0000E3A7: push ax
0000E3A8: mov ax, 0x1ab5
0000E3AB: mov ds, ax
0000E3AD: mov si, 0x6cda
0000E3B0: pop ax
0000E3B1: cmp ax, word ptr [si + 0x1a]
0000E3B4: jl 0xe3c8
0000E3B6: cmp bx, word ptr [si + 0x1c]
0000E3B9: jl 0xe3c8
0000E3BB: cmp ax, word ptr [si + 0x1e]
0000E3BE: jg 0xe3c8
0000E3C0: cmp bx, word ptr [si + 0x20]
0000E3C3: jg 0xe3c8
0000E3C5: clc 
0000E3C6: jmp 0xe3c9
0000E3C8: stc 
0000E3C9: pop si
0000E3CA: pop ds
0000E3CB: retf 
0000E3CC: push bp
0000E3CD: mov bp, sp
0000E3CF: sub sp, 6
0000E3D2: push ds
0000E3D3: push es
0000E3D4: push si
0000E3D5: push di
0000E3D6: mov ax, 0x1ab5
0000E3D9: mov ds, ax
0000E3DB: mov word ptr [bp - 6], 0
0000E3E0: mov si, 0x6cda
0000E3E3: push cs
0000E3E4: call 0xe58d
0000E3E7: mov word ptr [bp - 4], ax
0000E3EA: or ah, al
0000E3EC: jne 0xe3f1
0000E3EE: jmp 0xe4b3
0000E3F1: mov ax, word ptr [bp - 4]
0000E3F4: and ah, al
0000E3F6: je 0xe3fb
0000E3F8: jmp 0xe4b3
0000E3FB: mov ax, word ptr [bp - 4]
0000E3FE: test al, 0xf
0000E400: jne 0xe41e
0000E402: mov ax, word ptr [bp + 0xc]
0000E405: xchg word ptr [bp + 8], ax
0000E408: mov word ptr [bp + 0xc], ax
0000E40B: mov ax, word ptr [bp + 0xa]
0000E40E: xchg word ptr [bp + 6], ax
0000E411: mov word ptr [bp + 0xa], ax
0000E414: mov ax, word ptr [bp - 4]
0000E417: xchg al, ah
0000E419: mov word ptr [bp - 6], 1
0000E41E: test al, 1
0000E420: je 0xe443
0000E422: mov ax, word ptr [bp + 6]
0000E425: sub ax, word ptr [bp + 0xa]
0000E428: mov bx, word ptr [si + 0x1a]
0000E42B: sub bx, word ptr [bp + 0xc]
0000E42E: imul bx
0000E430: mov bx, word ptr [bp + 8]
0000E433: sub bx, word ptr [bp + 0xc]
0000E436: idiv bx
0000E438: add word ptr [bp + 0xa], ax
0000E43B: mov ax, word ptr [si + 0x1a]
0000E43E: mov word ptr [bp + 0xc], ax
0000E441: jmp 0xe4b0
0000E443: test al, 2
0000E445: je 0xe468
0000E447: mov ax, word ptr [bp + 8]
0000E44A: sub ax, word ptr [bp + 0xc]
0000E44D: mov bx, word ptr [si + 0x1c]
0000E450: sub bx, word ptr [bp + 0xa]
0000E453: imul bx
0000E455: mov bx, word ptr [bp + 6]
0000E458: sub bx, word ptr [bp + 0xa]
0000E45B: idiv bx
0000E45D: add word ptr [bp + 0xc], ax
0000E460: mov ax, word ptr [si + 0x1c]
0000E463: mov word ptr [bp + 0xa], ax
0000E466: jmp 0xe4b0
0000E468: test al, 4
0000E46A: je 0xe48d
0000E46C: mov ax, word ptr [bp + 6]
0000E46F: sub ax, word ptr [bp + 0xa]
0000E472: mov bx, word ptr [si + 0x1e]
0000E475: sub bx, word ptr [bp + 0xc]
0000E478: imul bx
0000E47A: mov bx, word ptr [bp + 8]
0000E47D: sub bx, word ptr [bp + 0xc]
0000E480: idiv bx
0000E482: add word ptr [bp + 0xa], ax
0000E485: mov ax, word ptr [si + 0x1e]
0000E488: mov word ptr [bp + 0xc], ax
0000E48B: jmp 0xe4b0
0000E48D: test al, 8
0000E48F: je 0xe4b0
0000E491: mov ax, word ptr [bp + 8]
0000E494: sub ax, word ptr [bp + 0xc]
0000E497: mov bx, word ptr [si + 0x20]
0000E49A: sub bx, word ptr [bp + 0xa]
0000E49D: imul bx
0000E49F: mov bx, word ptr [bp + 6]
0000E4A2: sub bx, word ptr [bp + 0xa]
0000E4A5: idiv bx
0000E4A7: add word ptr [bp + 0xc], ax
0000E4AA: mov ax, word ptr [si + 0x20]
0000E4AD: mov word ptr [bp + 0xa], ax
0000E4B0: jmp 0xe3e3
0000E4B3: mov ax, word ptr [bp + 0xc]
0000E4B6: mov bx, word ptr [bp + 0xa]
0000E4B9: mov cx, word ptr [bp + 8]
0000E4BC: mov dx, word ptr [bp + 6]
0000E4BF: cmp word ptr [bp - 6], 1
0000E4C3: jne 0xe4c8
0000E4C5: xchg cx, ax
0000E4C6: xchg dx, bx
0000E4C8: mov word ptr [bp - 2], ax
0000E4CB: clc 
0000E4CC: cmp word ptr [bp - 4], 0
0000E4D0: je 0xe4d3
0000E4D2: stc 
0000E4D3: mov ax, word ptr [bp - 2]
0000E4D6: pop di
0000E4D7: pop si
0000E4D8: pop es
0000E4D9: pop ds
0000E4DA: mov sp, bp
0000E4DC: pop bp
0000E4DD: retf 8
0000E4E0: push bp
0000E4E1: mov bp, sp
0000E4E3: sub sp, 6
0000E4E6: push ds
0000E4E7: push es
0000E4E8: push si
0000E4E9: push di
0000E4EA: mov ax, 0x1ab5
0000E4ED: mov ds, ax
0000E4EF: mov word ptr [bp - 6], 0
0000E4F4: mov si, 0x6cda
0000E4F7: push cs
0000E4F8: call 0xe58d
0000E4FB: mov word ptr [bp - 4], ax
0000E4FE: or ah, al
0000E500: jne 0xe504
0000E502: jmp 0xe560
0000E504: mov ax, word ptr [bp - 4]
0000E507: and ah, al
0000E509: je 0xe50d
0000E50B: jmp 0xe560
0000E50D: mov ax, word ptr [bp - 4]
0000E510: test al, 0xf
0000E512: jne 0xe530
0000E514: mov ax, word ptr [bp + 0xc]
0000E517: xchg word ptr [bp + 8], ax
0000E51A: mov word ptr [bp + 0xc], ax
0000E51D: mov ax, word ptr [bp + 0xa]
0000E520: xchg word ptr [bp + 6], ax
0000E523: mov word ptr [bp + 0xa], ax
0000E526: mov ax, word ptr [bp - 4]
0000E529: xchg al, ah
0000E52B: mov word ptr [bp - 6], 1
0000E530: test al, 1
0000E532: je 0xe53c
0000E534: mov ax, word ptr [si + 0x1a]
0000E537: mov word ptr [bp + 0xc], ax
0000E53A: jmp 0xe55e
0000E53C: test al, 2
0000E53E: je 0xe548
0000E540: mov ax, word ptr [si + 0x1c]
0000E543: mov word ptr [bp + 0xa], ax
0000E546: jmp 0xe55e
0000E548: test al, 4
0000E54A: je 0xe554
0000E54C: mov ax, word ptr [si + 0x1e]
0000E54F: mov word ptr [bp + 0xc], ax
0000E552: jmp 0xe55e
0000E554: test al, 8
0000E556: je 0xe55e
0000E558: mov ax, word ptr [si + 0x20]
0000E55B: mov word ptr [bp + 0xa], ax
0000E55E: jmp 0xe4f7
0000E560: mov ax, word ptr [bp + 0xc]
0000E563: mov bx, word ptr [bp + 0xa]
0000E566: mov cx, word ptr [bp + 8]
0000E569: mov dx, word ptr [bp + 6]
0000E56C: cmp word ptr [bp - 6], 1
0000E570: jne 0xe575
0000E572: xchg cx, ax
0000E573: xchg dx, bx
0000E575: mov word ptr [bp - 2], ax
0000E578: clc 
0000E579: cmp word ptr [bp - 4], 0
0000E57D: je 0xe580
0000E57F: stc 
0000E580: mov ax, word ptr [bp - 2]
0000E583: pop di
0000E584: pop si
0000E585: pop es
0000E586: pop ds
0000E587: mov sp, bp
0000E589: pop bp
0000E58A: retf 8
0000E58D: xor ax, ax
0000E58F: mov cx, word ptr [bp + 0xc]
0000E592: mov dx, word ptr [bp + 0xa]
0000E595: cmp cx, word ptr [si + 0x1a]
0000E598: jge 0xe59c
0000E59A: or al, 1
0000E59C: cmp dx, word ptr [si + 0x1c]
0000E59F: jge 0xe5a3
0000E5A1: or al, 2
0000E5A3: cmp cx, word ptr [si + 0x1e]
0000E5A6: jle 0xe5aa
0000E5A8: or al, 4
0000E5AA: cmp dx, word ptr [si + 0x20]
0000E5AD: jle 0xe5b1
0000E5AF: or al, 8
0000E5B1: mov cx, word ptr [bp + 8]
0000E5B4: mov dx, word ptr [bp + 6]
0000E5B7: cmp cx, word ptr [si + 0x1a]
0000E5BA: jge 0xe5bf
0000E5BC: or ah, 1
0000E5BF: cmp dx, word ptr [si + 0x1c]
0000E5C2: jge 0xe5c7
0000E5C4: or ah, 2
0000E5C7: cmp cx, word ptr [si + 0x1e]
0000E5CA: jle 0xe5cf
0000E5CC: or ah, 4
0000E5CF: cmp dx, word ptr [si + 0x20]
0000E5D2: jle 0xe5d7
0000E5D4: or ah, 8
0000E5D7: retf 
0000E5D8: push bp
0000E5D9: mov bp, sp
0000E5DB: sub sp, 2
0000E5DE: push ds
0000E5DF: push es
0000E5E0: push si
0000E5E1: push di
0000E5E2: mov ax, 0x1ab5
0000E5E5: mov ds, ax
0000E5E7: mov ax, word ptr [bp + 8]
0000E5EA: mov bx, word ptr [bp + 6]
0000E5ED: push cs
0000E5EE: call 0xe3a5
0000E5F1: jae 0xe5fa
0000E5F3: mov word ptr [bp - 2], 0xffe5
0000E5F8: jmp 0xe5ff
0000E5FA: mov word ptr [bp - 2], 0
0000E5FF: mov ax, word ptr [bp - 2]
0000E602: pop di
0000E603: pop si
0000E604: pop es
0000E605: pop ds
0000E606: mov sp, bp
0000E608: pop bp
0000E609: retf 4
0000E60C: push bp
0000E60D: mov bp, sp
0000E60F: sub sp, 2
0000E612: push ds
0000E613: push es
0000E614: push si
0000E615: push di
0000E616: mov ax, 0x1ab5
0000E619: mov ds, ax
0000E61B: les di, ptr [bp + 0x12]
0000E61E: push word ptr es:[di]
0000E621: les di, ptr [bp + 0xe]
0000E624: push word ptr es:[di]
0000E627: les di, ptr [bp + 0xa]
0000E62A: push word ptr es:[di]
0000E62D: les di, ptr [bp + 6]
0000E630: push word ptr es:[di]
0000E633: push cs
0000E634: call 0xe3cc
0000E637: jae 0xe640
0000E639: mov word ptr [bp - 2], 0xffe5
0000E63E: jmp 0xe65d
0000E640: les di, ptr [bp + 0x12]
0000E643: mov word ptr es:[di], ax
0000E646: les di, ptr [bp + 0xe]
0000E649: mov word ptr es:[di], bx
0000E64C: les di, ptr [bp + 0xa]
0000E64F: mov word ptr es:[di], cx
0000E652: les di, ptr [bp + 6]
0000E655: mov word ptr es:[di], dx
0000E658: mov word ptr [bp - 2], 0
0000E65D: mov ax, word ptr [bp - 2]
0000E660: pop di
0000E661: pop si
0000E662: pop es
0000E663: pop ds
0000E664: mov sp, bp
0000E666: pop bp
0000E667: retf 0x10
0000E66A: push bp
0000E66B: mov bp, sp
0000E66D: sub sp, 2
0000E670: push ds
0000E671: push es
0000E672: push si
0000E673: push di
0000E674: mov ax, 0x1ab5
0000E677: mov ds, ax
0000E679: les di, ptr [bp + 0x12]
0000E67C: push word ptr es:[di]
0000E67F: les di, ptr [bp + 0xe]
0000E682: push word ptr es:[di]
0000E685: les di, ptr [bp + 0xa]
0000E688: push word ptr es:[di]
0000E68B: les di, ptr [bp + 6]
0000E68E: push word ptr es:[di]
0000E691: push cs
0000E692: call 0xe4e0
0000E695: jae 0xe69e
0000E697: mov word ptr [bp - 2], 0xffe5
0000E69C: jmp 0xe6bb
0000E69E: les di, ptr [bp + 0x12]
0000E6A1: mov word ptr es:[di], ax
0000E6A4: les di, ptr [bp + 0xe]
0000E6A7: mov word ptr es:[di], bx
0000E6AA: les di, ptr [bp + 0xa]
0000E6AD: mov word ptr es:[di], cx
0000E6B0: les di, ptr [bp + 6]
0000E6B3: mov word ptr es:[di], dx
0000E6B6: mov word ptr [bp - 2], 0
0000E6BB: mov ax, word ptr [bp - 2]
0000E6BE: pop di
0000E6BF: pop si
0000E6C0: pop es
0000E6C1: pop ds
0000E6C2: mov sp, bp
0000E6C4: pop bp
0000E6C5: retf 0x10
0000E6C8: push bp
0000E6C9: mov bp, sp
0000E6CB: sub sp, 0x3c
0000E6CE: push ds
0000E6CF: push es
0000E6D0: push si
0000E6D1: push di
0000E6D2: mov ax, 0x1ab5
0000E6D5: mov ds, ax
0000E6D7: mov si, 0x6cda
0000E6DA: cmp word ptr [si + 0x3c], 1
0000E6DE: jne 0xe70c
0000E6E0: push word ptr [bp + 0x10]
0000E6E3: lcall 0x1214, 0x21c
0000E6E8: mov word ptr [bp + 0x10], ax
0000E6EB: push word ptr [bp + 0xe]
0000E6EE: lcall 0x1214, 0x26c
0000E6F3: mov word ptr [bp + 0xe], ax
0000E6F6: push word ptr [bp + 0xc]
0000E6F9: lcall 0x1214, 0x21c
0000E6FE: mov word ptr [bp + 0xc], ax
0000E701: push word ptr [bp + 0xa]
0000E704: lcall 0x1214, 0x26c
0000E709: mov word ptr [bp + 0xa], ax
0000E70C: mov ax, word ptr [bp + 0xa]
0000E70F: cmp ax, word ptr [bp + 0xe]
0000E712: jge 0xe71a
0000E714: xchg word ptr [bp + 0xe], ax
0000E717: mov word ptr [bp + 0xa], ax
0000E71A: mov ax, word ptr [bp + 0xc]
0000E71D: cmp ax, word ptr [bp + 0x10]
0000E720: jge 0xe728
0000E722: xchg word ptr [bp + 0x10], ax
0000E725: mov word ptr [bp + 0xc], ax
0000E728: mov word ptr [bp - 0x36], 0
0000E72D: xor ax, ax
0000E72F: mov word ptr [0x5af2], ax
0000E732: mov word ptr [0x5af4], ax
0000E735: mov word ptr [0x5af6], ax
0000E738: mov word ptr [0x5af8], ax
0000E73B: mov ax, word ptr [bp + 0xc]
0000E73E: sub ax, word ptr [bp + 0x10]
0000E741: inc ax
0000E742: shr ax, 1
0000E744: mov word ptr [bp - 0x24], ax
0000E747: add ax, word ptr [bp + 0x10]
0000E74A: mov word ptr [bp - 0x20], ax
0000E74D: mov ax, word ptr [bp + 0xa]
0000E750: sub ax, word ptr [bp + 0xe]
0000E753: inc ax
0000E754: shr ax, 1
0000E756: mov word ptr [bp - 0x26], ax
0000E759: add ax, word ptr [bp + 0xe]
0000E75C: mov word ptr [bp - 0x22], ax
0000E75F: mov word ptr [bp - 0x2c], 0
0000E764: mov ax, word ptr [bp + 6]
0000E767: cmp ax, word ptr [bp + 8]
0000E76A: jge 0xe774
0000E76C: mov word ptr [bp - 0x2c], ax
0000E76F: mov word ptr [bp + 6], 0x168
0000E774: mov si, 0x6cda
0000E777: mov ax, word ptr [si + 0xc]
0000E77A: mov word ptr [bp - 0x2a], ax
0000E77D: mov ax, word ptr [si + 0x30]
0000E780: mov bx, word ptr [si + 0x32]
0000E783: add word ptr [bp - 0x20], ax
0000E786: add word ptr [bp - 0x22], bx
0000E789: cmp word ptr [si], 1
0000E78C: jne 0xe796
0000E78E: mov ax, word ptr [si + 2]
0000E791: mov si, 0x6cb8
0000E794: jmp 0xe7a9
0000E796: mov si, 0x6c14
0000E799: mov ax, word ptr [0x43b1]
0000E79C: cmp ax, 0x28
0000E79F: jbe 0xe7a9
0000E7A1: mov word ptr [bp - 2], 0xfffa
0000E7A6: jmp 0xe90b
0000E7A9: shl ax, 1
0000E7AB: shl ax, 1
0000E7AD: add si, ax
0000E7AF: lcall 0xc6c, 0x3e
0000E7B4: mov word ptr [bp - 0x28], ax
0000E7B7: mov word ptr [bp - 0x2e], 0x169
0000E7BC: mov word ptr [bp - 0x30], 0xffff
0000E7C1: mov ax, word ptr [bp - 0x24]
0000E7C4: mul ax
0000E7C6: mov word ptr [bp - 0x12], ax
0000E7C9: mov word ptr [bp - 0x10], dx
0000E7CC: shl ax, 1
0000E7CE: rcl dx, 1
0000E7D0: mov word ptr [bp - 0x1a], ax
0000E7D3: mov word ptr [bp - 0x18], dx
0000E7D6: mov ax, word ptr [bp - 0x26]
0000E7D9: mul ax
0000E7DB: mov word ptr [bp - 0x16], ax
0000E7DE: mov word ptr [bp - 0x14], dx
0000E7E1: shl ax, 1
0000E7E3: rcl dx, 1
0000E7E5: mov word ptr [bp - 0x1e], ax
0000E7E8: mov word ptr [bp - 0x1c], dx
0000E7EB: xor ax, ax
0000E7ED: mov word ptr [bp - 0xa], ax
0000E7F0: mov word ptr [bp - 8], ax
0000E7F3: mov ax, word ptr [bp - 0x1a]
0000E7F6: mov dx, word ptr [bp - 0x18]
0000E7F9: mov cx, word ptr [bp - 0x26]
0000E7FC: push cs
0000E7FD: call 0xecfd
0000E800: jae 0xe805
0000E802: jmp 0xe961
0000E805: mov word ptr [bp - 0xe], ax
0000E808: mov word ptr [bp - 0xc], dx
0000E80B: mov ax, word ptr [bp - 0x12]
0000E80E: mov dx, word ptr [bp - 0x10]
0000E811: sar dx, 1
0000E813: rcr ax, 1
0000E815: sar dx, 1
0000E817: rcr ax, 1
0000E819: add ax, word ptr [bp - 0x16]
0000E81C: adc dx, word ptr [bp - 0x14]
0000E81F: mov word ptr [bp - 6], ax
0000E822: mov word ptr [bp - 4], dx
0000E825: mov ax, word ptr [bp - 0x12]
0000E828: mov dx, word ptr [bp - 0x10]
0000E82B: mov cx, word ptr [bp - 0x26]
0000E82E: push cs
0000E82F: call 0xecfd
0000E832: sub word ptr [bp - 6], ax
0000E835: sbb word ptr [bp - 4], dx
0000E838: xor bx, bx
0000E83A: mov cx, word ptr [bp - 0x26]
0000E83D: mov ax, word ptr [bp - 0xa]
0000E840: mov dx, word ptr [bp - 8]
0000E843: sub ax, word ptr [bp - 0xe]
0000E846: sbb dx, word ptr [bp - 0xc]
0000E849: jns 0xe88f
0000E84B: push cs
0000E84C: call 0xe9d0
0000E84F: cmp word ptr [bp - 4], 0
0000E853: js 0xe86e
0000E855: dec cx
0000E856: mov ax, word ptr [bp - 0xe]
0000E859: mov dx, word ptr [bp - 0xc]
0000E85C: sub ax, word ptr [bp - 0x1a]
0000E85F: sbb dx, word ptr [bp - 0x18]
0000E862: mov word ptr [bp - 0xe], ax
0000E865: mov word ptr [bp - 0xc], dx
0000E868: sub word ptr [bp - 6], ax
0000E86B: sbb word ptr [bp - 4], dx
0000E86E: inc bx
0000E86F: mov ax, word ptr [bp - 0xa]
0000E872: mov dx, word ptr [bp - 8]
0000E875: add ax, word ptr [bp - 0x1e]
0000E878: adc dx, word ptr [bp - 0x1c]
0000E87B: mov word ptr [bp - 0xa], ax
0000E87E: mov word ptr [bp - 8], dx
0000E881: add ax, word ptr [bp - 0x16]
0000E884: adc dx, word ptr [bp - 0x14]
0000E887: add word ptr [bp - 6], ax
0000E88A: adc word ptr [bp - 4], dx
0000E88D: jmp 0xe83d
0000E88F: push bx
0000E890: push cx
0000E891: mov ax, word ptr [bp - 0x12]
0000E894: mov dx, word ptr [bp - 0x10]
0000E897: sub ax, word ptr [bp - 0x16]
0000E89A: sbb dx, word ptr [bp - 0x14]
0000E89D: mov bx, ax
0000E89F: mov cx, dx
0000E8A1: sar dx, 1
0000E8A3: rcr ax, 1
0000E8A5: add ax, bx
0000E8A7: adc dx, cx
0000E8A9: sub ax, word ptr [bp - 0xa]
0000E8AC: sbb dx, word ptr [bp - 8]
0000E8AF: sub ax, word ptr [bp - 0xe]
0000E8B2: sbb dx, word ptr [bp - 0xc]
0000E8B5: sar dx, 1
0000E8B7: rcr ax, 1
0000E8B9: add word ptr [bp - 6], ax
0000E8BC: adc word ptr [bp - 4], dx
0000E8BF: pop cx
0000E8C0: pop bx
0000E8C1: push cs
0000E8C2: call 0xe9d0
0000E8C5: cmp word ptr [bp - 4], 0
0000E8C9: jns 0xe8e4
0000E8CB: inc bx
0000E8CC: mov ax, word ptr [bp - 0xa]
0000E8CF: mov dx, word ptr [bp - 8]
0000E8D2: add ax, word ptr [bp - 0x1e]
0000E8D5: adc dx, word ptr [bp - 0x1c]
0000E8D8: mov word ptr [bp - 0xa], ax
0000E8DB: mov word ptr [bp - 8], dx
0000E8DE: add word ptr [bp - 6], ax
0000E8E1: adc word ptr [bp - 4], dx
0000E8E4: mov ax, word ptr [bp - 0xe]
0000E8E7: mov dx, word ptr [bp - 0xc]
0000E8EA: sub ax, word ptr [bp - 0x1a]
0000E8ED: sbb dx, word ptr [bp - 0x18]
0000E8F0: mov word ptr [bp - 0xe], ax
0000E8F3: mov word ptr [bp - 0xc], dx
0000E8F6: mov ax, word ptr [bp - 0x12]
0000E8F9: mov dx, word ptr [bp - 0x10]
0000E8FC: sub ax, word ptr [bp - 0xe]
0000E8FF: sbb dx, word ptr [bp - 0xc]
0000E902: add word ptr [bp - 6], ax
0000E905: adc word ptr [bp - 4], dx
0000E908: dec cx
0000E909: jns 0xe8c1
0000E90B: cmp word ptr [bp - 0x2c], 0
0000E90F: je 0xe935
0000E911: mov ax, word ptr [0x5af2]
0000E914: mov word ptr [bp - 0x32], ax
0000E917: mov ax, word ptr [0x5af4]
0000E91A: mov word ptr [bp - 0x34], ax
0000E91D: mov word ptr [bp - 0x36], 1
0000E922: mov word ptr [bp + 8], 0
0000E927: mov ax, word ptr [bp - 0x2c]
0000E92A: mov word ptr [bp + 6], ax
0000E92D: mov word ptr [bp - 0x2c], 0
0000E932: jmp 0xe7b7
0000E935: cmp word ptr [bp - 0x36], 1
0000E939: jne 0xe947
0000E93B: mov ax, word ptr [bp - 0x32]
0000E93E: mov word ptr [0x5af2], ax
0000E941: mov ax, word ptr [bp - 0x34]
0000E944: mov word ptr [0x5af4], ax
0000E947: mov ax, word ptr [bp - 0x20]
0000E94A: mov bx, word ptr [bp - 0x22]
0000E94D: add word ptr [0x5af2], ax
0000E951: add word ptr [0x5af4], bx
0000E955: add word ptr [0x5af6], ax
0000E959: add word ptr [0x5af8], bx
0000E95D: xor ax, ax
0000E95F: jmp 0xe9c0
0000E961: mov si, 0x6cda
0000E964: mov dx, word ptr [si + 0x3c]
0000E967: mov word ptr [bp - 0x38], dx
0000E96A: mov word ptr [si + 0x3c], 0
0000E96F: mov ax, word ptr [si + 0x30]
0000E972: mov bx, word ptr [si + 0x32]
0000E975: mov word ptr [bp - 0x3a], ax
0000E978: mov word ptr [bp - 0x3c], bx
0000E97B: mov word ptr [si + 0x30], 0
0000E980: mov word ptr [si + 0x32], 0
0000E985: mov dx, word ptr [bp + 0x10]
0000E988: add dx, ax
0000E98A: push dx
0000E98B: mov dx, word ptr [bp + 0xe]
0000E98E: add dx, bx
0000E990: push dx
0000E991: mov dx, word ptr [bp + 0xc]
0000E994: add dx, ax
0000E996: push dx
0000E997: mov dx, word ptr [bp + 0xa]
0000E99A: add dx, bx
0000E99C: push dx
0000E99D: push word ptr [bp + 8]
0000E9A0: push word ptr [bp + 6]
0000E9A3: mov ax, 0x8001
0000E9A6: push ax
0000E9A7: push cs
0000E9A8: call 0xed84
0000E9AB: mov bx, 0x6cda
0000E9AE: mov dx, word ptr [bp - 0x38]
0000E9B1: mov word ptr [bx + 0x3c], dx
0000E9B4: mov dx, word ptr [bp - 0x3a]
0000E9B7: mov word ptr [bx + 0x30], dx
0000E9BA: mov dx, word ptr [bp - 0x3c]
0000E9BD: mov word ptr [bx + 0x32], dx
0000E9C0: mov word ptr [bp - 2], ax
0000E9C3: mov ax, word ptr [bp - 2]
0000E9C6: pop di
0000E9C7: pop si
0000E9C8: pop es
0000E9C9: pop ds
0000E9CA: mov sp, bp
0000E9CC: pop bp
0000E9CD: retf 0xc
0000E9D0: push bx
0000E9D1: push cx
0000E9D2: cmp bx, 0
0000E9D5: jne 0xe9da
0000E9D7: jmp 0xeb30
0000E9DA: or cx, cx
0000E9DC: jne 0xe9e1
0000E9DE: jmp 0xebd4
0000E9E1: push cs
0000E9E2: call 0xed11
0000E9E5: cmp ax, word ptr [bp + 8]
0000E9E8: jl 0xea2d
0000E9EA: cmp ax, word ptr [bp + 6]
0000E9ED: jg 0xea2d
0000E9EF: cmp ax, word ptr [bp - 0x2e]
0000E9F2: jge 0xe9ff
0000E9F4: mov word ptr [bp - 0x2e], ax
0000E9F7: mov word ptr [0x5af2], bx
0000E9FB: mov word ptr [0x5af4], cx
0000E9FF: cmp ax, word ptr [bp - 0x30]
0000EA02: jl 0xea0f
0000EA04: mov word ptr [bp - 0x30], ax
0000EA07: mov word ptr [0x5af6], bx
0000EA0B: mov word ptr [0x5af8], cx
0000EA0F: mov ax, word ptr [bp - 0x20]
0000EA12: add ax, bx
0000EA14: mov bx, word ptr [bp - 0x22]
0000EA17: add bx, cx
0000EA19: cmp word ptr [bp - 0x28], 1
0000EA1D: jne 0xea26
0000EA1F: lcall 0xc6c, 0xe5
0000EA24: jb 0xea2d
0000EA26: push ax
0000EA27: push bx
0000EA28: push word ptr [bp - 0x2a]
0000EA2B: lcall [si]
0000EA2D: pop cx
0000EA2E: pop bx
0000EA2F: push bx
0000EA30: push cx
0000EA31: neg bx
0000EA33: push cs
0000EA34: call 0xed11
0000EA37: cmp ax, word ptr [bp + 8]
0000EA3A: jl 0xea7f
0000EA3C: cmp ax, word ptr [bp + 6]
0000EA3F: jg 0xea7f
0000EA41: cmp ax, word ptr [bp - 0x2e]
0000EA44: jg 0xea51
0000EA46: mov word ptr [bp - 0x2e], ax
0000EA49: mov word ptr [0x5af2], bx
0000EA4D: mov word ptr [0x5af4], cx
0000EA51: cmp ax, word ptr [bp - 0x30]
0000EA54: jle 0xea61
0000EA56: mov word ptr [bp - 0x30], ax
0000EA59: mov word ptr [0x5af6], bx
0000EA5D: mov word ptr [0x5af8], cx
0000EA61: mov ax, word ptr [bp - 0x20]
0000EA64: add ax, bx
0000EA66: mov bx, word ptr [bp - 0x22]
0000EA69: add bx, cx
0000EA6B: cmp word ptr [bp - 0x28], 1
0000EA6F: jne 0xea78
0000EA71: lcall 0xc6c, 0xe5
0000EA76: jb 0xea7f
0000EA78: push ax
0000EA79: push bx
0000EA7A: push word ptr [bp - 0x2a]
0000EA7D: lcall [si]
0000EA7F: pop cx
0000EA80: pop bx
0000EA81: push bx
0000EA82: push cx
0000EA83: cmp cx, 0
0000EA86: jne 0xea8b
0000EA88: jmp 0xec72
0000EA8B: neg cx
0000EA8D: push cs
0000EA8E: call 0xed11
0000EA91: cmp ax, word ptr [bp + 8]
0000EA94: jl 0xead9
0000EA96: cmp ax, word ptr [bp + 6]
0000EA99: jg 0xead9
0000EA9B: cmp ax, word ptr [bp - 0x2e]
0000EA9E: jg 0xeaab
0000EAA0: mov word ptr [bp - 0x2e], ax
0000EAA3: mov word ptr [0x5af2], bx
0000EAA7: mov word ptr [0x5af4], cx
0000EAAB: cmp ax, word ptr [bp - 0x30]
0000EAAE: jle 0xeabb
0000EAB0: mov word ptr [bp - 0x30], ax
0000EAB3: mov word ptr [0x5af6], bx
0000EAB7: mov word ptr [0x5af8], cx
0000EABB: mov ax, word ptr [bp - 0x20]
0000EABE: add ax, bx
0000EAC0: mov bx, word ptr [bp - 0x22]
0000EAC3: add bx, cx
0000EAC5: cmp word ptr [bp - 0x28], 1
0000EAC9: jne 0xead2
0000EACB: lcall 0xc6c, 0xe5
0000EAD0: jb 0xead9
0000EAD2: push ax
0000EAD3: push bx
0000EAD4: push word ptr [bp - 0x2a]
0000EAD7: lcall [si]
0000EAD9: pop cx
0000EADA: pop bx
0000EADB: push bx
0000EADC: push cx
0000EADD: neg bx
0000EADF: neg cx
0000EAE1: push cs
0000EAE2: call 0xed11
0000EAE5: cmp ax, word ptr [bp + 8]
0000EAE8: jl 0xeb2d
0000EAEA: cmp ax, word ptr [bp + 6]
0000EAED: jg 0xeb2d
0000EAEF: cmp ax, word ptr [bp - 0x2e]
0000EAF2: jge 0xeaff
0000EAF4: mov word ptr [bp - 0x2e], ax
0000EAF7: mov word ptr [0x5af2], bx
0000EAFB: mov word ptr [0x5af4], cx
0000EAFF: cmp ax, word ptr [bp - 0x30]
0000EB02: jl 0xeb0f
0000EB04: mov word ptr [bp - 0x30], ax
0000EB07: mov word ptr [0x5af6], bx
0000EB0B: mov word ptr [0x5af8], cx
0000EB0F: mov ax, word ptr [bp - 0x20]
0000EB12: add ax, bx
0000EB14: mov bx, word ptr [bp - 0x22]
0000EB17: add bx, cx
0000EB19: cmp word ptr [bp - 0x28], 1
0000EB1D: jne 0xeb26
0000EB1F: lcall 0xc6c, 0xe5
0000EB24: jb 0xeb2d
0000EB26: push ax
0000EB27: push bx
0000EB28: push word ptr [bp - 0x2a]
0000EB2B: lcall [si]
0000EB2D: jmp 0xec72
0000EB30: push cs
0000EB31: call 0xed11
0000EB34: cmp ax, word ptr [bp + 8]
0000EB37: jl 0xeb70
0000EB39: cmp ax, word ptr [bp + 6]
0000EB3C: jg 0xeb70
0000EB3E: mov word ptr [bp - 0x2e], ax
0000EB41: mov word ptr [0x5af2], bx
0000EB45: mov word ptr [0x5af4], cx
0000EB49: mov word ptr [bp - 0x30], ax
0000EB4C: mov word ptr [0x5af6], bx
0000EB50: mov word ptr [0x5af8], cx
0000EB54: mov ax, word ptr [bp - 0x20]
0000EB57: mov bx, word ptr [bp - 0x22]
0000EB5A: add bx, cx
0000EB5C: cmp word ptr [bp - 0x28], 1
0000EB60: jne 0xeb69
0000EB62: lcall 0xc6c, 0xe5
0000EB67: jb 0xeb70
0000EB69: push ax
0000EB6A: push bx
0000EB6B: push word ptr [bp - 0x2a]
0000EB6E: lcall [si]
0000EB70: pop cx
0000EB71: pop bx
0000EB72: push bx
0000EB73: push cx
0000EB74: cmp cx, 0
0000EB77: jne 0xeb7c
0000EB79: jmp 0xec72
0000EB7C: neg cx
0000EB7E: push cs
0000EB7F: call 0xed11
0000EB82: cmp ax, word ptr [bp + 8]
0000EB85: jge 0xeb8a
0000EB87: jmp 0xec72
0000EB8A: cmp ax, word ptr [bp + 6]
0000EB8D: jle 0xeb92
0000EB8F: jmp 0xec72
0000EB92: cmp ax, word ptr [bp - 0x2e]
0000EB95: jge 0xeba2
0000EB97: mov word ptr [bp - 0x2e], ax
0000EB9A: mov word ptr [0x5af2], bx
0000EB9E: mov word ptr [0x5af4], cx
0000EBA2: cmp ax, word ptr [bp - 0x30]
0000EBA5: jl 0xebb2
0000EBA7: mov word ptr [bp - 0x30], ax
0000EBAA: mov word ptr [0x5af6], bx
0000EBAE: mov word ptr [0x5af8], cx
0000EBB2: mov ax, word ptr [bp - 0x20]
0000EBB5: mov bx, word ptr [bp - 0x22]
0000EBB8: add bx, cx
0000EBBA: cmp word ptr [bp - 0x28], 1
0000EBBE: jne 0xebca
0000EBC0: lcall 0xc6c, 0xe5
0000EBC5: jae 0xebca
0000EBC7: jmp 0xec72
0000EBCA: push ax
0000EBCB: push bx
0000EBCC: push word ptr [bp - 0x2a]
0000EBCF: lcall [si]
0000EBD1: jmp 0xec72
0000EBD4: push cs
0000EBD5: call 0xed11
0000EBD8: cmp ax, word ptr [bp + 8]
0000EBDB: jl 0xec1e
0000EBDD: cmp ax, word ptr [bp + 6]
0000EBE0: jg 0xec1e
0000EBE2: cmp ax, word ptr [bp - 0x2e]
0000EBE5: jg 0xebf2
0000EBE7: mov word ptr [bp - 0x2e], ax
0000EBEA: mov word ptr [0x5af2], bx
0000EBEE: mov word ptr [0x5af4], cx
0000EBF2: cmp ax, word ptr [bp - 0x30]
0000EBF5: jl 0xec02
0000EBF7: mov word ptr [bp - 0x30], ax
0000EBFA: mov word ptr [0x5af6], bx
0000EBFE: mov word ptr [0x5af8], cx
0000EC02: mov ax, word ptr [bp - 0x20]
0000EC05: add ax, bx
0000EC07: mov bx, word ptr [bp - 0x22]
0000EC0A: cmp word ptr [bp - 0x28], 1
0000EC0E: jne 0xec17
0000EC10: lcall 0xc6c, 0xe5
0000EC15: jb 0xec1e
0000EC17: push ax
0000EC18: push bx
0000EC19: push word ptr [bp - 0x2a]
0000EC1C: lcall [si]
0000EC1E: pop cx
0000EC1F: pop bx
0000EC20: push bx
0000EC21: push cx
0000EC22: or bx, bx
0000EC24: je 0xec72
0000EC26: neg bx
0000EC28: push cs
0000EC29: call 0xed11
0000EC2C: cmp ax, word ptr [bp + 8]
0000EC2F: jl 0xec72
0000EC31: cmp ax, word ptr [bp + 6]
0000EC34: jg 0xec72
0000EC36: cmp ax, word ptr [bp - 0x2e]
0000EC39: jg 0xec46
0000EC3B: mov word ptr [bp - 0x2e], ax
0000EC3E: mov word ptr [0x5af2], bx
0000EC42: mov word ptr [0x5af4], cx
0000EC46: cmp ax, word ptr [bp - 0x30]
0000EC49: jl 0xec56
0000EC4B: mov word ptr [bp - 0x30], ax
0000EC4E: mov word ptr [0x5af6], bx
0000EC52: mov word ptr [0x5af8], cx
0000EC56: mov ax, word ptr [bp - 0x20]
0000EC59: add ax, bx
0000EC5B: mov bx, word ptr [bp - 0x22]
0000EC5E: cmp word ptr [bp - 0x28], 1
0000EC62: jne 0xec6b
0000EC64: lcall 0xc6c, 0xe5
0000EC69: jb 0xec72
0000EC6B: push ax
0000EC6C: push bx
0000EC6D: push word ptr [bp - 0x2a]
0000EC70: lcall [si]
0000EC72: pop cx
0000EC73: pop bx
0000EC74: retf 
0000EC75: push bp
0000EC76: mov bp, sp
0000EC78: sub sp, 2
0000EC7B: push ds
0000EC7C: push es
0000EC7D: push si
0000EC7E: push di
0000EC7F: mov ax, 0x1ab5
0000EC82: mov ds, ax
0000EC84: mov si, 0x6cda
0000EC87: les di, ptr [bp + 0x12]
0000EC8A: mov ax, word ptr [0x5af2]
0000EC8D: sub ax, word ptr [si + 0x30]
0000EC90: test word ptr [si + 0x3c], 1
0000EC95: je 0xec9d
0000EC97: push ax
0000EC98: lcall 0x1214, 0x307
0000EC9D: mov word ptr es:[di], ax
0000ECA0: les di, ptr [bp + 0xe]
0000ECA3: mov ax, word ptr [0x5af4]
0000ECA6: sub ax, word ptr [si + 0x32]
0000ECA9: test word ptr [si + 0x3c], 1
0000ECAE: je 0xecb6
0000ECB0: push ax
0000ECB1: lcall 0x1214, 0x346
0000ECB6: mov word ptr es:[di], ax
0000ECB9: les di, ptr [bp + 0xa]
0000ECBC: mov ax, word ptr [0x5af6]
0000ECBF: sub ax, word ptr [si + 0x30]
0000ECC2: test word ptr [si + 0x3c], 1
0000ECC7: je 0xeccf
0000ECC9: push ax
0000ECCA: lcall 0x1214, 0x307
0000ECCF: mov word ptr es:[di], ax
0000ECD2: les di, ptr [bp + 6]
0000ECD5: mov ax, word ptr [0x5af8]
0000ECD8: sub ax, word ptr [si + 0x32]
0000ECDB: test word ptr [si + 0x3c], 1
0000ECE0: je 0xece8
0000ECE2: push ax
0000ECE3: lcall 0x1214, 0x346
0000ECE8: mov word ptr es:[di], ax
0000ECEB: mov word ptr [bp - 2], 0
0000ECF0: mov ax, word ptr [bp - 2]
0000ECF3: pop di
0000ECF4: pop si
0000ECF5: pop es
0000ECF6: pop ds
0000ECF7: mov sp, bp
0000ECF9: pop bp
0000ECFA: retf 0x10
0000ECFD: push ax
0000ECFE: mov ax, dx
0000ED00: mul cx
0000ED02: or dx, dx
0000ED04: je 0xed0a
0000ED06: pop ax
0000ED07: stc 
0000ED08: jmp 0xed10
0000ED0A: xchg cx, ax
0000ED0B: pop dx
0000ED0C: mul dx
0000ED0E: add dx, cx
0000ED10: retf 
0000ED11: push si
0000ED12: push bx
0000ED13: push cx
0000ED14: push dx
0000ED15: neg cx
0000ED17: cmp bx, 0
0000ED1A: jl 0xed26
0000ED1C: cmp cx, 0
0000ED1F: jl 0xed2b
0000ED21: mov dx, 0
0000ED24: jmp 0xed2e
0000ED26: mov dx, 0xb4
0000ED29: jmp 0xed2e
0000ED2B: mov dx, 0x168
0000ED2E: push dx
0000ED2F: cmp bx, 0
0000ED32: jne 0xed40
0000ED34: mov ax, 0x5a
0000ED37: cmp cx, 0
0000ED3A: jge 0xed7c
0000ED3C: neg ax
0000ED3E: jmp 0xed7c
0000ED40: mov ax, cx
0000ED42: xor dx, dx
0000ED44: xor cx, bx
0000ED46: jge 0xed49
0000ED48: dec dx
0000ED49: push dx
0000ED4A: cmp ax, 0
0000ED4D: jge 0xed51
0000ED4F: neg ax
0000ED51: cmp bx, 0
0000ED54: jge 0xed58
0000ED56: neg bx
0000ED58: mov dx, 0x64
0000ED5B: mul dx
0000ED5D: div bx
0000ED5F: mov si, 0x5afa
0000ED62: mov cx, 0x5a
0000ED65: cmp ax, word ptr [si]
0000ED67: jbe 0xed6d
0000ED69: inc si
0000ED6A: inc si
0000ED6B: loop 0xed65
0000ED6D: mov ax, si
0000ED6F: sub ax, 0x5afa
0000ED72: shr ax, 1
0000ED74: pop bx
0000ED75: cmp bx, 0
0000ED78: jge 0xed7c
0000ED7A: neg ax
0000ED7C: pop dx
0000ED7D: add ax, dx
0000ED7F: pop dx
0000ED80: pop cx
0000ED81: pop bx
0000ED82: pop si
0000ED83: retf 
0000ED84: push bp
0000ED85: mov bp, sp
0000ED87: sub sp, 0x20
0000ED8A: push ds
0000ED8B: push es
0000ED8C: push si
0000ED8D: push di
0000ED8E: mov ax, 0x1ab5
0000ED91: mov ds, ax
0000ED93: cld 
0000ED94: mov ax, word ptr [0x54c1]
0000ED97: mov word ptr [bp - 0xc], ax
0000ED9A: mov di, ax
0000ED9C: mov ax, word ptr [0x54c3]
0000ED9F: mov word ptr [bp - 0xa], ax
0000EDA2: mov es, ax
0000EDA4: mov ax, word ptr [0x54bf]
0000EDA7: mov word ptr [bp - 0xe], ax
0000EDAA: shr ax, 1
0000EDAC: shr ax, 1
0000EDAE: sub ax, 4
0000EDB1: jge 0xedbb
0000EDB3: mov word ptr [bp - 2], 0xfffe
0000EDB8: jmp 0xefef
0000EDBB: mov word ptr [bp - 0x20], ax
0000EDBE: mov word ptr [bp - 0x14], 0
0000EDC3: mov si, 0x6cda
0000EDC6: cmp word ptr [si + 0x3c], 1
0000EDCA: jne 0xedf8
0000EDCC: push word ptr [bp + 0x12]
0000EDCF: lcall 0x1214, 0x21c
0000EDD4: mov word ptr [bp + 0x12], ax
0000EDD7: push word ptr [bp + 0x10]
0000EDDA: lcall 0x1214, 0x26c
0000EDDF: mov word ptr [bp + 0x10], ax
0000EDE2: push word ptr [bp + 0xe]
0000EDE5: lcall 0x1214, 0x21c
0000EDEA: mov word ptr [bp + 0xe], ax
0000EDED: push word ptr [bp + 0xc]
0000EDF0: lcall 0x1214, 0x26c
0000EDF5: mov word ptr [bp + 0xc], ax
0000EDF8: mov ax, word ptr [bp + 0xc]
0000EDFB: cmp ax, word ptr [bp + 0x10]
0000EDFE: jge 0xee06
0000EE00: xchg word ptr [bp + 0x10], ax
0000EE03: mov word ptr [bp + 0xc], ax
0000EE06: mov ax, word ptr [bp + 0xe]
0000EE09: cmp ax, word ptr [bp + 0x12]
0000EE0C: jge 0xee14
0000EE0E: xchg word ptr [bp + 0x12], ax
0000EE11: mov word ptr [bp + 0xe], ax
0000EE14: mov ax, word ptr [si + 0x30]
0000EE17: mov word ptr [bp - 6], ax
0000EE1A: add word ptr [bp + 0x12], ax
0000EE1D: add word ptr [bp + 0xe], ax
0000EE20: mov ax, word ptr [si + 0x32]
0000EE23: mov word ptr [bp - 8], ax
0000EE26: add word ptr [bp + 0x10], ax
0000EE29: add word ptr [bp + 0xc], ax
0000EE2C: mov word ptr [si + 0x30], 0
0000EE31: mov word ptr [si + 0x32], 0
0000EE36: mov ax, word ptr [si + 0x3c]
0000EE39: mov word ptr [bp - 4], ax
0000EE3C: mov word ptr [si + 0x3c], 0
0000EE41: mov ax, word ptr [bp + 0xe]
0000EE44: sub ax, word ptr [bp + 0x12]
0000EE47: inc ax
0000EE48: shr ax, 1
0000EE4A: mov word ptr [bp - 0x16], ax
0000EE4D: add ax, word ptr [bp + 0x12]
0000EE50: mov word ptr [bp - 0x10], ax
0000EE53: mov ax, word ptr [bp + 0xc]
0000EE56: sub ax, word ptr [bp + 0x10]
0000EE59: inc ax
0000EE5A: shr ax, 1
0000EE5C: mov word ptr [bp - 0x18], ax
0000EE5F: add ax, word ptr [bp + 0x10]
0000EE62: mov word ptr [bp - 0x12], ax
0000EE65: mov ax, word ptr [bp + 0xa]
0000EE68: mov dx, 0x2710
0000EE6B: imul dx
0000EE6D: mov bx, 0x168
0000EE70: lcall 0x7ff, 0x32
0000EE75: mov word ptr [bp - 0x1a], ax
0000EE78: mov ax, word ptr [bp + 8]
0000EE7B: cmp ax, word ptr [bp + 0xa]
0000EE7E: jg 0xee83
0000EE80: add ax, 0x168
0000EE83: mov dx, 0x2710
0000EE86: imul dx
0000EE88: mov bx, 0x168
0000EE8B: lcall 0x7ff, 0x32
0000EE90: mov word ptr [bp - 0x1c], ax
0000EE93: sub ax, 0x70
0000EE96: mov word ptr [bp - 0x1e], ax
0000EE99: mov ax, word ptr [bp - 0x1a]
0000EE9C: mov dx, 0x168
0000EE9F: imul dx
0000EEA1: mov bx, 0x2710
0000EEA4: lcall 0x7ff, 0x32
0000EEA9: push ax
0000EEAA: call 0xeffc
0000EEAD: mov dx, word ptr [bp - 0x16]
0000EEB0: imul dx
0000EEB2: mov bx, 0x2710
0000EEB5: xor cx, cx
0000EEB7: lcall 0x7ff, 0x50
0000EEBC: add ax, word ptr [bp - 0x10]
0000EEBF: mov word ptr [0x5af2], ax
0000EEC2: stosw word ptr es:[di], ax
0000EEC3: pop ax
0000EEC4: call 0xf03c
0000EEC7: mov dx, word ptr [bp - 0x18]
0000EECA: imul dx
0000EECC: mov bx, 0x2710
0000EECF: xor cx, cx
0000EED1: lcall 0x7ff, 0x50
0000EED6: add ax, word ptr [bp - 0x12]
0000EED9: mov word ptr [0x5af4], ax
0000EEDC: stosw word ptr es:[di], ax
0000EEDD: inc word ptr [bp - 0x14]
0000EEE0: mov ax, word ptr [bp - 0x1a]
0000EEE3: add ax, 0x70
0000EEE6: mov word ptr [bp - 0x1a], ax
0000EEE9: cmp ax, word ptr [bp - 0x1e]
0000EEEC: jg 0xef41
0000EEEE: mov ax, word ptr [bp - 0x14]
0000EEF1: cmp ax, word ptr [bp - 0x20]
0000EEF4: jb 0xeefe
0000EEF6: mov word ptr [bp - 2], 0xfffe
0000EEFB: jmp 0xefef
0000EEFE: mov ax, word ptr [bp - 0x1a]
0000EF01: mov dx, 0x168
0000EF04: imul dx
0000EF06: mov bx, 0x2710
0000EF09: lcall 0x7ff, 0x32
0000EF0E: push ax
0000EF0F: call 0xeffc
0000EF12: mov dx, word ptr [bp - 0x16]
0000EF15: imul dx
0000EF17: mov bx, 0x2710
0000EF1A: xor cx, cx
0000EF1C: lcall 0x7ff, 0x50
0000EF21: add ax, word ptr [bp - 0x10]
0000EF24: stosw word ptr es:[di], ax
0000EF25: pop ax
0000EF26: call 0xf03c
0000EF29: mov dx, word ptr [bp - 0x18]
0000EF2C: imul dx
0000EF2E: mov bx, 0x2710
0000EF31: xor cx, cx
0000EF33: lcall 0x7ff, 0x50
0000EF38: add ax, word ptr [bp - 0x12]
0000EF3B: stosw word ptr es:[di], ax
0000EF3C: inc word ptr [bp - 0x14]
0000EF3F: jmp 0xeee0
0000EF41: mov ax, word ptr [bp - 0x1c]
0000EF44: mov dx, 0x168
0000EF47: imul dx
0000EF49: mov bx, 0x2710
0000EF4C: lcall 0x7ff, 0x32
0000EF51: push ax
0000EF52: call 0xeffc
0000EF55: mov dx, word ptr [bp - 0x16]
0000EF58: imul dx
0000EF5A: mov bx, 0x2710
0000EF5D: xor cx, cx
0000EF5F: lcall 0x7ff, 0x50
0000EF64: add ax, word ptr [bp - 0x10]
0000EF67: mov word ptr [0x5af6], ax
0000EF6A: stosw word ptr es:[di], ax
0000EF6B: pop ax
0000EF6C: call 0xf03c
0000EF6F: mov dx, word ptr [bp - 0x18]
0000EF72: imul dx
0000EF74: mov bx, 0x2710
0000EF77: xor cx, cx
0000EF79: lcall 0x7ff, 0x50
0000EF7E: add ax, word ptr [bp - 0x12]
0000EF81: mov word ptr [0x5af8], ax
0000EF84: stosw word ptr es:[di], ax
0000EF85: inc word ptr [bp - 0x14]
0000EF88: test word ptr [bp + 6], 0x8000
0000EF8D: jne 0xefa5
0000EF8F: mov ax, word ptr [bp - 0x10]
0000EF92: stosw word ptr es:[di], ax
0000EF93: mov ax, word ptr [bp - 0x12]
0000EF96: stosw word ptr es:[di], ax
0000EF97: inc word ptr [bp - 0x14]
0000EF9A: mov ax, word ptr [0x5af2]
0000EF9D: stosw word ptr es:[di], ax
0000EF9E: mov ax, word ptr [0x5af4]
0000EFA1: stosw word ptr es:[di], ax
0000EFA2: inc word ptr [bp - 0x14]
0000EFA5: mov bx, word ptr [bp - 0x14]
0000EFA8: shl bx, 1
0000EFAA: shl bx, 1
0000EFAC: sub word ptr [0x54bf], bx
0000EFB0: add word ptr [0x54c1], bx
0000EFB4: push word ptr [bp - 0xa]
0000EFB7: push word ptr [bp - 0xc]
0000EFBA: push word ptr [bp - 0x14]
0000EFBD: mov ax, word ptr [bp + 6]
0000EFC0: and ax, 0x7fff
0000EFC3: push ax
0000EFC4: lcall 0xfe6, 0x5c3
0000EFC9: mov bx, word ptr [bp - 0xc]
0000EFCC: mov word ptr [0x54c1], bx
0000EFD0: mov bx, word ptr [bp - 0xe]
0000EFD3: mov word ptr [0x54bf], bx
0000EFD7: mov si, 0x6cda
0000EFDA: mov bx, word ptr [bp - 6]
0000EFDD: mov word ptr [si + 0x30], bx
0000EFE0: mov bx, word ptr [bp - 8]
0000EFE3: mov word ptr [si + 0x32], bx
0000EFE6: mov bx, word ptr [bp - 4]
0000EFE9: mov word ptr [si + 0x3c], bx
0000EFEC: mov word ptr [bp - 2], ax
0000EFEF: mov ax, word ptr [bp - 2]
0000EFF2: pop di
0000EFF3: pop si
0000EFF4: pop es
0000EFF5: pop ds
0000EFF6: mov sp, bp
0000EFF8: pop bp
0000EFF9: retf 0xe
0000EFFC: cmp ax, 0x168
0000EFFF: jl 0xf004
0000F001: sub ax, 0x168
0000F004: cmp ax, 0x10e
0000F007: jle 0xf012
0000F009: xor dx, dx
0000F00B: sub ax, 0x168
0000F00E: neg ax
0000F010: jmp 0xf02d
0000F012: cmp ax, 0x5a
0000F015: jle 0xf02b
0000F017: mov dx, 1
0000F01A: cmp ax, 0xb4
0000F01D: jle 0xf024
0000F01F: sub ax, 0xb4
0000F022: jmp 0xf02d
0000F024: sub ax, 0xb4
0000F027: neg ax
0000F029: jmp 0xf02d
0000F02B: xor dx, dx
0000F02D: mov bx, ax
0000F02F: shl bx, 1
0000F031: mov ax, word ptr [bx + 0x5bae]
0000F035: or dx, dx
0000F037: je 0xf03b
0000F039: neg ax
0000F03B: ret 
0000F03C: cmp ax, 0x168
0000F03F: jl 0xf044
0000F041: sub ax, 0x168
0000F044: cmp ax, 0xb4
0000F047: jle 0xf05c
0000F049: xor dx, dx
0000F04B: cmp ax, 0x10e
0000F04E: jle 0xf057
0000F050: sub ax, 0x168
0000F053: neg ax
0000F055: jmp 0xf069
0000F057: sub ax, 0xb4
0000F05A: jmp 0xf069
0000F05C: mov dx, 1
0000F05F: cmp ax, 0x5a
0000F062: jle 0xf069
0000F064: sub ax, 0xb4
0000F067: neg ax
0000F069: mov bx, 0x5a
0000F06C: sub bx, ax
0000F06E: shl bx, 1
0000F070: mov ax, word ptr [bx + 0x5bae]
0000F074: or dx, dx
0000F076: je 0xf07a
0000F078: neg ax
0000F07A: ret 
0000F07B: add byte ptr [di - 0x75], dl
0000F07E: in al, dx
0000F07F: sub sp, 8
0000F082: push ds
0000F083: push es
0000F084: push si
0000F085: push di
0000F086: mov ax, 0x1ab5
0000F089: mov ds, ax
0000F08B: mov si, 0x6cda
0000F08E: mov ax, word ptr [si + 0x3c]
0000F091: mov word ptr [bp - 8], ax
0000F094: cmp ax, 1
0000F097: jne 0xf0bf
0000F099: mov word ptr [si + 0x3c], 0
0000F09E: push word ptr [bp + 0xc]
0000F0A1: lcall 0x1214, 0x21c
0000F0A6: mov word ptr [bp + 0xc], ax
0000F0A9: push word ptr [bp + 0xa]
0000F0AC: lcall 0x1214, 0x26c
0000F0B1: mov word ptr [bp + 0xa], ax
0000F0B4: push word ptr [bp + 8]
0000F0B7: lcall 0x1214, 0x2cf
0000F0BC: mov word ptr [bp + 8], ax
0000F0BF: lcall 0x10b4, 0x84
0000F0C4: mov bx, word ptr [bp + 8]
0000F0C7: mul bx
0000F0C9: mov bx, 0x64
0000F0CC: div bx
0000F0CE: mov word ptr [bp - 4], ax
0000F0D1: mov ax, word ptr [bp + 8]
0000F0D4: mov word ptr [bp - 6], ax
0000F0D7: push word ptr [bp + 0xc]
0000F0DA: push word ptr [bp + 0xa]
0000F0DD: push word ptr [bp - 4]
0000F0E0: push word ptr [bp - 6]
0000F0E3: push word ptr [bp + 6]
0000F0E6: push cs
0000F0E7: call 0xf100
0000F0EA: mov word ptr [bp - 2], ax
0000F0ED: mov ax, word ptr [bp - 8]
0000F0F0: mov word ptr [si + 0x3c], ax
0000F0F3: mov ax, word ptr [bp - 2]
0000F0F6: pop di
0000F0F7: pop si
0000F0F8: pop es
0000F0F9: pop ds
0000F0FA: mov sp, bp
0000F0FC: pop bp
0000F0FD: retf 8
0000F100: push bp
0000F101: mov bp, sp
0000F103: sub sp, 0x32
0000F106: push ds
0000F107: push es
0000F108: push si
0000F109: push di
0000F10A: mov ax, 0x1ab5
0000F10D: mov ds, ax
0000F10F: mov si, 0x6cda
0000F112: cmp word ptr [si + 0x3c], 1
0000F116: jne 0xf144
0000F118: push word ptr [bp + 0xe]
0000F11B: lcall 0x1214, 0x21c
0000F120: mov word ptr [bp + 0xe], ax
0000F123: push word ptr [bp + 0xc]
0000F126: lcall 0x1214, 0x26c
0000F12B: mov word ptr [bp + 0xc], ax
0000F12E: push word ptr [bp + 0xa]
0000F131: lcall 0x1214, 0x21c
0000F136: mov word ptr [bp + 0xa], ax
0000F139: push word ptr [bp + 8]
0000F13C: lcall 0x1214, 0x2cf
0000F141: mov word ptr [bp + 8], ax
0000F144: mov ax, word ptr [si + 0xc]
0000F147: mov word ptr [bp - 0x26], ax
0000F14A: mov ax, word ptr [si + 0x30]
0000F14D: mov bx, word ptr [si + 0x32]
0000F150: add word ptr [bp + 0xe], ax
0000F153: add word ptr [bp + 0xc], bx
0000F156: mov dx, word ptr [bp + 6]
0000F159: and dx, 2
0000F15C: je 0xf1a0
0000F15E: mov dx, word ptr [si + 0x3c]
0000F161: mov word ptr [bp - 0x28], dx
0000F164: mov word ptr [si + 0x3c], 0
0000F169: mov word ptr [bp - 0x2e], ax
0000F16C: mov word ptr [bp - 0x30], bx
0000F16F: mov word ptr [si + 0x30], 0
0000F174: mov word ptr [si + 0x32], 0
0000F179: mov ax, word ptr [si + 0x24]
0000F17C: mov word ptr [si + 0xc], ax
0000F17F: mov bx, word ptr [si + 0x28]
0000F182: mov word ptr [bp - 0x2a], bx
0000F185: mov bx, word ptr [si + 0x2a]
0000F188: mov word ptr [bp - 0x2c], bx
0000F18B: mov word ptr [si + 0x2a], 1
0000F190: mov ax, word ptr [si + 0x22]
0000F193: mov bx, 8
0000F196: mul bx
0000F198: mov di, 0x6d39
0000F19B: add di, ax
0000F19D: mov word ptr [bp - 0x32], di
0000F1A0: cmp word ptr [si], 1
0000F1A3: jne 0xf1ad
0000F1A5: mov ax, word ptr [si + 2]
0000F1A8: mov si, 0x6cb8
0000F1AB: jmp 0xf1c0
0000F1AD: mov si, 0x6c14
0000F1B0: mov ax, word ptr [0x43b1]
0000F1B3: cmp ax, 0x28
0000F1B6: jbe 0xf1c0
0000F1B8: mov word ptr [bp - 2], 0xfffa
0000F1BD: jmp 0xf400
0000F1C0: shl ax, 1
0000F1C2: shl ax, 1
0000F1C4: add si, ax
0000F1C6: lcall 0xc6c, 0x3e
0000F1CB: mov word ptr [bp - 0x24], ax
0000F1CE: mov ax, word ptr [bp + 0xa]
0000F1D1: mul ax
0000F1D3: mov word ptr [bp - 0x12], ax
0000F1D6: mov word ptr [bp - 0x10], dx
0000F1D9: shl ax, 1
0000F1DB: rcl dx, 1
0000F1DD: mov word ptr [bp - 0x1a], ax
0000F1E0: mov word ptr [bp - 0x18], dx
0000F1E3: mov ax, word ptr [bp + 8]
0000F1E6: mul ax
0000F1E8: mov word ptr [bp - 0x16], ax
0000F1EB: mov word ptr [bp - 0x14], dx
0000F1EE: shl ax, 1
0000F1F0: rcl dx, 1
0000F1F2: mov word ptr [bp - 0x1e], ax
0000F1F5: mov word ptr [bp - 0x1c], dx
0000F1F8: xor ax, ax
0000F1FA: mov word ptr [bp - 0xa], ax
0000F1FD: mov word ptr [bp - 8], ax
0000F200: mov ax, word ptr [bp - 0x1a]
0000F203: mov dx, word ptr [bp - 0x18]
0000F206: mov cx, word ptr [bp + 8]
0000F209: push cs
0000F20A: call 0xf5db
0000F20D: jae 0xf212
0000F20F: jmp 0xf362
0000F212: mov word ptr [bp - 0xe], ax
0000F215: mov word ptr [bp - 0xc], dx
0000F218: mov ax, word ptr [bp - 0x12]
0000F21B: mov dx, word ptr [bp - 0x10]
0000F21E: sar dx, 1
0000F220: rcr ax, 1
0000F222: sar dx, 1
0000F224: rcr ax, 1
0000F226: add ax, word ptr [bp - 0x16]
0000F229: adc dx, word ptr [bp - 0x14]
0000F22C: mov word ptr [bp - 6], ax
0000F22F: mov word ptr [bp - 4], dx
0000F232: mov ax, word ptr [bp - 0x12]
0000F235: mov dx, word ptr [bp - 0x10]
0000F238: mov cx, word ptr [bp + 8]
0000F23B: push cs
0000F23C: call 0xf5db
0000F23F: sub word ptr [bp - 6], ax
0000F242: sbb word ptr [bp - 4], dx
0000F245: xor bx, bx
0000F247: mov cx, word ptr [bp + 8]
0000F24A: mov word ptr [bp - 0x20], bx
0000F24D: mov word ptr [bp - 0x22], cx
0000F250: mov ax, word ptr [bp - 0xa]
0000F253: mov dx, word ptr [bp - 8]
0000F256: sub ax, word ptr [bp - 0xe]
0000F259: sbb dx, word ptr [bp - 0xc]
0000F25C: jae 0xf2a2
0000F25E: push cs
0000F25F: call 0xf40d
0000F262: cmp word ptr [bp - 4], 0
0000F266: js 0xf281
0000F268: dec cx
0000F269: mov ax, word ptr [bp - 0xe]
0000F26C: mov dx, word ptr [bp - 0xc]
0000F26F: sub ax, word ptr [bp - 0x1a]
0000F272: sbb dx, word ptr [bp - 0x18]
0000F275: mov word ptr [bp - 0xe], ax
0000F278: mov word ptr [bp - 0xc], dx
0000F27B: sub word ptr [bp - 6], ax
0000F27E: sbb word ptr [bp - 4], dx
0000F281: inc bx
0000F282: mov ax, word ptr [bp - 0xa]
0000F285: mov dx, word ptr [bp - 8]
0000F288: add ax, word ptr [bp - 0x1e]
0000F28B: adc dx, word ptr [bp - 0x1c]
0000F28E: mov word ptr [bp - 0xa], ax
0000F291: mov word ptr [bp - 8], dx
0000F294: add ax, word ptr [bp - 0x16]
0000F297: adc dx, word ptr [bp - 0x14]
0000F29A: add word ptr [bp - 6], ax
0000F29D: adc word ptr [bp - 4], dx
0000F2A0: jmp 0xf250
0000F2A2: push bx
0000F2A3: push cx
0000F2A4: mov ax, word ptr [bp - 0x12]
0000F2A7: mov dx, word ptr [bp - 0x10]
0000F2AA: sub ax, word ptr [bp - 0x16]
0000F2AD: sbb dx, word ptr [bp - 0x14]
0000F2B0: mov bx, ax
0000F2B2: mov cx, dx
0000F2B4: sar dx, 1
0000F2B6: rcr ax, 1
0000F2B8: add ax, bx
0000F2BA: adc dx, cx
0000F2BC: sub ax, word ptr [bp - 0xa]
0000F2BF: sbb dx, word ptr [bp - 8]
0000F2C2: sub ax, word ptr [bp - 0xe]
0000F2C5: sbb dx, word ptr [bp - 0xc]
0000F2C8: sar dx, 1
0000F2CA: rcr ax, 1
0000F2CC: add word ptr [bp - 6], ax
0000F2CF: adc word ptr [bp - 4], dx
0000F2D2: pop cx
0000F2D3: pop bx
0000F2D4: push cs
0000F2D5: call 0xf40d
0000F2D8: cmp word ptr [bp - 4], 0
0000F2DC: jns 0xf2f7
0000F2DE: inc bx
0000F2DF: mov ax, word ptr [bp - 0xa]
0000F2E2: mov dx, word ptr [bp - 8]
0000F2E5: add ax, word ptr [bp - 0x1e]
0000F2E8: adc dx, word ptr [bp - 0x1c]
0000F2EB: mov word ptr [bp - 0xa], ax
0000F2EE: mov word ptr [bp - 8], dx
0000F2F1: add word ptr [bp - 6], ax
0000F2F4: adc word ptr [bp - 4], dx
0000F2F7: mov ax, word ptr [bp - 0xe]
0000F2FA: mov dx, word ptr [bp - 0xc]
0000F2FD: sub ax, word ptr [bp - 0x1a]
0000F300: sbb dx, word ptr [bp - 0x18]
0000F303: mov word ptr [bp - 0xe], ax
0000F306: mov word ptr [bp - 0xc], dx
0000F309: mov ax, word ptr [bp - 0x12]
0000F30C: mov dx, word ptr [bp - 0x10]
0000F30F: sub ax, word ptr [bp - 0xe]
0000F312: sbb dx, word ptr [bp - 0xc]
0000F315: add word ptr [bp - 6], ax
0000F318: adc word ptr [bp - 4], dx
0000F31B: dec cx
0000F31C: jns 0xf2d4
0000F31E: cmp word ptr [bp + 6], 2
0000F322: jge 0xf327
0000F324: jmp 0xf3fb
0000F327: mov cx, word ptr [bp - 0x22]
0000F32A: inc cx
0000F32B: push cs
0000F32C: call 0xf40d
0000F32F: mov bx, 0x6cda
0000F332: mov ax, word ptr [bp - 0x26]
0000F335: mov word ptr [bx + 0xc], ax
0000F338: mov ax, word ptr [bp - 0x2a]
0000F33B: mov word ptr [bx + 0x28], ax
0000F33E: mov ax, word ptr [bp - 0x2c]
0000F341: mov word ptr [bx + 0x2a], ax
0000F344: mov ax, word ptr [bp - 0x28]
0000F347: mov word ptr [bx + 0x3c], ax
0000F34A: mov ax, word ptr [bp - 0x2e]
0000F34D: mov word ptr [bx + 0x30], ax
0000F350: mov ax, word ptr [bp - 0x30]
0000F353: mov word ptr [bx + 0x32], ax
0000F356: and word ptr [bp + 6], 1
0000F35A: jne 0xf35f
0000F35C: jmp 0xf3fb
0000F35F: jmp 0xf1ce
0000F362: mov si, 0x6cda
0000F365: test word ptr [bp + 6], 2
0000F36A: je 0xf374
0000F36C: mov ax, word ptr [bp - 0x26]
0000F36F: mov word ptr [si + 0xc], ax
0000F372: jmp 0xf395
0000F374: mov dx, word ptr [si + 0x3c]
0000F377: mov word ptr [bp - 0x28], dx
0000F37A: mov word ptr [si + 0x3c], 0
0000F37F: mov ax, word ptr [si + 0x30]
0000F382: mov bx, word ptr [si + 0x32]
0000F385: mov word ptr [bp - 0x2e], ax
0000F388: mov word ptr [bp - 0x30], bx
0000F38B: mov word ptr [si + 0x30], 0
0000F390: mov word ptr [si + 0x32], 0
0000F395: mov ax, word ptr [bp + 0xe]
0000F398: mov bx, word ptr [bp + 0xc]
0000F39B: mov cx, word ptr [bp + 0xa]
0000F39E: mov dx, word ptr [bp + 8]
0000F3A1: mov si, ax
0000F3A3: sub si, dx
0000F3A5: push si
0000F3A6: mov si, bx
0000F3A8: sub si, cx
0000F3AA: push si
0000F3AB: mov si, ax
0000F3AD: add si, dx
0000F3AF: push si
0000F3B0: mov si, bx
0000F3B2: add si, cx
0000F3B4: push si
0000F3B5: xor ax, ax
0000F3B7: push ax
0000F3B8: mov ax, 0x168
0000F3BB: push ax
0000F3BC: mov ax, word ptr [bp + 6]
0000F3BF: or ax, 0x8000
0000F3C2: push ax
0000F3C3: lcall 0xcac, 0x6c4
0000F3C8: mov bx, 0x6cda
0000F3CB: test word ptr [bp + 6], 2
0000F3D0: je 0xf3e4
0000F3D2: mov dx, word ptr [bp - 0x26]
0000F3D5: mov word ptr [bx + 0xc], dx
0000F3D8: mov dx, word ptr [bp - 0x2a]
0000F3DB: mov word ptr [bx + 0x28], dx
0000F3DE: mov dx, word ptr [bp - 0x2c]
0000F3E1: mov word ptr [bx + 0x2a], dx
0000F3E4: mov dx, word ptr [bp - 0x28]
0000F3E7: mov word ptr [bx + 0x3c], dx
0000F3EA: mov dx, word ptr [bp - 0x2e]
0000F3ED: mov word ptr [bx + 0x30], dx
0000F3F0: mov dx, word ptr [bp - 0x30]
0000F3F3: mov word ptr [bx + 0x32], dx
0000F3F6: mov word ptr [bp - 2], ax
0000F3F9: jmp 0xf400
0000F3FB: mov word ptr [bp - 2], 0
0000F400: mov ax, word ptr [bp - 2]
0000F403: pop di
0000F404: pop si
0000F405: pop es
0000F406: pop ds
0000F407: mov sp, bp
0000F409: pop bp
0000F40A: retf 0xa
0000F40D: push bx
0000F40E: push cx
0000F40F: cmp word ptr [bp + 6], 2
0000F413: jge 0xf418
0000F415: jmp 0xf4fb
0000F418: cmp cx, word ptr [bp - 0x22]
0000F41B: jne 0xf420
0000F41D: jmp 0xf5d2
0000F420: mov bx, 0x6cda
0000F423: cmp word ptr [bx + 0x26], 1
0000F427: je 0xf488
0000F429: cmp word ptr [bx + 0x22], 0
0000F42D: je 0xf488
0000F42F: mov word ptr [bx + 0x28], 0xffff
0000F434: mov ax, word ptr [bx + 0xe]
0000F437: mov word ptr [bx + 0xc], ax
0000F43A: push bx
0000F43B: mov cx, word ptr [bp + 0xe]
0000F43E: sub cx, word ptr [bp - 0x20]
0000F441: push cx
0000F442: mov bx, word ptr [bp + 0xc]
0000F445: add bx, word ptr [bp - 0x22]
0000F448: push bx
0000F449: mov ax, word ptr [bp + 0xe]
0000F44C: add ax, word ptr [bp - 0x20]
0000F44F: push ax
0000F450: push bx
0000F451: lcall 0xd9f, 0x178
0000F456: mov ax, word ptr [bp + 0xc]
0000F459: add ax, word ptr [bp - 0x22]
0000F45C: mov bx, word ptr [bp + 0xc]
0000F45F: sub bx, word ptr [bp - 0x22]
0000F462: cmp ax, bx
0000F464: je 0xf481
0000F466: mov cx, word ptr [bp + 0xe]
0000F469: sub cx, word ptr [bp - 0x20]
0000F46C: push cx
0000F46D: mov bx, word ptr [bp + 0xc]
0000F470: sub bx, word ptr [bp - 0x22]
0000F473: push bx
0000F474: mov ax, word ptr [bp + 0xe]
0000F477: add ax, word ptr [bp - 0x20]
0000F47A: push ax
0000F47B: push bx
0000F47C: lcall 0xd9f, 0x178
0000F481: pop bx
0000F482: mov ax, word ptr [bx + 0x24]
0000F485: mov word ptr [bx + 0xc], ax
0000F488: mov di, word ptr [bp - 0x32]
0000F48B: mov cx, word ptr [bp + 0xe]
0000F48E: sub cx, word ptr [bp - 0x20]
0000F491: push cx
0000F492: mov bx, word ptr [bp + 0xc]
0000F495: add bx, word ptr [bp - 0x22]
0000F498: push bx
0000F499: mov ax, word ptr [bp + 0xe]
0000F49C: add ax, word ptr [bp - 0x20]
0000F49F: push ax
0000F4A0: push bx
0000F4A1: and cx, 7
0000F4A4: and bx, 7
0000F4A7: mov al, byte ptr [bx + di]
0000F4A9: mov ah, al
0000F4AB: rol ax, cl
0000F4AD: mov bx, 0x6cda
0000F4B0: mov word ptr [bx + 0x28], ax
0000F4B3: lcall 0xd9f, 0x178
0000F4B8: mov ax, word ptr [bp + 0xc]
0000F4BB: add ax, word ptr [bp - 0x22]
0000F4BE: mov bx, word ptr [bp + 0xc]
0000F4C1: sub bx, word ptr [bp - 0x22]
0000F4C4: cmp ax, bx
0000F4C6: jne 0xf4cb
0000F4C8: jmp 0xf5d2
0000F4CB: mov cx, word ptr [bp + 0xe]
0000F4CE: sub cx, word ptr [bp - 0x20]
0000F4D1: push cx
0000F4D2: mov bx, word ptr [bp + 0xc]
0000F4D5: sub bx, word ptr [bp - 0x22]
0000F4D8: push bx
0000F4D9: mov ax, word ptr [bp + 0xe]
0000F4DC: add ax, word ptr [bp - 0x20]
0000F4DF: push ax
0000F4E0: push bx
0000F4E1: and cx, 7
0000F4E4: and bx, 7
0000F4E7: mov al, byte ptr [bx + di]
0000F4E9: mov ah, al
0000F4EB: rol ax, cl
0000F4ED: mov bx, 0x6cda
0000F4F0: mov word ptr [bx + 0x28], ax
0000F4F3: lcall 0xd9f, 0x178
0000F4F8: jmp 0xf5d2
0000F4FB: cmp bx, 0
0000F4FE: jne 0xf503
0000F500: jmp 0xf591
0000F503: mov ax, word ptr [bp + 0xe]
0000F506: add ax, bx
0000F508: mov bx, word ptr [bp + 0xc]
0000F50B: add bx, cx
0000F50D: cmp word ptr [bp - 0x24], 1
0000F511: jne 0xf51a
0000F513: lcall 0xc6c, 0xe5
0000F518: jb 0xf521
0000F51A: push ax
0000F51B: push bx
0000F51C: push word ptr [bp - 0x26]
0000F51F: lcall [si]
0000F521: pop cx
0000F522: pop bx
0000F523: push bx
0000F524: push cx
0000F525: mov ax, word ptr [bp + 0xe]
0000F528: sub ax, bx
0000F52A: mov bx, word ptr [bp + 0xc]
0000F52D: add bx, cx
0000F52F: cmp word ptr [bp - 0x24], 1
0000F533: jne 0xf53c
0000F535: lcall 0xc6c, 0xe5
0000F53A: jb 0xf543
0000F53C: push ax
0000F53D: push bx
0000F53E: push word ptr [bp - 0x26]
0000F541: lcall [si]
0000F543: pop cx
0000F544: pop bx
0000F545: push bx
0000F546: push cx
0000F547: cmp cx, 0
0000F54A: jne 0xf54f
0000F54C: jmp 0xf5d2
0000F54F: mov ax, word ptr [bp + 0xe]
0000F552: add ax, bx
0000F554: mov bx, word ptr [bp + 0xc]
0000F557: sub bx, cx
0000F559: cmp word ptr [bp - 0x24], 1
0000F55D: jne 0xf566
0000F55F: lcall 0xc6c, 0xe5
0000F564: jb 0xf56d
0000F566: push ax
0000F567: push bx
0000F568: push word ptr [bp - 0x26]
0000F56B: lcall [si]
0000F56D: pop cx
0000F56E: pop bx
0000F56F: push bx
0000F570: push cx
0000F571: mov ax, word ptr [bp + 0xe]
0000F574: sub ax, bx
0000F576: mov bx, word ptr [bp + 0xc]
0000F579: sub bx, cx
0000F57B: cmp word ptr [bp - 0x24], 1
0000F57F: jne 0xf588
0000F581: lcall 0xc6c, 0xe5
0000F586: jb 0xf5d2
0000F588: push ax
0000F589: push bx
0000F58A: push word ptr [bp - 0x26]
0000F58D: lcall [si]
0000F58F: jmp 0xf5d2
0000F591: mov ax, word ptr [bp + 0xe]
0000F594: mov bx, word ptr [bp + 0xc]
0000F597: add bx, cx
0000F599: cmp word ptr [bp - 0x24], 1
0000F59D: jne 0xf5a6
0000F59F: lcall 0xc6c, 0xe5
0000F5A4: jb 0xf5ad
0000F5A6: push ax
0000F5A7: push bx
0000F5A8: push word ptr [bp - 0x26]
0000F5AB: lcall [si]
0000F5AD: pop cx
0000F5AE: pop bx
0000F5AF: push bx
0000F5B0: push cx
0000F5B1: cmp cx, 0
0000F5B4: je 0xf5d2
0000F5B6: mov ax, word ptr [bp + 0xe]
0000F5B9: mov bx, word ptr [bp + 0xc]
0000F5BC: sub bx, cx
0000F5BE: cmp word ptr [bp - 0x24], 1
0000F5C2: jne 0xf5cb
0000F5C4: lcall 0xc6c, 0xe5
0000F5C9: jb 0xf5d2
0000F5CB: push ax
0000F5CC: push bx
0000F5CD: push word ptr [bp - 0x26]
0000F5D0: lcall [si]
0000F5D2: pop cx
0000F5D3: pop bx
0000F5D4: mov word ptr [bp - 0x20], bx
0000F5D7: mov word ptr [bp - 0x22], cx
0000F5DA: retf 
0000F5DB: push ax
0000F5DC: mov ax, dx
0000F5DE: mul cx
0000F5E0: or dx, dx
0000F5E2: je 0xf5e8
0000F5E4: pop ax
0000F5E5: stc 
0000F5E6: jmp 0xf5ee
0000F5E8: xchg cx, ax
0000F5E9: pop dx
0000F5EA: mul dx
0000F5EC: add dx, cx
0000F5EE: retf 
0000F5EF: add byte ptr [di - 0x75], dl
0000F5F2: in al, dx
0000F5F3: sub sp, 2
0000F5F6: push ds
0000F5F7: push es
0000F5F8: push si
0000F5F9: push di
0000F5FA: mov ax, 0x1ab5
0000F5FD: mov ds, ax
0000F5FF: mov si, 0x6cda
0000F602: cmp word ptr [si + 0x3c], 1
0000F606: jne 0xf61e
0000F608: push word ptr [bp + 8]
0000F60B: lcall 0x1214, 0x21c
0000F610: mov word ptr [bp + 8], ax
0000F613: push word ptr [bp + 6]
0000F616: lcall 0x1214, 0x26c
0000F61B: mov word ptr [bp + 6], ax
0000F61E: mov ax, word ptr [bp + 8]
0000F621: mov word ptr [si + 0x12], ax
0000F624: mov ax, word ptr [bp + 6]
0000F627: mov word ptr [si + 0x14], ax
0000F62A: mov word ptr [bp - 2], 0
0000F62F: mov ax, word ptr [bp - 2]
0000F632: pop di
0000F633: pop si
0000F634: pop es
0000F635: pop ds
0000F636: mov sp, bp
0000F638: pop bp
0000F639: retf 4
0000F63C: push bp
0000F63D: mov bp, sp
0000F63F: sub sp, 2
0000F642: push ds
0000F643: push es
0000F644: push si
0000F645: push di
0000F646: mov ax, 0x1ab5
0000F649: mov ds, ax
0000F64B: mov si, 0x6cda
0000F64E: cmp word ptr [si + 0x3c], 1
0000F652: jne 0xf66a
0000F654: push word ptr [bp + 8]
0000F657: lcall 0x1214, 0x21c
0000F65C: mov word ptr [bp + 8], ax
0000F65F: push word ptr [bp + 6]
0000F662: lcall 0x1214, 0x2cf
0000F667: mov word ptr [bp + 6], ax
0000F66A: mov ax, word ptr [bp + 8]
0000F66D: add word ptr [si + 0x12], ax
0000F670: mov ax, word ptr [bp + 6]
0000F673: cmp word ptr [si + 0x3c], 1
0000F677: jne 0xf67b
0000F679: neg ax
0000F67B: add word ptr [si + 0x14], ax
0000F67E: mov word ptr [bp - 2], 0
0000F683: mov ax, word ptr [bp - 2]
0000F686: pop di
0000F687: pop si
0000F688: pop es
0000F689: pop ds
0000F68A: mov sp, bp
0000F68C: pop bp
0000F68D: retf 4
0000F690: push bp
0000F691: mov bp, sp
0000F693: sub sp, 4
0000F696: push ds
0000F697: push es
0000F698: push si
0000F699: push di
0000F69A: mov ax, 0x1ab5
0000F69D: mov ds, ax
0000F69F: mov si, 0x6cda
0000F6A2: cmp word ptr [si + 0x3c], 1
0000F6A6: jne 0xf6be
0000F6A8: push word ptr [bp + 8]
0000F6AB: lcall 0x1214, 0x21c
0000F6B0: mov word ptr [bp + 8], ax
0000F6B3: push word ptr [bp + 6]
0000F6B6: lcall 0x1214, 0x26c
0000F6BB: mov word ptr [bp + 6], ax
0000F6BE: mov ax, word ptr [si + 0x3c]
0000F6C1: mov word ptr [bp - 4], ax
0000F6C4: mov word ptr [si + 0x3c], 0
0000F6C9: push word ptr [si + 0x12]
0000F6CC: push word ptr [si + 0x14]
0000F6CF: mov ax, word ptr [bp + 8]
0000F6D2: push ax
0000F6D3: mov word ptr [si + 0x12], ax
0000F6D6: mov ax, word ptr [bp + 6]
0000F6D9: push ax
0000F6DA: mov word ptr [si + 0x14], ax
0000F6DD: push cs
0000F6DE: call 0xf768
0000F6E1: mov ax, word ptr [bp - 4]
0000F6E4: mov word ptr [si + 0x3c], ax
0000F6E7: mov word ptr [bp - 2], ax
0000F6EA: mov ax, word ptr [bp - 2]
0000F6ED: pop di
0000F6EE: pop si
0000F6EF: pop es
0000F6F0: pop ds
0000F6F1: mov sp, bp
0000F6F3: pop bp
0000F6F4: retf 4
0000F6F7: push bp
0000F6F8: mov bp, sp
0000F6FA: sub sp, 4
0000F6FD: push ds
0000F6FE: push es
0000F6FF: push si
0000F700: push di
0000F701: mov ax, 0x1ab5
0000F704: mov ds, ax
0000F706: mov si, 0x6cda
0000F709: cmp word ptr [si + 0x3c], 1
0000F70D: jne 0xf725
0000F70F: push word ptr [bp + 8]
0000F712: lcall 0x1214, 0x21c
0000F717: mov word ptr [bp + 8], ax
0000F71A: push word ptr [bp + 6]
0000F71D: lcall 0x1214, 0x2cf
0000F722: mov word ptr [bp + 6], ax
0000F725: mov dx, word ptr [si + 0x3c]
0000F728: mov word ptr [bp - 4], dx
0000F72B: mov word ptr [si + 0x3c], 0
0000F730: mov ax, word ptr [si + 0x12]
0000F733: push ax
0000F734: mov bx, word ptr [si + 0x14]
0000F737: push bx
0000F738: add ax, word ptr [bp + 8]
0000F73B: push ax
0000F73C: mov word ptr [si + 0x12], ax
0000F73F: cmp dx, 0
0000F742: je 0xf747
0000F744: neg word ptr [bp + 6]
0000F747: add bx, word ptr [bp + 6]
0000F74A: push bx
0000F74B: mov word ptr [si + 0x14], bx
0000F74E: push cs
0000F74F: call 0xf768
0000F752: mov ax, word ptr [bp - 4]
0000F755: mov word ptr [si + 0x3c], ax
0000F758: mov word ptr [bp - 2], ax
0000F75B: mov ax, word ptr [bp - 2]
0000F75E: pop di
0000F75F: pop si
0000F760: pop es
0000F761: pop ds
0000F762: mov sp, bp
0000F764: pop bp
0000F765: retf 4
0000F768: push bp
0000F769: mov bp, sp
0000F76B: sub sp, 0x4e
0000F76E: push ds
0000F76F: push es
0000F770: push si
0000F771: push di
0000F772: mov ax, 0x1ab5
0000F775: mov ds, ax
0000F777: cld 
0000F778: cmp byte ptr [0x6d33], 1
0000F77D: je 0xf783
0000F77F: push cs
0000F780: call 0xf8c1
0000F783: mov byte ptr [bp - 0x4e], 0
0000F787: mov si, 0x6cda
0000F78A: mov ax, word ptr [si + 0x28]
0000F78D: mov word ptr [bp - 0x2a], ax
0000F790: cmp word ptr [si + 0x3c], 1
0000F794: jne 0xf7c2
0000F796: push word ptr [bp + 0xc]
0000F799: lcall 0x1214, 0x21c
0000F79E: mov word ptr [bp + 0xc], ax
0000F7A1: push word ptr [bp + 0xa]
0000F7A4: lcall 0x1214, 0x26c
0000F7A9: mov word ptr [bp + 0xa], ax
0000F7AC: push word ptr [bp + 8]
0000F7AF: lcall 0x1214, 0x21c
0000F7B4: mov word ptr [bp + 8], ax
0000F7B7: push word ptr [bp + 6]
0000F7BA: lcall 0x1214, 0x26c
0000F7BF: mov word ptr [bp + 6], ax
0000F7C2: mov ax, word ptr [si + 0x30]
0000F7C5: mov bx, ax
0000F7C7: or bx, word ptr [si + 0x32]
0000F7CA: je 0xf7db
0000F7CC: mov bx, word ptr [si + 0x32]
0000F7CF: add word ptr [bp + 0xc], ax
0000F7D2: add word ptr [bp + 0xa], bx
0000F7D5: add word ptr [bp + 8], ax
0000F7D8: add word ptr [bp + 6], bx
0000F7DB: mov ax, word ptr [bp + 0xc]
0000F7DE: cmp ax, word ptr [bp + 8]
0000F7E1: jle 0xf7f6
0000F7E3: xchg word ptr [bp + 8], ax
0000F7E6: mov word ptr [bp + 0xc], ax
0000F7E9: mov ax, word ptr [bp + 0xa]
0000F7EC: xchg word ptr [bp + 6], ax
0000F7EF: mov word ptr [bp + 0xa], ax
0000F7F2: mov byte ptr [bp - 0x4e], 1
0000F7F6: cmp word ptr [si + 0x18], 1
0000F7FA: jne 0xf835
0000F7FC: push word ptr [bp + 0xc]
0000F7FF: push word ptr [bp + 0xa]
0000F802: push word ptr [bp + 8]
0000F805: push word ptr [bp + 6]
0000F808: lcall 0xc6c, 0x10c
0000F80D: jae 0xf817
0000F80F: mov word ptr [bp - 2], 0
0000F814: jmp 0xf8b4
0000F817: cmp ax, word ptr [bp + 0xc]
0000F81A: je 0xf829
0000F81C: push cx
0000F81D: mov cl, byte ptr [bp + 0xc]
0000F820: sub cl, al
0000F822: and cl, 7
0000F825: ror word ptr [bp - 0x2a], cl
0000F828: pop cx
0000F829: mov word ptr [bp + 0xc], ax
0000F82C: mov word ptr [bp + 0xa], bx
0000F82F: mov word ptr [bp + 8], cx
0000F832: mov word ptr [bp + 6], dx
0000F835: mov ax, word ptr [si + 0x16]
0000F838: mov word ptr [bp - 0x24], ax
0000F83B: mov ax, word ptr [si + 0xc]
0000F83E: mov word ptr [bp - 0x26], ax
0000F841: mov ax, word ptr [si + 0x10]
0000F844: mov word ptr [bp - 0x28], ax
0000F847: mov ax, word ptr [si + 0x2a]
0000F84A: shr ax, 1
0000F84C: mov word ptr [bp - 0x2c], ax
0000F84F: cmp word ptr [si], 1
0000F852: jne 0xf85c
0000F854: mov dx, word ptr [si + 2]
0000F857: mov si, 0x6e87
0000F85A: jmp 0xf874
0000F85C: mov si, 0x6d99
0000F85F: mov dx, word ptr [0x43b3]
0000F863: cmp dx, 0
0000F866: jb 0xf86d
0000F868: cmp dx, 0x10
0000F86B: jbe 0xf874
0000F86D: mov word ptr [bp - 2], 0xfffa
0000F872: jmp 0xf8b4
0000F874: mov ax, 0xe
0000F877: mul dx
0000F879: add si, ax
0000F87B: cmp word ptr [bp - 0x2c], 0
0000F87F: jne 0xf8a7
0000F881: cmp word ptr [bp - 0x2a], -1
0000F885: je 0xf89e
0000F887: mov ax, word ptr [bp + 0xa]
0000F88A: cmp ax, word ptr [bp + 6]
0000F88D: jne 0xf8ac
0000F88F: mov ax, word ptr [si + 4]
0000F892: cmp ax, 0xcea
0000F895: jne 0xf8ac
0000F897: mov ax, word ptr [bp - 0x2a]
0000F89A: cmp ah, al
0000F89C: jne 0xf8ac
0000F89E: mov ax, word ptr [si + 2]
0000F8A1: mov word ptr [bp - 0x20], ax
0000F8A4: ljmp [si + 4]
0000F8A7: nop 
0000F8A8: nop 
0000F8A9: jmp 0xf9de
0000F8AC: nop 
0000F8AD: nop 
0000F8AE: jmp 0xfbcf
0000F8B1: mov word ptr [bp - 2], ax
0000F8B4: mov ax, word ptr [bp - 2]
0000F8B7: pop di
0000F8B8: pop si
0000F8B9: pop es
0000F8BA: pop ds
0000F8BB: mov sp, bp
0000F8BD: pop bp
0000F8BE: retf 8
0000F8C1: mov bx, 0x6d99
0000F8C4: mov word ptr [bx + 4], 0x7b9
0000F8C9: mov word ptr [bx + 6], 0xd9f
0000F8CE: add bx, 0xe
0000F8D1: mov word ptr [bx + 4], 0x968
0000F8D6: mov word ptr [bx + 6], 0xd9f
0000F8DB: add bx, 0xe
0000F8DE: mov word ptr [bx + 4], 0xcea
0000F8E3: mov word ptr [bx + 6], 0xd9f
0000F8E8: add bx, 0xe
0000F8EB: mov word ptr [bx + 4], 0xcea
0000F8F0: mov word ptr [bx + 6], 0xd9f
0000F8F5: add bx, 0xe
0000F8F8: mov word ptr [bx + 4], 0xe74
0000F8FD: mov word ptr [bx + 6], 0xd9f
0000F902: add bx, 0xe
0000F905: mov word ptr [bx + 4], 0xcea
0000F90A: mov word ptr [bx + 6], 0xd9f
0000F90F: add bx, 0xe
0000F912: mov word ptr [bx + 4], 0xe74
0000F917: mov word ptr [bx + 6], 0xd9f
0000F91C: add bx, 0xe
0000F91F: mov word ptr [bx + 4], 0xcea
0000F924: mov word ptr [bx + 6], 0xd9f
0000F929: add bx, 0xe
0000F92C: mov word ptr [bx + 4], 0xff1
0000F931: mov word ptr [bx + 6], 0xd9f
0000F936: add bx, 0xe
0000F939: mov word ptr [bx + 4], 0xb0f
0000F93E: mov word ptr [bx + 6], 0xd9f
0000F943: add bx, 0xe
0000F946: mov word ptr [bx + 4], 0x10e1
0000F94B: mov word ptr [bx + 6], 0xd9f
0000F950: add bx, 0xe
0000F953: mov word ptr [bx + 4], 0xcea
0000F958: mov word ptr [bx + 6], 0xd9f
0000F95D: add bx, 0xe
0000F960: mov word ptr [bx + 4], 0x10e1
0000F965: mov word ptr [bx + 6], 0xd9f
0000F96A: add bx, 0xe
0000F96D: mov word ptr [bx + 4], 0x10e1
0000F972: mov word ptr [bx + 6], 0xd9f
0000F977: add bx, 0xe
0000F97A: mov word ptr [bx + 4], 0xcea
0000F97F: mov word ptr [bx + 6], 0xd9f
0000F984: add bx, 0xe
0000F987: mov word ptr [bx + 4], 0x10e1
0000F98C: mov word ptr [bx + 6], 0xd9f
0000F991: add bx, 0xe
0000F994: mov word ptr [bx + 4], 0x10e1
0000F999: mov word ptr [bx + 6], 0xd9f
0000F99E: add bx, 0xe
0000F9A1: mov bx, 0x6e87
0000F9A4: mov word ptr [bx + 4], 0x129e
0000F9A9: mov word ptr [bx + 6], 0xd9f
0000F9AE: add bx, 0xe
0000F9B1: mov word ptr [bx + 4], 0x129e
0000F9B6: mov word ptr [bx + 6], 0xd9f
0000F9BB: add bx, 0xe
0000F9BE: mov word ptr [bx + 4], 0x129e
0000F9C3: mov word ptr [bx + 6], 0xd9f
0000F9C8: add bx, 0xe
0000F9CB: mov word ptr [bx + 4], 0x129e
0000F9D0: mov word ptr [bx + 6], 0xd9f
0000F9D5: add bx, 0xe
0000F9D8: mov byte ptr [0x6d33], 1
0000F9DD: retf 
0000F9DE: mov si, 0x6cda
0000F9E1: mov ax, word ptr [si + 0x3c]
0000F9E4: mov word ptr [bp - 0x44], ax
0000F9E7: mov word ptr [si + 0x3c], 0
0000F9EC: mov ax, word ptr [si + 0x30]
0000F9EF: mov word ptr [bp - 0x32], ax
0000F9F2: mov ax, word ptr [si + 0x32]
0000F9F5: mov word ptr [bp - 0x34], ax
0000F9F8: mov word ptr [si + 0x30], 0
0000F9FD: mov word ptr [si + 0x32], 0
0000FA02: mov ax, word ptr [si + 0x28]
0000FA05: mov word ptr [bp - 0x2e], ax
0000FA08: mov ax, word ptr [si + 0x2a]
0000FA0B: mov word ptr [bp - 0x30], ax
0000FA0E: mov word ptr [si + 0x2a], 1
0000FA13: mov ax, word ptr [bp + 8]
0000FA16: sub ax, word ptr [bp + 0xc]
0000FA19: mov bx, ax
0000FA1B: or bx, bx
0000FA1D: jge 0xfa21
0000FA1F: neg bx
0000FA21: mov word ptr [bp - 4], bx
0000FA24: or ax, ax
0000FA26: je 0xfa34
0000FA28: jl 0xfa2f
0000FA2A: mov ax, 1
0000FA2D: jmp 0xfa53
0000FA2F: mov ax, 0xffff
0000FA32: jmp 0xfa53
0000FA34: mov di, word ptr [bp - 0x2c]
0000FA37: neg di
0000FA39: mov ax, word ptr [bp + 0xc]
0000FA3C: add ax, di
0000FA3E: push ax
0000FA3F: push word ptr [bp + 0xa]
0000FA42: push ax
0000FA43: push word ptr [bp + 6]
0000FA46: push cs
0000FA47: call 0xf768
0000FA4A: inc di
0000FA4B: cmp di, word ptr [bp - 0x2c]
0000FA4E: jle 0xfa39
0000FA50: jmp 0xfb9c
0000FA53: mov word ptr [bp - 0xc], ax
0000FA56: mov ax, word ptr [bp + 6]
0000FA59: sub ax, word ptr [bp + 0xa]
0000FA5C: mov bx, ax
0000FA5E: or bx, bx
0000FA60: jge 0xfa64
0000FA62: neg bx
0000FA64: mov word ptr [bp - 6], bx
0000FA67: or ax, ax
0000FA69: je 0xfa77
0000FA6B: jl 0xfa72
0000FA6D: mov ax, 1
0000FA70: jmp 0xfa96
0000FA72: mov ax, 0xffff
0000FA75: jmp 0xfa96
0000FA77: mov di, word ptr [bp - 0x2c]
0000FA7A: neg di
0000FA7C: push word ptr [bp + 0xc]
0000FA7F: mov bx, word ptr [bp + 0xa]
0000FA82: add bx, di
0000FA84: push bx
0000FA85: push word ptr [bp + 8]
0000FA88: push bx
0000FA89: push cs
0000FA8A: call 0xf768
0000FA8D: inc di
0000FA8E: cmp di, word ptr [bp - 0x2c]
0000FA91: jle 0xfa7c
0000FA93: jmp 0xfb9c
0000FA96: mov word ptr [bp - 0xe], ax
0000FA99: mov ax, word ptr [bp - 6]
0000FA9C: cmp ax, word ptr [bp - 4]
0000FA9F: ja 0xfaa4
0000FAA1: mov ax, word ptr [bp - 4]
0000FAA4: mov word ptr [bp - 8], ax
0000FAA7: cmp word ptr [bp - 0x24], 0
0000FAAB: jne 0xfb05
0000FAAD: jmp 0xfb05
0000FAAF: mov ax, word ptr [bp - 4]
0000FAB2: cmp ax, word ptr [bp - 6]
0000FAB5: ja 0xfac5
0000FAB7: mov si, word ptr [bp - 0x2c]
0000FABA: neg si
0000FABC: xor di, di
0000FABE: mov word ptr [bp - 4], 1
0000FAC3: jmp 0xfad1
0000FAC5: xor si, si
0000FAC7: mov di, word ptr [bp - 0x2c]
0000FACA: neg di
0000FACC: mov word ptr [bp - 4], 0
0000FAD1: mov ax, word ptr [bp + 0xc]
0000FAD4: add ax, si
0000FAD6: push ax
0000FAD7: mov ax, word ptr [bp + 0xa]
0000FADA: add ax, di
0000FADC: push ax
0000FADD: mov ax, word ptr [bp + 8]
0000FAE0: add ax, si
0000FAE2: push ax
0000FAE3: mov ax, word ptr [bp + 6]
0000FAE6: add ax, di
0000FAE8: push ax
0000FAE9: push cs
0000FAEA: call 0xf768
0000FAED: cmp word ptr [bp - 4], 1
0000FAF1: jne 0xfafc
0000FAF3: inc si
0000FAF4: cmp si, word ptr [bp - 0x2c]
0000FAF7: jle 0xfad1
0000FAF9: jmp 0xfb9c
0000FAFC: inc di
0000FAFD: cmp di, word ptr [bp - 0x2c]
0000FB00: jl 0xfad1
0000FB02: jmp 0xfb9c
0000FB05: mov word ptr [si + 0x28], 0xffff
0000FB0A: mov ax, word ptr [bp + 0xc]
0000FB0D: mov word ptr [bp - 0x12], ax
0000FB10: mov ax, word ptr [bp + 0xa]
0000FB13: mov word ptr [bp - 0x14], ax
0000FB16: xor si, si
0000FB18: xor di, di
0000FB1A: mov cx, word ptr [bp - 8]
0000FB1D: inc cx
0000FB1E: add si, word ptr [bp - 4]
0000FB21: add di, word ptr [bp - 6]
0000FB24: mov word ptr [bp - 0x10], 0
0000FB29: cmp si, word ptr [bp - 8]
0000FB2C: jle 0xfb3c
0000FB2E: mov word ptr [bp - 0x10], 1
0000FB33: sub si, word ptr [bp - 8]
0000FB36: mov ax, word ptr [bp - 0xc]
0000FB39: add word ptr [bp - 0x12], ax
0000FB3C: cmp di, word ptr [bp - 8]
0000FB3F: jle 0xfb4f
0000FB41: mov word ptr [bp - 0x10], 1
0000FB46: sub di, word ptr [bp - 8]
0000FB49: mov ax, word ptr [bp - 0xe]
0000FB4C: add word ptr [bp - 0x14], ax
0000FB4F: cmp word ptr [bp - 0x10], 1
0000FB53: jne 0xfb97
0000FB55: rol word ptr [bp - 0x2a], 1
0000FB58: jae 0xfb97
0000FB5A: mov dx, word ptr [bp - 0x2c]
0000FB5D: mov ax, word ptr [bp - 4]
0000FB60: cmp ax, word ptr [bp - 6]
0000FB63: jl 0xfb7f
0000FB65: push cx
0000FB66: push word ptr [bp - 0x12]
0000FB69: mov ax, word ptr [bp - 0x14]
0000FB6C: sub ax, dx
0000FB6E: push ax
0000FB6F: push word ptr [bp - 0x12]
0000FB72: mov ax, word ptr [bp - 0x14]
0000FB75: add ax, dx
0000FB77: push ax
0000FB78: push cs
0000FB79: call 0xf768
0000FB7C: pop cx
0000FB7D: jmp 0xfb97
0000FB7F: push cx
0000FB80: mov ax, word ptr [bp - 0x12]
0000FB83: sub ax, dx
0000FB85: push ax
0000FB86: push word ptr [bp - 0x14]
0000FB89: mov ax, word ptr [bp - 0x12]
0000FB8C: add ax, dx
0000FB8E: push ax
0000FB8F: push word ptr [bp - 0x14]
0000FB92: push cs
0000FB93: call 0xf768
0000FB96: pop cx
0000FB97: dec cx
0000FB98: je 0xfb9c
0000FB9A: jmp 0xfb1e
0000FB9C: mov bx, 0x6cda
0000FB9F: mov ax, word ptr [bp - 0x44]
0000FBA2: mov word ptr [bx + 0x3c], ax
0000FBA5: mov ax, word ptr [bp - 0x32]
0000FBA8: mov word ptr [bx + 0x30], ax
0000FBAB: mov ax, word ptr [bp - 0x34]
0000FBAE: mov word ptr [bx + 0x32], ax
0000FBB1: mov ax, word ptr [bp - 0x2e]
0000FBB4: mov word ptr [bx + 0x28], ax
0000FBB7: mov ax, word ptr [bp - 0x30]
0000FBBA: mov word ptr [bx + 0x2a], ax
0000FBBD: mov word ptr [bp - 2], 0
0000FBC2: mov ax, word ptr [bp - 2]
0000FBC5: pop di
0000FBC6: pop si
0000FBC7: pop es
0000FBC8: pop ds
0000FBC9: mov sp, bp
0000FBCB: pop bp
0000FBCC: retf 8
0000FBCF: mov si, 0x6cda
0000FBD2: cmp word ptr [si], 1
0000FBD5: jne 0xfbdf
0000FBD7: mov ax, word ptr [si + 2]
0000FBDA: mov si, 0x6cb8
0000FBDD: jmp 0xfbe5
0000FBDF: mov si, 0x6c14
0000FBE2: mov ax, word ptr [0x43b1]
0000FBE5: shl ax, 1
0000FBE7: shl ax, 1
0000FBE9: add si, ax
0000FBEB: mov ax, word ptr [bp + 6]
0000FBEE: cmp ax, word ptr [bp + 0xa]
0000FBF1: jne 0xfc2c
0000FBF3: mov ax, word ptr [si]
0000FBF5: mov word ptr [bp - 0x4c], ax
0000FBF8: mov ax, word ptr [si + 2]
0000FBFB: mov word ptr [bp - 0x4a], ax
0000FBFE: mov es, word ptr [bp - 0x26]
0000FC01: mov ds, word ptr [bp + 0xa]
0000FC04: mov di, word ptr [bp + 0xc]
0000FC07: mov si, word ptr [bp - 0x2a]
0000FC0A: cmp word ptr [bp - 0x28], 1
0000FC0E: je 0xfc19
0000FC10: cmp byte ptr [bp - 0x4e], 1
0000FC14: jne 0xfc23
0000FC16: dec word ptr [bp + 8]
0000FC19: rol si, 1
0000FC1B: jae 0xfc23
0000FC1D: push di
0000FC1E: push ds
0000FC1F: push es
0000FC20: lcall [bp - 0x4c]
0000FC23: inc di
0000FC24: cmp di, word ptr [bp + 8]
0000FC27: jle 0xfc19
0000FC29: jmp 0xfd97
0000FC2C: mov ax, word ptr [bp + 8]
0000FC2F: sub ax, word ptr [bp + 0xc]
0000FC32: jns 0xfc48
0000FC34: neg ax
0000FC36: mov bx, word ptr [bp + 0xc]
0000FC39: xchg word ptr [bp + 8], bx
0000FC3C: mov word ptr [bp + 0xc], bx
0000FC3F: mov bx, word ptr [bp + 0xa]
0000FC42: xchg word ptr [bp + 6], bx
0000FC45: mov word ptr [bp + 0xa], bx
0000FC48: mov bx, word ptr [bp + 6]
0000FC4B: sub bx, word ptr [bp + 0xa]
0000FC4E: jns 0xfc53
0000FC50: jmp 0xfcf7
0000FC53: cmp ax, bx
0000FC55: jl 0xfca7
0000FC57: shl bx, 1
0000FC59: mov word ptr [bp - 0x48], bx
0000FC5C: mov dx, bx
0000FC5E: sub dx, ax
0000FC60: mov cx, dx
0000FC62: sub cx, ax
0000FC64: mov word ptr [bp - 0x46], cx
0000FC67: mov cx, ax
0000FC69: inc cx
0000FC6A: mov bx, si
0000FC6C: mov si, word ptr [bp + 0xc]
0000FC6F: mov di, word ptr [bp + 0xa]
0000FC72: cmp word ptr [bp - 0x28], 1
0000FC76: je 0xfc7f
0000FC78: cmp byte ptr [bp - 0x4e], 1
0000FC7C: jne 0xfc91
0000FC7E: dec cx
0000FC7F: rol word ptr [bp - 0x2a], 1
0000FC82: jae 0xfc91
0000FC84: push bx
0000FC85: push cx
0000FC86: push dx
0000FC87: push si
0000FC88: push di
0000FC89: push word ptr [bp - 0x26]
0000FC8C: lcall [bx]
0000FC8E: pop dx
0000FC8F: pop cx
0000FC90: pop bx
0000FC91: inc si
0000FC92: or dx, dx
0000FC94: jns 0xfc9e
0000FC96: add dx, word ptr [bp - 0x48]
0000FC99: loop 0xfc7f
0000FC9B: jmp 0xfd97
0000FC9E: inc di
0000FC9F: add dx, word ptr [bp - 0x46]
0000FCA2: loop 0xfc7f
0000FCA4: jmp 0xfd97
0000FCA7: shl ax, 1
0000FCA9: mov word ptr [bp - 0x48], ax
0000FCAC: mov dx, ax
0000FCAE: sub dx, bx
0000FCB0: mov cx, dx
0000FCB2: sub cx, bx
0000FCB4: mov word ptr [bp - 0x46], cx
0000FCB7: mov cx, bx
0000FCB9: inc cx
0000FCBA: mov bx, si
0000FCBC: mov si, word ptr [bp + 0xc]
0000FCBF: mov di, word ptr [bp + 0xa]
0000FCC2: cmp word ptr [bp - 0x28], 1
0000FCC6: je 0xfccf
0000FCC8: cmp byte ptr [bp - 0x4e], 1
0000FCCC: jne 0xfce1
0000FCCE: dec cx
0000FCCF: rol word ptr [bp - 0x2a], 1
0000FCD2: jae 0xfce1
0000FCD4: push bx
0000FCD5: push cx
0000FCD6: push dx
0000FCD7: push si
0000FCD8: push di
0000FCD9: push word ptr [bp - 0x26]
0000FCDC: lcall [bx]
0000FCDE: pop dx
0000FCDF: pop cx
0000FCE0: pop bx
0000FCE1: inc di
0000FCE2: or dx, dx
0000FCE4: jns 0xfcee
0000FCE6: add dx, word ptr [bp - 0x48]
0000FCE9: loop 0xfccf
0000FCEB: jmp 0xfd97
0000FCEE: inc si
0000FCEF: add dx, word ptr [bp - 0x46]
0000FCF2: loop 0xfccf
0000FCF4: jmp 0xfd97
0000FCF7: neg bx
0000FCF9: cmp bx, ax
0000FCFB: jge 0xfd4b
0000FCFD: shl bx, 1
0000FCFF: mov word ptr [bp - 0x48], bx
0000FD02: mov dx, bx
0000FD04: sub dx, ax
0000FD06: mov cx, dx
0000FD08: sub cx, ax
0000FD0A: mov word ptr [bp - 0x46], cx
0000FD0D: mov cx, ax
0000FD0F: inc cx
0000FD10: mov bx, si
0000FD12: mov si, word ptr [bp + 0xc]
0000FD15: mov di, word ptr [bp + 0xa]
0000FD18: cmp word ptr [bp - 0x28], 1
0000FD1C: je 0xfd25
0000FD1E: cmp byte ptr [bp - 0x4e], 1
0000FD22: jne 0xfd37
0000FD24: dec cx
0000FD25: rol word ptr [bp - 0x2a], 1
0000FD28: jae 0xfd37
0000FD2A: push bx
0000FD2B: push cx
0000FD2C: push dx
0000FD2D: push si
0000FD2E: push di
0000FD2F: push word ptr [bp - 0x26]
0000FD32: lcall [bx]
0000FD34: pop dx
0000FD35: pop cx
0000FD36: pop bx
0000FD37: inc si
0000FD38: or dx, dx
0000FD3A: jns 0xfd43
0000FD3C: add dx, word ptr [bp - 0x48]
0000FD3F: loop 0xfd25
0000FD41: jmp 0xfd97
0000FD43: dec di
0000FD44: add dx, word ptr [bp - 0x46]
0000FD47: loop 0xfd25
0000FD49: jmp 0xfd97
0000FD4B: shl ax, 1
0000FD4D: mov word ptr [bp - 0x48], ax
0000FD50: mov dx, ax
0000FD52: sub dx, bx
0000FD54: mov cx, dx
0000FD56: sub cx, bx
0000FD58: mov word ptr [bp - 0x46], cx
0000FD5B: mov cx, bx
0000FD5D: inc cx
0000FD5E: mov bx, si
0000FD60: mov si, word ptr [bp + 0xc]
0000FD63: mov di, word ptr [bp + 0xa]
0000FD66: cmp word ptr [bp - 0x28], 1
0000FD6A: je 0xfd73
0000FD6C: cmp byte ptr [bp - 0x4e], 1
0000FD70: jne 0xfd85
0000FD72: dec cx
0000FD73: rol word ptr [bp - 0x2a], 1
0000FD76: jae 0xfd85
0000FD78: push bx
0000FD79: push cx
0000FD7A: push dx
0000FD7B: push si
0000FD7C: push di
0000FD7D: push word ptr [bp - 0x26]
0000FD80: lcall [bx]
0000FD82: pop dx
0000FD83: pop cx
0000FD84: pop bx
0000FD85: dec di
0000FD86: or dx, dx
0000FD88: jns 0xfd91
0000FD8A: add dx, word ptr [bp - 0x48]
0000FD8D: loop 0xfd73
0000FD8F: jmp 0xfd97
0000FD91: inc si
0000FD92: add dx, word ptr [bp - 0x46]
0000FD95: loop 0xfd73
0000FD97: mov word ptr [bp - 2], 0
0000FD9C: mov ax, word ptr [bp - 2]
0000FD9F: pop di
0000FDA0: pop si
0000FDA1: pop es
0000FDA2: pop ds
0000FDA3: mov sp, bp
0000FDA5: pop bp
0000FDA6: retf 8
0000FDA9: cmp word ptr [bp - 0x24], 0
0000FDAD: je 0xfdb4
0000FDAF: nop 
0000FDB0: nop 
0000FDB1: jmp 0xfbcf
0000FDB4: mov byte ptr [0x5c64], 0
0000FDB9: mov byte ptr [0x5c65], 0x55
0000FDBE: mov byte ptr [0x5c66], 0xaa
0000FDC3: mov byte ptr [0x5c67], 0xff
0000FDC8: and byte ptr [bp - 0x26], 3
0000FDCC: mov si, 0x2000
0000FDCF: mov di, 0xe050
0000FDD2: mov cx, word ptr [bp + 8]
0000FDD5: sub cx, word ptr [bp + 0xc]
0000FDD8: je 0xfe3c
0000FDDA: mov bx, word ptr [bp + 6]
0000FDDD: sub bx, word ptr [bp + 0xa]
0000FDE0: jne 0xfde5
0000FDE2: jmp 0xfe73
0000FDE5: jns 0xfdef
0000FDE7: neg bx
0000FDE9: neg si
0000FDEB: neg di
0000FDED: xchg di, si
0000FDEF: mov word ptr [bp - 0xa], di
0000FDF2: mov word ptr [bp - 0x1c], 0
0000FDF7: cmp bx, cx
0000FDF9: jle 0xfe02
0000FDFB: mov word ptr [bp - 0x1c], 1
0000FE00: xchg cx, bx
0000FE02: shl bx, 1
0000FE04: mov word ptr [bp - 0x18], bx
0000FE07: sub bx, cx
0000FE09: mov di, bx
0000FE0B: sub bx, cx
0000FE0D: mov word ptr [bp - 0x1a], bx
0000FE10: push cx
0000FE11: mov ax, word ptr [bp + 0xa]
0000FE14: mov bx, word ptr [bp + 0xc]
0000FE17: lcall 0x885, 0
0000FE1C: mov al, byte ptr [bp - 0x26]
0000FE1F: shl ax, cl
0000FE21: mov dx, ax
0000FE23: not dh
0000FE25: pop cx
0000FE26: inc cx
0000FE27: test bx, 0x2000
0000FE2B: je 0xfe30
0000FE2D: xchg word ptr [bp - 0xa], si
0000FE30: cmp word ptr [bp - 0x1c], 0
0000FE34: jne 0xfe39
0000FE36: jmp 0xfed6
0000FE39: jmp 0xff1f
0000FE3C: mov ax, word ptr [bp + 0xa]
0000FE3F: mov bx, word ptr [bp + 6]
0000FE42: mov cx, bx
0000FE44: sub cx, ax
0000FE46: jge 0xfe4c
0000FE48: neg cx
0000FE4A: mov ax, bx
0000FE4C: inc cx
0000FE4D: mov bx, word ptr [bp + 0xc]
0000FE50: push cx
0000FE51: lcall 0x885, 0
0000FE56: mov al, byte ptr [bp - 0x26]
0000FE59: shl ax, cl
0000FE5B: not ah
0000FE5D: pop cx
0000FE5E: test si, bx
0000FE60: je 0xfe64
0000FE62: xchg di, si
0000FE64: and byte ptr es:[bx], ah
0000FE67: or byte ptr es:[bx], al
0000FE6A: add bx, si
0000FE6C: xchg di, si
0000FE6E: loop 0xfe64
0000FE70: jmp 0xff46
0000FE73: mov ax, word ptr [bp + 0xa]
0000FE76: mov bx, word ptr [bp + 0xc]
0000FE79: lcall 0x885, 0
0000FE7E: mov di, bx
0000FE80: mov dh, ah
0000FE82: not dh
0000FE84: mov dl, 0xff
0000FE86: shl dh, cl
0000FE88: not dh
0000FE8A: mov cx, word ptr [bp + 8]
0000FE8D: and cl, 3
0000FE90: xor cl, 3
0000FE93: shl cl, 1
0000FE95: shl dl, cl
0000FE97: mov ax, word ptr [bp + 8]
0000FE9A: mov bx, word ptr [bp + 0xc]
0000FE9D: mov cl, 2
0000FE9F: shr ax, cl
0000FEA1: shr bx, cl
0000FEA3: mov cx, ax
0000FEA5: sub cx, bx
0000FEA7: mov bx, 0x5c64
0000FEAA: mov al, byte ptr [bp - 0x26]
0000FEAD: xlatb 
0000FEAE: or dh, dh
0000FEB0: js 0xfec8
0000FEB2: or cx, cx
0000FEB4: jne 0xfeba
0000FEB6: and dl, dh
0000FEB8: jmp 0xfeca
0000FEBA: mov ah, al
0000FEBC: and ah, dh
0000FEBE: not dh
0000FEC0: and byte ptr es:[di], dh
0000FEC3: or byte ptr es:[di], ah
0000FEC6: inc di
0000FEC7: dec cx
0000FEC8: rep stosb byte ptr es:[di], al
0000FECA: and al, dl
0000FECC: not dl
0000FECE: and byte ptr es:[di], dl
0000FED1: or byte ptr es:[di], al
0000FED4: jmp 0xff46
0000FED6: mov ah, byte ptr es:[bx]
0000FED9: and ah, dh
0000FEDB: or ah, dl
0000FEDD: ror dl, 1
0000FEDF: ror dl, 1
0000FEE1: ror dh, 1
0000FEE3: ror dh, 1
0000FEE5: jae 0xff04
0000FEE7: or di, di
0000FEE9: jns 0xfef5
0000FEEB: add di, word ptr [bp - 0x18]
0000FEEE: loop 0xfed9
0000FEF0: mov byte ptr es:[bx], ah
0000FEF3: jmp 0xff46
0000FEF5: add di, word ptr [bp - 0x1a]
0000FEF8: mov byte ptr es:[bx], ah
0000FEFB: add bx, si
0000FEFD: xchg word ptr [bp - 0xa], si
0000FF00: loop 0xfed6
0000FF02: jmp 0xff46
0000FF04: mov byte ptr es:[bx], ah
0000FF07: inc bx
0000FF08: or di, di
0000FF0A: jns 0xff13
0000FF0C: add di, word ptr [bp - 0x18]
0000FF0F: loop 0xfed6
0000FF11: jmp 0xff46
0000FF13: add di, word ptr [bp - 0x1a]
0000FF16: add bx, si
0000FF18: xchg word ptr [bp - 0xa], si
0000FF1B: loop 0xfed6
0000FF1D: jmp 0xff46
0000FF1F: and byte ptr es:[bx], dh
0000FF22: or byte ptr es:[bx], dl
0000FF25: add bx, si
0000FF27: xchg word ptr [bp - 0xa], si
0000FF2A: or di, di
0000FF2C: jns 0xff35
0000FF2E: add di, word ptr [bp - 0x18]
0000FF31: loop 0xff1f
0000FF33: jmp 0xff46
0000FF35: add di, word ptr [bp - 0x1a]
0000FF38: ror dl, 1
0000FF3A: ror dl, 1
0000FF3C: ror dh, 1
0000FF3E: ror dh, 1
0000FF40: cmc 
0000FF41: adc bx, 0
0000FF44: loop 0xff1f
0000FF46: mov word ptr [bp - 2], 0
0000FF4B: mov ax, word ptr [bp - 2]
0000FF4E: pop di
0000FF4F: pop si
0000FF50: pop es
0000FF51: pop ds
0000FF52: mov sp, bp
0000FF54: pop bp
0000FF55: retf 8
0000FF58: cmp word ptr [bp - 0x24], 0
0000FF5C: je 0xff63
0000FF5E: nop 
0000FF5F: nop 
0000FF60: jmp 0xfbcf
0000FF63: mov byte ptr [0x5c64], 0
0000FF68: mov byte ptr [0x5c65], 0xff
0000FF6D: and byte ptr [bp - 0x26], 1
0000FF71: mov si, 0x2000
0000FF74: mov di, 0xe050
0000FF77: mov cx, word ptr [bp + 8]
0000FF7A: sub cx, word ptr [bp + 0xc]
0000FF7D: je 0xffe1
0000FF7F: mov bx, word ptr [bp + 6]
0000FF82: sub bx, word ptr [bp + 0xa]
0000FF85: jne 0xff8a
0000FF87: jmp 0x10024
0000FF8A: jns 0xff94
0000FF8C: neg bx
0000FF8E: neg si
0000FF90: neg di
0000FF92: xchg di, si
0000FF94: mov word ptr [bp - 0xa], di
0000FF97: mov word ptr [bp - 0x1c], 0
0000FF9C: cmp bx, cx
0000FF9E: jle 0xffa7
0000FFA0: mov word ptr [bp - 0x1c], 1
0000FFA5: xchg cx, bx
0000FFA7: shl bx, 1
0000FFA9: mov word ptr [bp - 0x18], bx
0000FFAC: sub bx, cx
0000FFAE: mov di, bx
0000FFB0: sub bx, cx
0000FFB2: mov word ptr [bp - 0x1a], bx
0000FFB5: push cx
0000FFB6: mov ax, word ptr [bp + 0xa]
0000FFB9: mov bx, word ptr [bp + 0xc]
0000FFBC: lcall 0x885, 0x24
0000FFC1: mov al, byte ptr [bp - 0x26]
0000FFC4: shl ax, cl
0000FFC6: mov dx, ax
0000FFC8: not dh
0000FFCA: pop cx
0000FFCB: inc cx
0000FFCC: test bx, 0x2000
0000FFD0: je 0xffd5
0000FFD2: xchg word ptr [bp - 0xa], si
0000FFD5: cmp word ptr [bp - 0x1c], 0
0000FFD9: jne 0xffde
0000FFDB: jmp 0x10085
0000FFDE: jmp 0x100ca
0000FFE1: mov ax, word ptr [bp + 0xa]
0000FFE4: mov bx, word ptr [bp + 6]
0000FFE7: mov cx, bx
0000FFE9: sub cx, ax
0000FFEB: jge 0xfff1
0000FFED: neg cx
0000FFEF: mov ax, bx
0000FFF1: inc cx
0000FFF2: mov bx, word ptr [bp + 0xc]
0000FFF5: push cx
0000FFF6: lcall 0x885, 0x24
0000FFFB: mov al, byte ptr [bp - 0x26]
0000FFFE: shl ax, cl
00010000: not ah
00010002: pop cx
00010003: test si, bx
00010005: je 0x10009
00010007: xchg di, si
00010009: test al, al
0001000B: je 0x10018
0001000D: or byte ptr es:[bx], al
00010010: add bx, si
00010012: xchg di, si
00010014: loop 0x1000d
00010016: jmp 0x10021
00010018: and byte ptr es:[bx], ah
0001001B: add bx, si
0001001D: xchg di, si
0001001F: loop 0x10018
00010021: jmp 0x100ed
00010024: mov ax, word ptr [bp + 0xa]
00010027: mov bx, word ptr [bp + 0xc]
0001002A: lcall 0x885, 0x24
0001002F: mov di, bx
00010031: mov dh, ah
00010033: not dh
00010035: mov dl, 0xff
00010037: shl dh, cl
00010039: not dh
0001003B: mov cx, word ptr [bp + 8]
0001003E: and cl, 7
00010041: xor cl, 7
00010044: shl dl, cl
00010046: mov ax, word ptr [bp + 8]
00010049: mov bx, word ptr [bp + 0xc]
0001004C: mov cl, 3
0001004E: shr ax, cl
00010050: shr bx, cl
00010052: mov cx, ax
00010054: sub cx, bx
00010056: mov bx, 0x5c64
00010059: mov al, byte ptr [bp - 0x26]
0001005C: xlatb 
0001005D: or dh, dh
0001005F: js 0x10077
00010061: or cx, cx
00010063: jne 0x10069
00010065: and dl, dh
00010067: jmp 0x10079
00010069: mov ah, al
0001006B: and ah, dh
0001006D: not dh
0001006F: and byte ptr es:[di], dh
00010072: or byte ptr es:[di], ah
00010075: inc di
00010076: dec cx
00010077: rep stosb byte ptr es:[di], al
00010079: and al, dl
0001007B: not dl
0001007D: and byte ptr es:[di], dl
00010080: or byte ptr es:[di], al
00010083: jmp 0x100ed
00010085: mov ah, byte ptr es:[bx]
00010088: and ah, dh
0001008A: or ah, dl
0001008C: ror dl, 1
0001008E: ror dh, 1
00010090: jae 0x100af
00010092: or di, di
00010094: jns 0x100a0
00010096: add di, word ptr [bp - 0x18]
00010099: loop 0x10088
0001009B: mov byte ptr es:[bx], ah
0001009E: jmp 0x100ed
000100A0: add di, word ptr [bp - 0x1a]
000100A3: mov byte ptr es:[bx], ah
000100A6: add bx, si
000100A8: xchg word ptr [bp - 0xa], si
000100AB: loop 0x10085
000100AD: jmp 0x100ed
000100AF: mov byte ptr es:[bx], ah
000100B2: inc bx
000100B3: or di, di
000100B5: jns 0x100be
000100B7: add di, word ptr [bp - 0x18]
000100BA: loop 0x10085
000100BC: jmp 0x100ed
000100BE: add di, word ptr [bp - 0x1a]
000100C1: add bx, si
000100C3: xchg word ptr [bp - 0xa], si
000100C6: loop 0x10085
000100C8: jmp 0x100ed
000100CA: and byte ptr es:[bx], dh
000100CD: or byte ptr es:[bx], dl
000100D0: add bx, si
000100D2: xchg word ptr [bp - 0xa], si
000100D5: or di, di
000100D7: jns 0x100e0
000100D9: add di, word ptr [bp - 0x18]
000100DC: loop 0x100ca
000100DE: jmp 0x100ed
000100E0: add di, word ptr [bp - 0x1a]
000100E3: ror dl, 1
000100E5: ror dh, 1
000100E7: cmc 
000100E8: adc bx, 0
000100EB: loop 0x100ca
000100ED: mov word ptr [bp - 2], 0
000100F2: mov ax, word ptr [bp - 2]
000100F5: pop di
000100F6: pop si
000100F7: pop es
000100F8: pop ds
000100F9: mov sp, bp
000100FB: pop bp
000100FC: retf 8
000100FF: cmp word ptr [bp - 0x24], 0
00010103: je 0x1010a
00010105: nop 
00010106: nop 
00010107: jmp 0xfbcf
0001010A: mov byte ptr [0x5c64], 0
0001010F: mov byte ptr [0x5c65], 0xff
00010114: and byte ptr [bp - 0x26], 1
00010118: mov si, 0x6cda
0001011B: mov ax, word ptr [si + 0xa]
0001011E: mov word ptr [bp - 0x22], ax
00010121: mov si, 0x2000
00010124: mov di, 0x805a
00010127: mov cx, word ptr [bp + 8]
0001012A: sub cx, word ptr [bp + 0xc]
0001012D: je 0x10189
0001012F: mov bx, word ptr [bp + 6]
00010132: sub bx, word ptr [bp + 0xa]
00010135: jne 0x1013a
00010137: jmp 0x101cd
0001013A: jns 0x10142
0001013C: neg bx
0001013E: neg si
00010140: neg di
00010142: mov word ptr [bp - 0xa], di
00010145: mov word ptr [bp - 0x1c], 0
0001014A: cmp bx, cx
0001014C: jle 0x10155
0001014E: mov word ptr [bp - 0x1c], 1
00010153: xchg cx, bx
00010155: shl bx, 1
00010157: mov word ptr [bp - 0x18], bx
0001015A: sub bx, cx
0001015C: mov di, bx
0001015E: sub bx, cx
00010160: mov word ptr [bp - 0x1a], bx
00010163: push cx
00010164: mov ax, word ptr [bp + 0xa]
00010167: mov bx, word ptr [bp + 0xc]
0001016A: lcall 0x885, 0x4a
0001016F: add bx, word ptr [bp - 0x22]
00010172: mov al, byte ptr [bp - 0x26]
00010175: shl ax, cl
00010177: mov dx, ax
00010179: not dh
0001017B: pop cx
0001017C: inc cx
0001017D: cmp word ptr [bp - 0x1c], 0
00010181: jne 0x10186
00010183: jmp 0x10231
00010186: jmp 0x1027a
00010189: mov ax, word ptr [bp + 0xa]
0001018C: mov bx, word ptr [bp + 6]
0001018F: mov cx, bx
00010191: sub cx, ax
00010193: jge 0x10199
00010195: neg cx
00010197: mov ax, bx
00010199: inc cx
0001019A: mov bx, word ptr [bp + 0xc]
0001019D: push cx
0001019E: lcall 0x885, 0x4a
000101A3: add bx, word ptr [bp - 0x22]
000101A6: mov al, byte ptr [bp - 0x26]
000101A9: shl ax, cl
000101AB: not ah
000101AD: pop cx
000101AE: test al, al
000101B0: je 0x101bf
000101B2: or byte ptr es:[bx], al
000101B5: add bx, si
000101B7: jns 0x101bb
000101B9: add bx, di
000101BB: loop 0x101b2
000101BD: jmp 0x101ca
000101BF: and byte ptr es:[bx], ah
000101C2: add bx, si
000101C4: jns 0x101c8
000101C6: add bx, di
000101C8: loop 0x101bf
000101CA: jmp 0x1029f
000101CD: mov ax, word ptr [bp + 0xa]
000101D0: mov bx, word ptr [bp + 0xc]
000101D3: lcall 0x885, 0x4a
000101D8: add bx, word ptr [bp - 0x22]
000101DB: mov di, bx
000101DD: mov dh, ah
000101DF: not dh
000101E1: mov dl, 0xff
000101E3: shl dh, cl
000101E5: not dh
000101E7: mov cx, word ptr [bp + 8]
000101EA: and cl, 7
000101ED: xor cl, 7
000101F0: shl dl, cl
000101F2: mov ax, word ptr [bp + 8]
000101F5: mov bx, word ptr [bp + 0xc]
000101F8: mov cl, 3
000101FA: shr ax, cl
000101FC: shr bx, cl
000101FE: mov cx, ax
00010200: sub cx, bx
00010202: mov bx, 0x5c64
00010205: mov al, byte ptr [bp - 0x26]
00010208: xlatb 
00010209: or dh, dh
0001020B: js 0x10223
0001020D: or cx, cx
0001020F: jne 0x10215
00010211: and dl, dh
00010213: jmp 0x10225
00010215: mov ah, al
00010217: and ah, dh
00010219: not dh
0001021B: and byte ptr es:[di], dh
0001021E: or byte ptr es:[di], ah
00010221: inc di
00010222: dec cx
00010223: rep stosb byte ptr es:[di], al
00010225: and al, dl
00010227: not dl
00010229: and byte ptr es:[di], dl
0001022C: or byte ptr es:[di], al
0001022F: jmp 0x1029f
00010231: mov ah, byte ptr es:[bx]
00010234: and ah, dh
00010236: or ah, dl
00010238: ror dl, 1
0001023A: ror dh, 1
0001023C: jae 0x1025d
0001023E: or di, di
00010240: jns 0x1024c
00010242: add di, word ptr [bp - 0x18]
00010245: loop 0x10234
00010247: mov byte ptr es:[bx], ah
0001024A: jmp 0x1029f
0001024C: add di, word ptr [bp - 0x1a]
0001024F: mov byte ptr es:[bx], ah
00010252: add bx, si
00010254: jns 0x10259
00010256: add bx, word ptr [bp - 0xa]
00010259: loop 0x10231
0001025B: jmp 0x1029f
0001025D: mov byte ptr es:[bx], ah
00010260: inc bx
00010261: or di, di
00010263: jns 0x1026c
00010265: add di, word ptr [bp - 0x18]
00010268: loop 0x10231
0001026A: jmp 0x1029f
0001026C: add di, word ptr [bp - 0x1a]
0001026F: add bx, si
00010271: jns 0x10276
00010273: add bx, word ptr [bp - 0xa]
00010276: loop 0x10231
00010278: jmp 0x1029f
0001027A: and byte ptr es:[bx], dh
0001027D: or byte ptr es:[bx], dl
00010280: add bx, si
00010282: jns 0x10287
00010284: add bx, word ptr [bp - 0xa]
00010287: or di, di
00010289: jns 0x10292
0001028B: add di, word ptr [bp - 0x18]
0001028E: loop 0x1027a
00010290: jmp 0x1029f
00010292: add di, word ptr [bp - 0x1a]
00010295: ror dl, 1
00010297: ror dh, 1
00010299: cmc 
0001029A: adc bx, 0
0001029D: loop 0x1027a
0001029F: mov word ptr [bp - 2], 0
000102A4: mov ax, word ptr [bp - 2]
000102A7: pop di
000102A8: pop si
000102A9: pop es
000102AA: pop ds
000102AB: mov sp, bp
000102AD: pop bp
000102AE: retf 8
000102B1: push si
000102B2: mov cl, bl
000102B4: push dx
000102B5: mov dx, word ptr [bp - 0x20]
000102B8: mul dx
000102BA: pop dx
000102BB: shr bx, 1
000102BD: shr bx, 1
000102BF: shr bx, 1
000102C1: add bx, ax
000102C3: mov si, 0x6cda
000102C6: add bx, word ptr [si + 0xa]
000102C9: push dx
000102CA: mov dx, 0xa000
000102CD: mov es, dx
000102CF: pop dx
000102D0: and cl, 7
000102D3: xor cl, 7
000102D6: mov ah, 1
000102D8: pop si
000102D9: retf 
000102DA: mov dx, 0x3ce
000102DD: mov ah, byte ptr [bp - 0x26]
000102E0: xor al, al
000102E2: out dx, ax
000102E3: mov ax, 0xf01
000102E6: out dx, ax
000102E7: mov ah, byte ptr [bp - 0x24]
000102EA: mov cl, 3
000102EC: shl ah, cl
000102EE: mov al, 3
000102F0: out dx, ax
000102F1: mov si, word ptr [bp - 0x20]
000102F4: mov cx, word ptr [bp + 8]
000102F7: sub cx, word ptr [bp + 0xc]
000102FA: jne 0x10306
000102FC: mov bx, word ptr [bp + 0xa]
000102FF: cmp bx, word ptr [bp + 6]
00010302: je 0x10306
00010304: je 0x10356
00010306: mov bx, word ptr [bp + 6]
00010309: sub bx, word ptr [bp + 0xa]
0001030C: je 0x1037f
0001030E: jns 0x10314
00010310: neg bx
00010312: neg si
00010314: mov word ptr [bp - 0x16], si
00010317: mov word ptr [bp - 0x1c], 0
0001031C: cmp bx, cx
0001031E: jle 0x10327
00010320: mov word ptr [bp - 0x1c], 1
00010325: xchg cx, bx
00010327: shl bx, 1
00010329: mov word ptr [bp - 0x18], bx
0001032C: sub bx, cx
0001032E: mov si, bx
00010330: sub bx, cx
00010332: mov word ptr [bp - 0x1a], bx
00010335: push cx
00010336: mov ax, word ptr [bp + 0xa]
00010339: mov bx, word ptr [bp + 0xc]
0001033C: push cs
0001033D: call 0x102b1
00010340: mov di, bx
00010342: shl ah, cl
00010344: mov bl, ah
00010346: mov al, 8
00010348: pop cx
00010349: inc cx
0001034A: cmp word ptr [bp - 0x1c], 0
0001034E: jne 0x10353
00010350: jmp 0x103e9
00010353: jmp 0x10428
00010356: mov ax, word ptr [bp + 0xa]
00010359: mov bx, word ptr [bp + 6]
0001035C: mov cx, bx
0001035E: sub cx, ax
00010360: jge 0x10366
00010362: neg cx
00010364: mov ax, bx
00010366: inc cx
00010367: mov bx, word ptr [bp + 0xc]
0001036A: push cx
0001036B: push cs
0001036C: call 0x102b1
0001036F: shl ah, cl
00010371: mov al, 8
00010373: out dx, ax
00010374: pop cx
00010375: or byte ptr es:[bx], al
00010378: add bx, si
0001037A: loop 0x10375
0001037C: jmp 0x10446
0001037F: push ds
00010380: mov cx, word ptr [bp + 0xc]
00010383: and cx, 7
00010386: ror byte ptr [bp - 0x2a], cl
00010389: mov ax, word ptr [bp + 0xa]
0001038C: mov bx, word ptr [bp + 0xc]
0001038F: push cs
00010390: call 0x102b1
00010393: mov di, bx
00010395: mov dh, ah
00010397: not dh
00010399: shl dh, cl
0001039B: not dh
0001039D: and dh, byte ptr [bp - 0x2a]
000103A0: mov cx, word ptr [bp + 8]
000103A3: and cl, 7
000103A6: xor cl, 7
000103A9: mov dl, 0xff
000103AB: shl dl, cl
000103AD: and dl, byte ptr [bp - 0x2a]
000103B0: mov ax, word ptr [bp + 8]
000103B3: mov bx, word ptr [bp + 0xc]
000103B6: mov cl, 3
000103B8: shr ax, cl
000103BA: shr bx, cl
000103BC: mov cx, ax
000103BE: sub cx, bx
000103C0: mov bx, dx
000103C2: mov dx, 0x3ce
000103C5: mov al, 8
000103C7: push es
000103C8: pop ds
000103C9: mov si, di
000103CB: or bh, bh
000103CD: js 0x103dc
000103CF: or cx, cx
000103D1: jne 0x103d7
000103D3: and bl, bh
000103D5: jmp 0x103e2
000103D7: mov ah, bh
000103D9: out dx, ax
000103DA: movsb byte ptr es:[di], byte ptr [si]
000103DB: dec cx
000103DC: mov ah, byte ptr [bp - 0x2a]
000103DF: out dx, ax
000103E0: rep movsb byte ptr es:[di], byte ptr [si]
000103E2: mov ah, bl
000103E4: out dx, ax
000103E5: movsb byte ptr es:[di], byte ptr [si]
000103E6: pop ds
000103E7: jmp 0x10446
000103E9: mov ah, bl
000103EB: or ah, bl
000103ED: ror bl, 1
000103EF: jb 0x1040e
000103F1: or si, si
000103F3: jns 0x10400
000103F5: add si, word ptr [bp - 0x18]
000103F8: loop 0x103eb
000103FA: out dx, ax
000103FB: or byte ptr es:[di], al
000103FE: jmp 0x10446
00010400: add si, word ptr [bp - 0x1a]
00010403: out dx, ax
00010404: or byte ptr es:[di], al
00010407: add di, word ptr [bp - 0x16]
0001040A: loop 0x103e9
0001040C: jmp 0x10446
0001040E: out dx, ax
0001040F: or byte ptr es:[di], al
00010412: inc di
00010413: or si, si
00010415: jns 0x1041e
00010417: add si, word ptr [bp - 0x18]
0001041A: loop 0x103e9
0001041C: jmp 0x10446
0001041E: add si, word ptr [bp - 0x1a]
00010421: add di, word ptr [bp - 0x16]
00010424: loop 0x103e9
00010426: jmp 0x10446
00010428: mov bx, word ptr [bp - 0x16]
0001042B: out dx, ax
0001042C: or byte ptr es:[di], al
0001042F: add di, bx
00010431: or si, si
00010433: jns 0x1043c
00010435: add si, word ptr [bp - 0x18]
00010438: loop 0x1042b
0001043A: jmp 0x10446
0001043C: add si, word ptr [bp - 0x1a]
0001043F: ror ah, 1
00010441: adc di, 0
00010444: loop 0x1042b
00010446: xor ax, ax
00010448: out dx, ax
00010449: inc ax
0001044A: out dx, ax
0001044B: mov al, 3
0001044D: out dx, ax
0001044E: mov ax, 0xff08
00010451: out dx, ax
00010452: mov word ptr [bp - 2], 0
00010457: mov ax, word ptr [bp - 2]
0001045A: pop di
0001045B: pop si
0001045C: pop es
0001045D: pop ds
0001045E: mov sp, bp
00010460: pop bp
00010461: retf 8
00010464: cmp word ptr [bp - 0x24], 0
00010468: je 0x1046f
0001046A: nop 
0001046B: nop 
0001046C: jmp 0xfbcf
0001046F: mov byte ptr [0x5c64], 0
00010474: mov byte ptr [0x5c65], 0xff
00010479: and byte ptr [bp - 0x26], 1
0001047D: mov si, word ptr [bp - 0x20]
00010480: mov cx, word ptr [bp + 8]
00010483: sub cx, word ptr [bp + 0xc]
00010486: je 0x104d8
00010488: mov bx, word ptr [bp + 6]
0001048B: sub bx, word ptr [bp + 0xa]
0001048E: jne 0x10492
00010490: jmp 0x10510
00010492: jns 0x10498
00010494: neg bx
00010496: neg si
00010498: mov word ptr [bp - 0x1c], 0
0001049D: cmp bx, cx
0001049F: jle 0x104a8
000104A1: mov word ptr [bp - 0x1c], 1
000104A6: xchg cx, bx
000104A8: shl bx, 1
000104AA: mov word ptr [bp - 0x18], bx
000104AD: sub bx, cx
000104AF: mov di, bx
000104B1: sub bx, cx
000104B3: mov word ptr [bp - 0x1a], bx
000104B6: push cx
000104B7: mov ax, word ptr [bp + 0xa]
000104BA: mov bx, word ptr [bp + 0xc]
000104BD: push cs
000104BE: call 0x102b1
000104C1: mov al, byte ptr [bp - 0x26]
000104C4: shl ax, cl
000104C6: mov dx, ax
000104C8: not dh
000104CA: pop cx
000104CB: inc cx
000104CC: cmp word ptr [bp - 0x1c], 0
000104D0: jne 0x104d5
000104D2: jmp 0x10570
000104D5: jmp 0x105af
000104D8: mov ax, word ptr [bp + 0xa]
000104DB: mov bx, word ptr [bp + 6]
000104DE: mov cx, bx
000104E0: sub cx, ax
000104E2: jge 0x104e8
000104E4: neg cx
000104E6: mov ax, bx
000104E8: inc cx
000104E9: mov bx, word ptr [bp + 0xc]
000104EC: push cx
000104ED: push cs
000104EE: call 0x102b1
000104F1: mov al, byte ptr [bp - 0x26]
000104F4: shl ax, cl
000104F6: not ah
000104F8: pop cx
000104F9: test al, al
000104FB: je 0x10506
000104FD: or byte ptr es:[bx], al
00010500: add bx, si
00010502: loop 0x104fd
00010504: jmp 0x1050d
00010506: and byte ptr es:[bx], ah
00010509: add bx, si
0001050B: loop 0x10506
0001050D: jmp 0x105cf
00010510: mov ax, word ptr [bp + 0xa]
00010513: mov bx, word ptr [bp + 0xc]
00010516: push cs
00010517: call 0x102b1
0001051A: mov di, bx
0001051C: mov dh, ah
0001051E: not dh
00010520: mov dl, 0xff
00010522: shl dh, cl
00010524: not dh
00010526: mov cx, word ptr [bp + 8]
00010529: and cl, 7
0001052C: xor cl, 7
0001052F: shl dl, cl
00010531: mov ax, word ptr [bp + 8]
00010534: mov bx, word ptr [bp + 0xc]
00010537: mov cl, 3
00010539: shr ax, cl
0001053B: shr bx, cl
0001053D: mov cx, ax
0001053F: sub cx, bx
00010541: mov bx, 0x5c64
00010544: mov al, byte ptr [bp - 0x26]
00010547: xlatb 
00010548: or dh, dh
0001054A: js 0x10562
0001054C: or cx, cx
0001054E: jne 0x10554
00010550: and dl, dh
00010552: jmp 0x10564
00010554: mov ah, al
00010556: and ah, dh
00010558: not dh
0001055A: and byte ptr es:[di], dh
0001055D: or byte ptr es:[di], ah
00010560: inc di
00010561: dec cx
00010562: rep stosb byte ptr es:[di], al
00010564: and al, dl
00010566: not dl
00010568: and byte ptr es:[di], dl
0001056B: or byte ptr es:[di], al
0001056E: jmp 0x105cf
00010570: mov ah, byte ptr es:[bx]
00010573: and ah, dh
00010575: or ah, dl
00010577: ror dl, 1
00010579: ror dh, 1
0001057B: jae 0x10597
0001057D: or di, di
0001057F: jns 0x1058b
00010581: add di, word ptr [bp - 0x18]
00010584: loop 0x10573
00010586: mov byte ptr es:[bx], ah
00010589: jmp 0x105cf
0001058B: add di, word ptr [bp - 0x1a]
0001058E: mov byte ptr es:[bx], ah
00010591: add bx, si
00010593: loop 0x10570
00010595: jmp 0x105cf
00010597: mov byte ptr es:[bx], ah
0001059A: inc bx
0001059B: or di, di
0001059D: jns 0x105a6
0001059F: add di, word ptr [bp - 0x18]
000105A2: loop 0x10570
000105A4: jmp 0x105cf
000105A6: add di, word ptr [bp - 0x1a]
000105A9: add bx, si
000105AB: loop 0x10570
000105AD: jmp 0x105cf
000105AF: and byte ptr es:[bx], dh
000105B2: or byte ptr es:[bx], dl
000105B5: add bx, si
000105B7: or di, di
000105B9: jns 0x105c2
000105BB: add di, word ptr [bp - 0x18]
000105BE: loop 0x105af
000105C0: jmp 0x105cf
000105C2: add di, word ptr [bp - 0x1a]
000105C5: ror dl, 1
000105C7: ror dh, 1
000105C9: cmc 
000105CA: adc bx, 0
000105CD: loop 0x105af
000105CF: mov word ptr [bp - 2], 0
000105D4: mov ax, word ptr [bp - 2]
000105D7: pop di
000105D8: pop si
000105D9: pop es
000105DA: pop ds
000105DB: mov sp, bp
000105DD: pop bp
000105DE: retf 8
000105E1: cmp word ptr [bp - 0x24], 0
000105E5: je 0x105ec
000105E7: nop 
000105E8: nop 
000105E9: jmp 0xfbcf
000105EC: mov si, 0x140
000105EF: mov cx, word ptr [bp + 8]
000105F2: sub cx, word ptr [bp + 0xc]
000105F5: je 0x1063f
000105F7: mov bx, word ptr [bp + 6]
000105FA: sub bx, word ptr [bp + 0xa]
000105FD: je 0x10667
000105FF: jns 0x10605
00010601: neg bx
00010603: neg si
00010605: push si
00010606: mov word ptr [bp - 0x1c], 0
0001060B: cmp bx, cx
0001060D: jle 0x10616
0001060F: mov word ptr [bp - 0x1c], 1
00010614: xchg cx, bx
00010616: shl bx, 1
00010618: mov word ptr [bp - 0x18], bx
0001061B: sub bx, cx
0001061D: mov si, bx
0001061F: sub bx, cx
00010621: mov word ptr [bp - 0x1a], bx
00010624: push cx
00010625: mov ax, word ptr [bp + 0xa]
00010628: mov bx, word ptr [bp + 0xc]
0001062B: lcall 0x885, 0xaa
00010630: mov di, bx
00010632: pop cx
00010633: inc cx
00010634: pop bx
00010635: cmp word ptr [bp - 0x1c], 0
00010639: jne 0x1063d
0001063B: jmp 0x1067e
0001063D: jmp 0x10696
0001063F: mov ax, word ptr [bp + 0xa]
00010642: mov bx, word ptr [bp + 6]
00010645: mov cx, bx
00010647: sub cx, ax
00010649: jge 0x1064f
0001064B: neg cx
0001064D: mov ax, bx
0001064F: inc cx
00010650: mov bx, word ptr [bp + 0xc]
00010653: push cx
00010654: lcall 0x885, 0xaa
00010659: pop cx
0001065A: mov di, bx
0001065C: dec si
0001065D: mov al, byte ptr [bp - 0x26]
00010660: stosb byte ptr es:[di], al
00010661: add di, si
00010663: loop 0x10660
00010665: jmp 0x106ad
00010667: push cx
00010668: mov ax, word ptr [bp + 0xa]
0001066B: mov bx, word ptr [bp + 0xc]
0001066E: lcall 0x885, 0xaa
00010673: mov di, bx
00010675: pop cx
00010676: inc cx
00010677: mov al, byte ptr [bp - 0x26]
0001067A: rep stosb byte ptr es:[di], al
0001067C: jmp 0x106ad
0001067E: mov al, byte ptr [bp - 0x26]
00010681: stosb byte ptr es:[di], al
00010682: or si, si
00010684: jns 0x1068d
00010686: add si, word ptr [bp - 0x18]
00010689: loop 0x10681
0001068B: jmp 0x106ad
0001068D: add si, word ptr [bp - 0x1a]
00010690: add di, bx
00010692: loop 0x10681
00010694: jmp 0x106ad
00010696: mov al, byte ptr [bp - 0x26]
00010699: stosb byte ptr es:[di], al
0001069A: add di, bx
0001069C: or si, si
0001069E: jns 0x106a8
000106A0: add si, word ptr [bp - 0x18]
000106A3: dec di
000106A4: loop 0x10699
000106A6: jmp 0x106ad
000106A8: add si, word ptr [bp - 0x1a]
000106AB: loop 0x10699
000106AD: mov word ptr [bp - 2], 0
000106B2: mov ax, word ptr [bp - 2]
000106B5: pop di
000106B6: pop si
000106B7: pop es
000106B8: pop ds
000106B9: mov sp, bp
000106BB: pop bp
000106BC: retf 8
000106BF: mov dx, word ptr [bp - 0x20]
000106C2: mul dx
000106C4: add bx, ax
000106C6: adc dx, 0
000106C9: push dx
000106CA: mov dx, 0xa000
000106CD: mov es, dx
000106CF: pop dx
000106D0: retf 
000106D1: cmp word ptr [bp - 0x24], 0
000106D5: je 0x106dc
000106D7: nop 
000106D8: nop 
000106D9: jmp 0xfbcf
000106DC: mov si, word ptr [bp - 0x20]
000106DF: mov cx, word ptr [bp + 8]
000106E2: sub cx, word ptr [bp + 0xc]
000106E5: je 0x1073f
000106E7: mov bx, word ptr [bp + 6]
000106EA: sub bx, word ptr [bp + 0xa]
000106ED: jne 0x106f2
000106EF: jmp 0x10784
000106F2: jns 0x106f8
000106F4: neg bx
000106F6: neg si
000106F8: push si
000106F9: mov word ptr [bp - 0x1c], 0
000106FE: cmp bx, cx
00010700: jle 0x10709
00010702: mov word ptr [bp - 0x1c], 1
00010707: xchg cx, bx
00010709: shl bx, 1
0001070B: mov word ptr [bp - 0x18], bx
0001070E: sub bx, cx
00010710: mov si, bx
00010712: sub bx, cx
00010714: mov word ptr [bp - 0x1a], bx
00010717: push cx
00010718: mov ax, word ptr [bp + 0xa]
0001071B: mov bx, word ptr [bp + 0xc]
0001071E: push cs
0001071F: call 0x106bf
00010722: mov di, bx
00010724: xor dh, dh
00010726: mov word ptr [bp - 0x1e], dx
00010729: push dx
0001072A: push dx
0001072B: lcall 0xa36, 0xe
00010730: pop cx
00010731: inc cx
00010732: pop bx
00010733: cmp word ptr [bp - 0x1c], 0
00010737: jne 0x1073c
00010739: jmp 0x107c5
0001073C: jmp 0x1081f
0001073F: mov ax, word ptr [bp + 0xa]
00010742: mov bx, word ptr [bp + 6]
00010745: mov cx, bx
00010747: sub cx, ax
00010749: jge 0x1074f
0001074B: neg cx
0001074D: mov ax, bx
0001074F: inc cx
00010750: mov bx, word ptr [bp + 0xc]
00010753: push cx
00010754: push cs
00010755: call 0x106bf
00010758: mov di, bx
0001075A: xor dh, dh
0001075C: mov word ptr [bp - 0x1e], dx
0001075F: push dx
00010760: push dx
00010761: lcall 0xa36, 0xe
00010766: pop cx
00010767: mov dl, byte ptr [bp - 0x26]
0001076A: mov byte ptr es:[di], dl
0001076D: add di, si
0001076F: jae 0x1077f
00010771: inc byte ptr [bp - 0x1e]
00010774: push word ptr [bp - 0x1e]
00010777: push word ptr [bp - 0x1e]
0001077A: lcall 0xa36, 0x63
0001077F: loop 0x1076a
00010781: jmp 0x10876
00010784: push cx
00010785: mov ax, word ptr [bp + 0xa]
00010788: mov bx, word ptr [bp + 0xc]
0001078B: push cs
0001078C: call 0x106bf
0001078F: mov di, bx
00010791: xor dh, dh
00010793: mov word ptr [bp - 0x1e], dx
00010796: push dx
00010797: push dx
00010798: lcall 0xa36, 0xe
0001079D: pop cx
0001079E: inc cx
0001079F: mov dl, byte ptr [bp - 0x26]
000107A2: cmp di, 0xfbff
000107A6: jb 0x107be
000107A8: mov byte ptr es:[di], dl
000107AB: inc di
000107AC: jne 0x107bc
000107AE: inc byte ptr [bp - 0x1e]
000107B1: push word ptr [bp - 0x1e]
000107B4: push word ptr [bp - 0x1e]
000107B7: lcall 0xa36, 0x63
000107BC: loop 0x107a8
000107BE: mov al, dl
000107C0: rep stosb byte ptr es:[di], al
000107C2: jmp 0x10876
000107C5: mov dl, byte ptr [bp - 0x26]
000107C8: mov byte ptr es:[di], dl
000107CB: inc di
000107CC: jne 0x107dc
000107CE: inc byte ptr [bp - 0x1e]
000107D1: push word ptr [bp - 0x1e]
000107D4: push word ptr [bp - 0x1e]
000107D7: lcall 0xa36, 0x63
000107DC: or si, si
000107DE: jns 0x107e8
000107E0: add si, word ptr [bp - 0x18]
000107E3: loop 0x107c8
000107E5: jmp 0x10876
000107E8: add si, word ptr [bp - 0x1a]
000107EB: add di, bx
000107ED: jae 0x10803
000107EF: or bx, bx
000107F1: js 0x1081b
000107F3: inc byte ptr [bp - 0x1e]
000107F6: push word ptr [bp - 0x1e]
000107F9: push word ptr [bp - 0x1e]
000107FC: lcall 0xa36, 0x63
00010801: jmp 0x1081b
00010803: or bx, bx
00010805: jns 0x1081b
00010807: cmp word ptr [bp - 0x1e], 0
0001080B: je 0x1081b
0001080D: dec byte ptr [bp - 0x1e]
00010810: push word ptr [bp - 0x1e]
00010813: push word ptr [bp - 0x1e]
00010816: lcall 0xa36, 0x63
0001081B: loop 0x107c8
0001081D: jmp 0x10876
0001081F: mov dl, byte ptr [bp - 0x26]
00010822: mov byte ptr es:[di], dl
00010825: add di, bx
00010827: jae 0x1083d
00010829: or bx, bx
0001082B: js 0x10855
0001082D: inc byte ptr [bp - 0x1e]
00010830: push word ptr [bp - 0x1e]
00010833: push word ptr [bp - 0x1e]
00010836: lcall 0xa36, 0x63
0001083B: jmp 0x10855
0001083D: or bx, bx
0001083F: jns 0x10855
00010841: cmp word ptr [bp - 0x1e], 0
00010845: je 0x10855
00010847: dec byte ptr [bp - 0x1e]
0001084A: push word ptr [bp - 0x1e]
0001084D: push word ptr [bp - 0x1e]
00010850: lcall 0xa36, 0x63
00010855: or si, si
00010857: jns 0x10860
00010859: add si, word ptr [bp - 0x18]
0001085C: loop 0x10822
0001085E: jmp 0x10876
00010860: add si, word ptr [bp - 0x1a]
00010863: inc di
00010864: jne 0x10874
00010866: inc byte ptr [bp - 0x1e]
00010869: push word ptr [bp - 0x1e]
0001086C: push word ptr [bp - 0x1e]
0001086F: lcall 0xa36, 0x63
00010874: loop 0x10822
00010876: push ax
00010877: lcall 0xa36, 0x1a5
0001087C: mov word ptr [bp - 2], 0
00010881: mov ax, word ptr [bp - 2]
00010884: pop di
00010885: pop si
00010886: pop es
00010887: pop ds
00010888: mov sp, bp
0001088A: pop bp
0001088B: retf 8
0001088E: cmp word ptr [bp - 0x24], 0
00010892: jne 0x1089c
00010894: mov ax, word ptr [bp + 0xa]
00010897: cmp ax, word ptr [bp + 6]
0001089A: je 0x108a1
0001089C: nop 
0001089D: nop 
0001089E: jmp 0xfbcf
000108A1: mov si, 0x6cda
000108A4: push dx
000108A5: mov dx, word ptr [si + 6]
000108A8: mov es, dx
000108AA: pop dx
000108AB: mov di, word ptr [si + 4]
000108AE: mov ax, word ptr es:[di + 0x14]
000108B2: mov word ptr [bp - 0x20], ax
000108B5: mov bx, 0xffff
000108B8: sub bx, ax
000108BA: mov word ptr [bp - 0x36], bx
000108BD: mov al, byte ptr es:[di + 0x12]
000108C1: xor ah, ah
000108C3: cmp al, 1
000108C5: je 0x108c9
000108C7: mov al, 4
000108C9: mov word ptr [bp - 0x38], ax
000108CC: mov ax, word ptr [bp + 0xc]
000108CF: cmp ax, word ptr es:[di + 0xa]
000108D3: jbe 0x108dd
000108D5: mov word ptr [bp - 2], 0xffe5
000108DA: jmp 0x10ab9
000108DD: mov ax, word ptr [bp + 8]
000108E0: sub ax, word ptr [bp + 0xc]
000108E3: inc ax
000108E4: mov bx, word ptr es:[di + 0xa]
000108E8: sub bx, word ptr es:[di + 6]
000108EC: inc bx
000108ED: cmp ax, bx
000108EF: jbe 0x108f3
000108F1: mov ax, bx
000108F3: mov word ptr [bp - 0x3a], ax
000108F6: add ax, word ptr [bp + 0xc]
000108F9: dec ax
000108FA: mov word ptr [bp + 8], ax
000108FD: mov ax, word ptr [bp + 0xc]
00010900: mov bl, byte ptr es:[di + 0x13]
00010904: xor bh, bh
00010906: mul bx
00010908: mov bx, 8
0001090B: div bx
0001090D: mov cx, dx
0001090F: mov ch, 0xff
00010911: shr ch, cl
00010913: mov cl, ch
00010915: xor ch, ch
00010917: mov word ptr [bp - 0x3c], cx
0001091A: push dx
0001091B: mov ax, word ptr [bp - 0x3a]
0001091E: mov bl, byte ptr es:[di + 0x13]
00010922: xor bh, bh
00010924: mul bx
00010926: pop bx
00010927: add ax, bx
00010929: adc dx, 0
0001092C: mov bx, 8
0001092F: div bx
00010931: or dx, dx
00010933: je 0x10936
00010935: inc ax
00010936: mov word ptr [bp - 0x3e], ax
00010939: mov ax, word ptr [bp + 8]
0001093C: mov bl, byte ptr es:[di + 0x13]
00010940: xor bh, bh
00010942: mul bx
00010944: mov bx, 8
00010947: div bx
00010949: add dl, byte ptr es:[di + 0x13]
0001094D: and dl, 7
00010950: mov cl, dl
00010952: xor cl, 7
00010955: inc cl
00010957: and cl, 7
0001095A: mov ch, 0xff
0001095C: shl ch, cl
0001095E: xor cl, cl
00010960: or word ptr [bp - 0x3c], cx
00010963: mov ax, word ptr [bp + 0xa]
00010966: cmp ax, word ptr es:[di + 0xc]
0001096A: jbe 0x10974
0001096C: mov word ptr [bp - 2], 0xffe5
00010971: jmp 0x10ab9
00010974: mov ax, word ptr [bp - 0x26]
00010977: mov byte ptr [bp - 0x42], 0
0001097B: mov byte ptr [bp - 0x41], 0x55
0001097F: mov byte ptr [bp - 0x40], 0xaa
00010983: mov byte ptr [bp - 0x3f], 0xff
00010987: cmp word ptr [bp - 0x38], 1
0001098B: jne 0x109b9
0001098D: cmp byte ptr es:[di + 0x13], 1
00010992: jne 0x109a0
00010994: test ax, 1
00010997: je 0x109cc
00010999: mov al, 0xff
0001099B: mov byte ptr [bp - 0x42], al
0001099E: jmp 0x109cc
000109A0: cmp byte ptr es:[di + 0x13], 2
000109A5: jne 0x109b4
000109A7: and ax, 3
000109AA: mov si, ax
000109AC: mov al, byte ptr [bp + si - 0x42]
000109AF: mov byte ptr [bp - 0x42], al
000109B2: jmp 0x109cc
000109B4: mov byte ptr [bp - 0x42], al
000109B7: jmp 0x109cc
000109B9: xor si, si
000109BB: mov byte ptr [bp + si - 0x42], 0xff
000109BF: rcr ax, 1
000109C1: jb 0x109c6
000109C3: not byte ptr [bp + si - 0x42]
000109C6: inc si
000109C7: cmp si, word ptr [bp - 0x38]
000109CA: jb 0x109bb
000109CC: push es
000109CD: push di
000109CE: push word ptr [bp + 0xc]
000109D1: push word ptr [bp + 0xa]
000109D4: mov ax, 1
000109D7: push ax
000109D8: lcall 0xb08, 0xa
000109DD: or dx, dx
000109DF: jne 0x109e7
000109E1: mov word ptr [bp - 2], ax
000109E4: jmp 0x10ab9
000109E7: mov es, dx
000109E9: mov di, ax
000109EB: xor si, si
000109ED: mov bx, word ptr [bp - 0x20]
000109F0: sub bx, word ptr [bp - 0x3e]
000109F3: cld 
000109F4: mov al, byte ptr [bp + si - 0x42]
000109F7: mov cx, word ptr [bp - 0x3e]
000109FA: mov dx, word ptr [bp - 0x3c]
000109FD: cmp cx, 1
00010A00: ja 0x10a06
00010A02: and dh, dl
00010A04: jmp 0x10a69
00010A06: push ax
00010A07: and al, dl
00010A09: not dl
00010A0B: mov ah, byte ptr es:[di]
00010A0E: and ah, dl
00010A10: or al, ah
00010A12: stosb byte ptr es:[di], al
00010A13: pop ax
00010A14: dec cx
00010A15: or di, di
00010A17: jne 0x10a32
00010A19: push ax
00010A1A: mov si, 0x6cda
00010A1D: mov dx, word ptr [si + 6]
00010A20: mov ax, word ptr [si + 4]
00010A23: stc 
00010A24: lcall 0xb08, 0x17e
00010A29: mov word ptr [bp - 2], ax
00010A2C: pop ax
00010A2D: jae 0x10a32
00010A2F: jmp 0x10ab9
00010A32: dec cx
00010A33: je 0x10a69
00010A35: cmp di, word ptr [bp - 0x36]
00010A38: jbe 0x10a59
00010A3A: stosb byte ptr es:[di], al
00010A3B: or di, di
00010A3D: jne 0x10a55
00010A3F: push ax
00010A40: mov si, 0x6cda
00010A43: mov dx, word ptr [si + 6]
00010A46: mov ax, word ptr [si + 4]
00010A49: stc 
00010A4A: lcall 0xb08, 0x17e
00010A4F: mov word ptr [bp - 2], ax
00010A52: pop ax
00010A53: jb 0x10ab9
00010A55: loop 0x10a3a
00010A57: jmp 0x10a69
00010A59: test cx, 1
00010A5D: je 0x10a63
00010A5F: stosb byte ptr es:[di], al
00010A60: dec cx
00010A61: je 0x10a69
00010A63: shr cx, 1
00010A65: mov ah, al
00010A67: rep stosw word ptr es:[di], ax
00010A69: and al, dh
00010A6B: not dh
00010A6D: mov ah, byte ptr es:[di]
00010A70: and ah, dh
00010A72: or al, ah
00010A74: stosb byte ptr es:[di], al
00010A75: or di, di
00010A77: jne 0x10a8f
00010A79: push ax
00010A7A: mov si, 0x6cda
00010A7D: mov dx, word ptr [si + 6]
00010A80: mov ax, word ptr [si + 4]
00010A83: stc 
00010A84: lcall 0xb08, 0x17e
00010A89: mov word ptr [bp - 2], ax
00010A8C: pop ax
00010A8D: jb 0x10ab9
00010A8F: inc si
00010A90: add di, bx
00010A92: jae 0x10aaa
00010A94: push ax
00010A95: mov si, 0x6cda
00010A98: mov dx, word ptr [si + 6]
00010A9B: mov ax, word ptr [si + 4]
00010A9E: stc 
00010A9F: lcall 0xb08, 0x17e
00010AA4: mov word ptr [bp - 2], ax
00010AA7: pop ax
00010AA8: jb 0x10ab9
00010AAA: dec word ptr [bp - 0x38]
00010AAD: je 0x10ab2
00010AAF: jmp 0x109f4
00010AB2: mov word ptr [bp - 2], 0
00010AB7: jmp 0x10ab9
00010AB9: mov ax, word ptr [bp - 2]
00010ABC: pop di
00010ABD: pop si
00010ABE: pop es
00010ABF: pop ds
00010AC0: mov sp, bp
00010AC2: pop bp
00010AC3: retf 8
00010AC6: push ax
00010AC7: mov ax, 0x1ab5
00010ACA: mov ds, ax
00010ACC: pop ax
00010ACD: mov word ptr [0x67fa], ax
00010AD0: mov word ptr [0x67fc], bx
00010AD4: mov ax, 1
00010AD7: xchg word ptr [0x5c70], ax
00010ADB: or ax, ax
00010ADD: je 0x10ae2
00010ADF: jmp 0x10bcc
00010AE2: mov ax, ss
00010AE4: mov word ptr [0x67f8], ax
00010AE7: mov word ptr [0x67f6], sp
00010AEB: mov ax, ds
00010AED: mov ss, ax
00010AEF: mov sp, 0x67f6
00010AF2: mov ax, word ptr [0x67fa]
00010AF5: test ax, 0x1e
00010AF8: je 0x10b46
00010AFA: mov cx, word ptr [0x5c68]
00010AFE: mov dx, word ptr [0x5c6a]
00010B02: test ax, 0x10
00010B05: je 0x10b13
00010B07: inc word ptr [0x5cc0]
00010B0B: mov word ptr [0x5cc2], cx
00010B0F: mov word ptr [0x5cc4], dx
00010B13: test ax, 8
00010B16: je 0x10b24
00010B18: inc word ptr [0x5cae]
00010B1C: mov word ptr [0x5cb0], cx
00010B20: mov word ptr [0x5cb2], dx
00010B24: test ax, 4
00010B27: je 0x10b35
00010B29: inc word ptr [0x5cb4]
00010B2D: mov word ptr [0x5cb6], cx
00010B31: mov word ptr [0x5cb8], dx
00010B35: test ax, 2
00010B38: je 0x10b46
00010B3A: inc word ptr [0x5ca2]
00010B3E: mov word ptr [0x5ca4], cx
00010B42: mov word ptr [0x5ca6], dx
00010B46: test ax, 1
00010B49: je 0x10b74
00010B4B: mov ax, 0xb
00010B4E: int 0x33
00010B50: add word ptr [0x5c82], si
00010B54: add word ptr [0x5c84], di
00010B58: add si, word ptr [0x5c68]
00010B5C: add di, word ptr [0x5c6a]
00010B60: cmp word ptr [0x5ce6], 0
00010B65: je 0x10b74
00010B67: call 0x10e93
00010B6A: cmp word ptr [0x5c76], 1
00010B6F: jne 0x10b74
00010B71: call 0x10ece
00010B74: mov ax, word ptr [0x67fa]
00010B77: and ax, 0x1f
00010B7A: and ax, word ptr [0x6d37]
00010B7E: je 0x10bbd
00010B80: push bp
00010B81: mov bp, sp
00010B83: sub sp, 0xe
00010B86: mov word ptr [bp - 0xe], ax
00010B89: mov ax, word ptr [0x67fc]
00010B8C: mov word ptr [bp - 9], ax
00010B8F: lea ax, [bp - 8]
00010B92: push ss
00010B93: push ax
00010B94: lea ax, [bp - 6]
00010B97: push ss
00010B98: push ax
00010B99: push cs
00010B9A: call 0x114b2
00010B9D: mov ax, 0x40
00010BA0: mov es, ax
00010BA2: mov al, byte ptr es:[0x17]
00010BA6: mov byte ptr [bp - 0xa], al
00010BA9: xor ax, ax
00010BAB: mov word ptr [bp - 0xc], ax
00010BAE: push ss
00010BAF: mov ax, bp
00010BB1: sub ax, 0xe
00010BB4: push ax
00010BB5: lcall 0x107c, 0x1c0
00010BBA: mov sp, bp
00010BBC: pop bp
00010BBD: mov word ptr [0x5c70], 0
00010BC3: mov ax, word ptr [0x67f8]
00010BC6: mov ss, ax
00010BC8: mov sp, word ptr [0x67f6]
00010BCC: retf 
00010BCD: push bp
00010BCE: mov bp, sp
00010BD0: sub sp, 4
00010BD3: push ds
00010BD4: push es
00010BD5: push si
00010BD6: push di
00010BD7: mov ax, 0x1ab5
00010BDA: mov ds, ax
00010BDC: mov ax, 0
00010BDF: push ax
00010BE0: push ds
00010BE1: mov ax, 0x5d68
00010BE4: push ax
00010BE5: push ds
00010BE6: mov ax, 0x5fe8
00010BE9: push ax
00010BEA: mov ax, word ptr [0x43b1]
00010BED: push ax
00010BEE: mov ax, 0x10
00010BF1: push ax
00010BF2: push ax
00010BF3: lcall 0x5e5, 6
00010BF8: mov ax, 0
00010BFB: push ax
00010BFC: push ds
00010BFD: mov ax, 0x5ce8
00010C00: push ax
00010C01: push ds
00010C02: mov ax, 0x5ee8
00010C05: push ax
00010C06: mov ax, word ptr [0x43b1]
00010C09: push ax
00010C0A: mov ax, 0x10
00010C0D: push ax
00010C0E: push ax
00010C0F: lcall 0x5e5, 6
00010C14: mov ax, 0
00010C17: push ax
00010C18: push ds
00010C19: mov ax, 0x5de8
00010C1C: push ax
00010C1D: push ds
00010C1E: mov ax, 0x60e8
00010C21: push ax
00010C22: mov ax, word ptr [0x43b1]
00010C25: push ax
00010C26: mov ax, 0x10
00010C29: push ax
00010C2A: push ax
00010C2B: lcall 0x5e5, 6
00010C30: mov ax, 0
00010C33: push ax
00010C34: push ds
00010C35: mov ax, 0x5e68
00010C38: push ax
00010C39: push ds
00010C3A: mov ax, 0x61e8
00010C3D: push ax
00010C3E: mov ax, word ptr [0x43b1]
00010C41: push ax
00010C42: mov ax, 0x20
00010C45: push ax
00010C46: push ax
00010C47: lcall 0x5e5, 6
00010C4C: mov si, 0x5d68
00010C4F: mov al, byte ptr [si + 0x12]
00010C52: mov bl, byte ptr [si + 0x13]
00010C55: mul bl
00010C57: push ax
00010C58: mov si, 0x67fe
00010C5B: mov ax, word ptr [0x5c7c]
00010C5E: mov bx, 0x44
00010C61: mul bx
00010C63: add si, ax
00010C65: mov ax, word ptr [si]
00010C67: mov word ptr [0x5c6c], ax
00010C6A: mov ax, word ptr [si + 2]
00010C6D: mov word ptr [0x5c6e], ax
00010C70: add si, 4
00010C73: mov ax, 0x1ab5
00010C76: mov es, ax
00010C78: mov di, 0x5ee8
00010C7B: pop ax
00010C7C: cmp ax, 1
00010C7F: jbe 0x10c91
00010C81: cmp ax, 2
00010C84: jbe 0x10cb6
00010C86: cmp ax, 4
00010C89: jne 0x10c8e
00010C8B: jmp 0x10d24
00010C8E: jmp 0x10d61
00010C91: cld 
00010C92: mov cx, 0x10
00010C95: mov ax, word ptr [si]
00010C97: xchg al, ah
00010C99: stosw word ptr es:[di], ax
00010C9A: inc si
00010C9B: inc si
00010C9C: loop 0x10c95
00010C9E: mov ax, 0x1ab5
00010CA1: mov es, ax
00010CA3: mov di, 0x5fe8
00010CA6: cld 
00010CA7: mov cx, 0x10
00010CAA: mov ax, word ptr [si]
00010CAC: xchg al, ah
00010CAE: stosw word ptr es:[di], ax
00010CAF: inc si
00010CB0: inc si
00010CB1: loop 0x10caa
00010CB3: jmp 0x10daa
00010CB6: cld 
00010CB7: mov dx, 0x10
00010CBA: push dx
00010CBB: mov bx, word ptr [si]
00010CBD: mov cx, 0x10
00010CC0: xor dx, dx
00010CC2: xor ax, ax
00010CC4: shl dx, 1
00010CC6: rcl ax, 1
00010CC8: shl dx, 1
00010CCA: rcl ax, 1
00010CCC: rol bx, 1
00010CCE: jae 0x10cd3
00010CD0: or dx, 3
00010CD3: loop 0x10cc4
00010CD5: xchg al, ah
00010CD7: stosw word ptr es:[di], ax
00010CD8: mov ax, dx
00010CDA: xchg al, ah
00010CDC: stosw word ptr es:[di], ax
00010CDD: inc si
00010CDE: inc si
00010CDF: pop dx
00010CE0: dec dx
00010CE1: jne 0x10cba
00010CE3: mov ax, 0x1ab5
00010CE6: mov es, ax
00010CE8: mov di, 0x5fe8
00010CEB: cld 
00010CEC: mov dx, 0x10
00010CEF: mov ax, word ptr [0x5c7e]
00010CF2: and ax, 3
00010CF5: mov word ptr [bp - 4], ax
00010CF8: push dx
00010CF9: mov bx, word ptr [si]
00010CFB: mov cx, 0x10
00010CFE: xor dx, dx
00010D00: xor ax, ax
00010D02: shl dx, 1
00010D04: rcl ax, 1
00010D06: shl dx, 1
00010D08: rcl ax, 1
00010D0A: rol bx, 1
00010D0C: jae 0x10d11
00010D0E: or dx, word ptr [bp - 4]
00010D11: loop 0x10d02
00010D13: xchg al, ah
00010D15: stosw word ptr es:[di], ax
00010D16: mov ax, dx
00010D18: xchg al, ah
00010D1A: stosw word ptr es:[di], ax
00010D1B: inc si
00010D1C: inc si
00010D1D: pop dx
00010D1E: dec dx
00010D1F: jne 0x10cf8
00010D21: jmp 0x10daa
00010D24: cld 
00010D25: mov dx, 0x10
00010D28: mov cx, 4
00010D2B: mov ax, word ptr [si]
00010D2D: xchg al, ah
00010D2F: rep stosw word ptr es:[di], ax
00010D31: inc si
00010D32: inc si
00010D33: dec dx
00010D34: jne 0x10d28
00010D36: mov ax, 0x1ab5
00010D39: mov es, ax
00010D3B: mov di, 0x5fe8
00010D3E: cld 
00010D3F: mov dx, 0x10
00010D42: mov cx, 4
00010D45: mov bx, word ptr [0x5c7e]
00010D49: mov ax, word ptr [si]
00010D4B: xchg al, ah
00010D4D: ror bl, 1
00010D4F: jb 0x10d53
00010D51: xor ax, ax
00010D53: mov word ptr es:[di], ax
00010D56: inc di
00010D57: inc di
00010D58: loop 0x10d49
00010D5A: inc si
00010D5B: inc si
00010D5C: dec dx
00010D5D: jne 0x10d42
00010D5F: jmp 0x10daa
00010D61: cld 
00010D62: mov dx, 0x10
00010D65: mov cx, 0x10
00010D68: mov ax, word ptr [si]
00010D6A: rol ax, 1
00010D6C: jae 0x10d74
00010D6E: mov byte ptr es:[di], 0xff
00010D72: jmp 0x10d78
00010D74: mov byte ptr es:[di], 0
00010D78: inc di
00010D79: loop 0x10d6a
00010D7B: inc si
00010D7C: inc si
00010D7D: dec dx
00010D7E: jne 0x10d65
00010D80: mov ax, 0x1ab5
00010D83: mov es, ax
00010D85: mov di, 0x5fe8
00010D88: cld 
00010D89: mov dx, 0x10
00010D8C: mov bx, word ptr [0x5c7e]
00010D90: mov cx, 0x10
00010D93: mov ax, word ptr [si]
00010D95: rol ax, 1
00010D97: jae 0x10d9e
00010D99: mov byte ptr es:[di], bl
00010D9C: jmp 0x10da2
00010D9E: mov byte ptr es:[di], 0
00010DA2: inc di
00010DA3: loop 0x10d95
00010DA5: inc si
00010DA6: inc si
00010DA7: dec dx
00010DA8: jne 0x10d90
00010DAA: mov ax, word ptr [0x43b1]
00010DAD: mov word ptr [0x5c80], ax
00010DB0: mov word ptr [bp - 2], 0
00010DB5: mov ax, word ptr [bp - 2]
00010DB8: pop di
00010DB9: pop si
00010DBA: pop es
00010DBB: pop ds
00010DBC: mov sp, bp
00010DBE: pop bp
00010DBF: retf 
00010DC0: mov ax, si
00010DC2: mov bx, di
00010DC4: push ax
00010DC5: push bx
00010DC6: add ax, word ptr [0x5c8a]
00010DCA: add bx, word ptr [0x5c8c]
00010DCE: push ax
00010DCF: push bx
00010DD0: push word ptr [0x43b7]
00010DD4: push ds
00010DD5: mov ax, 0x5de8
00010DD8: push ax
00010DD9: xor ax, ax
00010DDB: push ax
00010DDC: push ax
00010DDD: lcall 0x71a, 0xc
00010DE2: push ds
00010DE3: mov ax, 0x5de8
00010DE6: push ax
00010DE7: xor bx, bx
00010DE9: push bx
00010DEA: push bx
00010DEB: mov ax, word ptr [0x5c8a]
00010DEE: push ax
00010DEF: mov ax, word ptr [0x5c8c]
00010DF2: push ax
00010DF3: push ds
00010DF4: mov ax, 0x5e68
00010DF7: push ax
00010DF8: push bx
00010DF9: push bx
00010DFA: push bx
00010DFB: lcall 0xb44, 0xc
00010E00: push ds
00010E01: mov ax, 0x5ce8
00010E04: push ax
00010E05: xor bx, bx
00010E07: push bx
00010E08: push bx
00010E09: mov ax, word ptr [0x5c8a]
00010E0C: push ax
00010E0D: mov ax, word ptr [0x5c8c]
00010E10: push ax
00010E11: push ds
00010E12: mov ax, 0x5e68
00010E15: push ax
00010E16: push bx
00010E17: push bx
00010E18: mov ax, 1
00010E1B: push ax
00010E1C: lcall 0xb44, 0xc
00010E21: push ds
00010E22: mov ax, 0x5d68
00010E25: push ax
00010E26: xor bx, bx
00010E28: push bx
00010E29: push bx
00010E2A: mov ax, word ptr [0x5c8a]
00010E2D: push ax
00010E2E: mov ax, word ptr [0x5c8c]
00010E31: push ax
00010E32: push ds
00010E33: mov ax, 0x5e68
00010E36: push ax
00010E37: push bx
00010E38: push bx
00010E39: mov ax, 2
00010E3C: push ax
00010E3D: lcall 0xb44, 0xc
00010E42: push ds
00010E43: mov ax, 0x5e68
00010E46: push ax
00010E47: xor bx, bx
00010E49: push bx
00010E4A: push bx
00010E4B: mov ax, si
00010E4D: mov bx, di
00010E4F: push ax
00010E50: push bx
00010E51: add ax, word ptr [0x5c8a]
00010E55: add bx, word ptr [0x5c8c]
00010E59: push ax
00010E5A: push bx
00010E5B: push word ptr [0x43b7]
00010E5F: lcall 0xa52, 0xe
00010E64: mov word ptr [0x5c86], si
00010E68: mov word ptr [0x5c88], di
00010E6C: ret 
00010E6D: push ds
00010E6E: mov ax, 0x5de8
00010E71: push ax
00010E72: xor ax, ax
00010E74: push ax
00010E75: push ax
00010E76: mov ax, word ptr [0x5c86]
00010E79: mov bx, word ptr [0x5c88]
00010E7D: push ax
00010E7E: push bx
00010E7F: add ax, word ptr [0x5c8a]
00010E83: add bx, word ptr [0x5c8c]
00010E87: push ax
00010E88: push bx
00010E89: push word ptr [0x43b7]
00010E8D: lcall 0xa52, 0xe
00010E92: ret 
00010E93: cmp si, word ptr [0x5cca]
00010E97: jge 0x10e9f
00010E99: mov si, word ptr [0x5cca]
00010E9D: jmp 0x10ea9
00010E9F: cmp si, word ptr [0x5cce]
00010EA3: jle 0x10ea9
00010EA5: mov si, word ptr [0x5cce]
00010EA9: cmp di, word ptr [0x5ccc]
00010EAD: jge 0x10eb5
00010EAF: mov di, word ptr [0x5ccc]
00010EB3: jmp 0x10ebf
00010EB5: cmp di, word ptr [0x5cd0]
00010EB9: jle 0x10ebf
00010EBB: mov di, word ptr [0x5cd0]
00010EBF: pushf 
00010EC0: cli 
00010EC1: mov word ptr [0x5c68], si
00010EC5: mov word ptr [0x5c6a], di
00010EC9: popf 
00010ECA: call 0x11a48
00010ECD: ret 
00010ECE: sub si, word ptr [0x5c6c]
00010ED2: sub di, word ptr [0x5c6e]
00010ED6: cmp word ptr [0x5c74], 0
00010EDB: je 0x10ee3
00010EDD: mov word ptr [0x5cd4], ax
00010EE0: jmp 0x110c0
00010EE3: push ax
00010EE4: xor ax, ax
00010EE6: push ax
00010EE7: lcall 0x98e, 0x53a
00010EEC: mov word ptr [0x65f3], ax
00010EEF: test byte ptr [0x5c7a], 0xff
00010EF4: je 0x10ef9
00010EF6: call 0x1183c
00010EF9: pop ax
00010EFA: mov bx, ax
00010EFC: xchg word ptr [0x5cd4], bx
00010F00: or ax, bx
00010F02: je 0x10f07
00010F04: jmp 0x1109c
00010F07: cmp word ptr [0x5c86], si
00010F0B: jg 0x10f33
00010F0D: mov ax, si
00010F0F: sub ax, word ptr [0x5c86]
00010F13: mov word ptr [0x5c96], ax
00010F16: cmp ax, word ptr [0x5c8a]
00010F1A: jle 0x10f1f
00010F1C: jmp 0x1109c
00010F1F: mov word ptr [0x5c92], ax
00010F22: xor ax, ax
00010F24: mov word ptr [0x5c8e], ax
00010F27: mov ax, word ptr [0x5c86]
00010F2A: mov word ptr [0x5c9a], ax
00010F2D: mov word ptr [0x5c9e], si
00010F31: jmp 0x10f56
00010F33: mov ax, word ptr [0x5c86]
00010F36: sub ax, si
00010F38: mov word ptr [0x5c96], ax
00010F3B: cmp ax, word ptr [0x5c8a]
00010F3F: jle 0x10f44
00010F41: jmp 0x1109c
00010F44: mov word ptr [0x5c8e], ax
00010F47: xor ax, ax
00010F49: mov word ptr [0x5c92], ax
00010F4C: mov ax, word ptr [0x5c86]
00010F4F: mov word ptr [0x5c9e], ax
00010F52: mov word ptr [0x5c9a], si
00010F56: cmp word ptr [0x5c88], di
00010F5A: jg 0x10f82
00010F5C: mov ax, di
00010F5E: sub ax, word ptr [0x5c88]
00010F62: mov word ptr [0x5c98], ax
00010F65: cmp ax, word ptr [0x5c8c]
00010F69: jle 0x10f6e
00010F6B: jmp 0x1109c
00010F6E: mov word ptr [0x5c94], ax
00010F71: xor ax, ax
00010F73: mov word ptr [0x5c90], ax
00010F76: mov ax, word ptr [0x5c88]
00010F79: mov word ptr [0x5c9c], ax
00010F7C: mov word ptr [0x5ca0], di
00010F80: jmp 0x10fa5
00010F82: mov ax, word ptr [0x5c88]
00010F85: sub ax, di
00010F87: mov word ptr [0x5c98], ax
00010F8A: cmp ax, word ptr [0x5c8c]
00010F8E: jle 0x10f93
00010F90: jmp 0x1109c
00010F93: mov word ptr [0x5c90], ax
00010F96: xor ax, ax
00010F98: mov word ptr [0x5c94], ax
00010F9B: mov ax, word ptr [0x5c88]
00010F9E: mov word ptr [0x5ca0], ax
00010FA1: mov word ptr [0x5c9c], di
00010FA5: xor bx, bx
00010FA7: push word ptr [0x5c9a]
00010FAB: push word ptr [0x5c9c]
00010FAF: mov ax, word ptr [0x5c9e]
00010FB2: add ax, word ptr [0x5c8a]
00010FB6: push ax
00010FB7: mov ax, word ptr [0x5ca0]
00010FBA: add ax, word ptr [0x5c8c]
00010FBE: push ax
00010FBF: push word ptr [0x43b7]
00010FC3: push ds
00010FC4: mov ax, 0x5e68
00010FC7: push ax
00010FC8: push bx
00010FC9: push bx
00010FCA: lcall 0x71a, 0xc
00010FCF: xor bx, bx
00010FD1: push ds
00010FD2: mov ax, 0x5de8
00010FD5: push ax
00010FD6: push bx
00010FD7: push bx
00010FD8: push word ptr [0x5c8a]
00010FDC: push word ptr [0x5c8c]
00010FE0: push ds
00010FE1: mov ax, 0x5e68
00010FE4: push ax
00010FE5: push word ptr [0x5c8e]
00010FE9: push word ptr [0x5c90]
00010FED: push bx
00010FEE: lcall 0xb44, 0xc
00010FF3: push ds
00010FF4: mov ax, 0x5e68
00010FF7: push ax
00010FF8: mov ax, word ptr [0x5c92]
00010FFB: mov bx, word ptr [0x5c94]
00010FFF: push ax
00011000: push bx
00011001: add ax, word ptr [0x5c8a]
00011005: add bx, word ptr [0x5c8c]
00011009: push ax
0001100A: push bx
0001100B: xor bx, bx
0001100D: push ds
0001100E: mov ax, 0x5de8
00011011: push ax
00011012: push bx
00011013: push bx
00011014: push bx
00011015: lcall 0xb44, 0xc
0001101A: xor bx, bx
0001101C: push ds
0001101D: mov ax, 0x5ce8
00011020: push ax
00011021: push bx
00011022: push bx
00011023: push word ptr [0x5c8a]
00011027: push word ptr [0x5c8c]
0001102B: push ds
0001102C: mov ax, 0x5e68
0001102F: push ax
00011030: push word ptr [0x5c92]
00011034: push word ptr [0x5c94]
00011038: mov ax, 1
0001103B: push ax
0001103C: lcall 0xb44, 0xc
00011041: xor bx, bx
00011043: push ds
00011044: mov ax, 0x5d68
00011047: push ax
00011048: push bx
00011049: push bx
0001104A: push word ptr [0x5c8a]
0001104E: push word ptr [0x5c8c]
00011052: push ds
00011053: mov ax, 0x5e68
00011056: push ax
00011057: push word ptr [0x5c92]
0001105B: push word ptr [0x5c94]
0001105F: mov ax, 2
00011062: push ax
00011063: lcall 0xb44, 0xc
00011068: xor bx, bx
0001106A: push ds
0001106B: mov ax, 0x5e68
0001106E: push ax
0001106F: push bx
00011070: push bx
00011071: push word ptr [0x5c9a]
00011075: push word ptr [0x5c9c]
00011079: mov ax, word ptr [0x5c9e]
0001107C: add ax, word ptr [0x5c8a]
00011080: push ax
00011081: mov ax, word ptr [0x5ca0]
00011084: add ax, word ptr [0x5c8c]
00011088: push ax
00011089: push word ptr [0x43b7]
0001108D: lcall 0xa52, 0xe
00011092: mov word ptr [0x5c86], si
00011096: mov word ptr [0x5c88], di
0001109A: jmp 0x110ad
0001109C: or bx, bx
0001109E: jne 0x110a3
000110A0: call 0x10e6d
000110A3: test byte ptr [0x5cd4], 0xff
000110A8: jne 0x110ad
000110AA: call 0x10dc0
000110AD: push word ptr [0x65f3]
000110B1: lcall 0x98e, 0x53a
000110B6: test byte ptr [0x5c7a], 0xff
000110BB: je 0x110c0
000110BD: call 0x1193c
000110C0: ret 
000110C1: xor ax, ax
000110C3: mov word ptr [0x5c70], 0
000110C9: mov word ptr [0x5c80], 0xffff
000110CF: mov word ptr [0x5c74], 0xffff
000110D5: mov word ptr [0x5ca2], ax
000110D8: mov word ptr [0x5ca8], ax
000110DB: mov word ptr [0x5cae], ax
000110DE: mov word ptr [0x5cb4], ax
000110E1: mov word ptr [0x5cba], ax
000110E4: mov word ptr [0x5cc0], ax
000110E7: mov word ptr [0x5c82], ax
000110EA: mov word ptr [0x5c84], ax
000110ED: mov word ptr [0x5c8a], 0xf
000110F3: mov word ptr [0x5c8c], 0xf
000110F9: mov word ptr [0x5cd4], ax
000110FC: mov word ptr [0x5cd2], ax
000110FF: mov si, 0x5d68
00011102: mov word ptr [0x5cca], ax
00011105: mov word ptr [0x5ccc], ax
00011108: mov ax, word ptr [si + 0xe]
0001110B: dec ax
0001110C: mov word ptr [0x5cce], ax
0001110F: mov ax, word ptr [si + 0x10]
00011112: dec ax
00011113: mov word ptr [0x5cd0], ax
00011116: cmp word ptr [0x5ce6], 0
0001111B: jne 0x11127
0001111D: mov ax, 0x140
00011120: push ax
00011121: mov ax, 0x64
00011124: push ax
00011125: jmp 0x11133
00011127: mov ax, word ptr [si + 0xe]
0001112A: shr ax, 1
0001112C: push ax
0001112D: mov ax, word ptr [si + 0x10]
00011130: shr ax, 1
00011132: push ax
00011133: push cs
00011134: call 0x114f8
00011137: ret 
00011138: push bp
00011139: mov bp, sp
0001113B: sub sp, 2
0001113E: push ds
0001113F: push es
00011140: push si
00011141: push di
00011142: mov ax, 0x1ab5
00011145: mov ds, ax
00011147: call 0x11a23
0001114A: mov word ptr [0x5c7a], ax
0001114D: mov al, 0x33
0001114F: mov ah, 0x35
00011151: int 0x21
00011153: mov ax, es
00011155: or ax, bx
00011157: je 0x1115f
00011159: cmp byte ptr es:[bx], 0xcf
0001115D: jne 0x1116c
0001115F: mov word ptr [bp - 2], 0xf05e
00011164: mov word ptr [0x5c78], 0
0001116A: jmp 0x1118d
0001116C: mov ax, 0
0001116F: int 0x33
00011171: or ax, ax
00011173: jne 0x11182
00011175: mov word ptr [bp - 2], 0xf05d
0001117A: mov word ptr [0x5c78], 0
00011180: jmp 0x1118d
00011182: mov word ptr [bp - 2], 0
00011187: mov word ptr [0x5c78], 1
0001118D: mov word ptr [0x5ce6], 1
00011193: mov word ptr [0x5c76], 0
00011199: mov ax, 0
0001119C: push ax
0001119D: mov ax, 0xf
000111A0: push ax
000111A1: push cs
000111A2: call 0x11576
000111A5: call 0x110c1
000111A8: cmp word ptr [0x5c78], 1
000111AD: jne 0x111c5
000111AF: push dx
000111B0: mov dx, cs
000111B2: mov es, dx
000111B4: pop dx
000111B5: mov ax, 0x20
000111B8: int 0x33
000111BA: mov ax, 0xc
000111BD: mov cx, 0x1f
000111C0: mov dx, 6
000111C3: int 0x33
000111C5: mov ax, word ptr [bp - 2]
000111C8: pop di
000111C9: pop si
000111CA: pop es
000111CB: pop ds
000111CC: mov sp, bp
000111CE: pop bp
000111CF: retf 
000111D0: push bp
000111D1: mov bp, sp
000111D3: sub sp, 2
000111D6: push ds
000111D7: push es
000111D8: push si
000111D9: push di
000111DA: mov ax, 0x1ab5
000111DD: mov ds, ax
000111DF: mov ax, 0
000111E2: int 0x33
000111E4: mov word ptr [bp - 2], 0
000111E9: mov ax, word ptr [bp - 2]
000111EC: pop di
000111ED: pop si
000111EE: pop es
000111EF: pop ds
000111F0: mov sp, bp
000111F2: pop bp
000111F3: retf 
000111F4: push bp
000111F5: mov bp, sp
000111F7: sub sp, 2
000111FA: push ds
000111FB: push es
000111FC: push si
000111FD: push di
000111FE: mov ax, 0x1ab5
00011201: mov ds, ax
00011203: cmp word ptr [0x5c78], 1
00011208: je 0x11211
0001120A: mov word ptr [bp - 2], 0xf05e
0001120F: jmp 0x1123c
00011211: mov ax, word ptr [bp + 6]
00011214: cmp ax, 1
00011217: jne 0x11231
00011219: mov ax, 0
0001121C: push ax
0001121D: push cs
0001121E: call 0x11249
00011221: mov word ptr [0x5c76], 1
00011227: mov ax, 1
0001122A: push ax
0001122B: push cs
0001122C: call 0x11249
0001122F: jmp 0x11237
00011231: mov word ptr [0x5c76], 0
00011237: mov word ptr [bp - 2], 0
0001123C: mov ax, word ptr [bp - 2]
0001123F: pop di
00011240: pop si
00011241: pop es
00011242: pop ds
00011243: mov sp, bp
00011245: pop bp
00011246: retf 2
00011249: push bp
0001124A: mov bp, sp
0001124C: sub sp, 2
0001124F: push ds
00011250: push es
00011251: push si
00011252: push di
00011253: mov ax, 0x1ab5
00011256: mov ds, ax
00011258: cmp word ptr [0x5ce6], 0
0001125D: jne 0x11273
0001125F: cmp word ptr [bp + 6], 1
00011263: jne 0x1126c
00011265: mov ax, 1
00011268: int 0x33
0001126A: jmp 0x112cd
0001126C: mov ax, 2
0001126F: int 0x33
00011271: jmp 0x112cd
00011273: cmp word ptr [bp + 6], 1
00011277: je 0x1128e
00011279: mov ax, word ptr [0x5c74]
0001127C: mov bx, ax
0001127E: dec bx
0001127F: mov word ptr [0x5c74], bx
00011283: or ax, word ptr [0x5cd4]
00011287: jne 0x112cd
00011289: call 0x10e6d
0001128C: jmp 0x112cd
0001128E: cmp word ptr [0x5c74], 0
00011293: je 0x112cd
00011295: mov si, word ptr [0x5c68]
00011299: mov di, word ptr [0x5c6a]
0001129D: call 0x11a48
000112A0: mov bx, word ptr [0x5c74]
000112A4: inc bx
000112A5: push bx
000112A6: or bx, ax
000112A8: xchg word ptr [0x5cd4], ax
000112AC: or bx, ax
000112AE: jne 0x112c8
000112B0: mov ax, word ptr [0x43b1]
000112B3: cmp ax, word ptr [0x5c80]
000112B7: je 0x112bd
000112B9: push cs
000112BA: call 0x10bcd
000112BD: sub si, word ptr [0x5c6c]
000112C1: sub di, word ptr [0x5c6e]
000112C5: call 0x10dc0
000112C8: pop bx
000112C9: mov word ptr [0x5c74], bx
000112CD: mov word ptr [bp - 2], 0
000112D2: mov ax, word ptr [bp - 2]
000112D5: pop di
000112D6: pop si
000112D7: pop es
000112D8: pop ds
000112D9: mov sp, bp
000112DB: pop bp
000112DC: retf 2
000112DF: push bp
000112E0: mov bp, sp
000112E2: sub sp, 2
000112E5: push ds
000112E6: push es
000112E7: push si
000112E8: push di
000112E9: mov ax, 0x1ab5
000112EC: mov ds, ax
000112EE: pushf 
000112EF: cli 
000112F0: mov cx, word ptr [0x5c82]
000112F4: mov dx, word ptr [0x5c84]
000112F8: xor ax, ax
000112FA: mov word ptr [0x5c82], ax
000112FD: mov word ptr [0x5c84], ax
00011300: popf 
00011301: les di, ptr [bp + 0xa]
00011304: mov word ptr es:[di], cx
00011307: les di, ptr [bp + 6]
0001130A: mov word ptr es:[di], dx
0001130D: mov word ptr [bp - 2], 0
00011312: mov ax, word ptr [bp - 2]
00011315: pop di
00011316: pop si
00011317: pop es
00011318: pop ds
00011319: mov sp, bp
0001131B: pop bp
0001131C: retf 8
0001131F: push bp
00011320: mov bp, sp
00011322: sub sp, 2
00011325: push ds
00011326: push es
00011327: push si
00011328: push di
00011329: mov ax, 0x1ab5
0001132C: mov ds, ax
0001132E: mov ax, 3
00011331: int 0x33
00011333: mov word ptr [bp - 2], bx
00011336: mov ax, word ptr [bp - 2]
00011339: pop di
0001133A: pop si
0001133B: pop es
0001133C: pop ds
0001133D: mov sp, bp
0001133F: pop bp
00011340: retf 
00011341: push bp
00011342: mov bp, sp
00011344: sub sp, 2
00011347: push ds
00011348: push es
00011349: push si
0001134A: push di
0001134B: mov ax, 0x1ab5
0001134E: mov ds, ax
00011350: pushf 
00011351: cli 
00011352: mov si, 0x5ca2
00011355: mov ax, word ptr [bp + 0x12]
00011358: cmp ax, 1
0001135B: je 0x11368
0001135D: add si, 6
00011360: cmp ax, 4
00011363: je 0x11368
00011365: add si, 6
00011368: cld 
00011369: push si
0001136A: les di, ptr [bp + 0xe]
0001136D: movsw word ptr es:[di], word ptr [si]
0001136E: les di, ptr [bp + 0xa]
00011371: movsw word ptr es:[di], word ptr [si]
00011372: les di, ptr [bp + 6]
00011375: movsw word ptr es:[di], word ptr [si]
00011376: pop si
00011377: mov word ptr [si], 0
0001137B: popf 
0001137C: mov word ptr [bp - 2], 0
00011381: mov ax, word ptr [bp - 2]
00011384: pop di
00011385: pop si
00011386: pop es
00011387: pop ds
00011388: mov sp, bp
0001138A: pop bp
0001138B: retf 0xe
0001138E: push bp
0001138F: mov bp, sp
00011391: sub sp, 2
00011394: push ds
00011395: push es
00011396: push si
00011397: push di
00011398: mov ax, 0x1ab5
0001139B: mov ds, ax
0001139D: pushf 
0001139E: cli 
0001139F: mov si, 0x5cb4
000113A2: mov ax, word ptr [bp + 0x12]
000113A5: cmp ax, 1
000113A8: je 0x113b5
000113AA: add si, 6
000113AD: cmp ax, 4
000113B0: je 0x113b5
000113B2: add si, 6
000113B5: cld 
000113B6: push si
000113B7: les di, ptr [bp + 0xe]
000113BA: movsw word ptr es:[di], word ptr [si]
000113BB: les di, ptr [bp + 0xa]
000113BE: movsw word ptr es:[di], word ptr [si]
000113BF: les di, ptr [bp + 6]
000113C2: movsw word ptr es:[di], word ptr [si]
000113C3: pop si
000113C4: mov word ptr [si], 0
000113C8: popf 
000113C9: mov word ptr [bp - 2], 0
000113CE: mov ax, word ptr [bp - 2]
000113D1: pop di
000113D2: pop si
000113D3: pop es
000113D4: pop ds
000113D5: mov sp, bp
000113D7: pop bp
000113D8: retf 0xe
000113DB: push bp
000113DC: mov bp, sp
000113DE: sub sp, 2
000113E1: push ds
000113E2: push es
000113E3: push si
000113E4: push di
000113E5: mov ax, 0x1ab5
000113E8: mov ds, ax
000113EA: pushf 
000113EB: cli 
000113EC: mov ax, word ptr [bp + 8]
000113EF: mov word ptr [0x5cc6], ax
000113F2: mov ax, word ptr [bp + 6]
000113F5: mov word ptr [0x5cc8], ax
000113F8: popf 
000113F9: mov word ptr [bp - 2], 0
000113FE: mov ax, word ptr [bp - 2]
00011401: pop di
00011402: pop si
00011403: pop es
00011404: pop ds
00011405: mov sp, bp
00011407: pop bp
00011408: retf 4
0001140B: push bp
0001140C: mov bp, sp
0001140E: sub sp, 2
00011411: push ds
00011412: push es
00011413: push si
00011414: push di
00011415: mov ax, 0x1ab5
00011418: mov ds, ax
0001141A: les di, ptr [bp + 0x12]
0001141D: mov ax, word ptr [0x5cca]
00011420: mov word ptr es:[di], ax
00011423: les di, ptr [bp + 0xe]
00011426: mov ax, word ptr [0x5ccc]
00011429: mov word ptr es:[di], ax
0001142C: les di, ptr [bp + 0xa]
0001142F: mov ax, word ptr [0x5cce]
00011432: mov word ptr es:[di], ax
00011435: les di, ptr [bp + 6]
00011438: mov ax, word ptr [0x5cd0]
0001143B: mov word ptr es:[di], ax
0001143E: mov word ptr [bp - 2], 0
00011443: mov ax, word ptr [bp - 2]
00011446: pop di
00011447: pop si
00011448: pop es
00011449: pop ds
0001144A: mov sp, bp
0001144C: pop bp
0001144D: retf 0x10
00011450: push bp
00011451: mov bp, sp
00011453: sub sp, 2
00011456: push ds
00011457: push es
00011458: push si
00011459: push di
0001145A: mov ax, 0x1ab5
0001145D: mov ds, ax
0001145F: mov ax, 0
00011462: push ax
00011463: push cs
00011464: call 0x11249
00011467: mov cx, word ptr [bp + 0xc]
0001146A: mov word ptr [0x5cca], cx
0001146E: mov ax, word ptr [bp + 0xa]
00011471: mov word ptr [0x5ccc], ax
00011474: mov dx, word ptr [bp + 8]
00011477: mov word ptr [0x5cce], dx
0001147B: mov ax, word ptr [bp + 6]
0001147E: mov word ptr [0x5cd0], ax
00011481: cmp word ptr [0x5ce6], 1
00011486: je 0x11498
00011488: mov ax, 7
0001148B: int 0x33
0001148D: mov ax, 8
00011490: mov cx, word ptr [bp + 0xa]
00011493: mov dx, word ptr [bp + 6]
00011496: int 0x33
00011498: mov ax, 1
0001149B: push ax
0001149C: push cs
0001149D: call 0x11249
000114A0: mov word ptr [bp - 2], 0
000114A5: mov ax, word ptr [bp - 2]
000114A8: pop di
000114A9: pop si
000114AA: pop es
000114AB: pop ds
000114AC: mov sp, bp
000114AE: pop bp
000114AF: retf 8
000114B2: push bp
000114B3: mov bp, sp
000114B5: sub sp, 2
000114B8: push ds
000114B9: push es
000114BA: push si
000114BB: push di
000114BC: mov ax, 0x1ab5
000114BF: mov ds, ax
000114C1: cmp word ptr [0x5ce6], 0
000114C6: jne 0x114cf
000114C8: mov ax, 3
000114CB: int 0x33
000114CD: jmp 0x114da
000114CF: pushf 
000114D0: cli 
000114D1: mov cx, word ptr [0x5c68]
000114D5: mov dx, word ptr [0x5c6a]
000114D9: popf 
000114DA: les di, ptr [bp + 0xa]
000114DD: mov word ptr es:[di], cx
000114E0: les di, ptr [bp + 6]
000114E3: mov word ptr es:[di], dx
000114E6: mov word ptr [bp - 2], 0
000114EB: mov ax, word ptr [bp - 2]
000114EE: pop di
000114EF: pop si
000114F0: pop es
000114F1: pop ds
000114F2: mov sp, bp
000114F4: pop bp
000114F5: retf 8
000114F8: push bp
000114F9: mov bp, sp
000114FB: sub sp, 2
000114FE: push ds
000114FF: push es
00011500: push si
00011501: push di
00011502: mov ax, 0x1ab5
00011505: mov ds, ax
00011507: cmp word ptr [0x5ce6], 1
0001150C: je 0x1151b
0001150E: mov ax, 4
00011511: mov cx, word ptr [bp + 8]
00011514: mov dx, word ptr [bp + 6]
00011517: int 0x33
00011519: jmp 0x11531
0001151B: mov si, word ptr [bp + 8]
0001151E: mov di, word ptr [bp + 6]
00011521: call 0x10e93
00011524: pushf 
00011525: cli 
00011526: cmp word ptr [0x5c74], 0
0001152B: jne 0x11530
0001152D: call 0x10ece
00011530: popf 
00011531: mov word ptr [bp - 2], 0
00011536: mov ax, word ptr [bp - 2]
00011539: pop di
0001153A: pop si
0001153B: pop es
0001153C: pop ds
0001153D: mov sp, bp
0001153F: pop bp
00011540: retf 4
00011543: push bp
00011544: mov bp, sp
00011546: sub sp, 2
00011549: push ds
0001154A: push es
0001154B: push si
0001154C: push di
0001154D: mov ax, 0x1ab5
00011550: mov ds, ax
00011552: les di, ptr [bp + 0xa]
00011555: mov ax, word ptr [0x5c7c]
00011558: mov word ptr es:[di], ax
0001155B: les di, ptr [bp + 6]
0001155E: mov ax, word ptr [0x5c7e]
00011561: mov word ptr es:[di], ax
00011564: mov word ptr [bp - 2], 0
00011569: mov ax, word ptr [bp - 2]
0001156C: pop di
0001156D: pop si
0001156E: pop es
0001156F: pop ds
00011570: mov sp, bp
00011572: pop bp
00011573: retf 8
00011576: push bp
00011577: mov bp, sp
00011579: sub sp, 2
0001157C: push ds
0001157D: push es
0001157E: push si
0001157F: push di
00011580: mov ax, 0x1ab5
00011583: mov ds, ax
00011585: mov ax, word ptr [bp + 8]
00011588: cmp ax, 0
0001158B: jl 0x11592
0001158D: cmp ax, 9
00011590: jle 0x11599
00011592: mov word ptr [bp - 2], 0xf05c
00011597: jmp 0x115c1
00011599: mov ax, 0
0001159C: push ax
0001159D: push cs
0001159E: call 0x11249
000115A1: mov ax, word ptr [bp + 8]
000115A4: mov word ptr [0x5c7c], ax
000115A7: mov ax, word ptr [bp + 6]
000115AA: mov word ptr [0x5c7e], ax
000115AD: push cs
000115AE: call 0x10bcd
000115B1: call 0x117c2
000115B4: mov ax, 1
000115B7: push ax
000115B8: push cs
000115B9: call 0x11249
000115BC: mov word ptr [bp - 2], 0
000115C1: mov ax, word ptr [bp - 2]
000115C4: pop di
000115C5: pop si
000115C6: pop es
000115C7: pop ds
000115C8: mov sp, bp
000115CA: pop bp
000115CB: retf 4
000115CE: push bp
000115CF: mov bp, sp
000115D1: sub sp, 2
000115D4: push ds
000115D5: push es
000115D6: push si
000115D7: push di
000115D8: mov ax, 0x1ab5
000115DB: mov ds, ax
000115DD: mov ax, word ptr [bp + 0x16]
000115E0: cmp ax, 0
000115E3: jl 0x115ea
000115E5: cmp ax, 9
000115E8: jle 0x115f1
000115EA: mov word ptr [bp - 2], 0xf05c
000115EF: jmp 0x11619
000115F1: mov bx, 0x44
000115F4: mul bx
000115F6: mov si, 0x67fe
000115F9: add si, ax
000115FB: cld 
000115FC: les di, ptr [bp + 0x12]
000115FF: movsw word ptr es:[di], word ptr [si]
00011600: les di, ptr [bp + 0xe]
00011603: movsw word ptr es:[di], word ptr [si]
00011604: les di, ptr [bp + 6]
00011607: mov cx, 0x10
0001160A: rep movsw word ptr es:[di], word ptr [si]
0001160C: les di, ptr [bp + 0xa]
0001160F: mov cx, 0x10
00011612: rep movsw word ptr es:[di], word ptr [si]
00011614: mov word ptr [bp - 2], 0
00011619: mov ax, word ptr [bp - 2]
0001161C: pop di
0001161D: pop si
0001161E: pop es
0001161F: pop ds
00011620: mov sp, bp
00011622: pop bp
00011623: retf 0x12
00011626: push bp
00011627: mov bp, sp
00011629: sub sp, 2
0001162C: push ds
0001162D: push es
0001162E: push si
0001162F: push di
00011630: mov ax, 0x1ab5
00011633: mov ds, ax
00011635: mov ax, word ptr [bp + 0x12]
00011638: cmp ax, 0
0001163B: jl 0x11642
0001163D: cmp ax, 9
00011640: jle 0x11649
00011642: mov word ptr [bp - 2], 0xf05c
00011647: jmp 0x1167e
00011649: mov bx, 0x44
0001164C: mul bx
0001164E: mov di, 0x67fe
00011651: add di, ax
00011653: mov ax, 0x1ab5
00011656: mov es, ax
00011658: cld 
00011659: mov ax, word ptr [bp + 0x10]
0001165C: mov word ptr es:[di], ax
0001165F: mov ax, word ptr [bp + 0xe]
00011662: mov word ptr es:[di + 2], ax
00011666: add di, 4
00011669: lds si, ptr [bp + 6]
0001166C: mov cx, 0x10
0001166F: rep movsw word ptr es:[di], word ptr [si]
00011671: lds si, ptr [bp + 0xa]
00011674: mov cx, 0x10
00011677: rep movsw word ptr es:[di], word ptr [si]
00011679: mov word ptr [bp - 2], 0
0001167E: mov ax, word ptr [bp - 2]
00011681: pop di
00011682: pop si
00011683: pop es
00011684: pop ds
00011685: mov sp, bp
00011687: pop bp
00011688: retf 0xe
0001168B: push bp
0001168C: mov bp, sp
0001168E: sub sp, 2
00011691: push ds
00011692: push es
00011693: push si
00011694: push di
00011695: mov ax, 0x1ab5
00011698: mov ds, ax
0001169A: mov ax, word ptr [0x5ce6]
0001169D: mov word ptr [bp - 2], ax
000116A0: mov ax, word ptr [bp + 6]
000116A3: cmp ax, 0
000116A6: jne 0x116af
000116A8: cmp word ptr [0x5c78], 1
000116AD: je 0x116b2
000116AF: mov ax, 1
000116B2: mov word ptr [0x5ce6], ax
000116B5: call 0x110c1
000116B8: mov ax, word ptr [bp - 2]
000116BB: pop di
000116BC: pop si
000116BD: pop es
000116BE: pop ds
000116BF: mov sp, bp
000116C1: pop bp
000116C2: retf 2
000116C5: push bp
000116C6: mov bp, sp
000116C8: sub sp, 2
000116CB: push ds
000116CC: push es
000116CD: push si
000116CE: push di
000116CF: mov ax, 0x1ab5
000116D2: mov ds, ax
000116D4: les di, ptr [bp + 0x12]
000116D7: mov ax, word ptr [0x5cde]
000116DA: mov word ptr es:[di], ax
000116DD: les di, ptr [bp + 0xe]
000116E0: mov ax, word ptr [0x5ce0]
000116E3: mov word ptr es:[di], ax
000116E6: les di, ptr [bp + 0xa]
000116E9: mov ax, word ptr [0x5ce2]
000116EC: mov word ptr es:[di], ax
000116EF: les di, ptr [bp + 6]
000116F2: mov ax, word ptr [0x5ce4]
000116F5: mov word ptr es:[di], ax
000116F8: mov word ptr [bp - 2], 0
000116FD: mov ax, word ptr [bp - 2]
00011700: pop di
00011701: pop si
00011702: pop es
00011703: pop ds
00011704: mov sp, bp
00011706: pop bp
00011707: retf 0x10
0001170A: push bp
0001170B: mov bp, sp
0001170D: sub sp, 2
00011710: push ds
00011711: push es
00011712: push si
00011713: push di
00011714: mov ax, 0x1ab5
00011717: mov ds, ax
00011719: mov ax, word ptr [bp + 6]
0001171C: cmp ax, word ptr [bp + 0xa]
0001171F: jge 0x11727
00011721: xchg word ptr [bp + 0xa], ax
00011724: mov word ptr [bp + 6], ax
00011727: mov ax, word ptr [bp + 8]
0001172A: cmp ax, word ptr [bp + 0xc]
0001172D: jge 0x11735
0001172F: xchg word ptr [bp + 0xc], ax
00011732: mov word ptr [bp + 8], ax
00011735: mov ax, word ptr [bp + 0xc]
00011738: mov word ptr [0x5cde], ax
0001173B: mov ax, word ptr [bp + 0xa]
0001173E: mov word ptr [0x5ce0], ax
00011741: mov ax, word ptr [bp + 8]
00011744: mov word ptr [0x5ce2], ax
00011747: mov ax, word ptr [bp + 6]
0001174A: mov word ptr [0x5ce4], ax
0001174D: call 0x117c2
00011750: test byte ptr [0x5cd2], 0xff
00011755: je 0x11768
00011757: pushf 
00011758: cli 
00011759: mov si, word ptr [0x5c68]
0001175D: mov di, word ptr [0x5c6a]
00011761: call 0x11a48
00011764: call 0x10ece
00011767: popf 
00011768: mov word ptr [bp - 2], 0
0001176D: mov ax, word ptr [bp - 2]
00011770: pop di
00011771: pop si
00011772: pop es
00011773: pop ds
00011774: mov sp, bp
00011776: pop bp
00011777: retf 8
0001177A: push bp
0001177B: mov bp, sp
0001177D: sub sp, 2
00011780: push ds
00011781: push es
00011782: push si
00011783: push di
00011784: mov ax, 0x1ab5
00011787: mov ds, ax
00011789: mov ax, word ptr [0x5cd2]
0001178C: mov word ptr [bp - 2], ax
0001178F: pushf 
00011790: cli 
00011791: mov si, word ptr [0x5c68]
00011795: mov di, word ptr [0x5c6a]
00011799: mov ax, word ptr [bp + 6]
0001179C: cmp ax, 1
0001179F: jne 0x117a9
000117A1: mov word ptr [0x5cd2], ax
000117A4: call 0x11a48
000117A7: jmp 0x117b1
000117A9: mov word ptr [0x5cd2], 0
000117AF: xor ax, ax
000117B1: call 0x10ece
000117B4: popf 
000117B5: mov ax, word ptr [bp - 2]
000117B8: pop di
000117B9: pop si
000117BA: pop es
000117BB: pop ds
000117BC: mov sp, bp
000117BE: pop bp
000117BF: retf 2
000117C2: push word ptr [0x43b1]
000117C6: lcall 0x98e, 0x12a
000117CB: jb 0x1183b
000117CD: mov bx, ax
000117CF: mov cx, word ptr [bx + 0x18]
000117D2: push word ptr [bx + 0x1a]
000117D5: mov bl, byte ptr [bx + 0x17]
000117D8: xor bh, bh
000117DA: mov ax, word ptr [0x5cde]
000117DD: sub ax, word ptr [0x5c8a]
000117E1: dec ax
000117E2: add ax, word ptr [0x5c6c]
000117E6: inc ax
000117E7: jge 0x117eb
000117E9: xor ax, ax
000117EB: mul bx
000117ED: and ax, 0xfff8
000117F0: xor dx, dx
000117F2: div bx
000117F4: mov word ptr [0x5cd6], ax
000117F7: mov ax, word ptr [0x5ce0]
000117FA: sub ax, word ptr [0x5c8c]
000117FE: dec ax
000117FF: add ax, word ptr [0x5c6e]
00011803: inc ax
00011804: jge 0x11808
00011806: xor ax, ax
00011808: mov word ptr [0x5cd8], ax
0001180B: mov ax, word ptr [0x5ce2]
0001180E: add ax, word ptr [0x5c6c]
00011812: cmp ax, cx
00011814: jb 0x11819
00011816: mov ax, cx
00011818: dec ax
00011819: mul bx
0001181B: add ax, 8
0001181E: and ax, 0xfff8
00011821: xor dx, dx
00011823: div bx
00011825: dec ax
00011826: mov word ptr [0x5cda], ax
00011829: mov ax, word ptr [0x5ce4]
0001182C: add ax, word ptr [0x5c6e]
00011830: pop cx
00011831: cmp ax, cx
00011833: jb 0x11838
00011835: mov ax, cx
00011837: dec ax
00011838: mov word ptr [0x5cdc], ax
0001183B: ret 
0001183C: mov ax, word ptr [0x43b3]
0001183F: cmp ax, 0xe
00011842: je 0x11856
00011844: cmp ax, 0xb
00011847: je 0x11856
00011849: cmp ax, 9
0001184C: ja 0x118a2
0001184E: cmp ax, 2
00011851: jae 0x11856
00011853: jmp 0x1193b
00011856: mov al, 5
00011858: mov dx, 0x3ce
0001185B: out dx, al
0001185C: inc dx
0001185D: in al, dx
0001185E: mov byte ptr [0x65e8], al
00011861: dec dx
00011862: mov al, 1
00011864: out dx, al
00011865: inc dx
00011866: in al, dx
00011867: mov byte ptr [0x65ee], al
0001186A: dec dx
0001186B: mov al, 8
0001186D: out dx, al
0001186E: inc dx
0001186F: in al, dx
00011870: mov byte ptr [0x65e9], al
00011873: dec dx
00011874: mov al, 4
00011876: out dx, al
00011877: inc dx
00011878: in al, dx
00011879: mov byte ptr [0x65ea], al
0001187C: dec dx
0001187D: mov al, 3
0001187F: out dx, al
00011880: inc dx
00011881: in al, dx
00011882: mov byte ptr [0x65eb], al
00011885: dec dx
00011886: mov al, 7
00011888: out dx, al
00011889: inc dx
0001188A: in al, dx
0001188B: mov byte ptr [0x65ec], al
0001188E: dec dx
0001188F: mov al, 1
00011891: mov ah, 0
00011893: out dx, ax
00011894: mov al, 2
00011896: mov dx, 0x3c4
00011899: out dx, al
0001189A: inc dx
0001189B: in al, dx
0001189C: mov byte ptr [0x65ed], al
0001189F: jmp 0x1193b
000118A2: mov ax, word ptr [0x43b9]
000118A5: cmp ax, 1
000118A8: jne 0x118b4
000118AA: mov dx, 0x3cd
000118AD: in al, dx
000118AE: mov byte ptr [0x65ef], al
000118B1: jmp 0x1193b
000118B4: cmp ax, 2
000118B7: jne 0x118c6
000118B9: mov al, 9
000118BB: mov dx, 0x3ce
000118BE: out dx, al
000118BF: inc dx
000118C0: in al, dx
000118C1: mov byte ptr [0x65ef], al
000118C4: jmp 0x1193b
000118C6: cmp ax, 3
000118C9: jne 0x118e8
000118CB: mov al, 0xf9
000118CD: mov dx, 0x3c4
000118D0: out dx, al
000118D1: inc dx
000118D2: in al, dx
000118D3: mov byte ptr [0x65ef], al
000118D6: dec dx
000118D7: mov al, 0xf6
000118D9: out dx, al
000118DA: inc dx
000118DB: in al, dx
000118DC: mov byte ptr [0x65f0], al
000118DF: mov dx, 0x3cc
000118E2: in al, dx
000118E3: mov byte ptr [0x65f1], al
000118E6: jmp 0x1193b
000118E8: cmp ax, 4
000118EB: jne 0x118fa
000118ED: mov al, 0xb2
000118EF: mov dx, 0x1ce
000118F2: out dx, al
000118F3: inc dx
000118F4: in al, dx
000118F5: mov byte ptr [0x65ef], al
000118F8: jmp 0x1193b
000118FA: cmp ax, 5
000118FD: jne 0x11908
000118FF: mov dx, 0x3cd
00011902: in al, dx
00011903: mov byte ptr [0x65ef], al
00011906: jmp 0x1193b
00011908: cmp ax, 6
0001190B: jne 0x1191c
0001190D: mov al, 0xe
0001190F: mov dx, 0x3c4
00011912: out dx, al
00011913: inc dx
00011914: in al, dx
00011915: xor al, 2
00011917: mov byte ptr [0x65ef], al
0001191A: jmp 0x1193b
0001191C: cmp ax, 7
0001191F: jne 0x1193b
00011921: mov bx, 0x100
00011924: mov ah, 0x4f
00011926: mov al, 5
00011928: int 0x10
0001192A: mov byte ptr [0x65ef], dl
0001192E: mov bx, 0x101
00011931: mov ah, 0x4f
00011933: mov al, 5
00011935: int 0x10
00011937: mov byte ptr [0x65f0], dl
0001193B: ret 
0001193C: mov ax, word ptr [0x43b3]
0001193F: cmp ax, 0xe
00011942: je 0x11956
00011944: cmp ax, 0xb
00011947: je 0x11956
00011949: cmp ax, 9
0001194C: ja 0x11990
0001194E: cmp ax, 2
00011951: jae 0x11956
00011953: jmp 0x11a22
00011956: mov al, 5
00011958: mov ah, byte ptr [0x65e8]
0001195C: mov dx, 0x3ce
0001195F: out dx, ax
00011960: mov al, 1
00011962: mov ah, byte ptr [0x65ee]
00011966: out dx, ax
00011967: mov al, 8
00011969: mov ah, byte ptr [0x65e9]
0001196D: out dx, ax
0001196E: mov al, 4
00011970: mov ah, byte ptr [0x65ea]
00011974: out dx, ax
00011975: mov al, 3
00011977: mov ah, byte ptr [0x65eb]
0001197B: out dx, ax
0001197C: mov al, 7
0001197E: mov ah, byte ptr [0x65ec]
00011982: out dx, ax
00011983: mov al, 2
00011985: mov ah, byte ptr [0x65ed]
00011989: mov dx, 0x3c4
0001198C: out dx, ax
0001198D: jmp 0x11a22
00011990: mov ax, word ptr [0x43b9]
00011993: cmp ax, 1
00011996: jne 0x119a2
00011998: mov al, byte ptr [0x65ef]
0001199B: mov dx, 0x3cd
0001199E: out dx, al
0001199F: jmp 0x11a22
000119A2: cmp ax, 2
000119A5: jne 0x119b3
000119A7: mov al, 9
000119A9: mov ah, byte ptr [0x65ef]
000119AD: mov dx, 0x3ce
000119B0: out dx, ax
000119B1: jmp 0x11a22
000119B3: cmp ax, 3
000119B6: jne 0x119d2
000119B8: mov al, 0xf9
000119BA: mov ah, byte ptr [0x65ef]
000119BE: mov dx, 0x3c4
000119C1: out dx, ax
000119C2: mov al, 0xf6
000119C4: mov ah, byte ptr [0x65f0]
000119C8: out dx, ax
000119C9: mov al, byte ptr [0x65f1]
000119CC: mov dx, 0x3c2
000119CF: out dx, al
000119D0: jmp 0x11a22
000119D2: cmp ax, 4
000119D5: jne 0x119e3
000119D7: mov al, 0xb2
000119D9: mov ah, byte ptr [0x65ef]
000119DD: mov dx, 0x1ce
000119E0: out dx, ax
000119E1: jmp 0x11a22
000119E3: cmp ax, 5
000119E6: jne 0x119f1
000119E8: mov al, byte ptr [0x65ef]
000119EB: mov dx, 0x3cd
000119EE: out dx, al
000119EF: jmp 0x11a22
000119F1: cmp ax, 6
000119F4: jne 0x11a02
000119F6: mov al, 0xe
000119F8: mov ah, byte ptr [0x65ef]
000119FC: mov dx, 0x3c4
000119FF: out dx, ax
00011A00: jmp 0x11a22
00011A02: cmp ax, 7
00011A05: jne 0x11a22
00011A07: xor dh, dh
00011A09: xor bx, bx
00011A0B: mov dl, byte ptr [0x65ef]
00011A0F: mov ah, 0x4f
00011A11: mov al, 5
00011A13: int 0x10
00011A15: mov bx, 1
00011A18: mov dl, byte ptr [0x65f0]
00011A1C: mov ah, 0x4f
00011A1E: mov al, 5
00011A20: int 0x10
00011A22: ret 
00011A23: mov ax, 0x1a00
00011A26: int 0x10
00011A28: cmp al, 0x1a
00011A2A: jne 0x11a40
00011A2C: cmp bl, 7
00011A2F: je 0x11a44
00011A31: cmp bl, 8
00011A34: je 0x11a44
00011A36: cmp bh, 7
00011A39: je 0x11a44
00011A3B: cmp bh, 8
00011A3E: je 0x11a44
00011A40: xor ax, ax
00011A42: jmp 0x11a47
00011A44: mov ax, 1
00011A47: ret 
00011A48: xor ax, ax
00011A4A: cmp si, word ptr [0x5cd6]
00011A4E: jl 0x11a63
00011A50: cmp di, word ptr [0x5cd8]
00011A54: jl 0x11a63
00011A56: cmp si, word ptr [0x5cda]
00011A5A: jg 0x11a63
00011A5C: cmp di, word ptr [0x5cdc]
00011A60: jg 0x11a63
00011A62: inc ax
00011A63: and ax, word ptr [0x5cd2]
00011A67: ret 
00011A68: push bp
00011A69: mov bp, sp
00011A6B: sub sp, 0x28
00011A6E: push ds
00011A6F: push es
00011A70: push si
00011A71: push di
00011A72: mov ax, 0x1ab5
00011A75: mov ds, ax
00011A77: cld 
00011A78: mov ax, word ptr [0x54bf]
00011A7B: sub ax, 0xc
00011A7E: mov word ptr [bp - 0x22], ax
00011A81: mov si, 0x6cda
00011A84: mov bx, word ptr [si + 0x3c]
00011A87: mov word ptr [bp - 4], bx
00011A8A: mov ax, word ptr [si + 0x30]
00011A8D: mov word ptr [bp - 0x1a], ax
00011A90: or bx, ax
00011A92: mov ax, word ptr [si + 0x32]
00011A95: mov word ptr [bp - 0x1c], ax
00011A98: or bx, ax
00011A9A: or bx, bx
00011A9C: jne 0x11acf
00011A9E: lds si, ptr [bp + 0x10]
00011AA1: lds si, ptr [si]
00011AA3: mov cx, word ptr [bp + 0xe]
00011AA6: inc si
00011AA7: inc si
00011AA8: lodsw ax, word ptr [si]
00011AA9: mov bx, ax
00011AAB: mov dx, ax
00011AAD: dec cx
00011AAE: inc si
00011AAF: inc si
00011AB0: lodsw ax, word ptr [si]
00011AB1: cmp ax, bx
00011AB3: jge 0x11abb
00011AB5: mov bx, ax
00011AB7: loop 0x11aae
00011AB9: jmp 0x11ac3
00011ABB: cmp ax, dx
00011ABD: jle 0x11ac1
00011ABF: mov dx, ax
00011AC1: loop 0x11aae
00011AC3: mov word ptr [bp - 0x24], bx
00011AC6: mov word ptr [bp - 0x26], dx
00011AC9: sub dx, bx
00011ACB: inc dx
00011ACC: jmp 0x11b55
00011ACF: mov bx, word ptr [bp + 0xe]
00011AD2: shl bx, 1
00011AD4: shl bx, 1
00011AD6: mov dx, word ptr [0x54bf]
00011ADA: les di, ptr [0x54c1]
00011ADE: lds si, ptr [bp + 0x10]
00011AE1: lds si, ptr [si]
00011AE3: mov ax, ds
00011AE5: mov cx, si
00011AE7: lds si, ptr [bp + 0x10]
00011AEA: add di, dx
00011AEC: sub di, bx
00011AEE: mov word ptr [si], di
00011AF0: mov word ptr [si + 2], es
00011AF3: sub word ptr [bp - 0x22], bx
00011AF6: jae 0x11b00
00011AF8: mov word ptr [bp - 2], 0xfffe
00011AFD: jmp 0x11cf3
00011B00: mov ds, ax
00011B02: mov si, cx
00011B04: mov ax, 0x7fff
00011B07: mov word ptr [bp - 0x24], ax
00011B0A: mov ax, 0x8000
00011B0D: mov word ptr [bp - 0x26], ax
00011B10: mov cx, word ptr [bp + 0xe]
00011B13: lodsw ax, word ptr [si]
00011B14: mov bx, ax
00011B16: lodsw ax, word ptr [si]
00011B17: cmp word ptr [bp - 4], 1
00011B1B: jne 0x11b31
00011B1D: push cx
00011B1E: push ax
00011B1F: push bx
00011B20: lcall 0x1214, 0x21c
00011B25: mov word ptr [bp - 0x1e], ax
00011B28: lcall 0x1214, 0x26c
00011B2D: mov bx, word ptr [bp - 0x1e]
00011B30: pop cx
00011B31: add bx, word ptr [bp - 0x1a]
00011B34: add ax, word ptr [bp - 0x1c]
00011B37: cmp ax, word ptr [bp - 0x24]
00011B3A: jge 0x11b3f
00011B3C: mov word ptr [bp - 0x24], ax
00011B3F: cmp ax, word ptr [bp - 0x26]
00011B42: jle 0x11b47
00011B44: mov word ptr [bp - 0x26], ax
00011B47: xchg bx, ax
00011B48: stosw word ptr es:[di], ax
00011B49: mov ax, bx
00011B4B: stosw word ptr es:[di], ax
00011B4C: loop 0x11b13
00011B4E: mov dx, word ptr [bp - 0x26]
00011B51: sub dx, word ptr [bp - 0x24]
00011B54: inc dx
00011B55: mov cx, dx
00011B57: shl dx, 1
00011B59: mov word ptr [bp - 0x20], dx
00011B5C: mov ax, 0x1ab5
00011B5F: mov ds, ax
00011B61: les di, ptr [0x54c1]
00011B65: mov si, di
00011B67: xor ax, ax
00011B69: rep stosw word ptr es:[di], ax
00011B6B: mov di, si
00011B6D: lds si, ptr [bp + 0x10]
00011B70: lds si, ptr [si]
00011B72: mov bx, word ptr [bp + 0xe]
00011B75: sub bx, 3
00011B78: shl bx, 1
00011B7A: shl bx, 1
00011B7C: mov ax, word ptr [bx + si]
00011B7E: mov word ptr [bp - 8], ax
00011B81: mov ax, word ptr [bx + si + 2]
00011B84: mov word ptr [bp - 0xa], ax
00011B87: add bx, 4
00011B8A: mov ax, word ptr [bx + si]
00011B8C: mov word ptr [bp - 0xc], ax
00011B8F: mov ax, word ptr [bx + si + 2]
00011B92: mov word ptr [bp - 0xe], ax
00011B95: add bx, 4
00011B98: mov ax, word ptr [bx + si]
00011B9A: mov word ptr [bp - 0x10], ax
00011B9D: mov ax, word ptr [bx + si + 2]
00011BA0: mov word ptr [bp - 0x12], ax
00011BA3: xor ax, ax
00011BA5: mov word ptr [bp - 6], ax
00011BA8: mov bx, word ptr [bp - 6]
00011BAB: shl bx, 1
00011BAD: shl bx, 1
00011BAF: mov ax, word ptr [bx + si]
00011BB1: mov word ptr [bp - 0x14], ax
00011BB4: mov ax, word ptr [bx + si + 2]
00011BB7: mov word ptr [bp - 0x16], ax
00011BBA: mov ax, word ptr [bp - 0xe]
00011BBD: cmp ax, word ptr [bp - 0x12]
00011BC0: jne 0x11bc5
00011BC2: jmp 0x11caa
00011BC5: mov ax, word ptr [bp - 0x20]
00011BC8: cmp ax, word ptr [bp - 0x22]
00011BCB: jbe 0x11bd5
00011BCD: mov word ptr [bp - 2], 0xfffe
00011BD2: jmp 0x11cf3
00011BD5: mov bx, word ptr [bp - 0x20]
00011BD8: mov word ptr [bp - 0x1e], bx
00011BDB: mov word ptr es:[bx + di + 0xa], 0
00011BE1: add bx, 0xc
00011BE4: mov word ptr [bp - 0x20], bx
00011BE7: mov ax, word ptr [bp - 0x10]
00011BEA: cmp ax, word ptr [bp - 0xc]
00011BED: jne 0x11bfe
00011BEF: mov bx, word ptr [bp - 0x1e]
00011BF2: xor ax, ax
00011BF4: mov word ptr es:[bx + di + 6], ax
00011BF8: mov word ptr es:[bx + di + 8], ax
00011BFC: jmp 0x11c2c
00011BFE: sub ax, word ptr [bp - 0xc]
00011C01: cdq 
00011C02: mov cx, word ptr [bp - 0x12]
00011C05: sub cx, word ptr [bp - 0xe]
00011C08: idiv cx
00011C0A: push dx
00011C0B: mov dx, 0x3e8
00011C0E: imul dx
00011C10: mov bx, word ptr [bp - 0x1e]
00011C13: mov word ptr es:[bx + di + 6], ax
00011C17: mov word ptr es:[bx + di + 8], dx
00011C1B: pop ax
00011C1C: mov dx, 0x3e8
00011C1F: imul dx
00011C21: idiv cx
00011C23: cdq 
00011C24: add word ptr es:[bx + di + 6], ax
00011C28: adc word ptr es:[bx + di + 8], dx
00011C2C: mov ax, word ptr [bp - 0x12]
00011C2F: cmp ax, word ptr [bp - 0xe]
00011C32: jle 0x11c58
00011C34: cmp word ptr [bp - 0x16], ax
00011C37: jl 0x11c3a
00011C39: dec ax
00011C3A: mov bx, word ptr [bp - 0x1e]
00011C3D: mov word ptr es:[bx + di], ax
00011C40: mov ax, word ptr [bp - 0xe]
00011C43: mov word ptr [bp - 0x18], ax
00011C46: mov ax, word ptr [bp - 0xc]
00011C49: mov dx, 0x3e8
00011C4C: imul dx
00011C4E: mov word ptr es:[bx + di + 4], dx
00011C52: mov word ptr es:[bx + di + 2], ax
00011C56: jmp 0x11c7d
00011C58: mov ax, word ptr [bp - 0xe]
00011C5B: cmp word ptr [bp - 0xa], ax
00011C5E: jl 0x11c61
00011C60: dec ax
00011C61: mov bx, word ptr [bp - 0x1e]
00011C64: mov word ptr es:[bx + di], ax
00011C67: mov ax, word ptr [bp - 0x12]
00011C6A: mov word ptr [bp - 0x18], ax
00011C6D: mov ax, word ptr [bp - 0x10]
00011C70: mov dx, 0x3e8
00011C73: imul dx
00011C75: mov word ptr es:[bx + di + 4], dx
00011C79: mov word ptr es:[bx + di + 2], ax
00011C7D: mov bx, word ptr [bp - 0x18]
00011C80: sub bx, word ptr [bp - 0x24]
00011C83: shl bx, 1
00011C85: cmp word ptr es:[bx + di], 0
00011C89: jne 0x11c93
00011C8B: mov ax, word ptr [bp - 0x1e]
00011C8E: mov word ptr es:[bx + di], ax
00011C91: jmp 0x11caa
00011C93: mov bx, word ptr es:[bx + di]
00011C96: cmp word ptr es:[bx + di + 0xa], 0
00011C9B: je 0x11ca3
00011C9D: mov bx, word ptr es:[bx + di + 0xa]
00011CA1: jmp 0x11c96
00011CA3: mov ax, word ptr [bp - 0x1e]
00011CA6: mov word ptr es:[bx + di + 0xa], ax
00011CAA: inc word ptr [bp - 6]
00011CAD: mov ax, word ptr [bp - 6]
00011CB0: cmp ax, word ptr [bp + 0xe]
00011CB3: jge 0x11cdc
00011CB5: mov ax, word ptr [bp - 0xc]
00011CB8: mov word ptr [bp - 8], ax
00011CBB: mov ax, word ptr [bp - 0xe]
00011CBE: mov word ptr [bp - 0xa], ax
00011CC1: mov ax, word ptr [bp - 0x10]
00011CC4: mov word ptr [bp - 0xc], ax
00011CC7: mov ax, word ptr [bp - 0x12]
00011CCA: mov word ptr [bp - 0xe], ax
00011CCD: mov ax, word ptr [bp - 0x14]
00011CD0: mov word ptr [bp - 0x10], ax
00011CD3: mov ax, word ptr [bp - 0x16]
00011CD6: mov word ptr [bp - 0x12], ax
00011CD9: jmp 0x11ba8
00011CDC: les di, ptr [bp + 0xa]
00011CDF: mov ax, word ptr [bp - 0x24]
00011CE2: mov word ptr es:[di], ax
00011CE5: les di, ptr [bp + 6]
00011CE8: mov ax, word ptr [bp - 0x26]
00011CEB: mov word ptr es:[di], ax
00011CEE: mov word ptr [bp - 2], 0
00011CF3: mov ax, word ptr [bp - 2]
00011CF6: pop di
00011CF7: pop si
00011CF8: pop es
00011CF9: pop ds
00011CFA: mov sp, bp
00011CFC: pop bp
00011CFD: retf 0xe
00011D00: push bp
00011D01: mov bp, sp
00011D03: sub sp, 0xe
00011D06: push ds
00011D07: push es
00011D08: push si
00011D09: push di
00011D0A: mov ax, 0x1ab5
00011D0D: mov ds, ax
00011D0F: les di, ptr [0x54c1]
00011D13: mov word ptr [bp - 6], 0
00011D18: mov ax, word ptr [bp + 6]
00011D1B: mov word ptr [bp - 4], ax
00011D1E: cmp word ptr [bp - 4], 0
00011D22: jne 0x11d27
00011D24: jmp 0x11dc6
00011D27: mov bx, word ptr [bp - 4]
00011D2A: mov word ptr [bp - 0xa], bx
00011D2D: mov word ptr [bp - 8], bx
00011D30: cmp word ptr es:[bx + di + 0xa], 0
00011D35: je 0x11d6b
00011D37: mov bx, word ptr es:[bx + di + 0xa]
00011D3B: mov dx, word ptr es:[bx + di + 4]
00011D3F: mov ax, word ptr es:[bx + di + 2]
00011D43: mov cx, bx
00011D45: mov bx, word ptr [bp - 0xa]
00011D48: cmp dx, word ptr es:[bx + di + 4]
00011D4C: ja 0x11d5f
00011D4E: jb 0x11d56
00011D50: cmp ax, word ptr es:[bx + di + 2]
00011D54: jae 0x11d5f
00011D56: mov ax, word ptr [bp - 8]
00011D59: mov word ptr [bp - 0xc], ax
00011D5C: mov word ptr [bp - 0xa], cx
00011D5F: mov bx, word ptr [bp - 8]
00011D62: mov bx, word ptr es:[bx + di + 0xa]
00011D66: mov word ptr [bp - 8], bx
00011D69: jmp 0x11d30
00011D6B: mov bx, word ptr [bp - 0xa]
00011D6E: cmp bx, word ptr [bp - 4]
00011D71: je 0x11db9
00011D73: mov ax, word ptr es:[bx + di + 0xa]
00011D77: mov word ptr [bp - 0xe], ax
00011D7A: mov bx, word ptr [bp - 4]
00011D7D: mov ax, word ptr es:[bx + di + 0xa]
00011D81: cmp ax, word ptr [bp - 0xa]
00011D84: jne 0x11d88
00011D86: mov ax, bx
00011D88: mov bx, word ptr [bp - 0xa]
00011D8B: mov word ptr es:[bx + di + 0xa], ax
00011D8F: cmp word ptr [bp - 6], 0
00011D93: jne 0x11d9a
00011D95: mov word ptr [bp + 6], bx
00011D98: jmp 0x11da3
00011D9A: mov ax, bx
00011D9C: mov bx, word ptr [bp - 6]
00011D9F: mov word ptr es:[bx + di + 0xa], ax
00011DA3: mov ax, word ptr [bp - 4]
00011DA6: mov bx, word ptr [bp - 0xc]
00011DA9: mov word ptr es:[bx + di + 0xa], ax
00011DAD: mov bx, ax
00011DAF: mov ax, word ptr [bp - 0xe]
00011DB2: mov word ptr es:[bx + di + 0xa], ax
00011DB6: mov bx, word ptr [bp - 0xa]
00011DB9: mov word ptr [bp - 6], bx
00011DBC: mov bx, word ptr es:[bx + di + 0xa]
00011DC0: mov word ptr [bp - 4], bx
00011DC3: jmp 0x11d1e
00011DC6: mov ax, word ptr [bp + 6]
00011DC9: mov word ptr [bp - 2], ax
00011DCC: mov ax, word ptr [bp - 2]
00011DCF: pop di
00011DD0: pop si
00011DD1: pop es
00011DD2: pop ds
00011DD3: mov sp, bp
00011DD5: pop bp
00011DD6: retf 2
00011DD9: push bp
00011DDA: mov bp, sp
00011DDC: sub sp, 2
00011DDF: push ds
00011DE0: push es
00011DE1: push si
00011DE2: push di
00011DE3: mov ax, 0x1ab5
00011DE6: mov ds, ax
00011DE8: mov si, 0x6cda
00011DEB: mov ax, word ptr [bp + 0xa]
00011DEE: cmp ax, word ptr [bp + 6]
00011DF1: jle 0x11df9
00011DF3: xchg word ptr [bp + 6], ax
00011DF6: mov word ptr [bp + 0xa], ax
00011DF9: cmp word ptr [si + 0x26], 1
00011DFD: je 0x11e21
00011DFF: mov word ptr [si + 0x28], 0xffff
00011E04: mov ax, word ptr [si + 0xe]
00011E07: mov word ptr [si + 0xc], ax
00011E0A: push word ptr [bp + 0xa]
00011E0D: push word ptr [bp + 8]
00011E10: push word ptr [bp + 6]
00011E13: push word ptr [bp + 8]
00011E16: lcall 0xd9f, 0x178
00011E1B: mov ax, word ptr [si + 0x24]
00011E1E: mov word ptr [si + 0xc], ax
00011E21: mov ax, word ptr [si + 0x22]
00011E24: mov bx, 8
00011E27: mul bx
00011E29: mov di, 0x6d39
00011E2C: add di, ax
00011E2E: mov cx, word ptr [bp + 0xa]
00011E31: and cx, 7
00011E34: mov bx, word ptr [bp + 8]
00011E37: and bx, 7
00011E3A: mov al, byte ptr [bx + di]
00011E3C: mov ah, al
00011E3E: rol ax, cl
00011E40: mov word ptr [si + 0x28], ax
00011E43: push word ptr [bp + 0xa]
00011E46: push word ptr [bp + 8]
00011E49: push word ptr [bp + 6]
00011E4C: push word ptr [bp + 8]
00011E4F: lcall 0xd9f, 0x178
00011E54: mov ax, word ptr [bp - 2]
00011E57: pop di
00011E58: pop si
00011E59: pop es
00011E5A: pop ds
00011E5B: mov sp, bp
00011E5D: pop bp
00011E5E: retf 6
00011E61: push bp
00011E62: mov bp, sp
00011E64: sub sp, 0x1e
00011E67: push ds
00011E68: push es
00011E69: push si
00011E6A: push di
00011E6B: mov ax, 0x1ab5
00011E6E: mov ds, ax
00011E70: mov si, 0x6cda
00011E73: mov ax, word ptr [si + 0xc]
00011E76: mov word ptr [bp - 4], ax
00011E79: mov ax, word ptr [si + 0x24]
00011E7C: mov word ptr [si + 0xc], ax
00011E7F: mov ax, word ptr [si + 0x28]
00011E82: mov word ptr [bp - 6], ax
00011E85: mov word ptr [si + 0x28], 0xffff
00011E8A: mov ax, word ptr [si + 0x2a]
00011E8D: mov word ptr [bp - 8], ax
00011E90: mov word ptr [si + 0x2a], 1
00011E95: mov ax, word ptr [si + 0x3c]
00011E98: mov word ptr [bp - 0xa], ax
00011E9B: mov ax, word ptr [si + 0x30]
00011E9E: mov word ptr [bp - 0xc], ax
00011EA1: mov ax, word ptr [si + 0x32]
00011EA4: mov word ptr [bp - 0xe], ax
00011EA7: les di, ptr [0x54c1]
00011EAB: lea ax, [bp + 8]
00011EAE: push ss
00011EAF: push ax
00011EB0: push word ptr [bp + 6]
00011EB3: lea ax, [bp - 0x14]
00011EB6: push ss
00011EB7: push ax
00011EB8: lea ax, [bp - 0x16]
00011EBB: push ss
00011EBC: push ax
00011EBD: push cs
00011EBE: call 0x11a68
00011EC1: cmp ax, 0
00011EC4: je 0x11ecc
00011EC6: mov word ptr [bp - 2], ax
00011EC9: jmp 0x11ff2
00011ECC: mov word ptr [si + 0x3c], 0
00011ED1: xor ax, ax
00011ED3: mov word ptr [si + 0x30], ax
00011ED6: mov word ptr [si + 0x32], ax
00011ED9: mov word ptr [bp - 0x1c], 0
00011EDE: mov bx, word ptr [bp - 0x14]
00011EE1: mov word ptr [bp - 0x1e], bx
00011EE4: mov bx, word ptr [bp - 0x1e]
00011EE7: sub bx, word ptr [bp - 0x14]
00011EEA: shl bx, 1
00011EEC: mov dx, word ptr es:[bx + di]
00011EEF: cmp dx, 0
00011EF2: je 0x11f13
00011EF4: cmp word ptr [bp - 0x1c], 0
00011EF8: jne 0x11eff
00011EFA: mov word ptr [bp - 0x1c], dx
00011EFD: jmp 0x11f13
00011EFF: mov bx, word ptr [bp - 0x1c]
00011F02: cmp word ptr es:[bx + di + 0xa], 0
00011F07: je 0x11f0f
00011F09: mov bx, word ptr es:[bx + di + 0xa]
00011F0D: jmp 0x11f02
00011F0F: mov word ptr es:[bx + di + 0xa], dx
00011F13: push word ptr [bp - 0x1c]
00011F16: push cs
00011F17: call 0x11d00
00011F1A: mov word ptr [bp - 0x1c], ax
00011F1D: mov bx, ax
00011F1F: cmp bx, 0
00011F22: je 0x11f76
00011F24: mov dx, word ptr es:[bx + di + 4]
00011F28: mov ax, word ptr es:[bx + di + 2]
00011F2C: mov cx, 0x3e8
00011F2F: idiv cx
00011F31: mov word ptr [bp - 0x10], ax
00011F34: mov bx, word ptr es:[bx + di + 0xa]
00011F38: mov dx, word ptr es:[bx + di + 4]
00011F3C: mov ax, word ptr es:[bx + di + 2]
00011F40: mov cx, 0x3e8
00011F43: idiv cx
00011F45: mov word ptr [bp - 0x12], ax
00011F48: mov bx, word ptr es:[bx + di + 0xa]
00011F4C: push bx
00011F4D: cmp word ptr [si + 0x22], 0
00011F51: je 0x11f62
00011F53: push word ptr [bp - 0x10]
00011F56: push word ptr [bp - 0x1e]
00011F59: push word ptr [bp - 0x12]
00011F5C: push cs
00011F5D: call 0x11dd9
00011F60: jmp 0x11f73
00011F62: push word ptr [bp - 0x10]
00011F65: push word ptr [bp - 0x1e]
00011F68: push word ptr [bp - 0x12]
00011F6B: push word ptr [bp - 0x1e]
00011F6E: lcall 0xd9f, 0x178
00011F73: pop bx
00011F74: jmp 0x11f1f
00011F76: mov bx, word ptr [bp - 0x1c]
00011F79: cmp bx, 0
00011F7C: je 0x11f8f
00011F7E: mov ax, word ptr [bp - 0x1e]
00011F81: cmp word ptr es:[bx + di], ax
00011F84: jne 0x11f8f
00011F86: mov bx, word ptr es:[bx + di + 0xa]
00011F8A: mov word ptr [bp - 0x1c], bx
00011F8D: jmp 0x11f76
00011F8F: cmp bx, 0
00011F92: je 0x11fbc
00011F94: mov bx, word ptr [bp - 0x1c]
00011F97: cmp word ptr es:[bx + di + 0xa], 0
00011F9C: je 0x11fbc
00011F9E: mov ax, word ptr [bp - 0x1e]
00011FA1: push bx
00011FA2: mov bx, word ptr es:[bx + di + 0xa]
00011FA6: mov dx, word ptr es:[bx + di + 0xa]
00011FAA: cmp word ptr es:[bx + di], ax
00011FAD: pop bx
00011FAE: jne 0x11fb6
00011FB0: mov word ptr es:[bx + di + 0xa], dx
00011FB4: jmp 0x11fba
00011FB6: mov bx, word ptr es:[bx + di + 0xa]
00011FBA: jmp 0x11f97
00011FBC: mov bx, word ptr [bp - 0x1c]
00011FBF: cmp bx, 0
00011FC2: je 0x11fda
00011FC4: mov dx, word ptr es:[bx + di + 8]
00011FC8: mov ax, word ptr es:[bx + di + 6]
00011FCC: add word ptr es:[bx + di + 2], ax
00011FD0: adc word ptr es:[bx + di + 4], dx
00011FD4: mov bx, word ptr es:[bx + di + 0xa]
00011FD8: jmp 0x11fbf
00011FDA: inc word ptr [bp - 0x1e]
00011FDD: mov ax, word ptr [bp - 0x1e]
00011FE0: cmp ax, word ptr [bp - 0x16]
00011FE3: jg 0x11fed
00011FE5: cmp ax, 0x7fff
00011FE8: jg 0x11fed
00011FEA: jmp 0x11ee4
00011FED: mov word ptr [bp - 2], 0
00011FF2: mov ax, word ptr [bp - 4]
00011FF5: mov word ptr [si + 0xc], ax
00011FF8: mov ax, word ptr [bp - 6]
00011FFB: mov word ptr [si + 0x28], ax
00011FFE: mov ax, word ptr [bp - 8]
00012001: mov word ptr [si + 0x2a], ax
00012004: mov ax, word ptr [bp - 0xa]
00012007: mov word ptr [si + 0x3c], ax
0001200A: mov ax, word ptr [bp - 0xc]
0001200D: mov word ptr [si + 0x30], ax
00012010: mov ax, word ptr [bp - 0xe]
00012013: mov word ptr [si + 0x32], ax
00012016: mov ax, word ptr [bp - 2]
00012019: pop di
0001201A: pop si
0001201B: pop es
0001201C: pop ds
0001201D: mov sp, bp
0001201F: pop bp
00012020: retf 6
00012023: push bp
00012024: mov bp, sp
00012026: sub sp, 6
00012029: push ds
0001202A: push es
0001202B: push si
0001202C: push di
0001202D: mov ax, 0x1ab5
00012030: mov ds, ax
00012032: cmp word ptr [bp + 8], 1
00012036: ja 0x12040
00012038: mov word ptr [bp - 2], 0xf056
0001203D: jmp 0x120ce
00012040: mov si, 0x6cda
00012043: cmp word ptr [bp + 6], 2
00012047: jae 0x1204b
00012049: jmp 0x1206a
0001204B: push word ptr [bp + 0xc]
0001204E: push word ptr [bp + 0xa]
00012051: push word ptr [bp + 8]
00012054: push cs
00012055: call 0x11e61
00012058: cmp ax, 0
0001205B: je 0x12062
0001205D: mov word ptr [bp - 2], ax
00012060: jmp 0x120c6
00012062: mov ax, word ptr [bp + 6]
00012065: and ax, 1
00012068: je 0x120c1
0001206A: mov word ptr [si + 0x10], 0
0001206F: les di, ptr [bp + 0xa]
00012072: mov si, word ptr [bp + 8]
00012075: mov ax, word ptr es:[di]
00012078: mov word ptr [bp - 4], ax
0001207B: mov ax, word ptr es:[di + 2]
0001207F: mov word ptr [bp - 6], ax
00012082: dec si
00012083: push word ptr es:[di]
00012086: push word ptr es:[di + 2]
0001208A: add di, 4
0001208D: push word ptr es:[di]
00012090: push word ptr es:[di + 2]
00012094: lcall 0xd9f, 0x178
00012099: dec si
0001209A: jne 0x12083
0001209C: cmp word ptr [bp + 6], 2
000120A0: jl 0x120c1
000120A2: mov cx, word ptr [bp - 4]
000120A5: mov dx, word ptr [bp - 6]
000120A8: cmp cx, word ptr es:[di]
000120AB: jne 0x120b3
000120AD: cmp dx, word ptr es:[di + 2]
000120B1: je 0x120c1
000120B3: push word ptr es:[di]
000120B6: push word ptr es:[di + 2]
000120BA: push cx
000120BB: push dx
000120BC: lcall 0xd9f, 0x178
000120C1: mov word ptr [bp - 2], 0
000120C6: mov si, 0x6cda
000120C9: mov word ptr [si + 0x10], 1
000120CE: mov ax, word ptr [bp - 2]
000120D1: pop di
000120D2: pop si
000120D3: pop es
000120D4: pop ds
000120D5: mov sp, bp
000120D7: pop bp
000120D8: retf 8
000120DB: add byte ptr [di - 0x75], dl
000120DE: in al, dx
000120DF: sub sp, 8
000120E2: push ds
000120E3: push es
000120E4: push si
000120E5: push di
000120E6: mov ax, 0x1ab5
000120E9: mov ds, ax
000120EB: mov si, 0x6cda
000120EE: mov ax, word ptr [si + 0x3c]
000120F1: mov word ptr [bp - 8], ax
000120F4: cmp ax, 1
000120F7: jne 0x1211f
000120F9: mov word ptr [si + 0x3c], 0
000120FE: push word ptr [bp + 0xc]
00012101: lcall 0x1214, 0x21c
00012106: mov word ptr [bp + 0xc], ax
00012109: push word ptr [bp + 0xa]
0001210C: lcall 0x1214, 0x26c
00012111: mov word ptr [bp + 0xa], ax
00012114: push word ptr [bp + 8]
00012117: lcall 0x1214, 0x2cf
0001211C: mov word ptr [bp + 8], ax
0001211F: lcall 0x10b4, 0x84
00012124: mov bx, word ptr [bp + 8]
00012127: mul bx
00012129: mov bx, 0x64
0001212C: div bx
0001212E: add ax, word ptr [bp + 0xc]
00012131: mov word ptr [bp - 4], ax
00012134: mov ax, word ptr [bp + 0xa]
00012137: add ax, word ptr [bp + 8]
0001213A: mov word ptr [bp - 6], ax
0001213D: push word ptr [bp + 0xc]
00012140: push word ptr [bp + 0xa]
00012143: push word ptr [bp - 4]
00012146: push word ptr [bp - 6]
00012149: push word ptr [bp + 6]
0001214C: push cs
0001214D: call 0x12166
00012150: mov word ptr [bp - 2], ax
00012153: mov ax, word ptr [bp - 8]
00012156: mov word ptr [si + 0x3c], ax
00012159: mov ax, word ptr [bp - 2]
0001215C: pop di
0001215D: pop si
0001215E: pop es
0001215F: pop ds
00012160: mov sp, bp
00012162: pop bp
00012163: retf 8
00012166: push bp
00012167: mov bp, sp
00012169: sub sp, 0xc
0001216C: push ds
0001216D: push es
0001216E: push si
0001216F: push di
00012170: mov ax, 0x1ab5
00012173: mov ds, ax
00012175: mov si, 0x6cda
00012178: cmp word ptr [si + 0x3c], 1
0001217C: jne 0x121aa
0001217E: push word ptr [bp + 0xe]
00012181: lcall 0x1214, 0x21c
00012186: mov word ptr [bp + 0xe], ax
00012189: push word ptr [bp + 0xc]
0001218C: lcall 0x1214, 0x26c
00012191: mov word ptr [bp + 0xc], ax
00012194: push word ptr [bp + 0xa]
00012197: lcall 0x1214, 0x21c
0001219C: mov word ptr [bp + 0xa], ax
0001219F: push word ptr [bp + 8]
000121A2: lcall 0x1214, 0x26c
000121A7: mov word ptr [bp + 8], ax
000121AA: mov ax, word ptr [bp + 8]
000121AD: cmp ax, word ptr [bp + 0xc]
000121B0: jge 0x121b8
000121B2: xchg word ptr [bp + 0xc], ax
000121B5: mov word ptr [bp + 8], ax
000121B8: mov ax, word ptr [bp + 0xa]
000121BB: cmp ax, word ptr [bp + 0xe]
000121BE: jge 0x121c6
000121C0: xchg word ptr [bp + 0xe], ax
000121C3: mov word ptr [bp + 0xa], ax
000121C6: mov ax, word ptr [si + 0x3c]
000121C9: mov word ptr [bp - 4], ax
000121CC: mov word ptr [si + 0x3c], 0
000121D1: cmp word ptr [bp + 6], 2
000121D5: jne 0x121da
000121D7: jmp 0x122a1
000121DA: mov bx, word ptr [si + 0x2a]
000121DD: dec bx
000121DE: mov ax, word ptr [bp + 8]
000121E1: sub ax, word ptr [bp + 0xc]
000121E4: dec ax
000121E5: sub ax, bx
000121E7: cmp ax, 1
000121EA: jl 0x121fa
000121EC: mov ax, word ptr [bp + 0xa]
000121EF: sub ax, word ptr [bp + 0xe]
000121F2: dec ax
000121F3: sub ax, bx
000121F5: cmp ax, 1
000121F8: jge 0x12229
000121FA: mov bx, word ptr [si + 0x2a]
000121FD: shr bx, 1
000121FF: sub word ptr [bp + 0xe], bx
00012202: sub word ptr [bp + 0xc], bx
00012205: add word ptr [bp + 0xa], bx
00012208: add word ptr [bp + 8], bx
0001220B: mov ax, word ptr [si + 0x28]
0001220E: mov word ptr [bp - 0xa], ax
00012211: mov bx, word ptr [si + 0xc]
00012214: cmp word ptr [si + 0x28], -1
00012218: je 0x1221d
0001221A: jmp 0x122de
0001221D: cmp word ptr [si + 0x16], 0
00012221: jne 0x12226
00012223: jmp 0x122b0
00012226: jmp 0x122de
00012229: mov di, word ptr [si + 0x2a]
0001222C: shr di, 1
0001222E: mov ax, word ptr [bp + 0xe]
00012231: sub ax, di
00012233: push ax
00012234: push word ptr [bp + 8]
00012237: mov ax, word ptr [bp + 0xa]
0001223A: add ax, di
0001223C: push ax
0001223D: push word ptr [bp + 8]
00012240: lcall 0xd9f, 0x178
00012245: mov ax, word ptr [bp + 0xa]
00012248: add ax, di
0001224A: push ax
0001224B: push word ptr [bp + 0xc]
0001224E: mov ax, word ptr [bp + 0xe]
00012251: sub ax, di
00012253: push ax
00012254: push word ptr [bp + 0xc]
00012257: lcall 0xd9f, 0x178
0001225C: inc di
0001225D: push word ptr [bp + 0xe]
00012260: mov ax, word ptr [bp + 0xc]
00012263: add ax, di
00012265: push ax
00012266: push word ptr [bp + 0xe]
00012269: mov ax, word ptr [bp + 8]
0001226C: sub ax, di
0001226E: push ax
0001226F: lcall 0xd9f, 0x178
00012274: push word ptr [bp + 0xa]
00012277: mov ax, word ptr [bp + 8]
0001227A: sub ax, di
0001227C: push ax
0001227D: push word ptr [bp + 0xa]
00012280: mov ax, word ptr [bp + 0xc]
00012283: add ax, di
00012285: push ax
00012286: lcall 0xd9f, 0x178
0001228B: test word ptr [bp + 6], 2
00012290: jne 0x12295
00012292: jmp 0x123a3
00012295: add word ptr [bp + 0xe], di
00012298: add word ptr [bp + 0xc], di
0001229B: sub word ptr [bp + 0xa], di
0001229E: sub word ptr [bp + 8], di
000122A1: mov bx, word ptr [si + 0x24]
000122A4: cmp word ptr [si + 0x22], 0
000122A8: jne 0x1230b
000122AA: cmp word ptr [si + 0x16], 0
000122AE: jne 0x122d3
000122B0: mov ax, word ptr [si + 0xe]
000122B3: mov word ptr [bp - 8], ax
000122B6: mov word ptr [si + 0xe], bx
000122B9: push word ptr [bp + 0xe]
000122BC: push word ptr [bp + 0xc]
000122BF: push word ptr [bp + 0xa]
000122C2: push word ptr [bp + 8]
000122C5: lcall 0xbd7, 8
000122CA: mov ax, word ptr [bp - 8]
000122CD: mov word ptr [si + 0xe], ax
000122D0: jmp 0x123a3
000122D3: mov ax, word ptr [si + 0x28]
000122D6: mov word ptr [bp - 0xa], ax
000122D9: mov word ptr [si + 0x28], 0xffff
000122DE: mov ax, word ptr [si + 0xc]
000122E1: mov word ptr [bp - 6], ax
000122E4: mov word ptr [si + 0xc], bx
000122E7: mov ax, word ptr [si + 0x2a]
000122EA: mov word ptr [bp - 0xc], ax
000122ED: mov word ptr [si + 0x2a], 1
000122F2: mov di, word ptr [bp + 0xc]
000122F5: push word ptr [bp + 0xe]
000122F8: push di
000122F9: push word ptr [bp + 0xa]
000122FC: push di
000122FD: lcall 0xd9f, 0x178
00012302: inc di
00012303: cmp di, word ptr [bp + 8]
00012306: jle 0x122f5
00012308: jmp 0x12391
0001230B: mov ax, word ptr [si + 0xc]
0001230E: mov word ptr [bp - 6], ax
00012311: mov word ptr [si + 0xc], bx
00012314: mov bx, word ptr [si + 0x28]
00012317: mov word ptr [bp - 0xa], bx
0001231A: mov bx, word ptr [si + 0x2a]
0001231D: mov word ptr [bp - 0xc], bx
00012320: mov word ptr [si + 0x2a], 1
00012325: mov ax, word ptr [si + 0x22]
00012328: mov bx, 8
0001232B: mul bx
0001232D: mov di, 0x6d39
00012330: add di, ax
00012332: mov cx, word ptr [bp + 0xe]
00012335: and cx, 7
00012338: mov bx, word ptr [bp + 0xc]
0001233B: and bx, 7
0001233E: mov dx, word ptr [bp + 0xc]
00012341: cmp word ptr [si + 0x26], 1
00012345: je 0x1236b
00012347: mov word ptr [si + 0x28], 0xffff
0001234C: mov ax, word ptr [si + 0xe]
0001234F: mov word ptr [si + 0xc], ax
00012352: push bx
00012353: push cx
00012354: push dx
00012355: push word ptr [bp + 0xe]
00012358: push dx
00012359: push word ptr [bp + 0xa]
0001235C: push dx
0001235D: lcall 0xd9f, 0x178
00012362: pop dx
00012363: pop cx
00012364: pop bx
00012365: mov ax, word ptr [si + 0x24]
00012368: mov word ptr [si + 0xc], ax
0001236B: mov al, byte ptr [bx + di]
0001236D: mov ah, al
0001236F: rol ax, cl
00012371: mov word ptr [si + 0x28], ax
00012374: push bx
00012375: push cx
00012376: push dx
00012377: push word ptr [bp + 0xe]
0001237A: push dx
0001237B: push word ptr [bp + 0xa]
0001237E: push dx
0001237F: lcall 0xd9f, 0x178
00012384: pop dx
00012385: pop cx
00012386: pop bx
00012387: inc bx
00012388: and bx, 7
0001238B: inc dx
0001238C: cmp dx, word ptr [bp + 8]
0001238F: jle 0x12341
00012391: mov ax, word ptr [bp - 6]
00012394: mov word ptr [si + 0xc], ax
00012397: mov ax, word ptr [bp - 0xa]
0001239A: mov word ptr [si + 0x28], ax
0001239D: mov ax, word ptr [bp - 0xc]
000123A0: mov word ptr [si + 0x2a], ax
000123A3: mov si, 0x6cda
000123A6: mov word ptr [si + 0x10], 1
000123AB: mov ax, word ptr [bp - 4]
000123AE: mov word ptr [si + 0x3c], ax
000123B1: mov word ptr [bp - 2], 0
000123B6: mov ax, word ptr [bp - 2]
000123B9: pop di
000123BA: pop si
000123BB: pop es
000123BC: pop ds
000123BD: mov sp, bp
000123BF: pop bp
000123C0: retf 0xa
000123C3: add byte ptr [di - 0x75], dl
000123C6: in al, dx
000123C7: sub sp, 2
000123CA: push ds
000123CB: push es
000123CC: push si
000123CD: push di
000123CE: mov ax, 0x1ab5
000123D1: mov ds, ax
000123D3: mov ax, word ptr [bp + 6]
000123D6: mov bx, ax
000123D8: xor bx, word ptr [0x6d37]
000123DC: and bx, 0x8000
000123E0: je 0x1241a
000123E2: test ax, 0x8000
000123E5: je 0x12408
000123E7: mov al, 0x1c
000123E9: mov ah, 0x35
000123EB: int 0x21
000123ED: mov word ptr cs:[0x37b], bx
000123F2: mov word ptr cs:[0x37d], es
000123F7: push ds
000123F8: mov al, 0x1c
000123FA: mov dx, cs
000123FC: mov ds, dx
000123FE: mov dx, 0x2fb
00012401: mov ah, 0x25
00012403: int 0x21
00012405: pop ds
00012406: jmp 0x1241a
00012408: push ds
00012409: mov al, 0x1c
0001240B: mov ds, word ptr cs:[0x37d]
00012410: mov dx, word ptr cs:[0x37b]
00012415: mov ah, 0x25
00012417: int 0x21
00012419: pop ds
0001241A: mov ax, word ptr [bp + 6]
0001241D: mov word ptr [0x6d37], ax
00012420: mov word ptr [bp - 2], 0
00012425: mov ax, word ptr [bp - 2]
00012428: pop di
00012429: pop si
0001242A: pop es
0001242B: pop ds
0001242C: mov sp, bp
0001242E: pop bp
0001242F: retf 2
00012432: push bp
00012433: mov bp, sp
00012435: sub sp, 2
00012438: push ds
00012439: push es
0001243A: push si
0001243B: push di
0001243C: mov ax, 0x1ab5
0001243F: mov ds, ax
00012441: mov ax, word ptr [0x6d37]
00012444: lds si, ptr [bp + 6]
00012447: mov word ptr [si], ax
00012449: mov word ptr [bp - 2], 0
0001244E: mov ax, word ptr [bp - 2]
00012451: pop di
00012452: pop si
00012453: pop es
00012454: pop ds
00012455: mov sp, bp
00012457: pop bp
00012458: retf 4
0001245B: push bp
0001245C: mov bp, sp
0001245E: sub sp, 2
00012461: push ds
00012462: push es
00012463: push si
00012464: push di
00012465: mov ax, 0x1ab5
00012468: mov ds, ax
0001246A: pushf 
0001246B: cli 
0001246C: mov ax, word ptr [0x6ab2]
0001246F: mov bx, word ptr [0x6ab4]
00012473: mov word ptr [0x6ab4], 0
00012479: lds si, ptr [bp + 0xa]
0001247C: mov word ptr [si], ax
0001247E: lds si, ptr [bp + 6]
00012481: mov word ptr [si], bx
00012483: popf 
00012484: mov word ptr [bp - 2], 0
00012489: mov ax, word ptr [bp - 2]
0001248C: pop di
0001248D: pop si
0001248E: pop es
0001248F: pop ds
00012490: mov sp, bp
00012492: pop bp
00012493: retf 8
00012496: push bp
00012497: mov bp, sp
00012499: sub sp, 2
0001249C: push ds
0001249D: push es
0001249E: push si
0001249F: push di
000124A0: mov ax, 0x1ab5
000124A3: mov ds, ax
000124A5: test word ptr [0x6d37], 0xffff
000124AB: je 0x124b4
000124AD: mov word ptr [bp - 2], 0xf049
000124B2: jmp 0x12517
000124B4: mov ax, word ptr [bp + 6]
000124B7: or ax, ax
000124B9: je 0x124ec
000124BB: mov bx, word ptr [bp + 0xa]
000124BE: or bx, word ptr [bp + 8]
000124C1: je 0x124ec
000124C3: xor dx, dx
000124C5: mov cx, 0xe
000124C8: div cx
000124CA: or ax, ax
000124CC: jne 0x124d5
000124CE: mov word ptr [bp - 2], 0xfffe
000124D3: jmp 0x12517
000124D5: mov word ptr [0x6ab0], ax
000124D8: mov dx, word ptr [bp + 0xa]
000124DB: mov ax, word ptr [bp + 8]
000124DE: mov bx, ax
000124E0: add bx, word ptr [bp + 6]
000124E3: sub bx, 0xe
000124E6: mov word ptr [0x6aaa], bx
000124EA: jmp 0x124fd
000124EC: mov dx, ds
000124EE: mov ax, 0x6ab6
000124F1: mov word ptr [0x6aaa], 0x6c06
000124F7: mov word ptr [0x6ab0], 0x19
000124FD: mov word ptr [0x6aa6], ax
00012500: mov word ptr [0x6aa8], dx
00012504: mov word ptr [0x6aac], ax
00012507: mov word ptr [0x6aae], ax
0001250A: xor ax, ax
0001250C: mov word ptr [0x6ab2], ax
0001250F: mov word ptr [0x6ab4], ax
00012512: mov word ptr [bp - 2], 0
00012517: mov ax, word ptr [bp - 2]
0001251A: pop di
0001251B: pop si
0001251C: pop es
0001251D: pop ds
0001251E: mov sp, bp
00012520: pop bp
00012521: retf 6
00012524: push bp
00012525: mov bp, sp
00012527: sub sp, 2
0001252A: push ds
0001252B: push es
0001252C: push si
0001252D: push di
0001252E: mov ax, 0x1ab5
00012531: mov ds, ax
00012533: test word ptr [0x6ab2], 0xffff
00012539: jne 0x12542
0001253B: mov word ptr [bp - 2], 0xf04c
00012540: jmp 0x12573
00012542: push ds
00012543: mov si, word ptr [0x6aac]
00012547: mov ds, word ptr [0x6aa8]
0001254B: les di, ptr [bp + 6]
0001254E: mov cx, 7
00012551: cld 
00012552: rep movsw word ptr es:[di], word ptr [si]
00012554: pop ds
00012555: mov si, word ptr [0x6aac]
00012559: add si, 0xe
0001255C: cmp si, word ptr [0x6aaa]
00012560: jbe 0x12566
00012562: mov si, word ptr [0x6aa6]
00012566: mov word ptr [0x6aac], si
0001256A: dec word ptr [0x6ab2]
0001256E: mov word ptr [bp - 2], 0
00012573: mov ax, word ptr [bp - 2]
00012576: pop di
00012577: pop si
00012578: pop es
00012579: pop ds
0001257A: mov sp, bp
0001257C: pop bp
0001257D: retf 4
00012580: push bp
00012581: mov bp, sp
00012583: sub sp, 2
00012586: push ds
00012587: push es
00012588: push si
00012589: push di
0001258A: mov ax, 0x1ab5
0001258D: mov ds, ax
0001258F: pushf 
00012590: cli 
00012591: mov cx, word ptr [0x6ab2]
00012595: cmp cx, word ptr [0x6ab0]
00012599: jb 0x125a7
0001259B: popf 
0001259C: mov word ptr [bp - 2], 0xf04b
000125A1: inc word ptr [0x6ab4]
000125A5: jmp 0x125eb
000125A7: mov ax, 0x40
000125AA: mov es, ax
000125AC: mov bx, word ptr es:[0x6c]
000125B1: mov ax, word ptr es:[0x6e]
000125B5: mov si, word ptr [0x6aae]
000125B9: mov di, si
000125BB: add si, 0xe
000125BE: cmp si, word ptr [0x6aaa]
000125C2: jbe 0x125c8
000125C4: mov si, word ptr [0x6aa6]
000125C8: mov word ptr [0x6aae], si
000125CC: inc word ptr [0x6ab2]
000125D0: popf 
000125D1: push ds
000125D2: mov es, word ptr [0x6aa8]
000125D6: lds si, ptr [bp + 6]
000125D9: mov word ptr [si + 0xa], bx
000125DC: mov word ptr [si + 0xc], ax
000125DF: mov cx, 7
000125E2: cld 
000125E3: rep movsw word ptr es:[di], word ptr [si]
000125E5: pop ds
000125E6: mov word ptr [bp - 2], 0
000125EB: mov ax, word ptr [bp - 2]
000125EE: pop di
000125EF: pop si
000125F0: pop es
000125F1: pop ds
000125F2: mov sp, bp
000125F4: pop bp
000125F5: retf 4
000125F8: push bp
000125F9: mov bp, sp
000125FB: sub sp, 2
000125FE: push ds
000125FF: push es
00012600: push si
00012601: push di
00012602: mov ax, 0x1ab5
00012605: mov ds, ax
00012607: test word ptr [0x6ab2], 0xffff
0001260D: je 0x12607
0001260F: push word ptr [bp + 8]
00012612: push word ptr [bp + 6]
00012615: push cs
00012616: call 0x12524
00012619: mov word ptr [bp - 2], ax
0001261C: mov ax, word ptr [bp - 2]
0001261F: pop di
00012620: pop si
00012621: pop es
00012622: pop ds
00012623: mov sp, bp
00012625: pop bp
00012626: retf 4
00012629: push bp
0001262A: mov bp, sp
0001262C: sub sp, 2
0001262F: push ds
00012630: push es
00012631: push si
00012632: push di
00012633: mov ax, 0x1ab5
00012636: mov ds, ax
00012638: mov cx, word ptr [bp + 6]
0001263B: cmp cx, word ptr [0x6ab2]
0001263F: jb 0x12648
00012641: mov word ptr [bp - 2], 0xf04a
00012646: jmp 0x12674
00012648: les di, ptr [bp + 8]
0001264B: mov dx, word ptr [0x6aaa]
0001264F: mov ax, word ptr [0x6aa6]
00012652: mov si, word ptr [0x6aac]
00012656: mov ds, word ptr [0x6aa8]
0001265A: or cx, cx
0001265C: je 0x12669
0001265E: add si, 0xe
00012661: cmp si, dx
00012663: jbe 0x12667
00012665: mov si, ax
00012667: loop 0x1265e
00012669: mov cx, 7
0001266C: cld 
0001266D: rep movsw word ptr es:[di], word ptr [si]
0001266F: mov word ptr [bp - 2], 0
00012674: mov ax, word ptr [bp - 2]
00012677: pop di
00012678: pop si
00012679: pop es
0001267A: pop ds
0001267B: mov sp, bp
0001267D: pop bp
0001267E: retf 6
00012681: push bp
00012682: mov bp, sp
00012684: sub sp, 2
00012687: push ds
00012688: push es
00012689: push si
0001268A: push di
0001268B: mov ax, 0x1ab5
0001268E: mov ds, ax
00012690: xor ax, ax
00012692: xchg word ptr [0x6d37], ax
00012696: mov bx, word ptr [0x6aa6]
0001269A: mov word ptr [0x6ab2], 0
000126A0: mov word ptr [0x6aac], bx
000126A4: mov word ptr [0x6aae], bx
000126A8: mov word ptr [0x6d37], ax
000126AB: mov word ptr [bp - 2], 0
000126B0: mov ax, word ptr [bp - 2]
000126B3: pop di
000126B4: pop si
000126B5: pop es
000126B6: pop ds
000126B7: mov sp, bp
000126B9: pop bp
000126BA: retf 
000126BB: push ax
000126BC: push bx
000126BD: push cx
000126BE: push di
000126BF: push si
000126C0: push ds
000126C1: push es
000126C2: mov cx, 2
000126C5: mov ax, 0x40
000126C8: mov es, ax
000126CA: mov di, word ptr es:[0x1a]
000126CF: cmp di, word ptr es:[0x1c]
000126D4: je 0x1272e
000126D6: mov ax, 0x1ab5
000126D9: mov ds, ax
000126DB: mov si, di
000126DD: inc si
000126DE: inc si
000126DF: cmp si, word ptr es:[0x82]
000126E4: jb 0x126eb
000126E6: mov si, word ptr es:[0x80]
000126EB: mov word ptr es:[0x1a], si
000126F0: push bp
000126F1: mov bp, sp
000126F3: sub sp, 0xe
000126F6: mov word ptr [bp - 0xe], 0x8000
000126FB: lcall 0xeec, 0x85f
00012700: mov word ptr [bp - 9], ax
00012703: mov ax, word ptr [0x5c68]
00012706: mov word ptr [bp - 8], ax
00012709: mov ax, word ptr [0x5c6a]
0001270C: mov word ptr [bp - 6], ax
0001270F: mov al, byte ptr es:[0x17]
00012713: mov byte ptr [bp - 0xa], al
00012716: mov ax, word ptr es:[di]
00012719: mov word ptr [bp - 0xc], ax
0001271C: push cx
0001271D: push ss
0001271E: mov ax, bp
00012720: sub ax, 0xe
00012723: push ax
00012724: push cs
00012725: call 0x12580
00012728: pop cx
00012729: mov sp, bp
0001272B: pop bp
0001272C: loop 0x126c5
0001272E: pop es
0001272F: pop ds
00012730: pop si
00012731: pop di
00012732: pop cx
00012733: pop bx
00012734: pop ax
00012735: ljmp cs:[0x37b]
0001273A: iret 
0001273B: add byte ptr [bx + si], al
0001273D: add byte ptr [bx + si], al
0001273F: add byte ptr [di - 0x75], dl
00012742: in al, dx
00012743: sub sp, 2
00012746: push ds
00012747: push es
00012748: push si
00012749: push di
0001274A: mov ax, 0x1ab5
0001274D: mov ds, ax
0001274F: mov si, 0x6cda
00012752: mov ax, word ptr [si + 8]
00012755: mov word ptr [bp - 2], ax
00012758: mov ax, word ptr [bp - 2]
0001275B: pop di
0001275C: pop si
0001275D: pop es
0001275E: pop ds
0001275F: mov sp, bp
00012761: pop bp
00012762: retf 
00012763: push bp
00012764: mov bp, sp
00012766: sub sp, 2
00012769: push ds
0001276A: push es
0001276B: push si
0001276C: push di
0001276D: mov ax, 0x1ab5
00012770: mov ds, ax
00012772: lcall 0x98e, 0x35e
00012777: or ax, ax
00012779: jge 0x12780
0001277B: mov word ptr [bp - 2], ax
0001277E: jmp 0x127b7
00012780: push ax
00012781: lcall 0x98e, 0x12a
00012786: jae 0x1278f
00012788: mov word ptr [bp - 2], 0xfc19
0001278D: jmp 0x127b7
0001278F: mov es, dx
00012791: mov di, ax
00012793: mov ax, word ptr [bp + 6]
00012796: cmp al, byte ptr es:[di + 0x1f]
0001279A: jb 0x127a3
0001279C: mov word ptr [bp - 2], 0xfff8
000127A1: jmp 0x127b7
000127A3: mov si, 0x6cda
000127A6: mov word ptr [si + 8], ax
000127A9: mov bx, word ptr es:[di + 0x22]
000127AD: mul bx
000127AF: mov word ptr [si + 0xa], ax
000127B2: mov word ptr [bp - 2], 0
000127B7: mov ax, word ptr [bp - 2]
000127BA: pop di
000127BB: pop si
000127BC: pop es
000127BD: pop ds
000127BE: mov sp, bp
000127C0: pop bp
000127C1: retf 2
000127C4: push bp
000127C5: mov bp, sp
000127C7: sub sp, 2
000127CA: push ds
000127CB: push es
000127CC: push si
000127CD: push di
000127CE: mov ax, 0x1ab5
000127D1: mov ds, ax
000127D3: push word ptr [0x43b3]
000127D7: lcall 0x11fc, 0
000127DC: jae 0x127e3
000127DE: mov word ptr [bp - 2], ax
000127E1: jmp 0x127f0
000127E3: mov es, dx
000127E5: mov di, ax
000127E7: mov al, byte ptr es:[di + 1]
000127EB: xor ah, ah
000127ED: mov word ptr [bp - 2], ax
000127F0: mov ax, word ptr [bp - 2]
000127F3: pop di
000127F4: pop si
000127F5: pop es
000127F6: pop ds
000127F7: mov sp, bp
000127F9: pop bp
000127FA: retf 
000127FB: push bp
000127FC: mov bp, sp
000127FE: sub sp, 2
00012801: push ds
00012802: push es
00012803: push si
00012804: push di
00012805: mov ax, 0x1ab5
00012808: mov ds, ax
0001280A: push word ptr [0x43b3]
0001280E: lcall 0x11fc, 0
00012813: jae 0x1281a
00012815: mov word ptr [bp - 2], ax
00012818: jmp 0x1282a
0001281A: mov es, dx
0001281C: mov di, ax
0001281E: mov ax, word ptr [bp + 6]
00012821: mov byte ptr es:[di + 1], al
00012825: mov word ptr [bp - 2], 0
0001282A: mov ax, word ptr [bp - 2]
0001282D: pop di
0001282E: pop si
0001282F: pop es
00012830: pop ds
00012831: mov sp, bp
00012833: pop bp
00012834: retf 2
00012837: push bp
00012838: mov bp, sp
0001283A: sub sp, 2
0001283D: push ds
0001283E: push es
0001283F: push si
00012840: push di
00012841: mov ax, 0x1ab5
00012844: mov ds, ax
00012846: mov si, 0x6cda
00012849: les di, ptr [bp + 0xe]
0001284C: mov ax, word ptr [si + 0x22]
0001284F: mov word ptr es:[di], ax
00012852: les di, ptr [bp + 0xa]
00012855: mov ax, word ptr [si + 0x24]
00012858: mov word ptr es:[di], ax
0001285B: les di, ptr [bp + 6]
0001285E: mov ax, word ptr [si + 0x26]
00012861: mov word ptr es:[di], ax
00012864: mov word ptr [bp - 2], 0
00012869: mov ax, word ptr [bp - 2]
0001286C: pop di
0001286D: pop si
0001286E: pop es
0001286F: pop ds
00012870: mov sp, bp
00012872: pop bp
00012873: retf 0xc
00012876: push bp
00012877: mov bp, sp
00012879: sub sp, 2
0001287C: push ds
0001287D: push es
0001287E: push si
0001287F: push di
00012880: mov ax, 0x1ab5
00012883: mov ds, ax
00012885: mov si, 0x6cda
00012888: mov ax, word ptr [bp + 0xa]
0001288B: cmp ax, 0
0001288E: jl 0x128b6
00012890: cmp ax, 0xb
00012893: jg 0x128b6
00012895: mov word ptr [si + 0x22], ax
00012898: mov ax, word ptr [bp + 8]
0001289B: mov word ptr [si + 0x24], ax
0001289E: mov ax, word ptr [bp + 6]
000128A1: mov bx, 1
000128A4: cmp ax, 1
000128A7: je 0x128ac
000128A9: mov bx, 0
000128AC: mov word ptr [si + 0x26], bx
000128AF: mov word ptr [bp - 2], 0
000128B4: jmp 0x128bb
000128B6: mov word ptr [bp - 2], 0xf05f
000128BB: mov ax, word ptr [bp - 2]
000128BE: pop di
000128BF: pop si
000128C0: pop es
000128C1: pop ds
000128C2: mov sp, bp
000128C4: pop bp
000128C5: retf 6
000128C8: push bp
000128C9: mov bp, sp
000128CB: sub sp, 2
000128CE: push ds
000128CF: push es
000128D0: push si
000128D1: push di
000128D2: mov ax, 0x1ab5
000128D5: mov ds, ax
000128D7: mov si, 0x6d39
000128DA: mov ax, word ptr [bp + 0xa]
000128DD: cmp ax, 0
000128E0: jl 0x128e7
000128E2: cmp ax, 0xb
000128E5: jle 0x128ee
000128E7: mov word ptr [bp - 2], 0xf05f
000128EC: jmp 0x12903
000128EE: mov bx, 8
000128F1: mul bx
000128F3: add si, ax
000128F5: les di, ptr [bp + 6]
000128F8: mov cx, 4
000128FB: cld 
000128FC: rep movsw word ptr es:[di], word ptr [si]
000128FE: mov word ptr [bp - 2], 0
00012903: mov ax, word ptr [bp - 2]
00012906: pop di
00012907: pop si
00012908: pop es
00012909: pop ds
0001290A: mov sp, bp
0001290C: pop bp
0001290D: retf 6
00012910: push bp
00012911: mov bp, sp
00012913: sub sp, 2
00012916: push ds
00012917: push es
00012918: push si
00012919: push di
0001291A: mov ax, 0x1ab5
0001291D: mov ds, ax
0001291F: mov ax, 0x1ab5
00012922: mov es, ax
00012924: mov di, 0x6d39
00012927: mov ax, word ptr [bp + 0xa]
0001292A: cmp ax, 0
0001292D: jl 0x12934
0001292F: cmp ax, 0xb
00012932: jle 0x1293b
00012934: mov word ptr [bp - 2], 0xf05f
00012939: jmp 0x12950
0001293B: mov bx, 8
0001293E: mul bx
00012940: add di, ax
00012942: lds si, ptr [bp + 6]
00012945: mov cx, 4
00012948: cld 
00012949: rep movsw word ptr es:[di], word ptr [si]
0001294B: mov word ptr [bp - 2], 0
00012950: mov ax, word ptr [bp - 2]
00012953: pop di
00012954: pop si
00012955: pop es
00012956: pop ds
00012957: mov sp, bp
00012959: pop bp
0001295A: retf 6
0001295D: push bp
0001295E: mov bp, sp
00012960: sub sp, 2
00012963: push ds
00012964: push es
00012965: push si
00012966: push di
00012967: mov ax, 0x1ab5
0001296A: mov ds, ax
0001296C: mov si, 0x6cda
0001296F: les di, ptr [bp + 0xa]
00012972: mov ax, word ptr [si + 0x28]
00012975: mov word ptr es:[di], ax
00012978: les di, ptr [bp + 6]
0001297B: mov ax, word ptr [si + 0x2a]
0001297E: mov word ptr es:[di], ax
00012981: mov word ptr [bp - 2], 0
00012986: mov ax, word ptr [bp - 2]
00012989: pop di
0001298A: pop si
0001298B: pop es
0001298C: pop ds
0001298D: mov sp, bp
0001298F: pop bp
00012990: retf 8
00012993: push bp
00012994: mov bp, sp
00012996: sub sp, 2
00012999: push ds
0001299A: push es
0001299B: push si
0001299C: push di
0001299D: mov ax, 0x1ab5
000129A0: mov ds, ax
000129A2: mov si, 0x6cda
000129A5: mov ax, word ptr [bp + 8]
000129A8: mov word ptr [si + 0x28], ax
000129AB: mov ax, word ptr [bp + 6]
000129AE: or ax, 1
000129B1: mov word ptr [si + 0x2a], ax
000129B4: mov word ptr [bp - 2], 0
000129B9: mov ax, word ptr [bp - 2]
000129BC: pop di
000129BD: pop si
000129BE: pop es
000129BF: pop ds
000129C0: mov sp, bp
000129C2: pop bp
000129C3: retf 4
000129C6: push bp
000129C7: mov bp, sp
000129C9: sub sp, 2
000129CC: push ds
000129CD: push es
000129CE: push si
000129CF: push di
000129D0: mov ax, 0x1ab5
000129D3: mov ds, ax
000129D5: mov si, 0x6cda
000129D8: mov ax, word ptr [si + 0x16]
000129DB: mov word ptr [bp - 2], ax
000129DE: mov ax, word ptr [bp - 2]
000129E1: pop di
000129E2: pop si
000129E3: pop es
000129E4: pop ds
000129E5: mov sp, bp
000129E7: pop bp
000129E8: retf 
000129E9: push bp
000129EA: mov bp, sp
000129EC: sub sp, 2
000129EF: push ds
000129F0: push es
000129F1: push si
000129F2: push di
000129F3: mov ax, 0x1ab5
000129F6: mov ds, ax
000129F8: mov si, 0x6cda
000129FB: mov ax, word ptr [bp + 6]
000129FE: mov word ptr [si + 0x16], ax
00012A01: mov word ptr [bp - 2], 0
00012A06: mov ax, word ptr [bp - 2]
00012A09: pop di
00012A0A: pop si
00012A0B: pop es
00012A0C: pop ds
00012A0D: mov sp, bp
00012A0F: pop bp
00012A10: retf 2
00012A13: push bp
00012A14: mov bp, sp
00012A16: sub sp, 2
00012A19: push ds
00012A1A: push es
00012A1B: push si
00012A1C: push di
00012A1D: mov ax, 0x1ab5
00012A20: mov ds, ax
00012A22: mov si, 0x6cda
00012A25: mov ax, word ptr [si + 0xe]
00012A28: mov word ptr [bp - 2], ax
00012A2B: mov ax, word ptr [bp - 2]
00012A2E: pop di
00012A2F: pop si
00012A30: pop es
00012A31: pop ds
00012A32: mov sp, bp
00012A34: pop bp
00012A35: retf 
00012A36: push bp
00012A37: mov bp, sp
00012A39: sub sp, 2
00012A3C: push ds
00012A3D: push es
00012A3E: push si
00012A3F: push di
00012A40: mov ax, 0x1ab5
00012A43: mov ds, ax
00012A45: mov si, 0x6cda
00012A48: mov ax, word ptr [bp + 6]
00012A4B: mov word ptr [si + 0xe], ax
00012A4E: mov word ptr [bp - 2], 0
00012A53: mov ax, word ptr [bp - 2]
00012A56: pop di
00012A57: pop si
00012A58: pop es
00012A59: pop ds
00012A5A: mov sp, bp
00012A5C: pop bp
00012A5D: retf 2
00012A60: push bp
00012A61: mov bp, sp
00012A63: sub sp, 2
00012A66: push ds
00012A67: push es
00012A68: push si
00012A69: push di
00012A6A: mov ax, 0x1ab5
00012A6D: mov ds, ax
00012A6F: mov si, 0x6cda
00012A72: mov ax, word ptr [si + 0xc]
00012A75: mov word ptr [bp - 2], ax
00012A78: mov ax, word ptr [bp - 2]
00012A7B: pop di
00012A7C: pop si
00012A7D: pop es
00012A7E: pop ds
00012A7F: mov sp, bp
00012A81: pop bp
00012A82: retf 
00012A83: push bp
00012A84: mov bp, sp
00012A86: sub sp, 2
00012A89: push ds
00012A8A: push es
00012A8B: push si
00012A8C: push di
00012A8D: mov ax, 0x1ab5
00012A90: mov ds, ax
00012A92: mov si, 0x6cda
00012A95: mov ax, word ptr [bp + 6]
00012A98: mov word ptr [si + 0xc], ax
00012A9B: mov word ptr [bp - 2], 0
00012AA0: mov ax, word ptr [bp - 2]
00012AA3: pop di
00012AA4: pop si
00012AA5: pop es
00012AA6: pop ds
00012AA7: mov sp, bp
00012AA9: pop bp
00012AAA: retf 2
00012AAD: push bp
00012AAE: mov bp, sp
00012AB0: sub sp, 2
00012AB3: push ds
00012AB4: push es
00012AB5: push si
00012AB6: push di
00012AB7: mov ax, 0x1ab5
00012ABA: mov ds, ax
00012ABC: mov si, 0x6cda
00012ABF: les di, ptr [bp + 6]
00012AC2: mov cx, 0x58
00012AC5: cld 
00012AC6: rep movsb byte ptr es:[di], byte ptr [si]
00012AC8: mov word ptr [bp - 2], 0
00012ACD: mov ax, word ptr [bp - 2]
00012AD0: pop di
00012AD1: pop si
00012AD2: pop es
00012AD3: pop ds
00012AD4: mov sp, bp
00012AD6: pop bp
00012AD7: retf 4
00012ADA: push bp
00012ADB: mov bp, sp
00012ADD: sub sp, 2
00012AE0: push ds
00012AE1: push es
00012AE2: push si
00012AE3: push di
00012AE4: mov ax, 0x1ab5
00012AE7: mov ds, ax
00012AE9: lds si, ptr [bp + 6]
00012AEC: mov ax, 0x1ab5
00012AEF: mov es, ax
00012AF1: mov di, 0x6cda
00012AF4: mov cx, 0x58
00012AF7: cld 
00012AF8: rep movsb byte ptr es:[di], byte ptr [si]
00012AFA: mov word ptr [bp - 2], 0
00012AFF: mov ax, word ptr [bp - 2]
00012B02: pop di
00012B03: pop si
00012B04: pop es
00012B05: pop ds
00012B06: mov sp, bp
00012B08: pop bp
00012B09: retf 4
00012B0C: push bp
00012B0D: mov bp, sp
00012B0F: sub sp, 2
00012B12: push ds
00012B13: push es
00012B14: push si
00012B15: push di
00012B16: mov ax, 0x1ab5
00012B19: mov ds, ax
00012B1B: mov ax, 0x1ab5
00012B1E: mov es, ax
00012B20: mov di, 0x6cda
00012B23: mov word ptr es:[di], 0
00012B28: mov word ptr es:[di + 8], 0
00012B2E: mov word ptr es:[di + 0xa], 0
00012B34: mov word ptr es:[di + 0xc], 1
00012B3A: mov word ptr es:[di + 0xe], 0
00012B40: mov word ptr es:[di + 0x10], 1
00012B46: mov word ptr es:[di + 0x12], 0
00012B4C: mov word ptr es:[di + 0x14], 0
00012B52: mov word ptr es:[di + 0x16], 0
00012B58: mov word ptr es:[di + 0x18], 0
00012B5E: mov word ptr es:[di + 0x1a], 0
00012B64: mov word ptr es:[di + 0x1c], 0
00012B6A: mov word ptr es:[di + 0x1e], 0x3ff
00012B70: mov word ptr es:[di + 0x20], 0x3ff
00012B76: mov word ptr es:[di + 0x22], 0
00012B7C: mov word ptr es:[di + 0x24], 0
00012B82: mov word ptr es:[di + 0x26], 1
00012B88: mov word ptr es:[di + 0x28], 0xffff
00012B8E: mov word ptr es:[di + 0x2a], 1
00012B94: mov word ptr es:[di + 0x2c], 0
00012B9A: mov word ptr es:[di + 0x2e], 0
00012BA0: mov word ptr es:[di + 0x30], 0
00012BA6: mov word ptr es:[di + 0x32], 0
00012BAC: mov word ptr es:[di + 0x34], 0
00012BB2: mov word ptr es:[di + 0x36], 0
00012BB8: mov word ptr es:[di + 0x38], 0x3ff
00012BBE: mov word ptr es:[di + 0x3a], 0x3ff
00012BC4: mov word ptr es:[di + 0x3c], 0
00012BCA: mov word ptr es:[di + 0x4e], 1
00012BD0: mov word ptr es:[di + 0x50], 3
00012BD6: mov word ptr es:[di + 0x52], 1
00012BDC: mov word ptr es:[di + 0x54], 1
00012BE2: mov word ptr es:[di + 0x56], 1
00012BE8: mov word ptr [bp - 2], 0
00012BED: mov ax, word ptr [bp - 2]
00012BF0: pop di
00012BF1: pop si
00012BF2: pop es
00012BF3: pop ds
00012BF4: mov sp, bp
00012BF6: pop bp
00012BF7: retf 
00012BF8: push bp
00012BF9: mov bp, sp
00012BFB: sub sp, 2
00012BFE: push ds
00012BFF: push es
00012C00: push si
00012C01: push di
00012C02: mov ax, 0x1ab5
00012C05: mov ds, ax
00012C07: mov si, 0x6cda
00012C0A: mov ax, word ptr [si + 0x12]
00012C0D: mov bx, word ptr [si + 0x14]
00012C10: test word ptr [si + 0x3c], 1
00012C15: je 0x12c27
00012C17: push ax
00012C18: push bx
00012C19: lcall 0x1214, 0x346
00012C1E: pop bx
00012C1F: push ax
00012C20: push bx
00012C21: lcall 0x1214, 0x307
00012C26: pop bx
00012C27: les di, ptr [bp + 0xa]
00012C2A: mov word ptr es:[di], ax
00012C2D: les di, ptr [bp + 6]
00012C30: mov word ptr es:[di], bx
00012C33: mov word ptr [bp - 2], 0
00012C38: mov ax, word ptr [bp - 2]
00012C3B: pop di
00012C3C: pop si
00012C3D: pop es
00012C3E: pop ds
00012C3F: mov sp, bp
00012C41: pop bp
00012C42: retf 
00012C43: push bp
00012C44: mov bp, sp
00012C46: sub sp, 2
00012C49: push ds
00012C4A: push es
00012C4B: push si
00012C4C: push di
00012C4D: mov ax, 0x1ab5
00012C50: mov ds, ax
00012C52: push word ptr [0x43b1]
00012C56: lcall 0x98e, 0x12a
00012C5B: jae 0x12c62
00012C5D: mov word ptr [bp - 2], ax
00012C60: jmp 0x12c77
00012C62: mov ds, dx
00012C64: mov si, ax
00012C66: mov al, byte ptr [si + 0x1e]
00012C69: mul byte ptr [si + 0x17]
00012C6C: mov cl, al
00012C6E: mov ax, 1
00012C71: shl ax, cl
00012C73: dec ax
00012C74: mov word ptr [bp - 2], ax
00012C77: mov ax, word ptr [bp - 2]
00012C7A: pop di
00012C7B: pop si
00012C7C: pop es
00012C7D: pop ds
00012C7E: mov sp, bp
00012C80: pop bp
00012C81: retf 
00012C82: push bp
00012C83: mov bp, sp
00012C85: sub sp, 2
00012C88: push ds
00012C89: push es
00012C8A: push si
00012C8B: push di
00012C8C: mov ax, 0x1ab5
00012C8F: mov ds, ax
00012C91: push word ptr [0x43b1]
00012C95: lcall 0x98e, 0x12a
00012C9A: jae 0x12ca1
00012C9C: mov word ptr [bp - 2], ax
00012C9F: jmp 0x12cac
00012CA1: mov ds, dx
00012CA3: mov si, ax
00012CA5: mov ax, word ptr [si + 0x18]
00012CA8: dec ax
00012CA9: mov word ptr [bp - 2], ax
00012CAC: mov ax, word ptr [bp - 2]
00012CAF: pop di
00012CB0: pop si
00012CB1: pop es
00012CB2: pop ds
00012CB3: mov sp, bp
00012CB5: pop bp
00012CB6: retf 
00012CB7: push bp
00012CB8: mov bp, sp
00012CBA: sub sp, 2
00012CBD: push ds
00012CBE: push es
00012CBF: push si
00012CC0: push di
00012CC1: mov ax, 0x1ab5
00012CC4: mov ds, ax
00012CC6: push word ptr [0x43b1]
00012CCA: lcall 0x98e, 0x12a
00012CCF: jae 0x12cd6
00012CD1: mov word ptr [bp - 2], ax
00012CD4: jmp 0x12ce1
00012CD6: mov ds, dx
00012CD8: mov si, ax
00012CDA: mov ax, word ptr [si + 0x1a]
00012CDD: dec ax
00012CDE: mov word ptr [bp - 2], ax
00012CE1: mov ax, word ptr [bp - 2]
00012CE4: pop di
00012CE5: pop si
00012CE6: pop es
00012CE7: pop ds
00012CE8: mov sp, bp
00012CEA: pop bp
00012CEB: retf 
00012CEC: push bp
00012CED: mov bp, sp
00012CEF: sub sp, 2
00012CF2: push ds
00012CF3: push es
00012CF4: push si
00012CF5: push di
00012CF6: mov ax, 0x1ab5
00012CF9: mov ds, ax
00012CFB: mov si, 0x6cda
00012CFE: cmp word ptr [si + 0x3c], 1
00012D02: jne 0x12d1a
00012D04: push word ptr [bp + 0xa]
00012D07: lcall 0x1214, 0x21c
00012D0C: mov word ptr [bp + 0xa], ax
00012D0F: push word ptr [bp + 8]
00012D12: lcall 0x1214, 0x26c
00012D17: mov word ptr [bp + 8], ax
00012D1A: mov ax, word ptr [si + 0x30]
00012D1D: mov bx, ax
00012D1F: or bx, word ptr [si + 0x32]
00012D22: je 0x12d2d
00012D24: mov bx, word ptr [si + 0x32]
00012D27: add word ptr [bp + 0xa], ax
00012D2A: add word ptr [bp + 8], bx
00012D2D: mov ax, word ptr [bp + 0xa]
00012D30: mov bx, word ptr [bp + 8]
00012D33: cmp word ptr [si + 0x18], 1
00012D37: jne 0x12d40
00012D39: lcall 0xc6c, 0xe5
00012D3E: jb 0x12d74
00012D40: mov si, 0x6cda
00012D43: cmp word ptr [si], 1
00012D46: jne 0x12d50
00012D48: mov dx, word ptr [si + 2]
00012D4B: mov si, 0x6cb8
00012D4E: jmp 0x12d63
00012D50: mov si, 0x6c14
00012D53: mov dx, word ptr [0x43b1]
00012D57: cmp dx, 0x28
00012D5A: jbe 0x12d63
00012D5C: mov word ptr [bp - 2], 0xfffa
00012D61: jmp 0x12d74
00012D63: push ax
00012D64: push bx
00012D65: push word ptr [bp + 6]
00012D68: shl dx, 1
00012D6A: shl dx, 1
00012D6C: add si, dx
00012D6E: push cs
00012D6F: call word ptr [si]
00012D71: mov word ptr [bp - 2], ax
00012D74: mov ax, word ptr [bp - 2]
00012D77: pop di
00012D78: pop si
00012D79: pop es
00012D7A: pop ds
00012D7B: mov sp, bp
00012D7D: pop bp
00012D7E: retf 6
00012D81: push bp
00012D82: mov bp, sp
00012D84: sub sp, 2
00012D87: push ds
00012D88: push es
00012D89: push si
00012D8A: push di
00012D8B: mov ax, 0x1ab5
00012D8E: mov ds, ax
00012D90: mov ax, word ptr [bp + 8]
00012D93: mov bx, word ptr [bp + 0xa]
00012D96: lcall 0x885, 0
00012D9B: mov al, byte ptr [bp + 6]
00012D9E: and al, 3
00012DA0: shl ax, cl
00012DA2: mov si, 0x6cda
00012DA5: mov dx, word ptr [si + 0x16]
00012DA8: cmp dl, 0
00012DAB: je 0x12dca
00012DAD: cmp dl, 3
00012DB0: je 0x12dc5
00012DB2: cmp dl, 1
00012DB5: je 0x12dbc
00012DB7: or byte ptr es:[bx], al
00012DBA: jmp 0x12dd2
00012DBC: not ah
00012DBE: or al, ah
00012DC0: and byte ptr es:[bx], al
00012DC3: jmp 0x12dd2
00012DC5: xor byte ptr es:[bx], al
00012DC8: jmp 0x12dd2
00012DCA: not ah
00012DCC: and byte ptr es:[bx], ah
00012DCF: or byte ptr es:[bx], al
00012DD2: mov word ptr [bp - 2], 0
00012DD7: mov ax, word ptr [bp - 2]
00012DDA: pop di
00012DDB: pop si
00012DDC: pop es
00012DDD: pop ds
00012DDE: mov sp, bp
00012DE0: pop bp
00012DE1: retf 6
00012DE4: push bp
00012DE5: mov bp, sp
00012DE7: sub sp, 2
00012DEA: push ds
00012DEB: push es
00012DEC: push si
00012DED: push di
00012DEE: mov ax, 0x1ab5
00012DF1: mov ds, ax
00012DF3: mov ax, word ptr [bp + 8]
00012DF6: mov bx, word ptr [bp + 0xa]
00012DF9: lcall 0x885, 0x24
00012DFE: mov al, byte ptr [bp + 6]
00012E01: and al, 1
00012E03: shl ax, cl
00012E05: mov si, 0x6cda
00012E08: mov dx, word ptr [si + 0x16]
00012E0B: cmp dl, 0
00012E0E: je 0x12e37
00012E10: cmp dl, 3
00012E13: je 0x12e2e
00012E15: cmp dl, 1
00012E18: je 0x12e23
00012E1A: test al, al
00012E1C: je 0x12e3f
00012E1E: or byte ptr es:[bx], al
00012E21: jmp 0x12e3f
00012E23: test al, al
00012E25: jne 0x12e3f
00012E27: not ah
00012E29: and byte ptr es:[bx], ah
00012E2C: jmp 0x12e3f
00012E2E: test al, al
00012E30: je 0x12e3f
00012E32: xor byte ptr es:[bx], al
00012E35: jmp 0x12e3f
00012E37: not ah
00012E39: and byte ptr es:[bx], ah
00012E3C: or byte ptr es:[bx], al
00012E3F: mov word ptr [bp - 2], 0
00012E44: mov ax, word ptr [bp - 2]
00012E47: pop di
00012E48: pop si
00012E49: pop es
00012E4A: pop ds
00012E4B: mov sp, bp
00012E4D: pop bp
00012E4E: retf 6
00012E51: push bp
00012E52: mov bp, sp
00012E54: sub sp, 2
00012E57: push ds
00012E58: push es
00012E59: push si
00012E5A: push di
00012E5B: mov ax, 0x1ab5
00012E5E: mov ds, ax
00012E60: mov ax, word ptr [bp + 8]
00012E63: mov bx, word ptr [bp + 0xa]
00012E66: lcall 0x885, 0x4a
00012E6B: mov al, byte ptr [bp + 6]
00012E6E: and al, 1
00012E70: shl ax, cl
00012E72: mov si, 0x6cda
00012E75: add bx, word ptr [si + 0xa]
00012E78: mov dx, word ptr [si + 0x16]
00012E7B: cmp dl, 0
00012E7E: je 0x12ea7
00012E80: cmp dl, 3
00012E83: je 0x12e9e
00012E85: cmp dl, 1
00012E88: je 0x12e93
00012E8A: test al, al
00012E8C: je 0x12eaf
00012E8E: or byte ptr es:[bx], al
00012E91: jmp 0x12eaf
00012E93: test al, al
00012E95: jne 0x12eaf
00012E97: not ah
00012E99: and byte ptr es:[bx], ah
00012E9C: jmp 0x12eaf
00012E9E: test al, al
00012EA0: je 0x12eaf
00012EA2: xor byte ptr es:[bx], al
00012EA5: jmp 0x12eaf
00012EA7: not ah
00012EA9: and byte ptr es:[bx], ah
00012EAC: or byte ptr es:[bx], al
00012EAF: mov word ptr [bp - 2], 0
00012EB4: mov ax, word ptr [bp - 2]
00012EB7: pop di
00012EB8: pop si
00012EB9: pop es
00012EBA: pop ds
00012EBB: mov sp, bp
00012EBD: pop bp
00012EBE: retf 6
00012EC1: push bp
00012EC2: mov bp, sp
00012EC4: sub sp, 2
00012EC7: push ds
00012EC8: push es
00012EC9: push si
00012ECA: push di
00012ECB: mov ax, 0x1ab5
00012ECE: mov ds, ax
00012ED0: mov ax, word ptr [bp + 8]
00012ED3: mov bx, word ptr [bp + 0xa]
00012ED6: lcall 0x885, 0x6a
00012EDB: shl ah, cl
00012EDD: mov dx, 0x3ce
00012EE0: mov al, 8
00012EE2: out dx, ax
00012EE3: mov ax, 0x205
00012EE6: out dx, ax
00012EE7: mov si, 0x6cda
00012EEA: add bx, word ptr [si + 0xa]
00012EED: mov ah, byte ptr [si + 0x16]
00012EF0: mov cl, 3
00012EF2: shl ah, cl
00012EF4: mov al, 3
00012EF6: out dx, ax
00012EF7: mov al, byte ptr es:[bx]
00012EFA: mov al, byte ptr [bp + 6]
00012EFD: mov byte ptr es:[bx], al
00012F00: mov ax, 0xff08
00012F03: out dx, ax
00012F04: mov ax, 5
00012F07: out dx, ax
00012F08: mov ax, 3
00012F0B: out dx, ax
00012F0C: mov word ptr [bp - 2], 0
00012F11: mov ax, word ptr [bp - 2]
00012F14: pop di
00012F15: pop si
00012F16: pop es
00012F17: pop ds
00012F18: mov sp, bp
00012F1A: pop bp
00012F1B: retf 6
00012F1E: push bp
00012F1F: mov bp, sp
00012F21: sub sp, 2
00012F24: push ds
00012F25: push es
00012F26: push si
00012F27: push di
00012F28: mov ax, 0x1ab5
00012F2B: mov ds, ax
00012F2D: mov ax, word ptr [bp + 8]
00012F30: mov bx, word ptr [bp + 0xa]
00012F33: lcall 0x885, 0x8b
00012F38: shl ah, cl
00012F3A: mov dx, 0x3ce
00012F3D: mov al, 8
00012F3F: out dx, ax
00012F40: mov ax, 0x205
00012F43: out dx, ax
00012F44: mov si, 0x6cda
00012F47: add bx, word ptr [si + 0xa]
00012F4A: mov ah, byte ptr [si + 0x16]
00012F4D: mov cl, 3
00012F4F: shl ah, cl
00012F51: mov al, 3
00012F53: out dx, ax
00012F54: mov ah, byte ptr [bp + 6]
00012F57: mov al, byte ptr es:[bx]
00012F5A: mov byte ptr es:[bx], ah
00012F5D: mov ax, 0xff08
00012F60: out dx, ax
00012F61: mov ax, 5
00012F64: out dx, ax
00012F65: mov ax, 3
00012F68: out dx, ax
00012F69: mov word ptr [bp - 2], 0
00012F6E: mov ax, word ptr [bp - 2]
00012F71: pop di
00012F72: pop si
00012F73: pop es
00012F74: pop ds
00012F75: mov sp, bp
00012F77: pop bp
00012F78: retf 6
00012F7B: push bp
00012F7C: mov bp, sp
00012F7E: sub sp, 2
00012F81: push ds
00012F82: push es
00012F83: push si
00012F84: push di
00012F85: mov ax, 0x1ab5
00012F88: mov ds, ax
00012F8A: mov ax, word ptr [bp + 8]
00012F8D: mov bx, word ptr [bp + 0xa]
00012F90: lcall 0x885, 0x8b
00012F95: mov al, byte ptr [bp + 6]
00012F98: and al, 1
00012F9A: shl ax, cl
00012F9C: mov si, 0x6cda
00012F9F: mov dx, word ptr [si + 0x16]
00012FA2: cmp dl, 0
00012FA5: je 0x12fce
00012FA7: cmp dl, 3
00012FAA: je 0x12fc5
00012FAC: cmp dl, 1
00012FAF: je 0x12fba
00012FB1: test al, al
00012FB3: je 0x12fd6
00012FB5: or byte ptr es:[bx], al
00012FB8: jmp 0x12fd6
00012FBA: test al, al
00012FBC: jne 0x12fd6
00012FBE: not ah
00012FC0: and byte ptr es:[bx], ah
00012FC3: jmp 0x12fd6
00012FC5: test al, al
00012FC7: je 0x12fd6
00012FC9: xor byte ptr es:[bx], al
00012FCC: jmp 0x12fd6
00012FCE: not ah
00012FD0: and byte ptr es:[bx], ah
00012FD3: or byte ptr es:[bx], al
00012FD6: mov word ptr [bp - 2], 0
00012FDB: mov ax, word ptr [bp - 2]
00012FDE: pop di
00012FDF: pop si
00012FE0: pop es
00012FE1: pop ds
00012FE2: mov sp, bp
00012FE4: pop bp
00012FE5: retf 6
00012FE8: push bp
00012FE9: mov bp, sp
00012FEB: sub sp, 2
00012FEE: push ds
00012FEF: push es
00012FF0: push si
00012FF1: push di
00012FF2: mov ax, 0x1ab5
00012FF5: mov ds, ax
00012FF7: mov ax, word ptr [bp + 8]
00012FFA: mov bx, word ptr [bp + 0xa]
00012FFD: lcall 0x885, 0xaa
00013002: mov al, byte ptr [bp + 6]
00013005: mov si, 0x6cda
00013008: mov dx, word ptr [si + 0x16]
0001300B: cmp dl, 0
0001300E: je 0x13029
00013010: cmp dl, 3
00013013: je 0x13024
00013015: cmp dl, 1
00013018: je 0x1301f
0001301A: or byte ptr es:[bx], al
0001301D: jmp 0x1302c
0001301F: and byte ptr es:[bx], al
00013022: jmp 0x1302c
00013024: xor byte ptr es:[bx], al
00013027: jmp 0x1302c
00013029: mov byte ptr es:[bx], al
0001302C: mov word ptr [bp - 2], 0
00013031: mov ax, word ptr [bp - 2]
00013034: pop di
00013035: pop si
00013036: pop es
00013037: pop ds
00013038: mov sp, bp
0001303A: pop bp
0001303B: retf 6
0001303E: push bp
0001303F: mov bp, sp
00013041: sub sp, 2
00013044: push ds
00013045: push es
00013046: push si
00013047: push di
00013048: mov ax, 0x1ab5
0001304B: mov ds, ax
0001304D: mov ax, word ptr [bp + 8]
00013050: mov bx, word ptr [bp + 0xa]
00013053: lcall 0x885, 0xba
00013058: shl ah, cl
0001305A: mov dx, 0x3ce
0001305D: mov al, 8
0001305F: out dx, ax
00013060: mov ax, 0x205
00013063: out dx, ax
00013064: mov si, 0x6cda
00013067: mov ah, byte ptr [si + 0x16]
0001306A: mov cl, 3
0001306C: shl ah, cl
0001306E: mov al, 3
00013070: out dx, ax
00013071: mov al, byte ptr es:[bx]
00013074: mov al, byte ptr [bp + 6]
00013077: mov byte ptr es:[bx], al
0001307A: mov ax, 0xff08
0001307D: out dx, ax
0001307E: mov ax, 5
00013081: out dx, ax
00013082: mov ax, 3
00013085: out dx, ax
00013086: mov word ptr [bp - 2], 0
0001308B: mov ax, word ptr [bp - 2]
0001308E: pop di
0001308F: pop si
00013090: pop es
00013091: pop ds
00013092: mov sp, bp
00013094: pop bp
00013095: retf 6
00013098: push bp
00013099: mov bp, sp
0001309B: sub sp, 2
0001309E: push ds
0001309F: push es
000130A0: push si
000130A1: push di
000130A2: mov ax, 0x1ab5
000130A5: mov ds, ax
000130A7: mov ax, word ptr [bp + 8]
000130AA: mov bx, word ptr [bp + 0xa]
000130AD: lcall 0x885, 0xd9
000130B2: cmp word ptr [0x43b9], 1
000130B7: jne 0x130cd
000130B9: mov al, dl
000130BB: mov ah, al
000130BD: shl ah, 1
000130BF: shl ah, 1
000130C1: shl ah, 1
000130C3: or al, ah
000130C5: or al, 0x40
000130C7: mov dx, 0x3cd
000130CA: out dx, al
000130CB: jmp 0x130ee
000130CD: mov al, dl
000130CF: mov ah, al
000130D1: mov dx, 0x3bf
000130D4: mov al, 3
000130D6: out dx, al
000130D7: mov dl, 0xd8
000130D9: mov al, 0xa0
000130DB: out dx, al
000130DC: and ah, 0xf
000130DF: mov al, ah
000130E1: shl al, 1
000130E3: shl al, 1
000130E5: shl al, 1
000130E7: shl al, 1
000130E9: or al, ah
000130EB: mov dl, 0xcd
000130ED: out dx, al
000130EE: mov al, byte ptr [bp + 6]
000130F1: mov si, 0x6cda
000130F4: mov dx, word ptr [si + 0x16]
000130F7: cmp dl, 0
000130FA: je 0x13115
000130FC: cmp dl, 3
000130FF: je 0x13110
00013101: cmp dl, 1
00013104: je 0x1310b
00013106: or byte ptr es:[bx], al
00013109: jmp 0x13118
0001310B: and byte ptr es:[bx], al
0001310E: jmp 0x13118
00013110: xor byte ptr es:[bx], al
00013113: jmp 0x13118
00013115: mov byte ptr es:[bx], al
00013118: mov word ptr [bp - 2], 0
0001311D: mov ax, word ptr [bp - 2]
00013120: pop di
00013121: pop si
00013122: pop es
00013123: pop ds
00013124: mov sp, bp
00013126: pop bp
00013127: retf 6
0001312A: push bp
0001312B: mov bp, sp
0001312D: sub sp, 2
00013130: push ds
00013131: push es
00013132: push si
00013133: push di
00013134: mov ax, 0x1ab5
00013137: mov ds, ax
00013139: mov ax, word ptr [bp + 8]
0001313C: mov bx, word ptr [bp + 0xa]
0001313F: lcall 0x885, 0xf3
00013144: cmp word ptr [0x43b9], 1
00013149: jne 0x1315f
0001314B: mov al, dl
0001314D: mov ah, al
0001314F: shl ah, 1
00013151: shl ah, 1
00013153: shl ah, 1
00013155: or al, ah
00013157: or al, 0x40
00013159: mov dx, 0x3cd
0001315C: out dx, al
0001315D: jmp 0x13180
0001315F: mov al, dl
00013161: mov ah, al
00013163: mov dx, 0x3bf
00013166: mov al, 3
00013168: out dx, al
00013169: mov dl, 0xd8
0001316B: mov al, 0xa0
0001316D: out dx, al
0001316E: and ah, 0xf
00013171: mov al, ah
00013173: shl al, 1
00013175: shl al, 1
00013177: shl al, 1
00013179: shl al, 1
0001317B: or al, ah
0001317D: mov dl, 0xcd
0001317F: out dx, al
00013180: mov al, byte ptr [bp + 6]
00013183: mov si, 0x6cda
00013186: mov dx, word ptr [si + 0x16]
00013189: cmp dl, 0
0001318C: je 0x131a7
0001318E: cmp dl, 3
00013191: je 0x131a2
00013193: cmp dl, 1
00013196: je 0x1319d
00013198: or byte ptr es:[bx], al
0001319B: jmp 0x131aa
0001319D: and byte ptr es:[bx], al
000131A0: jmp 0x131aa
000131A2: xor byte ptr es:[bx], al
000131A5: jmp 0x131aa
000131A7: mov byte ptr es:[bx], al
000131AA: mov word ptr [bp - 2], 0
000131AF: mov ax, word ptr [bp - 2]
000131B2: pop di
000131B3: pop si
000131B4: pop es
000131B5: pop ds
000131B6: mov sp, bp
000131B8: pop bp
000131B9: retf 6
000131BC: push bp
000131BD: mov bp, sp
000131BF: sub sp, 2
000131C2: push ds
000131C3: push es
000131C4: push si
000131C5: push di
000131C6: mov ax, 0x1ab5
000131C9: mov ds, ax
000131CB: mov al, 0xf
000131CD: mov ah, 5
000131CF: mov dx, 0x3ce
000131D2: out dx, ax
000131D3: mov ax, word ptr [bp + 8]
000131D6: mov bx, word ptr [bp + 0xa]
000131D9: lcall 0x885, 0xd9
000131DE: push cx
000131DF: mov ch, dl
000131E1: mov cl, 4
000131E3: shl ch, cl
000131E5: mov al, 9
000131E7: mov ah, ch
000131E9: mov dx, 0x3ce
000131EC: out dx, ax
000131ED: pop cx
000131EE: mov al, byte ptr [bp + 6]
000131F1: mov si, 0x6cda
000131F4: mov dx, word ptr [si + 0x16]
000131F7: cmp dl, 0
000131FA: je 0x13215
000131FC: cmp dl, 3
000131FF: je 0x13210
00013201: cmp dl, 1
00013204: je 0x1320b
00013206: or byte ptr es:[bx], al
00013209: jmp 0x13218
0001320B: and byte ptr es:[bx], al
0001320E: jmp 0x13218
00013210: xor byte ptr es:[bx], al
00013213: jmp 0x13218
00013215: mov byte ptr es:[bx], al
00013218: mov word ptr [bp - 2], 0
0001321D: mov ax, word ptr [bp - 2]
00013220: pop di
00013221: pop si
00013222: pop es
00013223: pop ds
00013224: mov sp, bp
00013226: pop bp
00013227: retf 6
0001322A: push bp
0001322B: mov bp, sp
0001322D: sub sp, 2
00013230: push ds
00013231: push es
00013232: push si
00013233: push di
00013234: mov ax, 0x1ab5
00013237: mov ds, ax
00013239: mov al, 6
0001323B: mov ah, 0xea
0001323D: mov dx, 0x3c4
00013240: out dx, ax
00013241: mov ax, word ptr [bp + 8]
00013244: mov bx, word ptr [bp + 0xa]
00013247: lcall 0x885, 0xd9
0001324C: push bx
0001324D: mov bh, dl
0001324F: mov bl, bh
00013251: and bl, 1
00013254: mov al, 0xf9
00013256: mov ah, bl
00013258: mov dx, 0x3c4
0001325B: out dx, ax
0001325C: mov bl, bh
0001325E: and bl, 2
00013261: shl bl, 1
00013263: shl bl, 1
00013265: shl bl, 1
00013267: shl bl, 1
00013269: mov dx, 0x3cc
0001326C: in al, dx
0001326D: and al, 0xdf
0001326F: or bl, al
00013271: mov al, bl
00013273: mov dx, 0x3c2
00013276: out dx, al
00013277: mov al, 0xf6
00013279: mov dx, 0x3c4
0001327C: out dx, al
0001327D: inc dx
0001327E: in al, dx
0001327F: and al, 0xf0
00013281: and bh, 0xc
00013284: mov bl, bh
00013286: shr bl, 1
00013288: shr bl, 1
0001328A: or al, bh
0001328C: or al, bl
0001328E: out dx, al
0001328F: pop bx
00013290: mov al, byte ptr [bp + 6]
00013293: mov si, 0x6cda
00013296: mov dx, word ptr [si + 0x16]
00013299: cmp dl, 0
0001329C: je 0x132b7
0001329E: cmp dl, 3
000132A1: je 0x132b2
000132A3: cmp dl, 1
000132A6: je 0x132ad
000132A8: or byte ptr es:[bx], al
000132AB: jmp 0x132ba
000132AD: and byte ptr es:[bx], al
000132B0: jmp 0x132ba
000132B2: xor byte ptr es:[bx], al
000132B5: jmp 0x132ba
000132B7: mov byte ptr es:[bx], al
000132BA: mov word ptr [bp - 2], 0
000132BF: mov ax, word ptr [bp - 2]
000132C2: pop di
000132C3: pop si
000132C4: pop es
000132C5: pop ds
000132C6: mov sp, bp
000132C8: pop bp
000132C9: retf 6
000132CC: push bp
000132CD: mov bp, sp
000132CF: sub sp, 2
000132D2: push ds
000132D3: push es
000132D4: push si
000132D5: push di
000132D6: mov ax, 0x1ab5
000132D9: mov ds, ax
000132DB: mov al, 6
000132DD: mov ah, 0xea
000132DF: mov dx, 0x3c4
000132E2: out dx, ax
000132E3: mov ax, word ptr [bp + 8]
000132E6: mov bx, word ptr [bp + 0xa]
000132E9: lcall 0x885, 0xf3
000132EE: push bx
000132EF: mov bh, dl
000132F1: mov bl, bh
000132F3: and bl, 1
000132F6: mov al, 0xf9
000132F8: mov ah, bl
000132FA: mov dx, 0x3c4
000132FD: out dx, ax
000132FE: mov bl, bh
00013300: and bl, 2
00013303: shl bl, 1
00013305: shl bl, 1
00013307: shl bl, 1
00013309: shl bl, 1
0001330B: mov dx, 0x3cc
0001330E: in al, dx
0001330F: and al, 0xdf
00013311: or bl, al
00013313: mov al, bl
00013315: mov dx, 0x3c2
00013318: out dx, al
00013319: mov al, 0xf6
0001331B: mov dx, 0x3c4
0001331E: out dx, al
0001331F: inc dx
00013320: in al, dx
00013321: and al, 0xf0
00013323: and bh, 0xc
00013326: mov bl, bh
00013328: shr bl, 1
0001332A: shr bl, 1
0001332C: or al, bh
0001332E: or al, bl
00013330: out dx, al
00013331: pop bx
00013332: mov al, byte ptr [bp + 6]
00013335: mov si, 0x6cda
00013338: mov dx, word ptr [si + 0x16]
0001333B: cmp dl, 0
0001333E: je 0x13359
00013340: cmp dl, 3
00013343: je 0x13354
00013345: cmp dl, 1
00013348: je 0x1334f
0001334A: or byte ptr es:[bx], al
0001334D: jmp 0x1335c
0001334F: and byte ptr es:[bx], al
00013352: jmp 0x1335c
00013354: xor byte ptr es:[bx], al
00013357: jmp 0x1335c
00013359: mov byte ptr es:[bx], al
0001335C: mov word ptr [bp - 2], 0
00013361: mov ax, word ptr [bp - 2]
00013364: pop di
00013365: pop si
00013366: pop es
00013367: pop ds
00013368: mov sp, bp
0001336A: pop bp
0001336B: retf 6
0001336E: push bp
0001336F: mov bp, sp
00013371: sub sp, 2
00013374: push ds
00013375: push es
00013376: push si
00013377: push di
00013378: mov ax, 0x1ab5
0001337B: mov ds, ax
0001337D: mov ax, word ptr [bp + 8]
00013380: mov bx, word ptr [bp + 0xa]
00013383: lcall 0x885, 0xd9
00013388: push cx
00013389: mov ch, dl
0001338B: cli 
0001338C: mov dx, 0x1ce
0001338F: mov al, 0xb2
00013391: out dx, al
00013392: inc dl
00013394: in al, dx
00013395: mov ah, al
00013397: and ah, 0xe1
0001339A: shl ch, 1
0001339C: or ah, ch
0001339E: dec dl
000133A0: mov al, 0xb2
000133A2: out dx, ax
000133A3: sti 
000133A4: pop cx
000133A5: mov al, byte ptr [bp + 6]
000133A8: mov si, 0x6cda
000133AB: mov dx, word ptr [si + 0x16]
000133AE: cmp dl, 0
000133B1: je 0x133cc
000133B3: cmp dl, 3
000133B6: je 0x133c7
000133B8: cmp dl, 1
000133BB: je 0x133c2
000133BD: or byte ptr es:[bx], al
000133C0: jmp 0x133cf
000133C2: and byte ptr es:[bx], al
000133C5: jmp 0x133cf
000133C7: xor byte ptr es:[bx], al
000133CA: jmp 0x133cf
000133CC: mov byte ptr es:[bx], al
000133CF: mov word ptr [bp - 2], 0
000133D4: mov ax, word ptr [bp - 2]
000133D7: pop di
000133D8: pop si
000133D9: pop es
000133DA: pop ds
000133DB: mov sp, bp
000133DD: pop bp
000133DE: retf 6
000133E1: push bp
000133E2: mov bp, sp
000133E4: sub sp, 2
000133E7: push ds
000133E8: push es
000133E9: push si
000133EA: push di
000133EB: mov ax, 0x1ab5
000133EE: mov ds, ax
000133F0: mov ax, word ptr [bp + 8]
000133F3: mov bx, word ptr [bp + 0xa]
000133F6: lcall 0x885, 0xf3
000133FB: push cx
000133FC: mov ch, dl
000133FE: cli 
000133FF: mov dx, 0x1ce
00013402: mov al, 0xb2
00013404: out dx, al
00013405: inc dl
00013407: in al, dx
00013408: mov ah, al
0001340A: and ah, 0xe1
0001340D: shl ch, 1
0001340F: or ah, ch
00013411: dec dl
00013413: mov al, 0xb2
00013415: out dx, ax
00013416: sti 
00013417: pop cx
00013418: mov al, byte ptr [bp + 6]
0001341B: mov si, 0x6cda
0001341E: mov dx, word ptr [si + 0x16]
00013421: cmp dl, 0
00013424: je 0x1343f
00013426: cmp dl, 3
00013429: je 0x1343a
0001342B: cmp dl, 1
0001342E: je 0x13435
00013430: or byte ptr es:[bx], al
00013433: jmp 0x13442
00013435: and byte ptr es:[bx], al
00013438: jmp 0x13442
0001343A: xor byte ptr es:[bx], al
0001343D: jmp 0x13442
0001343F: mov byte ptr es:[bx], al
00013442: mov word ptr [bp - 2], 0
00013447: mov ax, word ptr [bp - 2]
0001344A: pop di
0001344B: pop si
0001344C: pop es
0001344D: pop ds
0001344E: mov sp, bp
00013450: pop bp
00013451: retf 6
00013454: push bp
00013455: mov bp, sp
00013457: sub sp, 2
0001345A: push ds
0001345B: push es
0001345C: push si
0001345D: push di
0001345E: mov ax, 0x1ab5
00013461: mov ds, ax
00013463: mov ax, word ptr [bp + 8]
00013466: mov bx, word ptr [bp + 0xa]
00013469: lcall 0x885, 0x10d
0001346E: mov al, dl
00013470: mov ah, al
00013472: mov dx, 0x3bf
00013475: mov al, 3
00013477: out dx, al
00013478: mov dl, 0xd8
0001347A: mov al, 0xa0
0001347C: out dx, al
0001347D: and ah, 0xf
00013480: mov al, ah
00013482: shl al, 1
00013484: shl al, 1
00013486: shl al, 1
00013488: shl al, 1
0001348A: or al, ah
0001348C: mov dl, 0xcd
0001348E: out dx, al
0001348F: mov al, byte ptr [bp + 6]
00013492: mov si, 0x6cda
00013495: mov dx, word ptr [si + 0x16]
00013498: cmp dl, 0
0001349B: je 0x134b6
0001349D: cmp dl, 3
000134A0: je 0x134b1
000134A2: cmp dl, 1
000134A5: je 0x134ac
000134A7: or byte ptr es:[bx], al
000134AA: jmp 0x134b9
000134AC: and byte ptr es:[bx], al
000134AF: jmp 0x134b9
000134B1: xor byte ptr es:[bx], al
000134B4: jmp 0x134b9
000134B6: mov byte ptr es:[bx], al
000134B9: mov word ptr [bp - 2], 0
000134BE: mov ax, word ptr [bp - 2]
000134C1: pop di
000134C2: pop si
000134C3: pop es
000134C4: pop ds
000134C5: mov sp, bp
000134C7: pop bp
000134C8: retf 6
000134CB: push bp
000134CC: mov bp, sp
000134CE: sub sp, 2
000134D1: push ds
000134D2: push es
000134D3: push si
000134D4: push di
000134D5: mov ax, 0x1ab5
000134D8: mov ds, ax
000134DA: mov al, 0xf
000134DC: mov ah, 5
000134DE: mov dx, 0x3ce
000134E1: out dx, ax
000134E2: mov ax, word ptr [bp + 8]
000134E5: mov bx, word ptr [bp + 0xa]
000134E8: lcall 0x885, 0xf3
000134ED: push cx
000134EE: mov ch, dl
000134F0: mov cl, 4
000134F2: shl ch, cl
000134F4: mov al, 9
000134F6: mov ah, ch
000134F8: mov dx, 0x3ce
000134FB: out dx, ax
000134FC: pop cx
000134FD: mov al, byte ptr [bp + 6]
00013500: mov si, 0x6cda
00013503: mov dx, word ptr [si + 0x16]
00013506: cmp dl, 0
00013509: je 0x13524
0001350B: cmp dl, 3
0001350E: je 0x1351f
00013510: cmp dl, 1
00013513: je 0x1351a
00013515: or byte ptr es:[bx], al
00013518: jmp 0x13527
0001351A: and byte ptr es:[bx], al
0001351D: jmp 0x13527
0001351F: xor byte ptr es:[bx], al
00013522: jmp 0x13527
00013524: mov byte ptr es:[bx], al
00013527: mov word ptr [bp - 2], 0
0001352C: mov ax, word ptr [bp - 2]
0001352F: pop di
00013530: pop si
00013531: pop es
00013532: pop ds
00013533: mov sp, bp
00013535: pop bp
00013536: retf 6
00013539: push bp
0001353A: mov bp, sp
0001353C: sub sp, 2
0001353F: push ds
00013540: push es
00013541: push si
00013542: push di
00013543: mov ax, 0x1ab5
00013546: mov ds, ax
00013548: mov al, 0xf
0001354A: mov ah, 5
0001354C: mov dx, 0x3ce
0001354F: out dx, ax
00013550: mov ax, word ptr [bp + 8]
00013553: mov bx, word ptr [bp + 0xa]
00013556: lcall 0x885, 0x10d
0001355B: push cx
0001355C: mov ch, dl
0001355E: mov cl, 4
00013560: shl ch, cl
00013562: mov al, 9
00013564: mov ah, ch
00013566: mov dx, 0x3ce
00013569: out dx, ax
0001356A: pop cx
0001356B: mov al, byte ptr [bp + 6]
0001356E: mov si, 0x6cda
00013571: mov dx, word ptr [si + 0x16]
00013574: cmp dl, 0
00013577: je 0x13592
00013579: cmp dl, 3
0001357C: je 0x1358d
0001357E: cmp dl, 1
00013581: je 0x13588
00013583: or byte ptr es:[bx], al
00013586: jmp 0x13595
00013588: and byte ptr es:[bx], al
0001358B: jmp 0x13595
0001358D: xor byte ptr es:[bx], al
00013590: jmp 0x13595
00013592: mov byte ptr es:[bx], al
00013595: mov word ptr [bp - 2], 0
0001359A: mov ax, word ptr [bp - 2]
0001359D: pop di
0001359E: pop si
0001359F: pop es
000135A0: pop ds
000135A1: mov sp, bp
000135A3: pop bp
000135A4: retf 6
000135A7: push bp
000135A8: mov bp, sp
000135AA: sub sp, 2
000135AD: push ds
000135AE: push es
000135AF: push si
000135B0: push di
000135B1: mov ax, 0x1ab5
000135B4: mov ds, ax
000135B6: mov al, 6
000135B8: mov ah, 0xea
000135BA: mov dx, 0x3c4
000135BD: out dx, ax
000135BE: mov ax, word ptr [bp + 8]
000135C1: mov bx, word ptr [bp + 0xa]
000135C4: lcall 0x885, 0x10d
000135C9: push bx
000135CA: mov bh, dl
000135CC: mov bl, bh
000135CE: and bl, 1
000135D1: mov al, 0xf9
000135D3: mov ah, bl
000135D5: mov dx, 0x3c4
000135D8: out dx, ax
000135D9: mov bl, bh
000135DB: and bl, 2
000135DE: shl bl, 1
000135E0: shl bl, 1
000135E2: shl bl, 1
000135E4: shl bl, 1
000135E6: mov dx, 0x3cc
000135E9: in al, dx
000135EA: and al, 0xdf
000135EC: or bl, al
000135EE: mov al, bl
000135F0: mov dx, 0x3c2
000135F3: out dx, al
000135F4: mov al, 0xf6
000135F6: mov dx, 0x3c4
000135F9: out dx, al
000135FA: inc dx
000135FB: in al, dx
000135FC: and al, 0xf0
000135FE: and bh, 0xc
00013601: mov bl, bh
00013603: shr bl, 1
00013605: shr bl, 1
00013607: or al, bh
00013609: or al, bl
0001360B: out dx, al
0001360C: pop bx
0001360D: mov al, byte ptr [bp + 6]
00013610: mov si, 0x6cda
00013613: mov dx, word ptr [si + 0x16]
00013616: cmp dl, 0
00013619: je 0x13634
0001361B: cmp dl, 3
0001361E: je 0x1362f
00013620: cmp dl, 1
00013623: je 0x1362a
00013625: or byte ptr es:[bx], al
00013628: jmp 0x13637
0001362A: and byte ptr es:[bx], al
0001362D: jmp 0x13637
0001362F: xor byte ptr es:[bx], al
00013632: jmp 0x13637
00013634: mov byte ptr es:[bx], al
00013637: mov word ptr [bp - 2], 0
0001363C: mov ax, word ptr [bp - 2]
0001363F: pop di
00013640: pop si
00013641: pop es
00013642: pop ds
00013643: mov sp, bp
00013645: pop bp
00013646: retf 6
00013649: push bp
0001364A: mov bp, sp
0001364C: sub sp, 2
0001364F: push ds
00013650: push es
00013651: push si
00013652: push di
00013653: mov ax, 0x1ab5
00013656: mov ds, ax
00013658: mov ax, word ptr [bp + 8]
0001365B: mov bx, word ptr [bp + 0xa]
0001365E: lcall 0x885, 0x10d
00013663: push cx
00013664: mov ch, dl
00013666: cli 
00013667: mov dx, 0x1ce
0001366A: mov al, 0xb2
0001366C: out dx, al
0001366D: inc dl
0001366F: in al, dx
00013670: mov ah, al
00013672: and ah, 0xe1
00013675: shl ch, 1
00013677: or ah, ch
00013679: dec dl
0001367B: mov al, 0xb2
0001367D: out dx, ax
0001367E: sti 
0001367F: pop cx
00013680: mov al, byte ptr [bp + 6]
00013683: mov si, 0x6cda
00013686: mov dx, word ptr [si + 0x16]
00013689: cmp dl, 0
0001368C: je 0x136a7
0001368E: cmp dl, 3
00013691: je 0x136a2
00013693: cmp dl, 1
00013696: je 0x1369d
00013698: or byte ptr es:[bx], al
0001369B: jmp 0x136aa
0001369D: and byte ptr es:[bx], al
000136A0: jmp 0x136aa
000136A2: xor byte ptr es:[bx], al
000136A5: jmp 0x136aa
000136A7: mov byte ptr es:[bx], al
000136AA: mov word ptr [bp - 2], 0
000136AF: mov ax, word ptr [bp - 2]
000136B2: pop di
000136B3: pop si
000136B4: pop es
000136B5: pop ds
000136B6: mov sp, bp
000136B8: pop bp
000136B9: retf 6
000136BC: push bp
000136BD: mov bp, sp
000136BF: sub sp, 2
000136C2: push ds
000136C3: push es
000136C4: push si
000136C5: push di
000136C6: mov ax, 0x1ab5
000136C9: mov ds, ax
000136CB: mov ax, word ptr [bp + 8]
000136CE: mov bx, word ptr [bp + 0xa]
000136D1: lcall 0x885, 0xd9
000136D6: mov al, dl
000136D8: and al, 0xf
000136DA: xor al, 2
000136DC: mov ah, al
000136DE: mov dx, 0x3c4
000136E1: mov al, 0xe
000136E3: out dx, al
000136E4: inc dx
000136E5: in al, dx
000136E6: and al, 0xf0
000136E8: or al, ah
000136EA: out dx, al
000136EB: mov al, byte ptr [bp + 6]
000136EE: mov si, 0x6cda
000136F1: mov dx, word ptr [si + 0x16]
000136F4: cmp dl, 0
000136F7: je 0x13712
000136F9: cmp dl, 3
000136FC: je 0x1370d
000136FE: cmp dl, 1
00013701: je 0x13708
00013703: or byte ptr es:[bx], al
00013706: jmp 0x13715
00013708: and byte ptr es:[bx], al
0001370B: jmp 0x13715
0001370D: xor byte ptr es:[bx], al
00013710: jmp 0x13715
00013712: mov byte ptr es:[bx], al
00013715: mov word ptr [bp - 2], 0
0001371A: mov ax, word ptr [bp - 2]
0001371D: pop di
0001371E: pop si
0001371F: pop es
00013720: pop ds
00013721: mov sp, bp
00013723: pop bp
00013724: retf 6
00013727: push bp
00013728: mov bp, sp
0001372A: sub sp, 2
0001372D: push ds
0001372E: push es
0001372F: push si
00013730: push di
00013731: mov ax, 0x1ab5
00013734: mov ds, ax
00013736: mov ax, word ptr [bp + 8]
00013739: mov bx, word ptr [bp + 0xa]
0001373C: lcall 0x885, 0xf3
00013741: mov al, dl
00013743: and al, 0xf
00013745: xor al, 2
00013747: mov ah, al
00013749: mov dx, 0x3c4
0001374C: mov al, 0xe
0001374E: out dx, al
0001374F: inc dx
00013750: in al, dx
00013751: and al, 0xf0
00013753: or al, ah
00013755: out dx, al
00013756: mov al, byte ptr [bp + 6]
00013759: mov si, 0x6cda
0001375C: mov dx, word ptr [si + 0x16]
0001375F: cmp dl, 0
00013762: je 0x1377d
00013764: cmp dl, 3
00013767: je 0x13778
00013769: cmp dl, 1
0001376C: je 0x13773
0001376E: or byte ptr es:[bx], al
00013771: jmp 0x13780
00013773: and byte ptr es:[bx], al
00013776: jmp 0x13780
00013778: xor byte ptr es:[bx], al
0001377B: jmp 0x13780
0001377D: mov byte ptr es:[bx], al
00013780: mov word ptr [bp - 2], 0
00013785: mov ax, word ptr [bp - 2]
00013788: pop di
00013789: pop si
0001378A: pop es
0001378B: pop ds
0001378C: mov sp, bp
0001378E: pop bp
0001378F: retf 6
00013792: push bp
00013793: mov bp, sp
00013795: sub sp, 2
00013798: push ds
00013799: push es
0001379A: push si
0001379B: push di
0001379C: mov ax, 0x1ab5
0001379F: mov ds, ax
000137A1: mov ax, word ptr [bp + 8]
000137A4: mov bx, word ptr [bp + 0xa]
000137A7: lcall 0x885, 0x10d
000137AC: mov al, dl
000137AE: and al, 0xf
000137B0: xor al, 2
000137B2: mov ah, al
000137B4: mov dx, 0x3c4
000137B7: mov al, 0xe
000137B9: out dx, al
000137BA: inc dx
000137BB: in al, dx
000137BC: and al, 0xf0
000137BE: or al, ah
000137C0: out dx, al
000137C1: mov al, byte ptr [bp + 6]
000137C4: mov si, 0x6cda
000137C7: mov dx, word ptr [si + 0x16]
000137CA: cmp dl, 0
000137CD: je 0x137e8
000137CF: cmp dl, 3
000137D2: je 0x137e3
000137D4: cmp dl, 1
000137D7: je 0x137de
000137D9: or byte ptr es:[bx], al
000137DC: jmp 0x137eb
000137DE: and byte ptr es:[bx], al
000137E1: jmp 0x137eb
000137E3: xor byte ptr es:[bx], al
000137E6: jmp 0x137eb
000137E8: mov byte ptr es:[bx], al
000137EB: mov word ptr [bp - 2], 0
000137F0: mov ax, word ptr [bp - 2]
000137F3: pop di
000137F4: pop si
000137F5: pop es
000137F6: pop ds
000137F7: mov sp, bp
000137F9: pop bp
000137FA: retf 6
000137FD: push bp
000137FE: mov bp, sp
00013800: sub sp, 2
00013803: push ds
00013804: push es
00013805: push si
00013806: push di
00013807: mov ax, 0x1ab5
0001380A: mov ds, ax
0001380C: mov ax, word ptr [bp + 8]
0001380F: mov bx, word ptr [bp + 0xa]
00013812: lcall 0x885, 0xd9
00013817: push bx
00013818: mov al, dl
0001381A: mov bl, byte ptr [0x43bb]
0001381E: mul bl
00013820: mov bx, 1
00013823: mov dx, ax
00013825: push dx
00013826: mov ah, 0x4f
00013828: mov al, 5
0001382A: int 0x10
0001382C: pop dx
0001382D: xor bx, bx
0001382F: mov ah, 0x4f
00013831: mov al, 5
00013833: int 0x10
00013835: pop bx
00013836: mov al, byte ptr [bp + 6]
00013839: mov si, 0x6cda
0001383C: mov dx, word ptr [si + 0x16]
0001383F: cmp dl, 0
00013842: je 0x1385d
00013844: cmp dl, 3
00013847: je 0x13858
00013849: cmp dl, 1
0001384C: je 0x13853
0001384E: or byte ptr es:[bx], al
00013851: jmp 0x13860
00013853: and byte ptr es:[bx], al
00013856: jmp 0x13860
00013858: xor byte ptr es:[bx], al
0001385B: jmp 0x13860
0001385D: mov byte ptr es:[bx], al
00013860: mov word ptr [bp - 2], 0
00013865: mov ax, word ptr [bp - 2]
00013868: pop di
00013869: pop si
0001386A: pop es
0001386B: pop ds
0001386C: mov sp, bp
0001386E: pop bp
0001386F: retf 6
00013872: push bp
00013873: mov bp, sp
00013875: sub sp, 2
00013878: push ds
00013879: push es
0001387A: push si
0001387B: push di
0001387C: mov ax, 0x1ab5
0001387F: mov ds, ax
00013881: mov ax, word ptr [bp + 8]
00013884: mov bx, word ptr [bp + 0xa]
00013887: lcall 0x885, 0xf3
0001388C: push bx
0001388D: mov al, dl
0001388F: mov bl, byte ptr [0x43bb]
00013893: mul bl
00013895: mov bx, 1
00013898: mov dx, ax
0001389A: push dx
0001389B: mov ah, 0x4f
0001389D: mov al, 5
0001389F: int 0x10
000138A1: pop dx
000138A2: xor bx, bx
000138A4: mov ah, 0x4f
000138A6: mov al, 5
000138A8: int 0x10
000138AA: pop bx
000138AB: mov al, byte ptr [bp + 6]
000138AE: mov si, 0x6cda
000138B1: mov dx, word ptr [si + 0x16]
000138B4: cmp dl, 0
000138B7: je 0x138d2
000138B9: cmp dl, 3
000138BC: je 0x138cd
000138BE: cmp dl, 1
000138C1: je 0x138c8
000138C3: or byte ptr es:[bx], al
000138C6: jmp 0x138d5
000138C8: and byte ptr es:[bx], al
000138CB: jmp 0x138d5
000138CD: xor byte ptr es:[bx], al
000138D0: jmp 0x138d5
000138D2: mov byte ptr es:[bx], al
000138D5: mov word ptr [bp - 2], 0
000138DA: mov ax, word ptr [bp - 2]
000138DD: pop di
000138DE: pop si
000138DF: pop es
000138E0: pop ds
000138E1: mov sp, bp
000138E3: pop bp
000138E4: retf 6
000138E7: push bp
000138E8: mov bp, sp
000138EA: sub sp, 2
000138ED: push ds
000138EE: push es
000138EF: push si
000138F0: push di
000138F1: mov ax, 0x1ab5
000138F4: mov ds, ax
000138F6: mov ax, word ptr [bp + 8]
000138F9: mov bx, word ptr [bp + 0xa]
000138FC: lcall 0x885, 0x10d
00013901: push bx
00013902: mov al, dl
00013904: mov bl, byte ptr [0x43bb]
00013908: mul bl
0001390A: mov bx, 1
0001390D: mov dx, ax
0001390F: push dx
00013910: mov ah, 0x4f
00013912: mov al, 5
00013914: int 0x10
00013916: pop dx
00013917: xor bx, bx
00013919: mov ah, 0x4f
0001391B: mov al, 5
0001391D: int 0x10
0001391F: pop bx
00013920: mov al, byte ptr [bp + 6]
00013923: mov si, 0x6cda
00013926: mov dx, word ptr [si + 0x16]
00013929: cmp dl, 0
0001392C: je 0x13947
0001392E: cmp dl, 3
00013931: je 0x13942
00013933: cmp dl, 1
00013936: je 0x1393d
00013938: or byte ptr es:[bx], al
0001393B: jmp 0x1394a
0001393D: and byte ptr es:[bx], al
00013940: jmp 0x1394a
00013942: xor byte ptr es:[bx], al
00013945: jmp 0x1394a
00013947: mov byte ptr es:[bx], al
0001394A: mov word ptr [bp - 2], 0
0001394F: mov ax, word ptr [bp - 2]
00013952: pop di
00013953: pop si
00013954: pop es
00013955: pop ds
00013956: mov sp, bp
00013958: pop bp
00013959: retf 6
0001395C: push bp
0001395D: mov bp, sp
0001395F: sub sp, 2
00013962: push ds
00013963: push es
00013964: push si
00013965: push di
00013966: mov ax, 0x1ab5
00013969: mov ds, ax
0001396B: mov si, 0x6cda
0001396E: push word ptr [si + 6]
00013971: push word ptr [si + 4]
00013974: push word ptr [bp + 0xa]
00013977: push word ptr [bp + 8]
0001397A: mov ax, 1
0001397D: push ax
0001397E: lcall 0xb08, 0xa
00013983: or dx, dx
00013985: jne 0x1398c
00013987: mov word ptr [bp - 2], ax
0001398A: jmp 0x139de
0001398C: mov es, dx
0001398E: mov di, ax
00013990: mov cx, word ptr [bp + 0xa]
00013993: and cl, 7
00013996: xor cl, 7
00013999: mov ah, 1
0001399B: mov al, byte ptr [bp + 6]
0001399E: and al, 1
000139A0: shl ax, cl
000139A2: mov dx, word ptr [si + 0x16]
000139A5: cmp dl, 0
000139A8: je 0x139d1
000139AA: cmp dl, 3
000139AD: je 0x139c8
000139AF: cmp dl, 1
000139B2: je 0x139bd
000139B4: test al, al
000139B6: je 0x139d9
000139B8: or byte ptr es:[di], al
000139BB: jmp 0x139d9
000139BD: test al, al
000139BF: jne 0x139d9
000139C1: not ah
000139C3: and byte ptr es:[di], ah
000139C6: jmp 0x139d9
000139C8: test al, al
000139CA: je 0x139d9
000139CC: xor byte ptr es:[di], al
000139CF: jmp 0x139d9
000139D1: not ah
000139D3: and byte ptr es:[di], ah
000139D6: or byte ptr es:[di], al
000139D9: mov word ptr [bp - 2], 0
000139DE: mov ax, word ptr [bp - 2]
000139E1: pop di
000139E2: pop si
000139E3: pop es
000139E4: pop ds
000139E5: mov sp, bp
000139E7: pop bp
000139E8: retf 6
000139EB: push bp
000139EC: mov bp, sp
000139EE: sub sp, 2
000139F1: push ds
000139F2: push es
000139F3: push si
000139F4: push di
000139F5: mov ax, 0x1ab5
000139F8: mov ds, ax
000139FA: mov si, 0x6cda
000139FD: push word ptr [si + 6]
00013A00: push word ptr [si + 4]
00013A03: push word ptr [bp + 0xa]
00013A06: push word ptr [bp + 8]
00013A09: mov ax, 1
00013A0C: push ax
00013A0D: lcall 0xb08, 0xa
00013A12: or dx, dx
00013A14: jne 0x13a1b
00013A16: mov word ptr [bp - 2], ax
00013A19: jmp 0x13a63
00013A1B: mov es, dx
00013A1D: mov di, ax
00013A1F: mov ah, 3
00013A21: mov cx, word ptr [bp + 0xa]
00013A24: and cl, ah
00013A26: xor cl, ah
00013A28: shl cl, 1
00013A2A: mov al, byte ptr [bp + 6]
00013A2D: and al, ah
00013A2F: shl ax, cl
00013A31: mov dx, word ptr [si + 0x16]
00013A34: cmp dl, 0
00013A37: je 0x13a56
00013A39: cmp dl, 3
00013A3C: je 0x13a51
00013A3E: cmp dl, 1
00013A41: je 0x13a48
00013A43: or byte ptr es:[di], al
00013A46: jmp 0x13a5e
00013A48: not ah
00013A4A: or al, ah
00013A4C: and byte ptr es:[di], al
00013A4F: jmp 0x13a5e
00013A51: xor byte ptr es:[di], al
00013A54: jmp 0x13a5e
00013A56: not ah
00013A58: and byte ptr es:[di], ah
00013A5B: or byte ptr es:[di], al
00013A5E: mov word ptr [bp - 2], 0
00013A63: mov ax, word ptr [bp - 2]
00013A66: pop di
00013A67: pop si
00013A68: pop es
00013A69: pop ds
00013A6A: mov sp, bp
00013A6C: pop bp
00013A6D: retf 6
00013A70: push bp
00013A71: mov bp, sp
00013A73: sub sp, 2
00013A76: push ds
00013A77: push es
00013A78: push si
00013A79: push di
00013A7A: mov ax, 0x1ab5
00013A7D: mov ds, ax
00013A7F: mov si, 0x6cda
00013A82: push word ptr [si + 6]
00013A85: push word ptr [si + 4]
00013A88: push word ptr [bp + 0xa]
00013A8B: push word ptr [bp + 8]
00013A8E: mov ax, 1
00013A91: push ax
00013A92: lcall 0xb08, 0xa
00013A97: or dx, dx
00013A99: je 0x13af0
00013A9B: mov es, dx
00013A9D: mov di, ax
00013A9F: mov cx, word ptr [bp + 0xa]
00013AA2: and cl, 7
00013AA5: xor cl, 7
00013AA8: mov dl, byte ptr [si + 0x16]
00013AAB: lds si, ptr [si + 4]
00013AAE: mov si, word ptr [si + 0x14]
00013AB1: mov ah, 1
00013AB3: mov bl, byte ptr [bp + 6]
00013AB6: mov al, bl
00013AB8: and al, 1
00013ABA: shl ax, cl
00013ABC: or dl, dl
00013ABE: jne 0x13af5
00013AC0: not ah
00013AC2: mov bh, 4
00013AC4: mov dh, byte ptr es:[di]
00013AC7: and dh, ah
00013AC9: or dh, al
00013ACB: mov byte ptr es:[di], dh
00013ACE: dec bh
00013AD0: je 0x13ade
00013AD2: shr bl, 1
00013AD4: mov al, bl
00013AD6: and al, 1
00013AD8: shl al, cl
00013ADA: add di, si
00013ADC: jmp 0x13ac4
00013ADE: mov word ptr [bp - 2], 0
00013AE3: mov ax, word ptr [bp - 2]
00013AE6: pop di
00013AE7: pop si
00013AE8: pop es
00013AE9: pop ds
00013AEA: mov sp, bp
00013AEC: pop bp
00013AED: retf 6
00013AF0: mov word ptr [bp - 2], ax
00013AF3: jmp 0x13ae3
00013AF5: cmp dl, 3
00013AF8: jne 0x13b13
00013AFA: mov bh, 4
00013AFC: or bl, bl
00013AFE: je 0x13ade
00013B00: xor byte ptr es:[di], al
00013B03: dec bh
00013B05: je 0x13ade
00013B07: shr bl, 1
00013B09: mov al, bl
00013B0B: and al, 1
00013B0D: shl al, cl
00013B0F: add di, si
00013B11: jmp 0x13b00
00013B13: cmp dl, 1
00013B16: jne 0x13b3a
00013B18: cmp bl, 0xf
00013B1B: je 0x13ade
00013B1D: mov bh, 4
00013B1F: or al, al
00013B21: jne 0x13b2c
00013B23: mov al, 1
00013B25: shl al, cl
00013B27: not al
00013B29: and byte ptr es:[di], al
00013B2C: dec bh
00013B2E: je 0x13ade
00013B30: shr bl, 1
00013B32: mov al, bl
00013B34: and al, 1
00013B36: add di, si
00013B38: jmp 0x13b1f
00013B3A: test bl, bl
00013B3C: je 0x13ade
00013B3E: mov bh, 4
00013B40: or byte ptr es:[di], al
00013B43: dec bh
00013B45: je 0x13ade
00013B47: shr bl, 1
00013B49: mov al, bl
00013B4B: and al, 1
00013B4D: shl al, cl
00013B4F: add di, si
00013B51: jmp 0x13b40
00013B53: push bp
00013B54: mov bp, sp
00013B56: sub sp, 2
00013B59: push ds
00013B5A: push es
00013B5B: push si
00013B5C: push di
00013B5D: mov ax, 0x1ab5
00013B60: mov ds, ax
00013B62: mov si, 0x6cda
00013B65: push word ptr [si + 6]
00013B68: push word ptr [si + 4]
00013B6B: push word ptr [bp + 0xa]
00013B6E: push word ptr [bp + 8]
00013B71: mov ax, 1
00013B74: push ax
00013B75: lcall 0xb08, 0xa
00013B7A: or dx, dx
00013B7C: jne 0x13b83
00013B7E: mov word ptr [bp - 2], ax
00013B81: jmp 0x13bb3
00013B83: mov es, dx
00013B85: mov di, ax
00013B87: mov al, byte ptr [bp + 6]
00013B8A: mov dx, word ptr [si + 0x16]
00013B8D: cmp dl, 0
00013B90: je 0x13bab
00013B92: cmp dl, 3
00013B95: je 0x13ba6
00013B97: cmp dl, 1
00013B9A: je 0x13ba1
00013B9C: or byte ptr es:[di], al
00013B9F: jmp 0x13bae
00013BA1: and byte ptr es:[di], al
00013BA4: jmp 0x13bae
00013BA6: xor byte ptr es:[di], al
00013BA9: jmp 0x13bae
00013BAB: mov byte ptr es:[di], al
00013BAE: mov word ptr [bp - 2], 0
00013BB3: mov ax, word ptr [bp - 2]
00013BB6: pop di
00013BB7: pop si
00013BB8: pop es
00013BB9: pop ds
00013BBA: mov sp, bp
00013BBC: pop bp
00013BBD: retf 6
00013BC0: push bp
00013BC1: mov bp, sp
00013BC3: sub sp, 2
00013BC6: push ds
00013BC7: push es
00013BC8: push si
00013BC9: push di
00013BCA: mov ax, 0x1ab5
00013BCD: mov ds, ax
00013BCF: mov ax, word ptr [bp + 6]
00013BD2: cmp ax, 0
00013BD5: jb 0x13bdc
00013BD7: cmp ax, 0x10
00013BDA: jbe 0x13be4
00013BDC: mov word ptr [bp - 2], 0xfffa
00013BE1: stc 
00013BE2: jmp 0x13c09
00013BE4: mov si, 0x6cda
00013BE7: cmp word ptr [si], 1
00013BEA: jne 0x13bf7
00013BEC: mov ax, word ptr [si + 2]
00013BEF: mov word ptr [bp + 6], ax
00013BF2: mov si, 0x6e87
00013BF5: jmp 0x13bfa
00013BF7: mov si, 0x6d99
00013BFA: mov dx, 0xe
00013BFD: mul dx
00013BFF: add si, ax
00013C01: mov ax, si
00013C03: mov dx, ds
00013C05: mov word ptr [bp - 2], ax
00013C08: clc 
00013C09: mov ax, word ptr [bp - 2]
00013C0C: pop di
00013C0D: pop si
00013C0E: pop es
00013C0F: pop ds
00013C10: mov sp, bp
00013C12: pop bp
00013C13: retf 2
00013C16: push bp
00013C17: mov bp, sp
00013C19: sub sp, 2
00013C1C: push ds
00013C1D: push es
00013C1E: push si
00013C1F: push di
00013C20: mov ax, 0x1ab5
00013C23: mov ds, ax
00013C25: les di, ptr [bp + 0xa]
00013C28: mov word ptr es:[di], 2
00013C2D: les di, ptr [bp + 6]
00013C30: mov word ptr es:[di], 1
00013C35: mov word ptr [bp - 2], 0
00013C3A: mov ax, word ptr [bp - 2]
00013C3D: pop di
00013C3E: pop si
00013C3F: pop es
00013C40: pop ds
00013C41: mov sp, bp
00013C43: pop bp
00013C44: retf 8
00013C47: push bp
00013C48: mov bp, sp
00013C4A: sub sp, 2
00013C4D: push ds
00013C4E: push es
00013C4F: push si
00013C50: push di
00013C51: mov ax, 0x1ab5
00013C54: mov ds, ax
00013C56: mov si, 0x6cda
00013C59: les di, ptr [bp + 6]
00013C5C: mov ax, word ptr [si + 4]
00013C5F: mov word ptr es:[di], ax
00013C62: mov ax, word ptr [si + 6]
00013C65: mov word ptr es:[di + 2], ax
00013C69: mov word ptr [bp - 2], 0
00013C6E: mov ax, word ptr [bp - 2]
00013C71: pop di
00013C72: pop si
00013C73: pop es
00013C74: pop ds
00013C75: mov sp, bp
00013C77: pop bp
00013C78: retf 4
00013C7B: push bp
00013C7C: mov bp, sp
00013C7E: sub sp, 2
00013C81: push ds
00013C82: push es
00013C83: push si
00013C84: push di
00013C85: mov ax, 0x1ab5
00013C88: mov ds, ax
00013C8A: mov ax, 0x1ab5
00013C8D: mov es, ax
00013C8F: mov di, 0x6cda
00013C92: lds si, ptr [bp + 6]
00013C95: cmp word ptr [si], 0xca00
00013C99: je 0x13ca2
00013C9B: mov word ptr [bp - 2], 0xffe4
00013CA0: jmp 0x13ccb
00013CA2: mov al, byte ptr [si + 0x12]
00013CA5: mov bl, byte ptr [si + 0x13]
00013CA8: mul bl
00013CAA: cmp ax, 2
00013CAD: jbe 0x13cb7
00013CAF: shr ax, 1
00013CB1: cmp ax, 4
00013CB4: je 0x13cb7
00013CB6: inc ax
00013CB7: dec ax
00013CB8: mov word ptr es:[di + 2], ax
00013CBC: mov ax, ds
00013CBE: mov word ptr es:[di + 6], ax
00013CC2: mov word ptr es:[di + 4], si
00013CC6: mov word ptr [bp - 2], 0
00013CCB: mov ax, word ptr [bp - 2]
00013CCE: pop di
00013CCF: pop si
00013CD0: pop es
00013CD1: pop ds
00013CD2: mov sp, bp
00013CD4: pop bp
00013CD5: retf 4
00013CD8: push bp
00013CD9: mov bp, sp
00013CDB: sub sp, 2
00013CDE: push ds
00013CDF: push es
00013CE0: push si
00013CE1: push di
00013CE2: mov ax, 0x1ab5
00013CE5: mov ds, ax
00013CE7: mov si, 0x6cda
00013CEA: mov ax, word ptr [si]
00013CEC: mov word ptr [bp - 2], ax
00013CEF: mov ax, word ptr [bp - 2]
00013CF2: pop di
00013CF3: pop si
00013CF4: pop es
00013CF5: pop ds
00013CF6: mov sp, bp
00013CF8: pop bp
00013CF9: retf 
00013CFA: push bp
00013CFB: mov bp, sp
00013CFD: sub sp, 2
00013D00: push ds
00013D01: push es
00013D02: push si
00013D03: push di
00013D04: mov ax, 0x1ab5
00013D07: mov ds, ax
00013D09: mov si, 0x6cda
00013D0C: mov ax, word ptr [bp + 6]
00013D0F: cmp ax, 1
00013D12: je 0x13d1d
00013D14: mov word ptr [si], 0
00013D18: mov word ptr [bp - 2], 0
00013D1D: les di, ptr [si + 4]
00013D20: cmp word ptr es:[di], 0xca00
00013D25: je 0x13d2e
00013D27: mov word ptr [bp - 2], 0xffe4
00013D2C: jmp 0x13d35
00013D2E: mov word ptr [si], ax
00013D30: mov word ptr [bp - 2], 0
00013D35: mov ax, word ptr [bp - 2]
00013D38: pop di
00013D39: pop si
00013D3A: pop es
00013D3B: pop ds
00013D3C: mov sp, bp
00013D3E: pop bp
00013D3F: retf 2
00013D42: push bp
00013D43: mov bp, sp
00013D45: sub sp, 2
00013D48: push ds
00013D49: push es
00013D4A: push si
00013D4B: push di
00013D4C: mov ax, 0x1ab5
00013D4F: mov ds, ax
00013D51: mov si, 0x6cda
00013D54: les di, ptr [bp + 0x12]
00013D57: mov ax, word ptr [si + 0x34]
00013D5A: mov word ptr es:[di], ax
00013D5D: les di, ptr [bp + 0xe]
00013D60: mov ax, word ptr [si + 0x36]
00013D63: mov word ptr es:[di], ax
00013D66: les di, ptr [bp + 0xa]
00013D69: mov ax, word ptr [si + 0x38]
00013D6C: mov word ptr es:[di], ax
00013D6F: les di, ptr [bp + 6]
00013D72: mov ax, word ptr [si + 0x3a]
00013D75: mov word ptr es:[di], ax
00013D78: mov word ptr [bp - 2], 0
00013D7D: mov ax, word ptr [bp - 2]
00013D80: pop di
00013D81: pop si
00013D82: pop es
00013D83: pop ds
00013D84: mov sp, bp
00013D86: pop bp
00013D87: retf 0x10
00013D8A: push bp
00013D8B: mov bp, sp
00013D8D: sub sp, 2
00013D90: push ds
00013D91: push es
00013D92: push si
00013D93: push di
00013D94: mov ax, 0x1ab5
00013D97: mov ds, ax
00013D99: mov si, 0x6cda
00013D9C: mov ax, word ptr [bp + 0xc]
00013D9F: mov word ptr [si + 0x34], ax
00013DA2: mov word ptr [si + 0x30], ax
00013DA5: mov ax, word ptr [bp + 0xa]
00013DA8: mov word ptr [si + 0x36], ax
00013DAB: mov word ptr [si + 0x32], ax
00013DAE: mov ax, word ptr [bp + 8]
00013DB1: mov word ptr [si + 0x38], ax
00013DB4: mov ax, word ptr [bp + 6]
00013DB7: mov word ptr [si + 0x3a], ax
00013DBA: xor ax, ax
00013DBC: mov word ptr [si + 0x2c], ax
00013DBF: mov word ptr [si + 0x2e], ax
00013DC2: mov word ptr [bp - 2], 0
00013DC7: mov ax, word ptr [bp - 2]
00013DCA: pop di
00013DCB: pop si
00013DCC: pop es
00013DCD: pop ds
00013DCE: mov sp, bp
00013DD0: pop bp
00013DD1: retf 8
00013DD4: push bp
00013DD5: mov bp, sp
00013DD7: sub sp, 4
00013DDA: push ds
00013DDB: push es
00013DDC: push si
00013DDD: push di
00013DDE: mov ax, 0x1ab5
00013DE1: mov ds, ax
00013DE3: mov si, 0x6cda
00013DE6: mov ax, word ptr [si + 0x3c]
00013DE9: mov word ptr [bp - 4], ax
00013DEC: mov word ptr [si + 0x3c], 0
00013DF1: xor ax, ax
00013DF3: push ax
00013DF4: push ax
00013DF5: mov ax, word ptr [si + 0x38]
00013DF8: sub ax, word ptr [si + 0x34]
00013DFB: push ax
00013DFC: mov ax, word ptr [si + 0x3a]
00013DFF: sub ax, word ptr [si + 0x36]
00013E02: push ax
00013E03: lcall 0xbd7, 8
00013E08: mov word ptr [bp - 2], ax
00013E0B: mov ax, word ptr [bp - 4]
00013E0E: mov word ptr [si + 0x3c], ax
00013E11: mov ax, word ptr [bp - 2]
00013E14: pop di
00013E15: pop si
00013E16: pop es
00013E17: pop ds
00013E18: mov sp, bp
00013E1A: pop bp
00013E1B: retf 
00013E1C: push bp
00013E1D: mov bp, sp
00013E1F: sub sp, 2
00013E22: push ds
00013E23: push es
00013E24: push si
00013E25: push di
00013E26: mov ax, 0x1ab5
00013E29: mov ds, ax
00013E2B: mov ax, word ptr [bp + 6]
00013E2E: cmp ax, 1
00013E31: je 0x13e36
00013E33: mov ax, 0
00013E36: mov si, 0x6cda
00013E39: mov word ptr [si + 0x3c], ax
00013E3C: mov word ptr [bp - 2], 0
00013E41: mov ax, word ptr [bp - 2]
00013E44: pop di
00013E45: pop si
00013E46: pop es
00013E47: pop ds
00013E48: mov sp, bp
00013E4A: pop bp
00013E4B: retf 2
00013E4E: push bp
00013E4F: mov bp, sp
00013E51: sub sp, 2
00013E54: push ds
00013E55: push es
00013E56: push si
00013E57: push di
00013E58: mov ax, 0x1ab5
00013E5B: mov ds, ax
00013E5D: mov si, 0x6cda
00013E60: mov ax, word ptr [si + 0x3c]
00013E63: mov word ptr [bp - 2], ax
00013E66: mov ax, word ptr [bp - 2]
00013E69: pop di
00013E6A: pop si
00013E6B: pop es
00013E6C: pop ds
00013E6D: mov sp, bp
00013E6F: pop bp
00013E70: retf 
00013E71: push bp
00013E72: mov bp, sp
00013E74: sub sp, 2
00013E77: push ds
00013E78: push es
00013E79: push si
00013E7A: push di
00013E7B: mov ax, 0x1ab5
00013E7E: mov ds, ax
00013E80: mov si, 0x6cda
00013E83: les di, ptr [bp + 0x12]
00013E86: mov ax, word ptr [si + 0x3e]
00013E89: add ax, 0x8000
00013E8C: mov word ptr es:[di], ax
00013E8F: les di, ptr [bp + 0xe]
00013E92: mov ax, word ptr [si + 0x40]
00013E95: add ax, 0x8000
00013E98: mov word ptr es:[di], ax
00013E9B: les di, ptr [bp + 0xa]
00013E9E: mov ax, word ptr [si + 0x42]
00013EA1: add ax, 0x8000
00013EA4: mov word ptr es:[di], ax
00013EA7: les di, ptr [bp + 6]
00013EAA: mov ax, word ptr [si + 0x44]
00013EAD: add ax, 0x8000
00013EB0: mov word ptr es:[di], ax
00013EB3: mov word ptr [bp - 2], 0
00013EB8: mov ax, word ptr [bp - 2]
00013EBB: pop di
00013EBC: pop si
00013EBD: pop es
00013EBE: pop ds
00013EBF: mov sp, bp
00013EC1: pop bp
00013EC2: retf 0x10
00013EC5: push bp
00013EC6: mov bp, sp
00013EC8: sub sp, 2
00013ECB: push ds
00013ECC: push es
00013ECD: push si
00013ECE: push di
00013ECF: mov ax, 0x1ab5
00013ED2: mov ds, ax
00013ED4: mov si, 0x6cda
00013ED7: mov ax, word ptr [bp + 8]
00013EDA: cmp ax, word ptr [bp + 0xc]
00013EDD: jle 0x13ee7
00013EDF: mov ax, word ptr [bp + 6]
00013EE2: cmp ax, word ptr [bp + 0xa]
00013EE5: jg 0x13eee
00013EE7: mov word ptr [bp - 2], 0xffe5
00013EEC: jmp 0x13f4f
00013EEE: mov ax, word ptr [bp + 0xc]
00013EF1: sub ax, 0x8000
00013EF4: mov word ptr [si + 0x3e], ax
00013EF7: mov ax, word ptr [bp + 0xa]
00013EFA: sub ax, 0x8000
00013EFD: mov word ptr [si + 0x40], ax
00013F00: mov ax, word ptr [bp + 8]
00013F03: sub ax, 0x8000
00013F06: mov word ptr [si + 0x42], ax
00013F09: mov ax, word ptr [bp + 6]
00013F0C: sub ax, 0x8000
00013F0F: mov word ptr [si + 0x44], ax
00013F12: mov ax, word ptr [si + 0x38]
00013F15: sub ax, word ptr [si + 0x34]
00013F18: mov bx, 0x2710
00013F1B: imul bx
00013F1D: mov bx, word ptr [bp + 8]
00013F20: sub bx, word ptr [bp + 0xc]
00013F23: lcall 0x7ff, 0x32
00013F28: mov word ptr [si + 0x46], ax
00013F2B: mov word ptr [si + 0x48], dx
00013F2E: mov ax, word ptr [si + 0x3a]
00013F31: sub ax, word ptr [si + 0x36]
00013F34: mov bx, 0x2710
00013F37: imul bx
00013F39: mov bx, word ptr [bp + 6]
00013F3C: sub bx, word ptr [bp + 0xa]
00013F3F: lcall 0x7ff, 0x32
00013F44: mov word ptr [si + 0x4a], ax
00013F47: mov word ptr [si + 0x4c], dx
00013F4A: mov word ptr [bp - 2], 0
00013F4F: mov ax, word ptr [bp - 2]
00013F52: pop di
00013F53: pop si
00013F54: pop es
00013F55: pop ds
00013F56: mov sp, bp
00013F58: pop bp
00013F59: retf 8
00013F5C: push bp
00013F5D: mov bp, sp
00013F5F: sub sp, 2
00013F62: push ds
00013F63: push es
00013F64: push si
00013F65: push di
00013F66: mov ax, 0x1ab5
00013F69: mov ds, ax
00013F6B: mov si, 0x6cda
00013F6E: mov dx, word ptr [si + 0x48]
00013F71: mov ax, word ptr [si + 0x46]
00013F74: mov bx, word ptr [bp + 6]
00013F77: sub bx, 0x8000
00013F7B: mov cx, word ptr [si + 0x3e]
00013F7E: xor si, si
00013F80: cmp cx, bx
00013F82: jbe 0x13f87
00013F84: xchg cx, bx
00013F86: dec si
00013F87: sub bx, cx
00013F89: lcall 0x7ff, 8
00013F8E: mov bx, 0x2710
00013F91: lcall 0x7ff, 0x32
00013F96: or si, si
00013F98: je 0x13f9c
00013F9A: neg ax
00013F9C: mov word ptr [bp - 2], ax
00013F9F: mov ax, word ptr [bp - 2]
00013FA2: pop di
00013FA3: pop si
00013FA4: pop es
00013FA5: pop ds
00013FA6: mov sp, bp
00013FA8: pop bp
00013FA9: retf 2
00013FAC: push bp
00013FAD: mov bp, sp
00013FAF: sub sp, 2
00013FB2: push ds
00013FB3: push es
00013FB4: push si
00013FB5: push di
00013FB6: mov ax, 0x1ab5
00013FB9: mov ds, ax
00013FBB: mov si, 0x6cda
00013FBE: mov dx, word ptr [si + 0x4c]
00013FC1: mov ax, word ptr [si + 0x4a]
00013FC4: mov bx, word ptr [bp + 6]
00013FC7: sub bx, 0x8000
00013FCB: mov cx, word ptr [si + 0x40]
00013FCE: xor di, di
00013FD0: cmp cx, bx
00013FD2: jbe 0x13fd7
00013FD4: xchg cx, bx
00013FD6: dec di
00013FD7: sub bx, cx
00013FD9: lcall 0x7ff, 8
00013FDE: mov bx, 0x2710
00013FE1: lcall 0x7ff, 0x32
00013FE6: or di, di
00013FE8: je 0x13fec
00013FEA: neg ax
00013FEC: cmp byte ptr [si + 0x4e], 0
00013FF0: je 0x13ffc
00013FF2: mov cx, word ptr [si + 0x3a]
00013FF5: sub cx, word ptr [si + 0x36]
00013FF8: sub cx, ax
00013FFA: mov ax, cx
00013FFC: sub ax, word ptr [si + 0x2e]
00013FFF: mov word ptr [bp - 2], ax
00014002: mov ax, word ptr [bp - 2]
00014005: pop di
00014006: pop si
00014007: pop es
00014008: pop ds
00014009: mov sp, bp
0001400B: pop bp
0001400C: retf 2
0001400F: push bp
00014010: mov bp, sp
00014012: sub sp, 2
00014015: push ds
00014016: push es
00014017: push si
00014018: push di
00014019: mov ax, 0x1ab5
0001401C: mov ds, ax
0001401E: mov si, 0x6cda
00014021: mov dx, word ptr [si + 0x4c]
00014024: mov ax, word ptr [si + 0x4a]
00014027: mov bx, word ptr [bp + 6]
0001402A: lcall 0x7ff, 8
0001402F: mov bx, 0x2710
00014032: lcall 0x7ff, 0x32
00014037: mov word ptr [bp - 2], ax
0001403A: mov ax, word ptr [bp - 2]
0001403D: pop di
0001403E: pop si
0001403F: pop es
00014040: pop ds
00014041: mov sp, bp
00014043: pop bp
00014044: retf 2
00014047: push bp
00014048: mov bp, sp
0001404A: sub sp, 2
0001404D: push ds
0001404E: push es
0001404F: push si
00014050: push di
00014051: mov ax, 0x1ab5
00014054: mov ds, ax
00014056: mov si, 0x6cda
00014059: mov ax, word ptr [bp + 6]
0001405C: cdq 
0001405D: mov bx, 0x2710
00014060: lcall 0x7ff, 0x1a
00014065: mov cx, word ptr [si + 0x48]
00014068: mov bx, word ptr [si + 0x46]
0001406B: lcall 0x7ff, 0x50
00014070: add ax, word ptr [si + 0x3e]
00014073: add ax, 0x8000
00014076: mov word ptr [bp - 2], ax
00014079: mov ax, word ptr [bp - 2]
0001407C: pop di
0001407D: pop si
0001407E: pop es
0001407F: pop ds
00014080: mov sp, bp
00014082: pop bp
00014083: retf 2
00014086: push bp
00014087: mov bp, sp
00014089: sub sp, 2
0001408C: push ds
0001408D: push es
0001408E: push si
0001408F: push di
00014090: mov ax, 0x1ab5
00014093: mov ds, ax
00014095: mov si, 0x6cda
00014098: mov ax, word ptr [bp + 6]
0001409B: cmp byte ptr [si + 0x4e], 0
0001409F: je 0x140ab
000140A1: mov bx, word ptr [si + 0x3a]
000140A4: sub bx, word ptr [si + 0x36]
000140A7: sub bx, ax
000140A9: mov ax, bx
000140AB: add ax, word ptr [si + 0x2e]
000140AE: cdq 
000140AF: mov bx, 0x2710
000140B2: lcall 0x7ff, 0x1a
000140B7: mov cx, word ptr [si + 0x4c]
000140BA: mov bx, word ptr [si + 0x4a]
000140BD: lcall 0x7ff, 0x50
000140C2: add ax, word ptr [si + 0x40]
000140C5: add ax, 0x8000
000140C8: mov word ptr [bp - 2], ax
000140CB: mov ax, word ptr [bp - 2]
000140CE: pop di
000140CF: pop si
000140D0: pop es
000140D1: pop ds
000140D2: mov sp, bp
000140D4: pop bp
000140D5: retf 2
000140D8: push bp
000140D9: mov bp, sp
000140DB: sub sp, 2
000140DE: push ds
000140DF: push es
000140E0: push si
000140E1: push di
000140E2: mov ax, 0x1ab5
000140E5: mov ds, ax
000140E7: mov si, 0x6cda
000140EA: mov ax, word ptr [bp + 8]
000140ED: mov bx, word ptr [bp + 6]
000140F0: mov word ptr [si + 0x2c], ax
000140F3: mov word ptr [si + 0x2e], bx
000140F6: add ax, word ptr [si + 0x34]
000140F9: add bx, word ptr [si + 0x36]
000140FC: mov word ptr [si + 0x30], ax
000140FF: mov word ptr [si + 0x32], bx
00014102: mov word ptr [bp - 2], 0
00014107: mov ax, word ptr [bp - 2]
0001410A: pop di
0001410B: pop si
0001410C: pop es
0001410D: pop ds
0001410E: mov sp, bp
00014110: pop bp
00014111: retf 4
00014114: push bp
00014115: mov bp, sp
00014117: sub sp, 2
0001411A: push ds
0001411B: push es
0001411C: push si
0001411D: push di
0001411E: mov ax, 0x1ab5
00014121: mov ds, ax
00014123: mov si, 0x6cda
00014126: mov ax, word ptr [si + 0x2c]
00014129: les di, ptr [bp + 0xa]
0001412C: mov word ptr es:[di], ax
0001412F: mov ax, word ptr [si + 0x2e]
00014132: les di, ptr [bp + 6]
00014135: mov word ptr es:[di], ax
00014138: mov word ptr [bp - 2], 0
0001413D: mov ax, word ptr [bp - 2]
00014140: pop di
00014141: pop si
00014142: pop es
00014143: pop ds
00014144: mov sp, bp
00014146: pop bp
00014147: retf 8
0001414A: push bp
0001414B: mov bp, sp
0001414D: sub sp, 2
00014150: push ds
00014151: push es
00014152: push si
00014153: push di
00014154: mov ax, 0x1ab5
00014157: mov ds, ax
00014159: mov si, 0x6cda
0001415C: mov ax, word ptr [bp + 6]
0001415F: cmp ax, 0
00014162: je 0x14167
00014164: mov ax, 1
00014167: mov word ptr [si + 0x4e], ax
0001416A: mov word ptr [bp - 2], 0
0001416F: mov ax, word ptr [bp - 2]
00014172: pop di
00014173: pop si
00014174: pop es
00014175: pop ds
00014176: mov sp, bp
00014178: pop bp
00014179: retf 2
0001417C: push bp
0001417D: mov bp, sp
0001417F: sub sp, 2
00014182: push ds
00014183: push es
00014184: push si
00014185: push di
00014186: mov ax, 0x1ab5
00014189: mov ds, ax
0001418B: mov si, 0x6cda
0001418E: mov ax, word ptr [si + 0x4e]
00014191: mov word ptr [bp - 2], ax
00014194: mov ax, word ptr [bp - 2]
00014197: pop di
00014198: pop si
00014199: pop es
0001419A: pop ds
0001419B: mov sp, bp
0001419D: pop bp
0001419E: retf 
0001419F: add byte ptr [di - 0x75], dl
000141A2: in al, dx
000141A3: sub sp, 0x22
000141A6: push ds
000141A7: push es
000141A8: push si
000141A9: push di
000141AA: mov ax, 0x1ab5
000141AD: mov ds, ax
000141AF: cmp byte ptr [0x6f01], 1
000141B4: je 0x141ba
000141B6: push cs
000141B7: call 0x14286
000141BA: mov ax, word ptr [0x54d4]
000141BD: mov word ptr [bp - 4], ax
000141C0: lds si, ptr [bp + 0xe]
000141C3: mov word ptr [bp - 8], si
000141C6: mov bx, word ptr [bp + 0xc]
000141C9: add bx, word ptr [bp - 8]
000141CC: dec bx
000141CD: mov word ptr [bp - 0xa], bx
000141D0: mov al, byte ptr [si]
000141D2: cmp al, 0xa
000141D4: je 0x141de
000141D6: mov word ptr [bp - 2], 0xf448
000141DB: jmp 0x14279
000141DE: lcall 0x98e, 0x35e
000141E3: or ax, ax
000141E5: jge 0x141ed
000141E7: mov word ptr [bp - 2], ax
000141EA: jmp 0x14279
000141ED: mov word ptr [bp - 0x22], ax
000141F0: cmp ax, 0x28
000141F3: jbe 0x141fc
000141F5: mov word ptr [bp - 2], 0xfc7c
000141FA: jmp 0x14279
000141FC: push ax
000141FD: lcall 0x98e, 0x12a
00014202: jae 0x1420b
00014204: mov word ptr [bp - 2], 0xfc19
00014209: jmp 0x14279
0001420B: mov es, dx
0001420D: mov di, ax
0001420F: cmp word ptr [bp - 4], 1
00014213: jne 0x1422d
00014215: cmp byte ptr es:[di], 9
00014219: je 0x1422d
0001421B: lcall 0x98e, 0x18a
00014220: cmp al, byte ptr es:[di + 0x16]
00014224: je 0x1422d
00014226: mov word ptr [bp - 2], 0xfff9
0001422B: jmp 0x14279
0001422D: mov al, byte ptr [si + 0x41]
00014230: cmp al, byte ptr es:[di + 0x1e]
00014234: jbe 0x1423d
00014236: mov word ptr [bp - 2], 0xfffa
0001423B: jmp 0x14279
0001423D: mov al, byte ptr [si + 3]
00014240: cmp al, byte ptr es:[di + 0x17]
00014244: je 0x1424d
00014246: mov word ptr [bp - 2], 0xfffa
0001424B: jmp 0x14279
0001424D: mov ax, word ptr [si + 0x42]
00014250: mov word ptr [bp - 0x14], ax
00014253: push word ptr [bp - 0x22]
00014256: lcall 0x98e, 0xa6
0001425B: or ax, ax
0001425D: jge 0x14266
0001425F: mov word ptr [bp - 2], 0xfc19
00014264: jmp 0x14279
00014266: mov bx, ax
00014268: shl bx, 1
0001426A: push ds
0001426B: mov ax, 0x1ab5
0001426E: mov ds, ax
00014270: add bx, 0x6ec0
00014274: mov bx, word ptr [bx]
00014276: pop ds
00014277: jmp bx
00014279: mov ax, word ptr [bp - 2]
0001427C: pop di
0001427D: pop si
0001427E: pop es
0001427F: pop ds
00014280: mov sp, bp
00014282: pop bp
00014283: retf 0xc
00014286: mov bx, 0x6ec0
00014289: mov word ptr [bx], 0x166
0001428D: add bx, 2
00014290: mov word ptr [bx], 0x166
00014294: add bx, 2
00014297: mov word ptr [bx], 0x27b
0001429B: add bx, 2
0001429E: mov word ptr [bx], 0x27b
000142A2: add bx, 2
000142A5: mov word ptr [bx], 0x27b
000142A9: add bx, 2
000142AC: mov word ptr [bx], 0x27b
000142B0: add bx, 2
000142B3: mov word ptr [bx], 0x27b
000142B7: add bx, 2
000142BA: mov word ptr [bx], 0x27b
000142BE: add bx, 2
000142C1: mov word ptr [bx], 0x402
000142C5: add bx, 2
000142C8: mov word ptr [bx], 0x4b1
000142CC: add bx, 2
000142CF: mov word ptr [bx], 0x5c6
000142D3: add bx, 2
000142D6: mov word ptr [bx], 0x27b
000142DA: add bx, 2
000142DD: mov word ptr [bx], 0x5c6
000142E1: add bx, 2
000142E4: mov word ptr [bx], 0x5c6
000142E8: add bx, 2
000142EB: mov word ptr [bx], 0x27b
000142EF: add bx, 2
000142F2: mov word ptr [bx], 0x5c6
000142F6: add bx, 2
000142F9: mov word ptr [bx], 0x5c6
000142FD: add bx, 2
00014300: mov byte ptr [0x6f01], 1
00014305: retf 
00014306: mov ax, word ptr [si + 8]
00014309: sub ax, word ptr [si + 4]
0001430C: inc ax
0001430D: mov bx, word ptr [bp + 0xa]
00014310: add bx, ax
00014312: cmp bx, word ptr es:[di + 0x18]
00014316: jbe 0x1431f
00014318: mov ax, word ptr es:[di + 0x18]
0001431C: sub ax, word ptr [bp + 0xa]
0001431F: mov bl, byte ptr [si + 3]
00014322: xor bh, bh
00014324: mul bx
00014326: mov bl, 8
00014328: div bl
0001432A: mov cl, ah
0001432C: xor ah, ah
0001432E: mov word ptr [bp - 0x10], ax
00014331: dec word ptr [bp - 0x10]
00014334: mov word ptr [bp - 0xe], 0
00014339: or cl, cl
0001433B: je 0x1434e
0001433D: mov word ptr [bp - 0xe], 1
00014342: mov al, 0x80
00014344: dec cl
00014346: sar al, cl
00014348: mov byte ptr [bp - 0xc], al
0001434B: inc word ptr [bp - 0x10]
0001434E: mov ax, word ptr [si + 0xa]
00014351: sub ax, word ptr [si + 6]
00014354: inc ax
00014355: mov bx, word ptr [bp + 8]
00014358: add bx, ax
0001435A: cmp bx, word ptr es:[di + 0x1a]
0001435E: jbe 0x14367
00014360: mov ax, word ptr es:[di + 0x1a]
00014364: sub ax, word ptr [bp + 8]
00014367: mov word ptr [bp - 0x12], ax
0001436A: mov bx, word ptr [bp + 0xa]
0001436D: mov ax, word ptr [bp + 8]
00014370: lcall es:[di + 0x26]
00014374: mov di, bx
00014376: xor bx, bx
00014378: mov dx, word ptr [bp + 8]
0001437B: and dx, 1
0001437E: mov word ptr [bp - 6], dx
00014381: mov ax, 0x2000
00014384: sub ax, word ptr [si + 0x42]
00014387: mov word ptr [bp - 4], ax
0001438A: add si, 0x80
0001438E: cld 
0001438F: xor ch, ch
00014391: mov cl, 1
00014393: lodsb al, byte ptr [si]
00014394: mov ah, al
00014396: and ah, 0xc0
00014399: cmp ah, 0xc0
0001439C: jne 0x143a8
0001439E: mov cl, al
000143A0: sub cl, 0xc0
000143A3: lodsb al, byte ptr [si]
000143A4: or cx, cx
000143A6: je 0x1438f
000143A8: cmp bx, word ptr [bp - 0x10]
000143AB: jb 0x143ca
000143AD: ja 0x143cd
000143AF: cmp word ptr [bp - 0xe], 1
000143B3: jne 0x143ca
000143B5: push ax
000143B6: mov ah, byte ptr es:[di]
000143B9: or ah, byte ptr [bp - 0xc]
000143BC: sub ah, byte ptr [bp - 0xc]
000143BF: and al, byte ptr [bp - 0xc]
000143C2: or al, ah
000143C4: mov byte ptr es:[di], al
000143C7: pop ax
000143C8: jmp 0x143cd
000143CA: mov byte ptr es:[di], al
000143CD: inc di
000143CE: inc bx
000143CF: cmp bx, word ptr [bp - 0x14]
000143D2: jne 0x143ef
000143D4: xor bx, bx
000143D6: dec word ptr [bp - 0x12]
000143D9: je 0x14409
000143DB: xor dx, 1
000143DE: cmp dx, 1
000143E1: jne 0x143e8
000143E3: add di, word ptr [bp - 4]
000143E6: jmp 0x143ef
000143E8: sub di, 0x1fb0
000143EC: sub di, word ptr [bp - 0x14]
000143EF: loop 0x143a8
000143F1: cmp si, word ptr [bp - 0xa]
000143F4: jbe 0x14407
000143F6: push si
000143F7: lcall 0x96b, 0xa0
000143FC: mov si, ax
000143FE: jae 0x14407
00014400: mov word ptr [bp - 2], 0xfffd
00014405: jmp 0x1440e
00014407: jmp 0x1438f
00014409: mov word ptr [bp - 2], 0
0001440E: mov ax, word ptr [bp - 2]
00014411: pop di
00014412: pop si
00014413: pop es
00014414: pop ds
00014415: mov sp, bp
00014417: pop bp
00014418: retf 0xc
0001441B: mov ax, word ptr es:[di + 0x18]
0001441F: mov cl, 3
00014421: shr ax, cl
00014423: mov word ptr [bp - 0x16], ax
00014426: mov word ptr [bp - 0xe], 0
0001442B: mov ax, word ptr [si + 8]
0001442E: sub ax, word ptr [si + 4]
00014431: inc ax
00014432: mov bx, word ptr [bp + 0xa]
00014435: add bx, ax
00014437: dec bx
00014438: cmp bx, word ptr es:[di + 0x18]
0001443C: jb 0x1444c
0001443E: mov ax, word ptr es:[di + 0x18]
00014442: sub ax, word ptr [bp + 0xa]
00014445: test al, 7
00014447: je 0x1444c
00014449: inc ax
0001444A: and al, 0xf8
0001444C: mov bl, byte ptr [si + 3]
0001444F: xor bh, bh
00014451: mul bx
00014453: mov bl, 8
00014455: div bl
00014457: mov cl, ah
00014459: xor ah, ah
0001445B: mov word ptr [bp - 0x10], ax
0001445E: dec word ptr [bp - 0x10]
00014461: or cl, cl
00014463: je 0x14476
00014465: mov word ptr [bp - 0xe], 1
0001446A: mov al, 0x80
0001446C: dec cl
0001446E: sar al, cl
00014470: mov byte ptr [bp - 0xc], al
00014473: inc word ptr [bp - 0x10]
00014476: mov ax, word ptr [si + 0xa]
00014479: sub ax, word ptr [si + 6]
0001447C: inc ax
0001447D: mov bx, word ptr [bp + 8]
00014480: add bx, ax
00014482: cmp bx, word ptr es:[di + 0x1a]
00014486: jbe 0x1448f
00014488: mov ax, word ptr es:[di + 0x1a]
0001448C: sub ax, word ptr [bp + 8]
0001448F: mov word ptr [bp - 0x12], ax
00014492: mov al, 5
00014494: mov ah, 0
00014496: mov dx, 0x3ce
00014499: out dx, ax
0001449A: mov al, 8
0001449C: mov ah, 0xff
0001449E: mov dx, 0x3ce
000144A1: out dx, ax
000144A2: mov byte ptr [bp - 0x18], 1
000144A6: mov al, 2
000144A8: mov ah, byte ptr [bp - 0x18]
000144AB: mov dx, 0x3c4
000144AE: out dx, ax
000144AF: mov word ptr [bp - 0x1c], 1
000144B4: mov word ptr [bp - 0x1a], 8
000144B9: cmp byte ptr [si + 0x41], 3
000144BD: jne 0x144c4
000144BF: mov word ptr [bp - 0x1a], 4
000144C4: cmp byte ptr [si + 0x41], 1
000144C8: jne 0x144dc
000144CA: mov word ptr [bp - 0x1c], 0xf
000144CF: mov word ptr [bp - 0x1a], 1
000144D4: mov al, 2
000144D6: mov ah, 0xf
000144D8: mov dx, 0x3c4
000144DB: out dx, ax
000144DC: mov ax, word ptr es:[di + 0x22]
000144E0: mov bx, word ptr [bp + 6]
000144E3: mul bx
000144E5: push ax
000144E6: mov bx, word ptr [bp + 0xa]
000144E9: mov ax, word ptr [bp + 8]
000144EC: lcall es:[di + 0x26]
000144F0: pop ax
000144F1: add ax, bx
000144F3: mov di, ax
000144F5: xor bx, bx
000144F7: add si, 0x80
000144FB: cld 
000144FC: mov cx, 1
000144FF: lodsb al, byte ptr [si]
00014500: mov ah, al
00014502: and ah, 0xc0
00014505: cmp ah, 0xc0
00014508: jne 0x14514
0001450A: mov cl, al
0001450C: sub cl, 0xc0
0001450F: lodsb al, byte ptr [si]
00014510: or cx, cx
00014512: je 0x144fc
00014514: cmp bx, word ptr [bp - 0x10]
00014517: jb 0x1453e
00014519: ja 0x14541
0001451B: cmp word ptr [bp - 0xe], 1
0001451F: jne 0x1453e
00014521: push ax
00014522: mov al, 8
00014524: mov ah, byte ptr [bp - 0xc]
00014527: mov dx, 0x3ce
0001452A: out dx, ax
0001452B: mov al, byte ptr es:[bx + di]
0001452E: pop ax
0001452F: mov byte ptr es:[bx + di], al
00014532: push ax
00014533: mov al, 8
00014535: mov ah, 0xff
00014537: mov dx, 0x3ce
0001453A: out dx, ax
0001453B: pop ax
0001453C: jmp 0x14541
0001453E: mov byte ptr es:[bx + di], al
00014541: inc bx
00014542: cmp bx, word ptr [bp - 0x14]
00014545: jne 0x1456d
00014547: xor bx, bx
00014549: mov dx, word ptr [bp - 0x1a]
0001454C: shl byte ptr [bp - 0x18], 1
0001454F: cmp byte ptr [bp - 0x18], dl
00014552: jbe 0x14562
00014554: mov dx, word ptr [bp - 0x1c]
00014557: mov byte ptr [bp - 0x18], dl
0001455A: add di, word ptr [bp - 0x16]
0001455D: dec word ptr [bp - 0x12]
00014560: je 0x14588
00014562: push ax
00014563: mov al, 2
00014565: mov ah, byte ptr [bp - 0x18]
00014568: mov dx, 0x3c4
0001456B: out dx, ax
0001456C: pop ax
0001456D: loop 0x14514
0001456F: cmp si, word ptr [bp - 0xa]
00014572: jbe 0x14585
00014574: push si
00014575: lcall 0x96b, 0xa0
0001457A: mov si, ax
0001457C: jae 0x14585
0001457E: mov word ptr [bp - 2], 0xfffd
00014583: jmp 0x14595
00014585: jmp 0x144fc
00014588: mov al, 2
0001458A: mov ah, 0xff
0001458C: mov dx, 0x3c4
0001458F: out dx, ax
00014590: mov word ptr [bp - 2], 0
00014595: mov ax, word ptr [bp - 2]
00014598: pop di
00014599: pop si
0001459A: pop es
0001459B: pop ds
0001459C: mov sp, bp
0001459E: pop bp
0001459F: retf 0xc
000145A2: mov ax, word ptr es:[di + 0x18]
000145A6: mov word ptr [bp - 0x16], ax
000145A9: mov ax, word ptr [si + 8]
000145AC: sub ax, word ptr [si + 4]
000145AF: inc ax
000145B0: mov bx, word ptr [bp + 0xa]
000145B3: add bx, ax
000145B5: cmp bx, word ptr es:[di + 0x18]
000145B9: jbe 0x145c2
000145BB: mov ax, word ptr es:[di + 0x18]
000145BF: sub ax, word ptr [bp + 0xa]
000145C2: dec ax
000145C3: mov word ptr [bp - 0x10], ax
000145C6: mov ax, word ptr [si + 0xa]
000145C9: sub ax, word ptr [si + 6]
000145CC: inc ax
000145CD: mov bx, word ptr [bp + 8]
000145D0: add bx, ax
000145D2: cmp bx, word ptr es:[di + 0x1a]
000145D6: jbe 0x145df
000145D8: mov ax, word ptr es:[di + 0x1a]
000145DC: sub ax, word ptr [bp + 8]
000145DF: mov word ptr [bp - 0x12], ax
000145E2: mov bx, word ptr [bp + 0xa]
000145E5: mov ax, word ptr [bp + 8]
000145E8: lcall es:[di + 0x26]
000145EC: mov di, bx
000145EE: xor bx, bx
000145F0: add si, 0x80
000145F4: cld 
000145F5: mov cx, 1
000145F8: lodsb al, byte ptr [si]
000145F9: mov ah, al
000145FB: and ah, 0xc0
000145FE: cmp ah, 0xc0
00014601: jne 0x1460d
00014603: mov cl, al
00014605: sub cl, 0xc0
00014608: lodsb al, byte ptr [si]
00014609: or cx, cx
0001460B: je 0x145f5
0001460D: cmp bx, word ptr [bp - 0x10]
00014610: ja 0x14615
00014612: mov byte ptr es:[bx + di], al
00014615: inc bx
00014616: cmp bx, word ptr [bp - 0x14]
00014619: jne 0x14625
0001461B: xor bx, bx
0001461D: add di, word ptr [bp - 0x16]
00014620: dec word ptr [bp - 0x12]
00014623: je 0x1463f
00014625: loop 0x1460d
00014627: cmp si, word ptr [bp - 0xa]
0001462A: jbe 0x1463d
0001462C: push si
0001462D: lcall 0x96b, 0xa0
00014632: mov si, ax
00014634: jae 0x1463d
00014636: mov word ptr [bp - 2], 0xfffd
0001463B: jmp 0x14644
0001463D: jmp 0x145f5
0001463F: mov word ptr [bp - 2], 0
00014644: mov ax, word ptr [bp - 2]
00014647: pop di
00014648: pop si
00014649: pop es
0001464A: pop ds
0001464B: mov sp, bp
0001464D: pop bp
0001464E: retf 0xc
00014651: mov ax, word ptr [si + 8]
00014654: sub ax, word ptr [si + 4]
00014657: inc ax
00014658: mov bx, word ptr [bp + 0xa]
0001465B: add bx, ax
0001465D: cmp bx, word ptr es:[di + 0x18]
00014661: jbe 0x1466a
00014663: mov ax, word ptr es:[di + 0x18]
00014667: sub ax, word ptr [bp + 0xa]
0001466A: mov bl, 8
0001466C: div bl
0001466E: mov cl, ah
00014670: xor ah, ah
00014672: mov word ptr [bp - 0x10], ax
00014675: dec word ptr [bp - 0x10]
00014678: mov word ptr [bp - 0xe], 0
0001467D: or cl, cl
0001467F: je 0x14692
00014681: mov word ptr [bp - 0xe], 1
00014686: mov al, 0x80
00014688: dec cl
0001468A: sar al, cl
0001468C: mov byte ptr [bp - 0xc], al
0001468F: inc word ptr [bp - 0x10]
00014692: mov ax, word ptr [si + 0xa]
00014695: sub ax, word ptr [si + 6]
00014698: inc ax
00014699: mov word ptr [bp - 0x12], ax
0001469C: mov bx, word ptr [bp + 8]
0001469F: add bx, ax
000146A1: cmp bx, word ptr es:[di + 0x1a]
000146A5: jbe 0x146b1
000146A7: mov ax, word ptr es:[di + 0x1a]
000146AB: sub ax, word ptr [bp + 8]
000146AE: mov word ptr [bp - 0x12], ax
000146B1: mov ax, word ptr es:[di + 0x22]
000146B5: mov bx, word ptr [bp + 6]
000146B8: mul bx
000146BA: push ax
000146BB: mov ax, word ptr [bp + 8]
000146BE: mov bx, word ptr [bp + 0xa]
000146C1: lcall es:[di + 0x26]
000146C5: pop ax
000146C6: add ax, bx
000146C8: mov di, ax
000146CA: mov ax, word ptr [bp + 8]
000146CD: xor ah, ah
000146CF: and al, 3
000146D1: mov word ptr [bp - 6], ax
000146D4: xor bx, bx
000146D6: mov dx, word ptr [bp - 6]
000146D9: add si, 0x80
000146DD: cld 
000146DE: mov cx, 1
000146E1: lodsb al, byte ptr [si]
000146E2: mov ah, al
000146E4: and ah, 0xc0
000146E7: cmp ah, 0xc0
000146EA: jne 0x146f6
000146EC: mov cl, al
000146EE: sub cl, 0xc0
000146F1: lodsb al, byte ptr [si]
000146F2: or cx, cx
000146F4: je 0x146de
000146F6: cmp bl, byte ptr [bp - 0x10]
000146F9: jb 0x14718
000146FB: ja 0x1471b
000146FD: cmp word ptr [bp - 0xe], 1
00014701: jne 0x14718
00014703: push ax
00014704: mov ah, byte ptr es:[bx + di]
00014707: or ah, byte ptr [bp - 0xc]
0001470A: sub ah, byte ptr [bp - 0xc]
0001470D: and al, byte ptr [bp - 0xc]
00014710: or al, ah
00014712: mov byte ptr es:[bx + di], al
00014715: pop ax
00014716: jmp 0x1471b
00014718: mov byte ptr es:[bx + di], al
0001471B: inc bx
0001471C: cmp bx, word ptr [bp - 0x14]
0001471F: jne 0x1473a
00014721: xor bx, bx
00014723: dec word ptr [bp - 0x12]
00014726: je 0x14754
00014728: inc dx
00014729: cmp dx, 4
0001472C: jb 0x14736
0001472E: sub di, 0x5fa6
00014732: xor dx, dx
00014734: jmp 0x1473a
00014736: add di, 0x2000
0001473A: loop 0x146f6
0001473C: cmp si, word ptr [bp - 0xa]
0001473F: jbe 0x14752
00014741: push si
00014742: lcall 0x96b, 0xa0
00014747: mov si, ax
00014749: jae 0x14752
0001474B: mov word ptr [bp - 2], 0xfffd
00014750: jmp 0x14759
00014752: jmp 0x146de
00014754: mov word ptr [bp - 2], 0
00014759: mov ax, word ptr [bp - 2]
0001475C: pop di
0001475D: pop si
0001475E: pop es
0001475F: pop ds
00014760: mov sp, bp
00014762: pop bp
00014763: retf 0xc
00014766: mov ax, word ptr es:[di + 0x18]
0001476A: mov word ptr [bp - 0x16], ax
0001476D: mov ax, word ptr [si + 8]
00014770: sub ax, word ptr [si + 4]
00014773: inc ax
00014774: mov bx, word ptr [bp + 0xa]
00014777: add bx, ax
00014779: cmp bx, word ptr es:[di + 0x18]
0001477D: jbe 0x14786
0001477F: mov ax, word ptr es:[di + 0x18]
00014783: sub ax, word ptr [bp + 0xa]
00014786: mov word ptr [bp - 0x20], ax
00014789: dec ax
0001478A: mov word ptr [bp - 0x10], ax
0001478D: mov ax, word ptr [si + 0xa]
00014790: sub ax, word ptr [si + 6]
00014793: inc ax
00014794: mov bx, word ptr [bp + 8]
00014797: add bx, ax
00014799: cmp bx, word ptr es:[di + 0x1a]
0001479D: jbe 0x147a6
0001479F: mov ax, word ptr es:[di + 0x1a]
000147A3: sub ax, word ptr [bp + 8]
000147A6: mov word ptr [bp - 0x12], ax
000147A9: mov bx, word ptr [bp + 0xa]
000147AC: mov ax, word ptr [bp + 8]
000147AF: lcall es:[di + 0x26]
000147B3: mov di, bx
000147B5: mov byte ptr [bp - 0x1e], dl
000147B8: push word ptr [bp - 0x22]
000147BB: push word ptr [bp - 0x1e]
000147BE: lcall 0xa36, 0xe
000147C3: xor bx, bx
000147C5: mov ax, word ptr [bp - 0x20]
000147C8: sub word ptr [bp - 0x16], ax
000147CB: add si, 0x80
000147CF: cld 
000147D0: mov cx, 1
000147D3: lodsb al, byte ptr [si]
000147D4: mov ah, al
000147D6: and ah, 0xc0
000147D9: cmp ah, 0xc0
000147DC: jne 0x147e8
000147DE: mov cl, al
000147E0: sub cl, 0xc0
000147E3: lodsb al, byte ptr [si]
000147E4: or cx, cx
000147E6: je 0x147d0
000147E8: cmp bx, word ptr [bp - 0x10]
000147EB: ja 0x14803
000147ED: mov byte ptr es:[di], al
000147F0: inc di
000147F1: jne 0x14803
000147F3: push ax
000147F4: inc byte ptr [bp - 0x1e]
000147F7: push word ptr [bp - 0x22]
000147FA: push word ptr [bp - 0x1e]
000147FD: lcall 0xa36, 0x63
00014802: pop ax
00014803: inc bx
00014804: cmp bx, word ptr [bp - 0x14]
00014807: jne 0x14825
00014809: xor bx, bx
0001480B: add di, word ptr [bp - 0x16]
0001480E: jae 0x14820
00014810: push ax
00014811: inc byte ptr [bp - 0x1e]
00014814: push word ptr [bp - 0x22]
00014817: push word ptr [bp - 0x1e]
0001481A: lcall 0xa36, 0x63
0001481F: pop ax
00014820: dec word ptr [bp - 0x12]
00014823: je 0x1483f
00014825: loop 0x147e8
00014827: cmp si, word ptr [bp - 0xa]
0001482A: jbe 0x1483d
0001482C: push si
0001482D: lcall 0x96b, 0xa0
00014832: mov si, ax
00014834: jae 0x1483d
00014836: mov word ptr [bp - 2], 0xfffd
0001483B: jmp 0x14844
0001483D: jmp 0x147d0
0001483F: mov word ptr [bp - 2], 0
00014844: push word ptr [bp - 0x22]
00014847: lcall 0xa36, 0x1a5
0001484C: mov ax, word ptr [bp - 2]
0001484F: pop di
00014850: pop si
00014851: pop es
00014852: pop ds
00014853: mov sp, bp
00014855: pop bp
00014856: retf 0xc
00014859: add byte ptr [di - 0x75], dl
0001485C: in al, dx
0001485D: sub sp, 2
00014860: push ds
00014861: push es
00014862: push si
00014863: push di
00014864: mov ax, 0x1ab5
00014867: mov ds, ax
00014869: lds si, ptr [bp + 6]
0001486C: cmp byte ptr [si], 0xa
0001486F: je 0x14878
00014871: mov word ptr [bp - 2], 0xf448
00014876: jmp 0x1487d
00014878: mov word ptr [bp - 2], 0
0001487D: mov ax, word ptr [bp - 2]
00014880: pop di
00014881: pop si
00014882: pop es
00014883: pop ds
00014884: mov sp, bp
00014886: pop bp
00014887: retf 4
0001488A: push bp
0001488B: mov bp, sp
0001488D: sub sp, 2
00014890: push ds
00014891: push es
00014892: push si
00014893: push di
00014894: mov ax, 0x1ab5
00014897: mov ds, ax
00014899: mov ax, word ptr [bp + 0xc]
0001489C: push ax
0001489D: mov ax, word ptr [bp + 0xa]
000148A0: push ax
000148A1: push cs
000148A2: call 0x1485a
000148A5: or ax, ax
000148A7: je 0x148b0
000148A9: mov word ptr [bp - 2], 0xf448
000148AE: jmp 0x148c0
000148B0: lds si, ptr [bp + 0xa]
000148B3: les di, ptr [bp + 6]
000148B6: mov cx, 0x80
000148B9: rep movsb byte ptr es:[di], byte ptr [si]
000148BB: mov word ptr [bp - 2], 0
000148C0: mov ax, word ptr [bp - 2]
000148C3: pop di
000148C4: pop si
000148C5: pop es
000148C6: pop ds
000148C7: mov sp, bp
000148C9: pop bp
000148CA: retf 8
000148CD: push bp
000148CE: mov bp, sp
000148D0: sub sp, 2
000148D3: push ds
000148D4: push es
000148D5: push si
000148D6: push di
000148D7: mov ax, 0x1ab5
000148DA: mov ds, ax
000148DC: mov ax, word ptr [bp + 8]
000148DF: push ax
000148E0: mov ax, word ptr [bp + 6]
000148E3: push ax
000148E4: push cs
000148E5: call 0x1485a
000148E8: or ax, ax
000148EA: je 0x148f3
000148EC: mov word ptr [bp - 2], 0xf448
000148F1: jmp 0x14903
000148F3: lds si, ptr [bp + 6]
000148F6: les di, ptr [bp + 0xa]
000148F9: mov cx, 0x80
000148FC: rep movsb byte ptr es:[di], byte ptr [si]
000148FE: mov word ptr [bp - 2], 0
00014903: mov ax, word ptr [bp - 2]
00014906: pop di
00014907: pop si
00014908: pop es
00014909: pop ds
0001490A: mov sp, bp
0001490C: pop bp
0001490D: retf 8
00014910: push bp
00014911: mov bp, sp
00014913: sub sp, 2
00014916: push ds
00014917: push es
00014918: push si
00014919: push di
0001491A: mov ax, 0x1ab5
0001491D: mov ds, ax
0001491F: les di, ptr [bp + 6]
00014922: cmp byte ptr es:[di], 0xa
00014926: je 0x14930
00014928: mov word ptr [bp - 2], 0xf448
0001492D: jmp 0x14acf
00014930: xor cx, cx
00014932: mov dl, byte ptr es:[di + 3]
00014936: mov dh, byte ptr es:[di + 0x41]
0001493A: cmp dh, 3
0001493D: jne 0x14941
0001493F: inc dh
00014941: inc cx
00014942: cmp cx, 1
00014945: je 0x14954
00014947: cmp cx, 2
0001494A: je 0x1495e
0001494C: cmp cx, 3
0001494F: je 0x14968
00014951: jmp 0x14aca
00014954: mov ax, word ptr es:[di + 0xc]
00014958: mov bx, word ptr es:[di + 0xe]
0001495C: jmp 0x1497a
0001495E: mov ax, word ptr es:[di + 0x46]
00014962: mov bx, word ptr es:[di + 0x48]
00014966: jmp 0x1497a
00014968: mov ax, word ptr es:[di + 8]
0001496C: sub ax, word ptr es:[di + 4]
00014970: inc ax
00014971: mov bx, word ptr es:[di + 0xa]
00014975: sub bx, word ptr es:[di + 6]
00014979: inc bx
0001497A: cmp dh, 4
0001497D: je 0x14987
0001497F: cmp dh, 1
00014982: je 0x149e4
00014984: jmp 0x14aca
00014987: cmp dl, 1
0001498A: je 0x1498f
0001498C: jmp 0x14aca
0001498F: cmp ax, 0x140
00014992: je 0x149a0
00014994: cmp ax, 0x280
00014997: je 0x149ae
00014999: cmp ax, 0x320
0001499C: je 0x149d5
0001499E: jmp 0x14941
000149A0: cmp bx, 0xc8
000149A4: je 0x149a8
000149A6: jmp 0x14941
000149A8: mov ax, 2
000149AB: jmp 0x14ac5
000149AE: cmp bx, 0xc8
000149B2: je 0x149c3
000149B4: cmp bx, 0x15e
000149B8: je 0x149c9
000149BA: cmp bx, 0x1e0
000149BE: je 0x149cf
000149C0: jmp 0x14941
000149C3: mov ax, 3
000149C6: jmp 0x14ac5
000149C9: mov ax, 5
000149CC: jmp 0x14ac5
000149CF: mov ax, 7
000149D2: jmp 0x14ac5
000149D5: cmp bx, 0x258
000149D9: je 0x149de
000149DB: jmp 0x14941
000149DE: mov ax, 0x26
000149E1: jmp 0x14ac5
000149E4: cmp dl, 1
000149E7: je 0x149f6
000149E9: cmp dl, 2
000149EC: je 0x14a4c
000149EE: cmp dl, 8
000149F1: je 0x14a62
000149F3: jmp 0x14aca
000149F6: cmp ax, 0x280
000149F9: je 0x14a08
000149FB: cmp ax, 0x2d0
000149FE: je 0x14a2f
00014A00: cmp ax, 0x320
00014A03: je 0x14a3e
00014A05: jmp 0x14941
00014A08: cmp bx, 0xc8
00014A0C: je 0x14a1d
00014A0E: cmp bx, 0x15e
00014A12: je 0x14a23
00014A14: cmp bx, 0x1e0
00014A18: je 0x14a29
00014A1A: jmp 0x14941
00014A1D: mov ax, 1
00014A20: jmp 0x14ac5
00014A23: mov ax, 4
00014A26: jmp 0x14ac5
00014A29: mov ax, 6
00014A2C: jmp 0x14ac5
00014A2F: cmp bx, 0x15c
00014A33: je 0x14a38
00014A35: jmp 0x14941
00014A38: mov ax, 9
00014A3B: jmp 0x14ac5
00014A3E: cmp bx, 0x258
00014A42: je 0x14a47
00014A44: jmp 0x14941
00014A47: mov ax, 0xf
00014A4A: jmp 0x14ac5
00014A4C: cmp ax, 0x140
00014A4F: je 0x14a54
00014A51: jmp 0x14941
00014A54: cmp bx, 0xc8
00014A58: je 0x14a5d
00014A5A: jmp 0x14941
00014A5D: mov ax, 0
00014A60: jmp 0x14ac5
00014A62: cmp ax, 0x140
00014A65: je 0x14a79
00014A67: cmp ax, 0x280
00014A6A: je 0x14a87
00014A6C: cmp ax, 0x320
00014A6F: je 0x14aab
00014A71: cmp ax, 0x400
00014A74: je 0x14ab9
00014A76: jmp 0x14941
00014A79: cmp bx, 0xc8
00014A7D: je 0x14a82
00014A7F: jmp 0x14941
00014A82: mov ax, 8
00014A85: jmp 0x14ac5
00014A87: cmp bx, 0x15e
00014A8B: je 0x14a9c
00014A8D: cmp bx, 0x190
00014A91: je 0x14aa1
00014A93: cmp bx, 0x1e0
00014A97: je 0x14aa6
00014A99: jmp 0x14941
00014A9C: mov ax, 0xb
00014A9F: jmp 0x14ac5
00014AA1: mov ax, 0x24
00014AA4: jmp 0x14ac5
00014AA6: mov ax, 0x25
00014AA9: jmp 0x14ac5
00014AAB: cmp bx, 0x258
00014AAF: je 0x14ab4
00014AB1: jmp 0x14941
00014AB4: mov ax, 0x27
00014AB7: jmp 0x14ac5
00014AB9: cmp bx, 0x300
00014ABD: je 0x14ac2
00014ABF: jmp 0x14941
00014AC2: mov ax, 0x28
00014AC5: mov word ptr [bp - 2], ax
00014AC8: jmp 0x14acf
00014ACA: mov word ptr [bp - 2], 0xfffa
00014ACF: mov ax, word ptr [bp - 2]
00014AD2: pop di
00014AD3: pop si
00014AD4: pop es
00014AD5: pop ds
00014AD6: mov sp, bp
00014AD8: pop bp
00014AD9: retf 4
00014ADC: push bp
00014ADD: mov bp, sp
00014ADF: sub sp, 0x20
00014AE2: push ds
00014AE3: push es
00014AE4: push si
00014AE5: push di
00014AE6: mov ax, 0x1ab5
00014AE9: mov ds, ax
00014AEB: lds si, ptr [bp + 0x10]
00014AEE: les di, ptr [bp + 0xa]
00014AF1: mov al, byte ptr [si]
00014AF3: cmp al, 0xa
00014AF5: je 0x14aff
00014AF7: mov word ptr [bp - 2], 0xf448
00014AFC: jmp 0x14d01
00014AFF: mov al, byte ptr [si + 0x41]
00014B02: cmp al, byte ptr es:[di + 0x12]
00014B06: jbe 0x14b10
00014B08: mov word ptr [bp - 2], 0xfffa
00014B0D: jmp 0x14d01
00014B10: mov al, byte ptr [si + 3]
00014B13: cmp al, byte ptr es:[di + 0x13]
00014B17: je 0x14b21
00014B19: mov word ptr [bp - 2], 0xfffa
00014B1E: jmp 0x14d01
00014B21: push es
00014B22: push di
00014B23: mov ax, word ptr [bp + 8]
00014B26: push ax
00014B27: mov ax, word ptr [bp + 6]
00014B2A: push ax
00014B2B: mov ax, 1
00014B2E: push ax
00014B2F: lcall 0xb08, 0xa
00014B34: or dx, dx
00014B36: jne 0x14b3e
00014B38: mov word ptr [bp - 2], ax
00014B3B: jmp 0x14d01
00014B3E: mov word ptr [bp - 0x1e], dx
00014B41: mov word ptr [bp - 0x20], ax
00014B44: mov word ptr [bp - 4], si
00014B47: mov ax, word ptr [bp + 0xe]
00014B4A: add ax, word ptr [bp - 4]
00014B4D: dec ax
00014B4E: mov word ptr [bp - 6], ax
00014B51: mov al, byte ptr [si + 0x41]
00014B54: xor ah, ah
00014B56: mov word ptr [bp - 8], ax
00014B59: mov al, byte ptr es:[di + 0x12]
00014B5D: sub al, byte ptr [si + 0x41]
00014B60: xor ah, ah
00014B62: mov word ptr [bp - 0x1c], ax
00014B65: mov ax, word ptr [si + 0x42]
00014B68: mov word ptr [bp - 0xa], ax
00014B6B: mov ax, word ptr [si + 8]
00014B6E: sub ax, word ptr [si + 4]
00014B71: inc ax
00014B72: mov bx, word ptr [bp + 8]
00014B75: add bx, ax
00014B77: dec bx
00014B78: cmp bx, word ptr es:[di + 0xa]
00014B7C: jbe 0x14b86
00014B7E: mov ax, word ptr es:[di + 0xa]
00014B82: sub ax, word ptr [bp + 8]
00014B85: inc ax
00014B86: mov bl, byte ptr [si + 3]
00014B89: xor bh, bh
00014B8B: mul bx
00014B8D: mov bx, 8
00014B90: div bx
00014B92: or dx, dx
00014B94: je 0x14b97
00014B96: inc ax
00014B97: mov word ptr [bp - 0xc], ax
00014B9A: mov cl, dl
00014B9C: xor cl, 7
00014B9F: inc cl
00014BA1: and cl, 7
00014BA4: mov ch, 0xff
00014BA6: shl ch, cl
00014BA8: mov cl, ch
00014BAA: not ch
00014BAC: mov word ptr [bp - 0x16], cx
00014BAF: mov ax, word ptr [si + 0xa]
00014BB2: sub ax, word ptr [si + 6]
00014BB5: inc ax
00014BB6: mov bx, word ptr [bp + 6]
00014BB9: add bx, ax
00014BBB: dec bx
00014BBC: cmp bx, word ptr es:[di + 0xc]
00014BC0: jbe 0x14bca
00014BC2: mov ax, word ptr es:[di + 0xc]
00014BC6: sub ax, word ptr [bp + 6]
00014BC9: inc ax
00014BCA: mov word ptr [bp - 0xe], ax
00014BCD: mov ax, word ptr es:[di + 0x14]
00014BD1: sub ax, word ptr [bp - 0xc]
00014BD4: mov word ptr [bp - 0x1a], ax
00014BD7: xor bx, bx
00014BD9: mov dx, word ptr [bp - 8]
00014BDC: add si, 0x80
00014BE0: les di, ptr [bp - 0x20]
00014BE3: cld 
00014BE4: mov cx, 1
00014BE7: lodsb al, byte ptr [si]
00014BE8: mov ah, al
00014BEA: and ah, 0xc0
00014BED: cmp ah, 0xc0
00014BF0: jne 0x14bfc
00014BF2: mov cl, al
00014BF4: sub cl, 0xc0
00014BF7: lodsb al, byte ptr [si]
00014BF8: or cx, cx
00014BFA: je 0x14be4
00014BFC: inc bx
00014BFD: cmp bx, word ptr [bp - 0xc]
00014C00: jb 0x14c14
00014C02: ja 0x14c37
00014C04: push cx
00014C05: mov cx, word ptr [bp - 0x16]
00014C08: and byte ptr es:[di], ch
00014C0B: and cl, al
00014C0D: or byte ptr es:[di], cl
00014C10: inc di
00014C11: pop cx
00014C12: jmp 0x14c15
00014C14: stosb byte ptr es:[di], al
00014C15: or di, di
00014C17: jne 0x14c37
00014C19: push ax
00014C1A: push dx
00014C1B: mov dx, word ptr [bp + 0xc]
00014C1E: mov ax, word ptr [bp + 0xa]
00014C21: stc 
00014C22: lcall 0xb08, 0x17e
00014C27: mov word ptr [bp - 2], ax
00014C2A: pop dx
00014C2B: pop ax
00014C2C: jae 0x14c37
00014C2E: cmp word ptr [bp - 0xe], 1
00014C32: je 0x14c37
00014C34: jmp 0x14d01
00014C37: cmp bx, word ptr [bp - 0xa]
00014C3A: jge 0x14c3f
00014C3C: jmp 0x14cdd
00014C3F: xor bx, bx
00014C41: add di, word ptr [bp - 0x1a]
00014C44: jae 0x14c64
00014C46: push ax
00014C47: push dx
00014C48: mov dx, word ptr [bp + 0xc]
00014C4B: mov ax, word ptr [bp + 0xa]
00014C4E: stc 
00014C4F: lcall 0xb08, 0x17e
00014C54: mov word ptr [bp - 2], ax
00014C57: pop dx
00014C58: pop ax
00014C59: jae 0x14c64
00014C5B: cmp word ptr [bp - 0xe], 1
00014C5F: je 0x14c64
00014C61: jmp 0x14d01
00014C64: dec dx
00014C65: or dx, dx
00014C67: jne 0x14cdd
00014C69: mov dx, word ptr [bp - 8]
00014C6C: cmp word ptr [bp - 0x1c], 0
00014C70: je 0x14cd8
00014C72: push dx
00014C73: push cx
00014C74: push ax
00014C75: mov dx, word ptr [bp - 0x1c]
00014C78: mov cx, word ptr [bp - 0xc]
00014C7B: mov ax, word ptr [bp - 0x16]
00014C7E: xor al, al
00014C80: cmp cx, 1
00014C83: je 0x14c88
00014C85: stosb byte ptr es:[di], al
00014C86: jmp 0x14c8c
00014C88: and byte ptr es:[di], ah
00014C8B: inc di
00014C8C: or di, di
00014C8E: jne 0x14cad
00014C90: push ax
00014C91: push dx
00014C92: mov dx, word ptr [bp + 0xc]
00014C95: mov ax, word ptr [bp + 0xa]
00014C98: stc 
00014C99: lcall 0xb08, 0x17e
00014C9E: mov word ptr [bp - 2], ax
00014CA1: pop dx
00014CA2: pop ax
00014CA3: jae 0x14cad
00014CA5: cmp word ptr [bp - 0xe], 1
00014CA9: je 0x14cad
00014CAB: jmp 0x14ccd
00014CAD: loop 0x14c80
00014CAF: add di, word ptr [bp - 0x1a]
00014CB2: jae 0x14cd2
00014CB4: push dx
00014CB5: mov dx, word ptr [bp + 0xc]
00014CB8: mov ax, word ptr [bp + 0xa]
00014CBB: stc 
00014CBC: lcall 0xb08, 0x17e
00014CC1: mov word ptr [bp - 2], ax
00014CC4: pop dx
00014CC5: jae 0x14cd2
00014CC7: cmp word ptr [bp - 0xe], 1
00014CCB: je 0x14cd2
00014CCD: pop ax
00014CCE: pop cx
00014CCF: pop dx
00014CD0: jmp 0x14d01
00014CD2: dec dx
00014CD3: jne 0x14c78
00014CD5: pop ax
00014CD6: pop cx
00014CD7: pop dx
00014CD8: dec word ptr [bp - 0xe]
00014CDB: je 0x14cfc
00014CDD: dec cx
00014CDE: je 0x14ce3
00014CE0: jmp 0x14bfc
00014CE3: cmp si, word ptr [bp - 6]
00014CE6: jb 0x14cf9
00014CE8: push si
00014CE9: lcall 0x96b, 0xa0
00014CEE: mov si, ax
00014CF0: jae 0x14cf9
00014CF2: mov word ptr [bp - 2], 0xfffd
00014CF7: jmp 0x14d01
00014CF9: jmp 0x14be4
00014CFC: mov word ptr [bp - 2], 0
00014D01: mov ax, word ptr [bp - 2]
00014D04: pop di
00014D05: pop si
00014D06: pop es
00014D07: pop ds
00014D08: mov sp, bp
00014D0A: pop bp
00014D0B: retf 0xe
00014D0E: push bp
00014D0F: mov bp, sp
00014D11: sub sp, 6
00014D14: push ds
00014D15: push es
00014D16: push si
00014D17: push di
00014D18: mov ax, 0x1ab5
00014D1B: mov ds, ax
00014D1D: mov ax, word ptr [bp + 0xe]
00014D20: push ax
00014D21: lcall 0x98e, 0x12a
00014D26: jae 0x14d30
00014D28: mov word ptr [bp - 2], 0xfc19
00014D2D: jmp 0x14e12
00014D30: mov es, dx
00014D32: mov di, ax
00014D34: mov bx, word ptr es:[di + 0x24]
00014D38: lds si, ptr [bp + 0xa]
00014D3B: les di, ptr [bp + 6]
00014D3E: cmp bx, 0
00014D41: jne 0x14d4b
00014D43: mov word ptr [bp - 2], 0
00014D48: jmp 0x14e12
00014D4B: cmp bx, 1
00014D4E: jne 0x14d6c
00014D50: mov al, byte ptr [si]
00014D52: mov cl, 4
00014D54: shr al, cl
00014D56: mov byte ptr es:[di], al
00014D59: inc di
00014D5A: mov al, byte ptr [si + 3]
00014D5D: mov cl, 5
00014D5F: shr al, cl
00014D61: mov byte ptr es:[di], al
00014D64: mov word ptr [bp - 2], 0
00014D69: jmp 0x14e12
00014D6C: cmp bx, 2
00014D6F: jne 0x14d82
00014D71: mov al, byte ptr [si]
00014D73: mov cl, 4
00014D75: shr al, cl
00014D77: mov byte ptr es:[di], al
00014D7A: mov word ptr [bp - 2], 0
00014D7F: jmp 0x14e12
00014D82: cmp bx, 3
00014D85: jne 0x14de4
00014D87: mov byte ptr [bp - 6], 0
00014D8B: mov byte ptr [bp - 5], 0x20
00014D8F: mov byte ptr [bp - 4], 4
00014D93: mov byte ptr [bp - 3], 0x24
00014D97: mov dx, 0x10
00014D9A: push di
00014D9B: xor ax, ax
00014D9D: xor bx, bx
00014D9F: mov cl, 6
00014DA1: mov bl, byte ptr [si]
00014DA3: and bl, 0xc0
00014DA6: shr bl, cl
00014DA8: mov di, bx
00014DAA: mov bl, byte ptr [bp + di - 6]
00014DAD: or al, bl
00014DAF: inc si
00014DB0: mov bl, byte ptr [si]
00014DB2: and bl, 0xc0
00014DB5: shr bl, cl
00014DB7: mov di, bx
00014DB9: mov bl, byte ptr [bp + di - 6]
00014DBC: shr bl, 1
00014DBE: or al, bl
00014DC0: inc si
00014DC1: mov bl, byte ptr [si]
00014DC3: and bl, 0xc0
00014DC6: shr bl, cl
00014DC8: mov di, bx
00014DCA: mov bl, byte ptr [bp + di - 6]
00014DCD: shr bl, 1
00014DCF: shr bl, 1
00014DD1: or al, bl
00014DD3: inc si
00014DD4: pop di
00014DD5: stosb byte ptr es:[di], al
00014DD6: dec dx
00014DD7: jne 0x14d9a
00014DD9: mov byte ptr es:[di], 0
00014DDD: mov word ptr [bp - 2], 0
00014DE2: jmp 0x14e12
00014DE4: cmp bx, 4
00014DE7: jne 0x14e01
00014DE9: mov cx, 0x30
00014DEC: mov al, byte ptr [si]
00014DEE: shr al, 1
00014DF0: shr al, 1
00014DF2: mov byte ptr es:[di], al
00014DF5: inc si
00014DF6: inc di
00014DF7: dec cx
00014DF8: jne 0x14dec
00014DFA: mov word ptr [bp - 2], 0
00014DFF: jmp 0x14e12
00014E01: cmp bx, 5
00014E04: jne 0x14e0d
00014E06: mov cx, 0x300
00014E09: jmp 0x14dec
00014E0B: jmp 0x14e12
00014E0D: mov word ptr [bp - 2], 0xfff7
00014E12: mov ax, word ptr [bp - 2]
00014E15: pop di
00014E16: pop si
00014E17: pop es
00014E18: pop ds
00014E19: mov sp, bp
00014E1B: pop bp
00014E1C: retf 0xa
00014E1F: push bp
00014E20: mov bp, sp
00014E22: sub sp, 2
00014E25: push ds
00014E26: push es
00014E27: push si
00014E28: push di
00014E29: mov ax, 0x1ab5
00014E2C: mov ds, ax
00014E2E: mov ax, word ptr [bp + 0xe]
00014E31: push ax
00014E32: lcall 0x98e, 0x12a
00014E37: jae 0x14e41
00014E39: mov word ptr [bp - 2], 0xfc19
00014E3E: jmp 0x14f28
00014E41: mov es, dx
00014E43: mov di, ax
00014E45: mov bx, word ptr es:[di + 0x24]
00014E49: les di, ptr [bp + 0xa]
00014E4C: lds si, ptr [bp + 6]
00014E4F: cmp bx, 0
00014E52: je 0x14e7b
00014E54: cmp bx, 1
00014E57: je 0x14e83
00014E59: cmp bx, 2
00014E5C: je 0x14eb2
00014E5E: cmp bx, 3
00014E61: je 0x14ecc
00014E63: cmp bx, 4
00014E66: jne 0x14e6b
00014E68: jmp 0x14f0b
00014E6B: cmp bx, 5
00014E6E: jne 0x14e73
00014E70: jmp 0x14f23
00014E73: mov word ptr [bp - 2], 0xfff7
00014E78: jmp 0x14f28
00014E7B: mov word ptr [bp - 2], 0
00014E80: jmp 0x14f28
00014E83: mov al, byte ptr [si]
00014E85: mov cl, 4
00014E87: shl al, cl
00014E89: mov byte ptr es:[di], al
00014E8C: mov byte ptr es:[di + 1], 0
00014E91: mov byte ptr es:[di + 2], 0
00014E96: mov al, byte ptr [si + 1]
00014E99: mov cl, 5
00014E9B: shl al, cl
00014E9D: mov byte ptr es:[di + 3], al
00014EA1: mov byte ptr es:[di + 4], 0
00014EA6: mov byte ptr es:[di + 5], 0
00014EAB: mov word ptr [bp - 2], 0
00014EB0: jmp 0x14f28
00014EB2: mov al, byte ptr [si]
00014EB4: mov cl, 4
00014EB6: shl al, cl
00014EB8: mov byte ptr es:[di], al
00014EBB: mov byte ptr es:[di + 1], 0
00014EC0: mov byte ptr es:[di + 2], 0
00014EC5: mov word ptr [bp - 2], 0
00014ECA: jmp 0x14f28
00014ECC: mov cx, 0x10
00014ECF: mov ah, byte ptr [si]
00014ED1: push cx
00014ED2: mov cx, 3
00014ED5: shl ah, 1
00014ED7: mov al, ah
00014ED9: and al, 0x48
00014EDB: cmp al, 0
00014EDD: jne 0x14ee5
00014EDF: mov byte ptr es:[di], 0
00014EE3: jmp 0x14efd
00014EE5: cmp al, 0x40
00014EE7: jne 0x14eef
00014EE9: mov byte ptr es:[di], 0x55
00014EED: jmp 0x14efd
00014EEF: cmp al, 8
00014EF1: jne 0x14ef9
00014EF3: mov byte ptr es:[di], 0xaa
00014EF7: jmp 0x14efd
00014EF9: mov byte ptr es:[di], 0xff
00014EFD: inc di
00014EFE: loop 0x14ed5
00014F00: pop cx
00014F01: inc si
00014F02: loop 0x14ecf
00014F04: mov word ptr [bp - 2], 0
00014F09: jmp 0x14f28
00014F0B: mov cx, 0x30
00014F0E: mov al, byte ptr [si]
00014F10: shl al, 1
00014F12: shl al, 1
00014F14: mov byte ptr es:[di], al
00014F17: inc si
00014F18: inc di
00014F19: dec cx
00014F1A: jne 0x14f0e
00014F1C: mov word ptr [bp - 2], 0
00014F21: jmp 0x14f28
00014F23: mov cx, 0x300
00014F26: jmp 0x14f0e
00014F28: mov ax, word ptr [bp - 2]
00014F2B: pop di
00014F2C: pop si
00014F2D: pop es
00014F2E: pop ds
00014F2F: mov sp, bp
00014F31: pop bp
00014F32: retf 0xa
00014F35: push bp
00014F36: mov bp, sp
00014F38: sub sp, 2
00014F3B: push ds
00014F3C: push es
00014F3D: push si
00014F3E: push di
00014F3F: mov ax, 0x1ab5
00014F42: mov ds, ax
00014F44: mov ax, word ptr [bp + 0x10]
00014F47: push ax
00014F48: lcall 0x98e, 0x12a
00014F4D: jae 0x14f56
00014F4F: mov word ptr [bp - 2], 0xfc19
00014F54: jmp 0x14fb2
00014F56: mov es, dx
00014F58: mov di, ax
00014F5A: mov bx, word ptr es:[di + 0x24]
00014F5E: lds si, ptr [bp + 0xc]
00014F61: les di, ptr [bp + 6]
00014F64: cmp bx, 5
00014F67: je 0x14f6e
00014F69: add si, 0x10
00014F6C: jmp 0x14fa3
00014F6E: cmp byte ptr [si + 1], 5
00014F72: je 0x14f7b
00014F74: mov word ptr [bp - 2], 0xfff6
00014F79: jmp 0x14fb2
00014F7B: mov bx, word ptr [bp + 0xa]
00014F7E: sub bx, 0x300
00014F82: add si, bx
00014F84: mov al, byte ptr [si - 1]
00014F87: cmp al, 0xa
00014F89: je 0x14f96
00014F8B: cmp al, 0xc
00014F8D: je 0x14fa3
00014F8F: mov word ptr [bp - 2], 0xfff7
00014F94: jmp 0x14fb2
00014F96: cld 
00014F97: mov cx, 0x300
00014F9A: rep movsb byte ptr es:[di], byte ptr [si]
00014F9C: mov word ptr [bp - 2], 0
00014FA1: jmp 0x14fb2
00014FA3: mov ax, word ptr [bp + 0x10]
00014FA6: push ax
00014FA7: push ds
00014FA8: push si
00014FA9: push es
00014FAA: push di
00014FAB: push cs
00014FAC: call 0x14d0e
00014FAF: mov word ptr [bp - 2], ax
00014FB2: mov ax, word ptr [bp - 2]
00014FB5: pop di
00014FB6: pop si
00014FB7: pop es
00014FB8: pop ds
00014FB9: mov sp, bp
00014FBB: pop bp
00014FBC: retf 0xc
00014FBF: push bp
00014FC0: mov bp, sp
00014FC2: sub sp, 2
00014FC5: push ds
00014FC6: push es
00014FC7: push si
00014FC8: push di
00014FC9: mov ax, 0x1ab5
00014FCC: mov ds, ax
00014FCE: mov ax, word ptr [bp + 0x10]
00014FD1: push ax
00014FD2: lcall 0x98e, 0x12a
00014FD7: jae 0x14fe0
00014FD9: mov word ptr [bp - 2], 0xfc19
00014FDE: jmp 0x1503b
00014FE0: mov es, dx
00014FE2: mov di, ax
00014FE4: mov bx, word ptr es:[di + 0x24]
00014FE8: cmp bx, 5
00014FEB: jne 0x1501d
00014FED: les di, ptr [bp + 0xc]
00014FF0: cmp byte ptr es:[di + 1], 5
00014FF5: je 0x14ffe
00014FF7: mov word ptr [bp - 2], 0xfff6
00014FFC: jmp 0x1503b
00014FFE: mov bx, word ptr [bp + 0xa]
00015001: sub bx, 0x300
00015005: mov al, byte ptr es:[bx + di - 1]
00015009: cmp al, 0xa
0001500B: je 0x15018
0001500D: cmp al, 0xc
0001500F: je 0x1501d
00015011: mov word ptr [bp - 2], 0xfff7
00015016: jmp 0x1503b
00015018: mov byte ptr es:[bx + di - 1], 0xc
0001501D: mov ax, word ptr [bp + 0x10]
00015020: push ax
00015021: mov ax, word ptr [bp + 0xe]
00015024: push ax
00015025: mov ax, word ptr [bp + 0xc]
00015028: add ax, 0x10
0001502B: push ax
0001502C: mov ax, word ptr [bp + 8]
0001502F: push ax
00015030: mov ax, word ptr [bp + 6]
00015033: push ax
00015034: push cs
00015035: call 0x14e1f
00015038: mov word ptr [bp - 2], ax
0001503B: mov ax, word ptr [bp - 2]
0001503E: pop di
0001503F: pop si
00015040: pop es
00015041: pop ds
00015042: mov sp, bp
00015044: pop bp
00015045: retf 0xc
00015048: push bp
00015049: mov bp, sp
0001504B: sub sp, 0x10
0001504E: push ds
0001504F: push es
00015050: push si
00015051: push di
00015052: mov ax, 0x1ab5
00015055: mov ds, ax
00015057: mov ax, word ptr [bp + 0x10]
0001505A: push ax
0001505B: mov ax, word ptr [bp + 0xe]
0001505E: push ax
0001505F: mov ax, word ptr [bp + 0xc]
00015062: push ax
00015063: mov ax, word ptr [bp + 0xa]
00015066: push ax
00015067: push ds
00015068: mov si, 0x43bf
0001506B: push si
0001506C: lcall 0x80c, 0x56c
00015071: or ax, ax
00015073: jge 0x1507b
00015075: mov word ptr [bp - 2], ax
00015078: jmp 0x15188
0001507B: mov word ptr [bp - 4], ax
0001507E: push ss
0001507F: lea ax, [bp - 0xe]
00015082: push ax
00015083: push ss
00015084: lea ax, [bp - 0x10]
00015087: push ax
00015088: lcall 0x96b, 0x66
0001508D: cmp ax, 0
00015090: je 0x15098
00015092: mov word ptr [bp - 2], ax
00015095: jmp 0x1517b
00015098: mov ax, word ptr [si + 0x14]
0001509B: mov word ptr [bp - 8], ax
0001509E: mov ax, word ptr [si + 0x12]
000150A1: mov word ptr [bp - 0xa], ax
000150A4: lds si, ptr [bp - 0xe]
000150A7: mov bx, word ptr [bp - 4]
000150AA: mov cx, 0x80
000150AD: mov dx, si
000150AF: mov ah, 0x3f
000150B1: int 0x21
000150B3: jae 0x150bd
000150B5: mov word ptr [bp - 2], 0xfffd
000150BA: jmp 0x1517b
000150BD: cmp byte ptr [si + 1], 5
000150C1: je 0x150cb
000150C3: mov word ptr [bp - 2], 0xfff6
000150C8: jmp 0x1517b
000150CB: mov ax, word ptr [bp + 0x12]
000150CE: push ax
000150CF: lcall 0x98e, 0x12a
000150D4: jae 0x150de
000150D6: mov word ptr [bp - 2], 0xfc19
000150DB: jmp 0x1517b
000150DE: mov es, dx
000150E0: mov di, ax
000150E2: mov bx, word ptr es:[di + 0x24]
000150E6: lds si, ptr [bp - 0xe]
000150E9: les di, ptr [bp + 6]
000150EC: cmp bx, 5
000150EF: je 0x150f3
000150F1: jmp 0x15169
000150F3: mov dx, word ptr [bp - 8]
000150F6: mov ax, word ptr [bp - 0xa]
000150F9: sub ax, 0x80
000150FC: sbb dx, 0
000150FF: sub ax, 0x301
00015102: sbb dx, 0
00015105: mov bx, word ptr [bp - 4]
00015108: mov cx, dx
0001510A: mov dx, ax
0001510C: mov al, 1
0001510E: mov ah, 0x42
00015110: int 0x21
00015112: mov bx, word ptr [bp - 4]
00015115: mov cx, 1
00015118: mov dx, si
0001511A: mov ah, 0x3f
0001511C: int 0x21
0001511E: mov bl, byte ptr [si]
00015120: mov word ptr [bp - 6], bx
00015123: cmp bl, 0xa
00015126: je 0x15134
00015128: cmp bl, 0xc
0001512B: je 0x15134
0001512D: mov word ptr [bp - 2], 0xfff7
00015132: jmp 0x1517b
00015134: mov bx, word ptr [bp - 4]
00015137: mov cx, 0x300
0001513A: mov dx, di
0001513C: push ds
0001513D: mov ax, es
0001513F: mov ds, ax
00015141: mov ah, 0x3f
00015143: int 0x21
00015145: pop ds
00015146: cmp ax, 0x300
00015149: je 0x15152
0001514B: mov word ptr [bp - 2], 0xfffd
00015150: jmp 0x1517b
00015152: push dx
00015153: mov dx, es
00015155: mov ds, dx
00015157: pop dx
00015158: mov si, di
0001515A: mov bx, word ptr [bp - 6]
0001515D: cmp bl, 0xc
00015160: je 0x1516c
00015162: mov word ptr [bp - 2], 0
00015167: jmp 0x1517b
00015169: add si, 0x10
0001516C: mov ax, word ptr [bp + 0x12]
0001516F: push ax
00015170: push ds
00015171: push si
00015172: push es
00015173: push di
00015174: push cs
00015175: call 0x14d0e
00015178: mov word ptr [bp - 2], ax
0001517B: mov ax, word ptr [bp + 0x10]
0001517E: push ax
0001517F: mov ax, word ptr [bp + 0xe]
00015182: push ax
00015183: lcall 0x80c, 0x640
00015188: mov ax, word ptr [bp - 2]
0001518B: pop di
0001518C: pop si
0001518D: pop es
0001518E: pop ds
0001518F: mov sp, bp
00015191: pop bp
00015192: retf 0xe
00015195: push bp
00015196: mov bp, sp
00015198: sub sp, 2
0001519B: push ds
0001519C: push es
0001519D: push si
0001519E: push di
0001519F: mov ax, 0x1ab5
000151A2: mov ds, ax
000151A4: mov ax, word ptr [bp + 0xe]
000151A7: push ax
000151A8: push ds
000151A9: mov ax, 0x54e4
000151AC: push ax
000151AD: mov ax, word ptr [bp + 0xc]
000151B0: push ax
000151B1: mov ax, word ptr [bp + 0xa]
000151B4: push ax
000151B5: mov ax, word ptr [bp + 8]
000151B8: push ax
000151B9: mov ax, word ptr [bp + 6]
000151BC: push ax
000151BD: push cs
000151BE: call 0x15048
000151C1: mov word ptr [bp - 2], ax
000151C4: mov ax, word ptr [bp - 2]
000151C7: pop di
000151C8: pop si
000151C9: pop es
000151CA: pop ds
000151CB: mov sp, bp
000151CD: pop bp
000151CE: retf 0xa
000151D1: push bp
000151D2: mov bp, sp
000151D4: sub sp, 0x86
000151D8: push ds
000151D9: push es
000151DA: push si
000151DB: push di
000151DC: mov ax, 0x1ab5
000151DF: mov ds, ax
000151E1: push ds
000151E2: cld 
000151E3: push dx
000151E4: mov dx, word ptr [bp + 0xc]
000151E7: mov ds, dx
000151E9: pop dx
000151EA: push dx
000151EB: mov dx, ss
000151ED: mov es, dx
000151EF: pop dx
000151F0: mov si, word ptr [bp + 0xa]
000151F3: mov di, bp
000151F5: sub di, 0x86
000151F9: mov word ptr [bp + 0xc], es
000151FC: mov word ptr [bp + 0xa], di
000151FF: movsb byte ptr es:[di], byte ptr [si]
00015200: cmp byte ptr [si - 1], 0
00015204: jne 0x151ff
00015206: pop ds
00015207: push ds
00015208: mov ah, 0x30
0001520A: int 0x21
0001520C: xor ah, ah
0001520E: cmp al, 2
00015210: jbe 0x15214
00015212: mov ah, 0x40
00015214: mov dx, word ptr [bp + 0xa]
00015217: push dx
00015218: mov dx, word ptr [bp + 0xc]
0001521B: mov ds, dx
0001521D: pop dx
0001521E: mov al, 2
00015220: or al, ah
00015222: mov ah, 0x3d
00015224: int 0x21
00015226: pop ds
00015227: jae 0x15231
00015229: mov word ptr [bp - 2], 0xffff
0001522E: jmp 0x153ad
00015231: mov word ptr [bp - 4], ax
00015234: push word ptr [bp + 0xe]
00015237: lcall 0x98e, 0x12a
0001523C: jae 0x15246
0001523E: mov word ptr [bp - 2], 0xfc19
00015243: jmp 0x153a6
00015246: mov es, dx
00015248: mov di, ax
0001524A: mov bx, word ptr es:[di + 0x24]
0001524E: cmp bx, 5
00015251: je 0x1526a
00015253: mov bx, word ptr [bp - 4]
00015256: mov cx, 0
00015259: mov dx, 0x10
0001525C: mov al, 0
0001525E: mov ah, 0x42
00015260: int 0x21
00015262: mov word ptr [bp - 6], 0x30
00015267: jmp 0x15373
0001526A: mov word ptr [bp - 6], 0x300
0001526F: mov ax, 0x1ab5
00015272: mov es, ax
00015274: mov di, 0x44bf
00015277: lds si, ptr [bp + 6]
0001527A: mov bx, word ptr [bp - 4]
0001527D: mov cx, 0xa
00015280: mov dx, di
00015282: push ds
00015283: mov ax, es
00015285: mov ds, ax
00015287: mov ah, 0x3f
00015289: int 0x21
0001528B: pop ds
0001528C: cmp byte ptr es:[di + 1], 5
00015291: je 0x152f5
00015293: mov byte ptr es:[di + 1], 5
00015298: mov bx, word ptr [bp - 4]
0001529B: mov cx, 0
0001529E: mov dx, 0
000152A1: mov al, 0
000152A3: mov ah, 0x42
000152A5: int 0x21
000152A7: mov bx, word ptr [bp - 4]
000152AA: mov cx, 0xa
000152AD: mov dx, di
000152AF: push ds
000152B0: mov ax, es
000152B2: mov ds, ax
000152B4: mov ah, 0x40
000152B6: int 0x21
000152B8: pop ds
000152B9: mov bx, word ptr [bp - 4]
000152BC: sub cx, cx
000152BE: sub dx, dx
000152C0: mov al, 2
000152C2: mov ah, 0x42
000152C4: int 0x21
000152C6: push dx
000152C7: push ax
000152C8: mov al, 0
000152CA: mov ah, 0x42
000152CC: int 0x21
000152CE: pop ax
000152CF: pop dx
000152D0: mov bx, word ptr [bp - 4]
000152D3: mov cx, dx
000152D5: mov dx, ax
000152D7: mov al, 0
000152D9: mov ah, 0x42
000152DB: int 0x21
000152DD: mov byte ptr es:[di], 0xc
000152E1: mov bx, word ptr [bp - 4]
000152E4: mov cx, 1
000152E7: mov dx, di
000152E9: push ds
000152EA: mov ax, es
000152EC: mov ds, ax
000152EE: mov ah, 0x40
000152F0: int 0x21
000152F2: pop ds
000152F3: jmp 0x15373
000152F5: mov bx, word ptr [bp - 4]
000152F8: sub cx, cx
000152FA: sub dx, dx
000152FC: mov al, 2
000152FE: mov ah, 0x42
00015300: int 0x21
00015302: push dx
00015303: push ax
00015304: mov al, 0
00015306: mov ah, 0x42
00015308: int 0x21
0001530A: pop ax
0001530B: pop dx
0001530C: mov bx, word ptr [bp - 4]
0001530F: mov cx, dx
00015311: mov dx, ax
00015313: mov al, 0
00015315: mov ah, 0x42
00015317: int 0x21
00015319: mov bx, word ptr [bp - 4]
0001531C: mov cx, 0xffff
0001531F: mov dx, 0xfcff
00015322: mov al, 1
00015324: mov ah, 0x42
00015326: int 0x21
00015328: mov bx, word ptr [bp - 4]
0001532B: mov cx, 1
0001532E: mov dx, di
00015330: push ds
00015331: mov ax, es
00015333: mov ds, ax
00015335: mov ah, 0x3f
00015337: int 0x21
00015339: pop ds
0001533A: mov bl, byte ptr es:[di]
0001533D: cmp bl, 0xa
00015340: je 0x1534e
00015342: cmp bl, 0xc
00015345: je 0x15373
00015347: mov word ptr [bp - 2], 0xfff7
0001534C: jmp 0x153a6
0001534E: mov byte ptr es:[di], 0xc
00015352: mov bx, word ptr [bp - 4]
00015355: mov cx, 0xffff
00015358: mov dx, 0xffff
0001535B: mov al, 1
0001535D: mov ah, 0x42
0001535F: int 0x21
00015361: mov bx, word ptr [bp - 4]
00015364: mov cx, 1
00015367: mov dx, di
00015369: push ds
0001536A: mov ax, es
0001536C: mov ds, ax
0001536E: mov ah, 0x40
00015370: int 0x21
00015372: pop ds
00015373: mov ax, word ptr [bp + 0xe]
00015376: push ax
00015377: mov ax, 0x1ab5
0001537A: mov es, ax
0001537C: push es
0001537D: mov di, 0x44bf
00015380: push di
00015381: mov ax, word ptr [bp + 8]
00015384: push ax
00015385: mov ax, word ptr [bp + 6]
00015388: push ax
00015389: push cs
0001538A: call 0x14e1f
0001538D: mov word ptr [bp - 2], ax
00015390: or ax, ax
00015392: jne 0x153a6
00015394: mov bx, word ptr [bp - 4]
00015397: mov cx, word ptr [bp - 6]
0001539A: mov dx, di
0001539C: push ds
0001539D: mov ax, es
0001539F: mov ds, ax
000153A1: mov ah, 0x40
000153A3: int 0x21
000153A5: pop ds
000153A6: mov bx, word ptr [bp - 4]
000153A9: mov ah, 0x3e
000153AB: int 0x21
000153AD: mov ax, word ptr [bp - 2]
000153B0: pop di
000153B1: pop si
000153B2: pop es
000153B3: pop ds
000153B4: mov sp, bp
000153B6: pop bp
000153B7: retf 0xa
000153BA: push bp
000153BB: mov bp, sp
000153BD: sub sp, 8
000153C0: push ds
000153C1: push es
000153C2: push si
000153C3: push di
000153C4: mov ax, 0x1ab5
000153C7: mov ds, ax
000153C9: mov ax, word ptr [bp + 0x12]
000153CC: push ax
000153CD: mov ax, word ptr [bp + 0x10]
000153D0: push ax
000153D1: mov ax, word ptr [bp + 0xe]
000153D4: push ax
000153D5: mov ax, word ptr [bp + 0xc]
000153D8: push ax
000153D9: push ds
000153DA: mov si, 0x43bf
000153DD: push si
000153DE: lcall 0x80c, 0x56c
000153E3: or ax, ax
000153E5: jge 0x153ec
000153E7: mov word ptr [bp - 2], ax
000153EA: jmp 0x15447
000153EC: push ax
000153ED: mov ax, word ptr [si + 0x10]
000153F0: push ax
000153F1: mov ax, word ptr [si + 0xe]
000153F4: push ax
000153F5: mov ax, 0
000153F8: push ax
000153F9: push ss
000153FA: lea ax, [bp - 6]
000153FD: push ax
000153FE: push ss
000153FF: lea ax, [bp - 8]
00015402: push ax
00015403: lcall 0x96b, 0x166
00015408: cmp ax, 0
0001540B: je 0x15412
0001540D: mov word ptr [bp - 2], ax
00015410: jmp 0x15447
00015412: mov ax, word ptr [bp - 4]
00015415: push ax
00015416: mov ax, word ptr [bp - 6]
00015419: push ax
0001541A: mov ax, word ptr [bp - 8]
0001541D: sub ax, 0xa
00015420: push ax
00015421: mov ax, word ptr [bp + 0xa]
00015424: push ax
00015425: mov ax, word ptr [bp + 8]
00015428: push ax
00015429: mov ax, word ptr [bp + 6]
0001542C: push ax
0001542D: lcall 0x125a, 0
00015432: mov word ptr [bp - 2], ax
00015435: lcall 0x96b, 0x1c0
0001543A: mov ax, word ptr [bp + 0x12]
0001543D: push ax
0001543E: mov ax, word ptr [bp + 0x10]
00015441: push ax
00015442: lcall 0x80c, 0x640
00015447: mov ax, word ptr [bp - 2]
0001544A: pop di
0001544B: pop si
0001544C: pop es
0001544D: pop ds
0001544E: mov sp, bp
00015450: pop bp
00015451: retf 0xe
00015454: push bp
00015455: mov bp, sp
00015457: sub sp, 4
0001545A: push ds
0001545B: push es
0001545C: push si
0001545D: push di
0001545E: mov ax, 0x1ab5
00015461: mov ds, ax
00015463: mov ax, word ptr [bp + 0xc]
00015466: push ax
00015467: mov ax, word ptr [bp + 0xa]
0001546A: push ax
0001546B: mov ax, word ptr [bp + 8]
0001546E: push ax
0001546F: mov ax, word ptr [bp + 6]
00015472: push ax
00015473: push ds
00015474: mov si, 0x43bf
00015477: push si
00015478: lcall 0x80c, 0x56c
0001547D: or ax, ax
0001547F: jge 0x15486
00015481: mov word ptr [bp - 2], ax
00015484: jmp 0x154c3
00015486: mov word ptr [bp - 4], ax
00015489: mov si, 0x43bf
0001548C: mov bx, word ptr [bp - 4]
0001548F: mov cx, 0x80
00015492: mov dx, si
00015494: mov ah, 0x3f
00015496: int 0x21
00015498: cmp ax, 0x80
0001549B: je 0x154a4
0001549D: mov word ptr [bp - 2], 0xf448
000154A2: jmp 0x154b6
000154A4: mov al, byte ptr [si]
000154A6: cmp al, 0xa
000154A8: je 0x154b1
000154AA: mov word ptr [bp - 2], 0xf448
000154AF: jmp 0x154b6
000154B1: mov word ptr [bp - 2], 0
000154B6: mov ax, word ptr [bp + 0xc]
000154B9: push ax
000154BA: mov ax, word ptr [bp + 0xa]
000154BD: push ax
000154BE: lcall 0x80c, 0x640
000154C3: mov ax, word ptr [bp - 2]
000154C6: pop di
000154C7: pop si
000154C8: pop es
000154C9: pop ds
000154CA: mov sp, bp
000154CC: pop bp
000154CD: retf 8
000154D0: push bp
000154D1: mov bp, sp
000154D3: sub sp, 2
000154D6: push ds
000154D7: push es
000154D8: push si
000154D9: push di
000154DA: mov ax, 0x1ab5
000154DD: mov ds, ax
000154DF: mov ax, word ptr [bp + 0x10]
000154E2: push ax
000154E3: mov ax, word ptr [bp + 0xe]
000154E6: push ax
000154E7: mov ax, word ptr [bp + 0xc]
000154EA: push ax
000154EB: mov ax, word ptr [bp + 0xa]
000154EE: push ax
000154EF: push cs
000154F0: call 0x15454
000154F3: cmp ax, 0
000154F6: je 0x154fd
000154F8: mov word ptr [bp - 2], ax
000154FB: jmp 0x1550e
000154FD: mov si, 0x43bf
00015500: les di, ptr [bp + 6]
00015503: cld 
00015504: mov cx, 0x80
00015507: rep movsb byte ptr es:[di], byte ptr [si]
00015509: mov word ptr [bp - 2], 0
0001550E: mov ax, word ptr [bp - 2]
00015511: pop di
00015512: pop si
00015513: pop es
00015514: pop ds
00015515: mov sp, bp
00015517: pop bp
00015518: retf 0xc
0001551B: push bp
0001551C: mov bp, sp
0001551E: sub sp, 2
00015521: push ds
00015522: push es
00015523: push si
00015524: push di
00015525: mov ax, 0x1ab5
00015528: mov ds, ax
0001552A: mov ax, word ptr [bp + 0xc]
0001552D: push ax
0001552E: mov ax, word ptr [bp + 0xa]
00015531: push ax
00015532: mov ax, word ptr [bp + 8]
00015535: push ax
00015536: mov ax, word ptr [bp + 6]
00015539: push ax
0001553A: push ds
0001553B: mov ax, 0x43bf
0001553E: push ax
0001553F: push cs
00015540: call 0x154d0
00015543: or ax, ax
00015545: je 0x1554c
00015547: mov word ptr [bp - 2], ax
0001554A: jmp 0x15559
0001554C: push ds
0001554D: mov ax, 0x43bf
00015550: push ax
00015551: lcall 0x12c5, 0xc0
00015556: mov word ptr [bp - 2], ax
00015559: mov ax, word ptr [bp - 2]
0001555C: pop di
0001555D: pop si
0001555E: pop es
0001555F: pop ds
00015560: mov sp, bp
00015562: pop bp
00015563: retf 8
00015566: push bp
00015567: mov bp, sp
00015569: sub sp, 8
0001556C: push ds
0001556D: push es
0001556E: push si
0001556F: push di
00015570: mov ax, 0x1ab5
00015573: mov ds, ax
00015575: mov ax, word ptr [bp + 0x14]
00015578: push ax
00015579: mov ax, word ptr [bp + 0x12]
0001557C: push ax
0001557D: mov ax, word ptr [bp + 0x10]
00015580: push ax
00015581: mov ax, word ptr [bp + 0xe]
00015584: push ax
00015585: push ds
00015586: mov si, 0x43bf
00015589: push si
0001558A: lcall 0x80c, 0x56c
0001558F: or ax, ax
00015591: jge 0x15598
00015593: mov word ptr [bp - 2], ax
00015596: jmp 0x155f7
00015598: push ax
00015599: mov ax, word ptr [si + 0x10]
0001559C: push ax
0001559D: mov ax, word ptr [si + 0xe]
000155A0: push ax
000155A1: mov ax, 0
000155A4: push ax
000155A5: push ss
000155A6: lea ax, [bp - 6]
000155A9: push ax
000155AA: push ss
000155AB: lea ax, [bp - 8]
000155AE: push ax
000155AF: lcall 0x96b, 0x166
000155B4: cmp ax, 0
000155B7: je 0x155be
000155B9: mov word ptr [bp - 2], ax
000155BC: jmp 0x155f7
000155BE: mov ax, word ptr [bp - 4]
000155C1: push ax
000155C2: mov ax, word ptr [bp - 6]
000155C5: push ax
000155C6: mov ax, word ptr [bp - 8]
000155C9: sub ax, 0xa
000155CC: push ax
000155CD: mov ax, word ptr [bp + 0xc]
000155D0: push ax
000155D1: mov ax, word ptr [bp + 0xa]
000155D4: push ax
000155D5: mov ax, word ptr [bp + 8]
000155D8: push ax
000155D9: mov ax, word ptr [bp + 6]
000155DC: push ax
000155DD: lcall 0x12ed, 0xc
000155E2: mov word ptr [bp - 2], ax
000155E5: lcall 0x96b, 0x1c0
000155EA: mov ax, word ptr [bp + 0x14]
000155ED: push ax
000155EE: mov ax, word ptr [bp + 0x12]
000155F1: push ax
000155F2: lcall 0x80c, 0x640
000155F7: mov ax, word ptr [bp - 2]
000155FA: pop di
000155FB: pop si
000155FC: pop es
000155FD: pop ds
000155FE: mov sp, bp
00015600: pop bp
00015601: retf 0x10
00015604: push bp
00015605: mov bp, sp
00015607: sub sp, 2
0001560A: push ds
0001560B: push es
0001560C: push si
0001560D: push di
0001560E: mov ax, 0x1ab5
00015611: mov ds, ax
00015613: les di, ptr [bp + 0xa]
00015616: mov word ptr es:[di], 5
0001561B: les di, ptr [bp + 6]
0001561E: mov word ptr es:[di], 1
00015623: mov word ptr [bp - 2], 0
00015628: mov ax, word ptr [bp - 2]
0001562B: pop di
0001562C: pop si
0001562D: pop es
0001562E: pop ds
0001562F: mov sp, bp
00015631: pop bp
00015632: retf 8
00015635: add byte ptr [di - 0x75], dl
00015638: in al, dx
00015639: sub sp, 0xe
0001563C: push ds
0001563D: push es
0001563E: push si
0001563F: push di
00015640: mov ax, 0x1ab5
00015643: mov ds, ax
00015645: push ss
00015646: lea ax, [bp - 6]
00015649: push ax
0001564A: push ss
0001564B: lea ax, [bp - 8]
0001564E: push ax
0001564F: lcall 0x96b, 0x66
00015654: les di, ptr [bp - 6]
00015657: lds si, ptr [bp + 0xc]
0001565A: mov al, byte ptr [si + 0x13]
0001565D: xor ah, ah
0001565F: mov word ptr [bp - 0xe], ax
00015662: mov al, byte ptr [si + 0x12]
00015665: mov word ptr [bp - 0xc], ax
00015668: mov bx, word ptr [si + 0x14]
0001566B: mov word ptr [bp - 0xa], bx
0001566E: mul bx
00015670: or dx, dx
00015672: jne 0x15679
00015674: cmp ax, word ptr [bp - 8]
00015677: jle 0x15680
00015679: mov word ptr [bp - 2], 0xfffe
0001567E: jmp 0x156b9
00015680: push ds
00015681: push si
00015682: push word ptr [bp + 0xa]
00015685: push es
00015686: push di
00015687: lcall 0x9e7, 0xa
0001568C: or ax, ax
0001568E: je 0x15695
00015690: mov word ptr [bp - 2], ax
00015693: jmp 0x156b9
00015695: push es
00015696: push di
00015697: push word ptr [bp - 0xa]
0001569A: push word ptr [bp - 0xc]
0001569D: push word ptr [bp - 0xe]
000156A0: push word ptr [bp + 8]
000156A3: push word ptr [bp + 6]
000156A6: push cs
000156A7: call 0x156c6
000156AA: push ds
000156AB: push si
000156AC: push word ptr [bp + 0xa]
000156AF: push es
000156B0: push di
000156B1: lcall 0x9e7, 0xb0
000156B6: mov word ptr [bp - 2], ax
000156B9: mov ax, word ptr [bp - 2]
000156BC: pop di
000156BD: pop si
000156BE: pop es
000156BF: pop ds
000156C0: mov sp, bp
000156C2: pop bp
000156C3: retf 0xa
000156C6: push bp
000156C7: mov bp, sp
000156C9: sub sp, 4
000156CC: push ds
000156CD: push es
000156CE: push si
000156CF: push di
000156D0: mov ax, 0x1ab5
000156D3: mov ds, ax
000156D5: les di, ptr [bp + 0x10]
000156D8: mov ax, word ptr [bp + 8]
000156DB: cmp ax, word ptr [bp + 6]
000156DE: jne 0x156e3
000156E0: jmp 0x15786
000156E3: mov ax, word ptr [bp + 0xc]
000156E6: mul word ptr [bp + 0xa]
000156E9: mov cl, al
000156EB: mov ax, 1
000156EE: shl ax, cl
000156F0: dec ax
000156F1: and word ptr [bp + 8], ax
000156F4: and word ptr [bp + 6], ax
000156F7: mov ax, 8
000156FA: div byte ptr [bp + 0xa]
000156FD: mov word ptr [bp - 4], ax
00015700: mov ax, 1
00015703: mov cx, word ptr [bp + 0xa]
00015706: shl ax, cl
00015708: dec ax
00015709: mov ah, al
0001570B: not ah
0001570D: mov dx, ax
0001570F: mov bh, byte ptr [bp + 8]
00015712: mov bl, byte ptr [bp + 6]
00015715: mov cx, word ptr [bp + 0xe]
00015718: cld 
00015719: cmp word ptr [bp + 0xc], 1
0001571D: jne 0x1573f
0001571F: push cx
00015720: mov cx, word ptr [bp - 4]
00015723: xor ah, ah
00015725: mov al, byte ptr es:[di]
00015728: push cx
00015729: mov cx, word ptr [bp + 0xa]
0001572C: shl ax, cl
0001572E: pop cx
0001572F: cmp ah, bh
00015731: jne 0x15735
00015733: mov ah, bl
00015735: or al, ah
00015737: loop 0x15728
00015739: stosb byte ptr es:[di], al
0001573A: pop cx
0001573B: loop 0x1571f
0001573D: jmp 0x15786
0001573F: push cx
00015740: mov cx, word ptr [bp - 4]
00015743: push cx
00015744: push di
00015745: xor ax, ax
00015747: xor cx, cx
00015749: xor al, al
0001574B: rol byte ptr es:[di], 1
0001574E: rcl al, 1
00015750: shl al, cl
00015752: or ah, al
00015754: add di, word ptr [bp + 0xe]
00015757: inc cl
00015759: cmp cl, 4
0001575C: jb 0x15749
0001575E: pop di
0001575F: pop cx
00015760: cmp ah, bh
00015762: jne 0x15780
00015764: push cx
00015765: push di
00015766: xor cx, cx
00015768: mov al, bl
0001576A: shr al, cl
0001576C: and al, dl
0001576E: and byte ptr es:[di], dh
00015771: or byte ptr es:[di], al
00015774: add di, word ptr [bp + 0xe]
00015777: inc cl
00015779: cmp cl, 4
0001577C: jb 0x15768
0001577E: pop di
0001577F: pop cx
00015780: loop 0x15743
00015782: inc di
00015783: pop cx
00015784: loop 0x1573f
00015786: mov word ptr [bp - 2], 0
0001578B: mov ax, word ptr [bp - 2]
0001578E: pop di
0001578F: pop si
00015790: pop es
00015791: pop ds
00015792: mov sp, bp
00015794: pop bp
00015795: retf 0xe
00015798: push bp
00015799: mov bp, sp
0001579B: sub sp, 2
0001579E: push ds
0001579F: push es
000157A0: push si
000157A1: push di
000157A2: mov ax, 0x1ab5
000157A5: mov ds, ax
000157A7: lds si, ptr [bp + 0xa]
000157AA: les di, ptr [bp + 6]
000157AD: cmp word ptr [si], 0xca00
000157B1: jne 0x157ba
000157B3: cmp word ptr es:[di], 0xca00
000157B8: je 0x157c1
000157BA: mov word ptr [bp - 2], 0xffe4
000157BF: jmp 0x15832
000157C1: mov al, byte ptr [si + 0x13]
000157C4: cmp al, byte ptr es:[di + 0x13]
000157C8: je 0x157d1
000157CA: mov word ptr [bp - 2], 0xfffa
000157CF: jmp 0x15832
000157D1: mov ax, word ptr [si + 0x2c]
000157D4: cmp ax, word ptr es:[di + 0x2c]
000157D8: jne 0x157e3
000157DA: mov bx, word ptr [si + 0x2e]
000157DD: cmp bx, word ptr es:[di + 0x2e]
000157E1: je 0x157ea
000157E3: mov word ptr [bp - 2], 0xf82d
000157E8: jmp 0x15832
000157EA: les di, ptr [bp + 0xe]
000157ED: mov word ptr es:[di], 0xca20
000157F2: mov ax, ds
000157F4: mov word ptr es:[di + 6], ax
000157F8: mov word ptr es:[di + 4], si
000157FC: lcall 0x1535, 0x2d
00015801: mov word ptr es:[di + 2], ax
00015805: mov word ptr es:[di + 0x8c], 0
0001580C: mov ax, ds
0001580E: sub ax, word ptr [bp + 8]
00015811: jne 0x15821
00015813: mov ax, si
00015815: sub ax, word ptr [bp + 6]
00015818: jne 0x15821
0001581A: mov word ptr es:[di + 0x8c], 1
00015821: lds si, ptr [bp + 6]
00015824: add di, 8
00015827: mov cx, 0x80
0001582A: cld 
0001582B: rep movsb byte ptr es:[di], byte ptr [si]
0001582D: mov word ptr [bp - 2], 0
00015832: mov ax, word ptr [bp - 2]
00015835: pop di
00015836: pop si
00015837: pop es
00015838: pop ds
00015839: mov sp, bp
0001583B: pop bp
0001583C: retf 0xc
0001583F: push bp
00015840: mov bp, sp
00015842: sub sp, 4
00015845: push ds
00015846: push es
00015847: push si
00015848: push di
00015849: mov ax, 0x1ab5
0001584C: mov ds, ax
0001584E: mov word ptr [bp - 4], 0
00015853: lds si, ptr [bp + 8]
00015856: les di, ptr [bp + 0xc]
00015859: add di, 8
0001585C: cmp word ptr [si], 0xca00
00015860: je 0x15869
00015862: mov word ptr [bp - 2], 0xffe4
00015867: jmp 0x158ce
00015869: mov ax, word ptr [si + 4]
0001586C: cmp byte ptr [si + 0x12], 4
00015870: je 0x1587d
00015872: cmp byte ptr [si + 0x13], 8
00015876: jne 0x15880
00015878: les di, ptr [bp + 8]
0001587B: jmp 0x158a7
0001587D: mov ax, 6
00015880: push word ptr [bp + 6]
00015883: push es
00015884: push di
00015885: push ax
00015886: push word ptr [si + 0x2c]
00015889: push word ptr [si + 0x2e]
0001588C: lcall 0x5e5, 0x1b0
00015891: or ax, ax
00015893: jne 0x158be
00015895: mov word ptr [bp - 4], 1
0001589A: push ds
0001589B: push si
0001589C: push es
0001589D: push di
0001589E: lcall 0x13d3, 2
000158A3: or ax, ax
000158A5: jne 0x158be
000158A7: push word ptr [bp + 0xe]
000158AA: push word ptr [bp + 0xc]
000158AD: push ds
000158AE: push si
000158AF: push es
000158B0: push di
000158B1: push cs
000158B2: call 0x15798
000158B5: or ax, ax
000158B7: jne 0x158be
000158B9: mov word ptr [bp - 2], ax
000158BC: jmp 0x158ce
000158BE: mov word ptr [bp - 2], ax
000158C1: cmp word ptr [bp - 4], 0
000158C5: je 0x158ce
000158C7: push es
000158C8: push di
000158C9: lcall 0x5e5, 0x2fa
000158CE: mov ax, word ptr [bp - 2]
000158D1: pop di
000158D2: pop si
000158D3: pop es
000158D4: pop ds
000158D5: mov sp, bp
000158D7: pop bp
000158D8: retf 0xa
000158DB: push bp
000158DC: mov bp, sp
000158DE: sub sp, 4
000158E1: push ds
000158E2: push es
000158E3: push si
000158E4: push di
000158E5: mov ax, 0x1ab5
000158E8: mov ds, ax
000158EA: mov word ptr [bp - 2], 0
000158EF: les di, ptr [bp + 6]
000158F2: cmp word ptr es:[di], 0xca20
000158F7: je 0x15900
000158F9: mov word ptr [bp - 2], 0xffe4
000158FE: jmp 0x15925
00015900: cmp word ptr es:[di + 0x8c], 1
00015906: je 0x1591d
00015908: push es
00015909: mov ax, di
0001590B: add ax, 8
0001590E: push ax
0001590F: lcall 0x5e5, 0x2fa
00015914: or ax, ax
00015916: je 0x1591d
00015918: mov word ptr [bp - 2], ax
0001591B: jmp 0x15925
0001591D: mov cx, 0x8e
00015920: mov al, 0xff
00015922: cld 
00015923: rep stosb byte ptr es:[di], al
00015925: mov ax, word ptr [bp - 2]
00015928: pop di
00015929: pop si
0001592A: pop es
0001592B: pop ds
0001592C: mov sp, bp
0001592E: pop bp
0001592F: retf 4
00015932: push bp
00015933: mov bp, sp
00015935: sub sp, 0x14
00015938: push ds
00015939: push es
0001593A: push si
0001593B: push di
0001593C: mov ax, 0x1ab5
0001593F: mov ds, ax
00015941: lds si, ptr [bp + 0xa]
00015944: les di, ptr [bp + 6]
00015947: cmp word ptr [si], 0xca00
0001594B: jne 0x15954
0001594D: cmp word ptr es:[di], 0xca00
00015952: je 0x1595c
00015954: mov word ptr [bp - 2], 0xffe4
00015959: jmp 0x15a8d
0001595C: mov ax, word ptr [si + 0x14]
0001595F: mov word ptr [bp - 0xa], ax
00015962: xor ah, ah
00015964: mov al, byte ptr [si + 0x12]
00015967: mov word ptr [bp - 0xc], ax
0001596A: mov al, byte ptr [si + 0x13]
0001596D: mov word ptr [bp - 0xe], ax
00015970: cmp al, byte ptr es:[di + 0x13]
00015974: je 0x1597e
00015976: mov word ptr [bp - 2], 0xfffa
0001597B: jmp 0x15a8d
0001597E: mov ax, word ptr [si + 0x2c]
00015981: cmp ax, word ptr es:[di + 0x2c]
00015985: jne 0x15993
00015987: mov bx, word ptr [si + 0x2e]
0001598A: mov word ptr [bp - 0x12], bx
0001598D: cmp bx, word ptr es:[di + 0x2e]
00015991: je 0x1599b
00015993: mov word ptr [bp - 2], 0xf82d
00015998: jmp 0x15a8d
0001599B: push ss
0001599C: lea ax, [bp - 6]
0001599F: push ax
000159A0: push ss
000159A1: lea ax, [bp - 8]
000159A4: push ax
000159A5: lcall 0x96b, 0x66
000159AA: shr word ptr [bp - 8], 1
000159AD: mov ax, word ptr [bp - 0xa]
000159B0: mul word ptr [bp - 0xc]
000159B3: or dx, dx
000159B5: jne 0x159bc
000159B7: cmp ax, word ptr [bp - 8]
000159BA: jbe 0x159c4
000159BC: mov word ptr [bp - 2], 0xfffe
000159C1: jmp 0x15a8d
000159C4: mov ax, word ptr [si + 0x16]
000159C7: cmp ax, word ptr es:[di + 0x16]
000159CB: jne 0x159eb
000159CD: cmp ax, 0
000159D0: je 0x159eb
000159D2: mov bx, 0x8000
000159D5: mov word ptr [si + 0x28], 0
000159DA: mov word ptr [si + 0x2a], 2
000159DF: mov word ptr es:[di + 0x28], 2
000159E5: mov word ptr es:[di + 0x2a], 2
000159EB: lcall 0x1535, 0x2d
000159F0: mov bx, ax
000159F2: mov al, byte ptr [bp - 0xe]
000159F5: mul byte ptr [bp - 0xc]
000159F8: mov cl, al
000159FA: mov ax, 1
000159FD: shl ax, cl
000159FF: dec ax
00015A00: and bx, ax
00015A02: mov word ptr [bp - 0x10], bx
00015A05: lds si, ptr [bp - 6]
00015A08: les di, ptr [bp - 6]
00015A0B: add di, word ptr [bp - 8]
00015A0E: mov word ptr [bp - 0x14], 0
00015A13: push word ptr [bp + 0xc]
00015A16: push word ptr [bp + 0xa]
00015A19: push word ptr [bp - 0x14]
00015A1C: push ds
00015A1D: push si
00015A1E: lcall 0x9e7, 0xa
00015A23: or ax, ax
00015A25: jne 0x15a8a
00015A27: push ds
00015A28: push si
00015A29: push es
00015A2A: push di
00015A2B: push word ptr [bp - 0xa]
00015A2E: push word ptr [bp - 0xc]
00015A31: push word ptr [bp - 0xe]
00015A34: push word ptr [bp - 0x10]
00015A37: push cs
00015A38: call 0x15ab6
00015A3B: push word ptr [bp + 8]
00015A3E: push word ptr [bp + 6]
00015A41: push word ptr [bp - 0x14]
00015A44: push es
00015A45: push di
00015A46: lcall 0x9e7, 0xb0
00015A4B: or ax, ax
00015A4D: jne 0x15a8a
00015A4F: cmp word ptr [bp - 0x10], 0
00015A53: je 0x15a7f
00015A55: push ds
00015A56: push si
00015A57: push word ptr [bp - 0xa]
00015A5A: push word ptr [bp - 0xc]
00015A5D: push word ptr [bp - 0xe]
00015A60: push word ptr [bp - 0x10]
00015A63: xor ax, ax
00015A65: push ax
00015A66: lcall 0x13a3, 0x96
00015A6B: push word ptr [bp + 0xc]
00015A6E: push word ptr [bp + 0xa]
00015A71: push word ptr [bp - 0x14]
00015A74: push ds
00015A75: push si
00015A76: lcall 0x9e7, 0xb0
00015A7B: or ax, ax
00015A7D: jne 0x15a8a
00015A7F: inc word ptr [bp - 0x14]
00015A82: dec word ptr [bp - 0x12]
00015A85: jne 0x15a13
00015A87: mov ax, 0
00015A8A: mov word ptr [bp - 2], ax
00015A8D: lds si, ptr [bp + 0xa]
00015A90: mov word ptr [si + 0x28], 0
00015A95: mov word ptr [si + 0x2a], 4
00015A9A: les di, ptr [bp + 6]
00015A9D: mov word ptr es:[di + 0x28], 0
00015AA3: mov word ptr es:[di + 0x2a], 4
00015AA9: mov ax, word ptr [bp - 2]
00015AAC: pop di
00015AAD: pop si
00015AAE: pop es
00015AAF: pop ds
00015AB0: mov sp, bp
00015AB2: pop bp
00015AB3: retf 8
00015AB6: push bp
00015AB7: mov bp, sp
00015AB9: sub sp, 2
00015ABC: push ds
00015ABD: push es
00015ABE: push si
00015ABF: push di
00015AC0: mov ax, 0x1ab5
00015AC3: mov ds, ax
00015AC5: lds si, ptr [bp + 0x12]
00015AC8: les di, ptr [bp + 0xe]
00015ACB: mov cx, word ptr [bp + 0xc]
00015ACE: mov dx, word ptr [bp + 6]
00015AD1: cld 
00015AD2: cmp word ptr [bp + 0xa], 1
00015AD6: je 0x15ae1
00015AD8: cmp word ptr [bp + 0xa], 4
00015ADC: je 0x15b35
00015ADE: jmp 0x15b76
00015AE1: cmp word ptr [bp + 8], 1
00015AE5: je 0x15af6
00015AE7: cmp word ptr [bp + 8], 2
00015AEB: je 0x15b07
00015AED: cmp word ptr [bp + 8], 8
00015AF1: je 0x15b25
00015AF3: jmp 0x15b76
00015AF6: ror dl, 1
00015AF8: not dl
00015AFA: cwde 
00015AFB: mov dl, dh
00015AFD: shr cx, 1
00015AFF: lodsw ax, word ptr [si]
00015B00: xor ax, dx
00015B02: stosw word ptr es:[di], ax
00015B03: loop 0x15aff
00015B05: jmp 0x15b6f
00015B07: mov dh, 3
00015B09: mov bl, 4
00015B0B: lodsb al, byte ptr [si]
00015B0C: xor ah, ah
00015B0E: shl ax, 1
00015B10: shl ax, 1
00015B12: xor ah, dl
00015B14: mov ah, dh
00015B16: je 0x15b1a
00015B18: xor ah, ah
00015B1A: or al, ah
00015B1C: dec bl
00015B1E: jne 0x15b0c
00015B20: stosb byte ptr es:[di], al
00015B21: loop 0x15b09
00015B23: jmp 0x15b6f
00015B25: lodsb al, byte ptr [si]
00015B26: mov ah, al
00015B28: xor al, al
00015B2A: cmp ah, dl
00015B2C: jne 0x15b30
00015B2E: not al
00015B30: stosb byte ptr es:[di], al
00015B31: loop 0x15b25
00015B33: jmp 0x15b6f
00015B35: cmp word ptr [bp + 8], 1
00015B39: je 0x15b3d
00015B3B: jmp 0x15b76
00015B3D: mov dh, dl
00015B3F: not dh
00015B41: mov bx, cx
00015B43: push si
00015B44: push cx
00015B45: mov al, dh
00015B47: mov dl, 0xff
00015B49: mov cx, 4
00015B4C: ror al, 1
00015B4E: cwde 
00015B4F: xor ah, byte ptr [si]
00015B51: and dl, ah
00015B53: add si, bx
00015B55: loop 0x15b4c
00015B57: pop cx
00015B58: pop si
00015B59: mov byte ptr es:[di], dl
00015B5C: inc si
00015B5D: inc di
00015B5E: loop 0x15b43
00015B60: lds si, ptr [bp + 0xe]
00015B63: mov dx, 3
00015B66: mov cx, bx
00015B68: shr cx, 1
00015B6A: rep movsw word ptr es:[di], word ptr [si]
00015B6C: dec dx
00015B6D: jne 0x15b66
00015B6F: mov word ptr [bp - 2], 0
00015B74: jmp 0x15b7b
00015B76: mov word ptr [bp - 2], 0xfffa
00015B7B: mov ax, word ptr [bp - 2]
00015B7E: pop di
00015B7F: pop si
00015B80: pop es
00015B81: pop ds
00015B82: mov sp, bp
00015B84: pop bp
00015B85: retf 0x10
00015B88: push bp
00015B89: mov bp, sp
00015B8B: sub sp, 0x4a
00015B8E: push ds
00015B8F: push es
00015B90: push si
00015B91: push di
00015B92: mov ax, 0x1ab5
00015B95: mov ds, ax
00015B97: mov word ptr [bp - 0x36], 0
00015B9C: mov word ptr [bp - 0x38], 0
00015BA1: cmp byte ptr [0x6f51], 1
00015BA6: je 0x15bac
00015BA8: push cs
00015BA9: call 0x15e6e
00015BAC: lds si, ptr [bp + 0xe]
00015BAF: cmp word ptr [si], 0xca20
00015BB3: je 0x15bbd
00015BB5: mov word ptr [bp - 2], 0xf82c
00015BBA: jmp 0x15e61
00015BBD: mov ax, word ptr [si + 2]
00015BC0: mov word ptr [bp - 6], ax
00015BC3: mov dx, ds
00015BC5: mov ax, si
00015BC7: add ax, 8
00015BCA: mov word ptr [bp - 8], dx
00015BCD: mov word ptr [bp - 0xa], ax
00015BD0: lds si, ptr [si + 4]
00015BD3: les di, ptr [bp + 0xa]
00015BD6: mov al, byte ptr [si + 0x12]
00015BD9: xor ah, ah
00015BDB: mov word ptr [bp - 0x24], ax
00015BDE: cmp al, byte ptr es:[di + 0x12]
00015BE2: je 0x15bec
00015BE4: mov word ptr [bp - 2], 0xfffa
00015BE9: jmp 0x15e61
00015BEC: mov bl, byte ptr [si + 0x13]
00015BEF: xor bh, bh
00015BF1: mov word ptr [bp - 0xc], bx
00015BF4: cmp bl, byte ptr es:[di + 0x13]
00015BF8: je 0x15c02
00015BFA: mov word ptr [bp - 2], 0xfffa
00015BFF: jmp 0x15e61
00015C02: mov word ptr [bp - 0x3a], 0
00015C07: mov ax, word ptr [bp + 8]
00015C0A: or ax, ax
00015C0C: jge 0x15c18
00015C0E: neg ax
00015C10: mov word ptr [bp - 0x3a], ax
00015C13: xor ax, ax
00015C15: mov word ptr [bp + 8], ax
00015C18: cmp ax, word ptr es:[di + 0xa]
00015C1C: jbe 0x15c26
00015C1E: mov word ptr [bp - 2], 0
00015C23: jmp 0x15e61
00015C26: mov ax, word ptr [si + 0xa]
00015C29: cmp word ptr [bp - 0x3a], ax
00015C2C: jbe 0x15c36
00015C2E: mov word ptr [bp - 2], 0
00015C33: jmp 0x15e61
00015C36: sub ax, word ptr [bp - 0x3a]
00015C39: inc ax
00015C3A: mov bx, word ptr es:[di + 0xa]
00015C3E: sub bx, word ptr [bp + 8]
00015C41: inc bx
00015C42: cmp ax, bx
00015C44: jbe 0x15c48
00015C46: mov ax, bx
00015C48: mov word ptr [bp - 0xe], ax
00015C4B: mov bx, word ptr [bp - 0x3a]
00015C4E: add bx, ax
00015C50: dec bx
00015C51: mov word ptr [bp - 0x3e], bx
00015C54: mul word ptr [bp - 0xc]
00015C57: mov word ptr [bp - 0x10], ax
00015C5A: mov bx, 8
00015C5D: div bx
00015C5F: or dx, dx
00015C61: je 0x15c64
00015C63: inc ax
00015C64: mov word ptr [bp - 0x16], ax
00015C67: mov word ptr [bp - 0x18], ax
00015C6A: mov word ptr [bp - 0x3c], 0
00015C6F: mov ax, word ptr [bp + 6]
00015C72: or ax, ax
00015C74: jge 0x15c80
00015C76: neg ax
00015C78: mov word ptr [bp - 0x3c], ax
00015C7B: xor ax, ax
00015C7D: mov word ptr [bp + 6], ax
00015C80: cmp ax, word ptr es:[di + 0xc]
00015C84: jbe 0x15c8e
00015C86: mov word ptr [bp - 2], 0
00015C8B: jmp 0x15e61
00015C8E: mov ax, word ptr [si + 0xc]
00015C91: cmp word ptr [bp - 0x3c], ax
00015C94: jbe 0x15c9e
00015C96: mov word ptr [bp - 2], 0
00015C9B: jmp 0x15e61
00015C9E: sub ax, word ptr [bp - 0x3c]
00015CA1: inc ax
00015CA2: mov bx, word ptr es:[di + 0xc]
00015CA6: sub bx, word ptr [bp + 6]
00015CA9: inc bx
00015CAA: cmp ax, bx
00015CAC: jbe 0x15cb0
00015CAE: mov ax, bx
00015CB0: mov word ptr [bp - 0x12], ax
00015CB3: mov bx, word ptr [bp - 0x3c]
00015CB6: add bx, ax
00015CB8: dec bx
00015CB9: mov word ptr [bp - 0x40], bx
00015CBC: mul word ptr [bp - 0x24]
00015CBF: mov word ptr [bp - 0x14], ax
00015CC2: mov ax, word ptr [si + 0x74]
00015CC5: mov word ptr [bp - 4], ax
00015CC8: cmp ax, 2
00015CCB: jae 0x15cd0
00015CCD: jmp 0x15e30
00015CD0: lds si, ptr [bp - 0xa]
00015CD3: mov ax, word ptr [si + 0x16]
00015CD6: cmp ax, word ptr es:[di + 0x16]
00015CDA: jne 0x15d00
00015CDC: cmp ax, 0
00015CDF: je 0x15d00
00015CE1: mov bx, 0x8000
00015CE4: mov word ptr [si + 0x28], 0
00015CE9: mov word ptr [si + 0x2a], 2
00015CEE: mov word ptr [bp - 0x36], bx
00015CF1: mov word ptr es:[di + 0x28], 2
00015CF7: mov word ptr es:[di + 0x2a], 2
00015CFD: mov word ptr [bp - 0x38], bx
00015D00: mov word ptr [bp - 0x2a], 0xff
00015D05: mov word ptr [bp - 0x2c], 0
00015D0A: cmp byte ptr [bp - 0xc], 8
00015D0E: jne 0x15d13
00015D10: jmp 0x15de1
00015D13: push ss
00015D14: lea ax, [bp - 0x48]
00015D17: push ax
00015D18: push ss
00015D19: lea ax, [bp - 0x4a]
00015D1C: push ax
00015D1D: lcall 0x96b, 0x66
00015D22: mov ax, word ptr [bp - 0x4a]
00015D25: cmp ax, word ptr [bp - 0x16]
00015D28: jae 0x15d32
00015D2A: mov word ptr [bp - 2], 0xfffe
00015D2F: jmp 0x160b2
00015D32: mov ax, word ptr [bp + 8]
00015D35: mul word ptr [bp - 0xc]
00015D38: mov cx, ax
00015D3A: and cx, 7
00015D3D: mov bx, 8
00015D40: sub bx, cx
00015D42: mov word ptr [bp - 0x2e], bx
00015D45: mov dl, 0xff
00015D47: shr dl, cl
00015D49: mov byte ptr [bp - 0x2a], dl
00015D4C: add ax, word ptr [bp - 0x10]
00015D4F: mov cx, ax
00015D51: and cx, 7
00015D54: mov dh, 0xff
00015D56: shr dh, cl
00015D58: not dh
00015D5A: mov byte ptr [bp - 0x29], dh
00015D5D: cmp bx, word ptr [bp - 0x10]
00015D60: jl 0x15d73
00015D62: mov bx, word ptr [bp - 0x10]
00015D65: mov word ptr [bp - 0x2e], bx
00015D68: or dh, dh
00015D6A: je 0x15d73
00015D6C: and byte ptr [bp - 0x2a], dh
00015D6F: mov byte ptr [bp - 0x29], 0
00015D73: mov ax, word ptr [bp + 8]
00015D76: sub ax, word ptr [bp - 0x3a]
00015D79: mul word ptr [bp - 0xc]
00015D7C: and ax, 7
00015D7F: mov word ptr [bp - 0x2c], ax
00015D82: mov word ptr [bp - 0x30], 1
00015D87: mov ax, word ptr [bp - 0x3a]
00015D8A: mul word ptr [bp - 0xc]
00015D8D: and ax, 7
00015D90: mov bx, ax
00015D92: mov ax, word ptr [bp + 8]
00015D95: mul word ptr [bp - 0xc]
00015D98: and ax, 7
00015D9B: cmp bx, ax
00015D9D: jle 0x15da2
00015D9F: inc word ptr [bp - 0x30]
00015DA2: mov ax, word ptr [bp - 0x10]
00015DA5: sub ax, word ptr [bp - 0x2e]
00015DA8: mov bx, 8
00015DAB: xor dx, dx
00015DAD: div bx
00015DAF: mov word ptr [bp - 0x32], ax
00015DB2: or dx, dx
00015DB4: jne 0x15dba
00015DB6: mov byte ptr [bp - 0x29], 0
00015DBA: mov word ptr [bp - 0x34], 0
00015DBF: cmp dx, word ptr [bp - 0x2c]
00015DC2: jbe 0x15dc7
00015DC4: inc word ptr [bp - 0x34]
00015DC7: mov ax, word ptr [bp - 0x30]
00015DCA: add ax, word ptr [bp - 0x32]
00015DCD: add ax, word ptr [bp - 0x34]
00015DD0: mov word ptr [bp - 0x16], ax
00015DD3: mov ax, word ptr [bp - 0x32]
00015DD6: inc ax
00015DD7: cmp byte ptr [bp - 0x29], 0
00015DDB: je 0x15dde
00015DDD: inc ax
00015DDE: mov word ptr [bp - 0x18], ax
00015DE1: mov ax, word ptr [si + 0x14]
00015DE4: sub ax, word ptr [bp - 0x16]
00015DE7: mov word ptr [bp - 0x1c], ax
00015DEA: mov ax, word ptr es:[di + 0x14]
00015DEE: sub ax, word ptr [bp - 0x18]
00015DF1: mov word ptr [bp - 0x1e], ax
00015DF4: push ds
00015DF5: push si
00015DF6: push word ptr [bp - 0x3a]
00015DF9: push word ptr [bp - 0x3c]
00015DFC: mov ax, 0
00015DFF: push ax
00015E00: lcall 0xb08, 0xa
00015E05: mov ds, dx
00015E07: mov si, ax
00015E09: or dx, dx
00015E0B: jne 0x15e12
00015E0D: mov word ptr [bp - 2], ax
00015E10: jmp 0x15e45
00015E12: push es
00015E13: push di
00015E14: push word ptr [bp + 8]
00015E17: push word ptr [bp + 6]
00015E1A: mov ax, 1
00015E1D: push ax
00015E1E: lcall 0xb08, 0xa
00015E23: mov es, dx
00015E25: mov di, ax
00015E27: or dx, dx
00015E29: jne 0x15e30
00015E2B: mov word ptr [bp - 2], ax
00015E2E: jmp 0x15e45
00015E30: cld 
00015E31: mov bx, word ptr [bp - 4]
00015E34: shl bx, 1
00015E36: push ds
00015E37: mov ax, 0x1ab5
00015E3A: mov ds, ax
00015E3C: add bx, 0x6f04
00015E40: mov bx, word ptr [bx]
00015E42: pop ds
00015E43: jmp bx
00015E45: lds si, ptr [bp - 0xa]
00015E48: mov word ptr [si + 0x28], 0
00015E4D: mov word ptr [si + 0x2a], 4
00015E52: les di, ptr [bp + 0xa]
00015E55: mov word ptr es:[di + 0x28], 0
00015E5B: mov word ptr es:[di + 0x2a], 4
00015E61: mov ax, word ptr [bp - 2]
00015E64: pop di
00015E65: pop si
00015E66: pop es
00015E67: pop ds
00015E68: mov sp, bp
00015E6A: pop bp
00015E6B: retf 0xc
00015E6E: mov bx, 0x6f04
00015E71: mov word ptr [bx], 0x34c
00015E75: add bx, 2
00015E78: mov word ptr [bx], 0x34c
00015E7C: add bx, 2
00015E7F: mov word ptr [bx], 0x38b
00015E83: add bx, 2
00015E86: mov word ptr [bx], 0x55b
00015E8A: add bx, 2
00015E8D: mov byte ptr [0x6f51], 1
00015E92: retf 
00015E93: lds si, ptr [bp + 0xe]
00015E96: lds si, ptr [si + 4]
00015E99: push ds
00015E9A: push si
00015E9B: push word ptr [bp - 0x3a]
00015E9E: push word ptr [bp - 0x3c]
00015EA1: push word ptr [bp - 0x3e]
00015EA4: push word ptr [bp - 0x40]
00015EA7: push word ptr [bp + 0xc]
00015EAA: push word ptr [bp + 0xa]
00015EAD: push word ptr [bp + 8]
00015EB0: push word ptr [bp + 6]
00015EB3: mov ax, 3
00015EB6: push ax
00015EB7: lcall 0xb44, 0xc
00015EBC: mov word ptr [bp - 2], ax
00015EBF: mov ax, word ptr [bp - 2]
00015EC2: pop di
00015EC3: pop si
00015EC4: pop es
00015EC5: pop ds
00015EC6: mov sp, bp
00015EC8: pop bp
00015EC9: retf 0xc
00015ECC: push word ptr [bp - 8]
00015ECF: push word ptr [bp - 0xa]
00015ED2: push word ptr [bp - 0x3a]
00015ED5: push word ptr [bp - 0x3c]
00015ED8: push word ptr [bp - 0x3e]
00015EDB: push word ptr [bp - 0x40]
00015EDE: push word ptr [bp + 0xc]
00015EE1: push word ptr [bp + 0xa]
00015EE4: push word ptr [bp + 8]
00015EE7: push word ptr [bp + 6]
00015EEA: mov ax, 1
00015EED: push ax
00015EEE: lcall 0xb44, 0xc
00015EF3: or ax, ax
00015EF5: je 0x15efc
00015EF7: mov word ptr [bp - 2], ax
00015EFA: jmp 0x15efe
00015EFC: jmp 0x15e93
00015EFE: mov ax, word ptr [bp - 2]
00015F01: pop di
00015F02: pop si
00015F03: pop es
00015F04: pop ds
00015F05: mov sp, bp
00015F07: pop bp
00015F08: retf 0xc
00015F0B: mov ax, ds
00015F0D: mov word ptr [bp - 0x42], ax
00015F10: mov word ptr [bp - 0x44], si
00015F13: mov ax, word ptr [bp - 0x36]
00015F16: sub ax, word ptr [bp - 0x16]
00015F19: mov word ptr [bp - 0x26], ax
00015F1C: mov byte ptr [bp - 0x22], 0
00015F20: cmp byte ptr [bp - 0x22], 0
00015F24: jne 0x15f71
00015F26: push es
00015F27: push di
00015F28: les di, ptr [bp - 0x48]
00015F2B: lds si, ptr [bp - 0x44]
00015F2E: mov cx, word ptr [bp - 0x16]
00015F31: cmp si, word ptr [bp - 0x26]
00015F34: jbe 0x15f5f
00015F36: mov bx, word ptr [bp - 0x36]
00015F39: sub bx, si
00015F3B: sub cx, bx
00015F3D: xchg bx, cx
00015F3F: shr cx, 1
00015F41: rep movsw word ptr es:[di], word ptr [si]
00015F43: rcl cx, 1
00015F45: rep movsb byte ptr es:[di], byte ptr [si]
00015F47: mov cx, bx
00015F49: mov dx, word ptr [bp - 8]
00015F4C: mov ax, word ptr [bp - 0xa]
00015F4F: clc 
00015F50: lcall 0xb08, 0x17e
00015F55: jae 0x15f5f
00015F57: pop di
00015F58: pop es
00015F59: mov word ptr [bp - 2], ax
00015F5C: jmp 0x160b2
00015F5F: shr cx, 1
00015F61: rep movsw word ptr es:[di], word ptr [si]
00015F63: rcl cx, 1
00015F65: rep movsb byte ptr es:[di], byte ptr [si]
00015F67: mov ax, ds
00015F69: mov word ptr [bp - 0x42], ax
00015F6C: mov word ptr [bp - 0x44], si
00015F6F: pop di
00015F70: pop es
00015F71: lds si, ptr [bp - 0x48]
00015F74: mov cx, word ptr [bp - 0x2c]
00015F77: cmp byte ptr [bp - 0x30], 1
00015F7B: je 0x15f80
00015F7D: lodsb al, byte ptr [si]
00015F7E: mov ah, al
00015F80: lodsb al, byte ptr [si]
00015F81: mov ch, al
00015F83: ror ax, cl
00015F85: mov bl, byte ptr [bp - 0x2a]
00015F88: and al, bl
00015F8A: not bl
00015F8C: or al, bl
00015F8E: and byte ptr es:[di], al
00015F91: inc di
00015F92: mov bx, word ptr [bp - 0x32]
00015F95: or bx, bx
00015F97: je 0x15fc0
00015F99: cmp di, word ptr [bp - 0x38]
00015F9C: jne 0x15fb2
00015F9E: mov dx, word ptr [bp + 0xc]
00015FA1: mov ax, word ptr [bp + 0xa]
00015FA4: stc 
00015FA5: lcall 0xb08, 0x17e
00015FAA: jae 0x15fb2
00015FAC: mov word ptr [bp - 2], ax
00015FAF: jmp 0x160b2
00015FB2: lodsb al, byte ptr [si]
00015FB3: mov ah, ch
00015FB5: mov ch, al
00015FB7: ror ax, cl
00015FB9: and byte ptr es:[di], al
00015FBC: inc di
00015FBD: dec bx
00015FBE: jne 0x15f99
00015FC0: mov bh, byte ptr [bp - 0x29]
00015FC3: or bh, bh
00015FC5: je 0x15ff7
00015FC7: cmp di, word ptr [bp - 0x38]
00015FCA: jne 0x15fe0
00015FCC: mov dx, word ptr [bp + 0xc]
00015FCF: mov ax, word ptr [bp + 0xa]
00015FD2: stc 
00015FD3: lcall 0xb08, 0x17e
00015FD8: jae 0x15fe0
00015FDA: mov word ptr [bp - 2], ax
00015FDD: jmp 0x160b2
00015FE0: cmp byte ptr [bp - 0x34], 0
00015FE4: je 0x15fe7
00015FE6: lodsb al, byte ptr [si]
00015FE7: mov ah, ch
00015FE9: ror ax, cl
00015FEB: mov dx, bx
00015FED: not dx
00015FEF: and al, bh
00015FF1: or al, dh
00015FF3: and byte ptr es:[di], al
00015FF6: inc di
00015FF7: dec word ptr [bp - 0x14]
00015FFA: jne 0x15fff
00015FFC: jmp 0x16091
00015FFF: cmp di, word ptr [bp - 0x38]
00016002: jne 0x16018
00016004: mov dx, word ptr [bp + 0xc]
00016007: mov ax, word ptr [bp + 0xa]
0001600A: stc 
0001600B: lcall 0xb08, 0x17e
00016010: jae 0x16018
00016012: mov word ptr [bp - 2], ax
00016015: jmp 0x160b2
00016018: add di, word ptr [bp - 0x1e]
0001601B: jb 0x16028
0001601D: cmp word ptr [bp - 0x38], 0
00016021: je 0x1603b
00016023: cmp di, word ptr [bp - 0x38]
00016026: jb 0x1603b
00016028: mov dx, word ptr [bp + 0xc]
0001602B: mov ax, word ptr [bp + 0xa]
0001602E: stc 
0001602F: lcall 0xb08, 0x17e
00016034: jae 0x1603b
00016036: mov word ptr [bp - 2], ax
00016039: jmp 0x160b2
0001603B: inc byte ptr [bp - 0x22]
0001603E: cmp byte ptr [bp - 0x22], 3
00016042: jbe 0x1608e
00016044: mov byte ptr [bp - 0x22], 0
00016048: lds si, ptr [bp - 0x44]
0001604B: cmp si, word ptr [bp - 0x36]
0001604E: jne 0x16063
00016050: mov dx, word ptr [bp - 8]
00016053: mov ax, word ptr [bp - 0xa]
00016056: clc 
00016057: lcall 0xb08, 0x17e
0001605C: jae 0x16063
0001605E: mov word ptr [bp - 2], ax
00016061: jmp 0x160b2
00016063: add si, word ptr [bp - 0x1c]
00016066: jb 0x16073
00016068: cmp word ptr [bp - 0x36], 0
0001606C: je 0x16086
0001606E: cmp si, word ptr [bp - 0x36]
00016071: jb 0x16086
00016073: mov dx, word ptr [bp - 8]
00016076: mov ax, word ptr [bp - 0xa]
00016079: clc 
0001607A: lcall 0xb08, 0x17e
0001607F: jae 0x16086
00016081: mov word ptr [bp - 2], ax
00016084: jmp 0x160b2
00016086: mov ax, ds
00016088: mov word ptr [bp - 0x42], ax
0001608B: mov word ptr [bp - 0x44], si
0001608E: jmp 0x15f20
00016091: lds si, ptr [bp - 0xa]
00016094: mov word ptr [si + 0x28], 0
00016099: mov word ptr [si + 0x2a], 4
0001609E: les di, ptr [bp + 0xa]
000160A1: mov word ptr es:[di + 0x28], 0
000160A7: mov word ptr es:[di + 0x2a], 4
000160AD: nop 
000160AE: nop 
000160AF: jmp 0x15e93
000160B2: lds si, ptr [bp - 0xa]
000160B5: mov word ptr [si + 0x28], 0
000160BA: mov word ptr [si + 0x2a], 4
000160BF: les di, ptr [bp + 0xa]
000160C2: mov word ptr es:[di + 0x28], 0
000160C8: mov word ptr es:[di + 0x2a], 4
000160CE: mov ax, word ptr [bp - 2]
000160D1: pop di
000160D2: pop si
000160D3: pop es
000160D4: pop ds
000160D5: mov sp, bp
000160D7: pop bp
000160D8: retf 0xc
000160DB: mov bx, word ptr [bp - 0x14]
000160DE: mov ah, byte ptr [bp - 6]
000160E1: mov cx, word ptr [bp - 0x16]
000160E4: jmp 0x1611c
000160E6: cmp si, word ptr [bp - 0x36]
000160E9: jne 0x16101
000160EB: push ax
000160EC: mov dx, word ptr [bp - 8]
000160EF: mov ax, word ptr [bp - 0xa]
000160F2: clc 
000160F3: lcall 0xb08, 0x17e
000160F8: mov word ptr [bp - 2], ax
000160FB: pop ax
000160FC: jae 0x16101
000160FE: jmp 0x161a8
00016101: cmp di, word ptr [bp - 0x38]
00016104: jne 0x1611c
00016106: push ax
00016107: mov dx, word ptr [bp + 0xc]
0001610A: mov ax, word ptr [bp + 0xa]
0001610D: stc 
0001610E: lcall 0xb08, 0x17e
00016113: mov word ptr [bp - 2], ax
00016116: pop ax
00016117: jae 0x1611c
00016119: jmp 0x161a8
0001611C: lodsb al, byte ptr [si]
0001611D: cmp al, ah
0001611F: je 0x16124
00016121: mov byte ptr es:[di], al
00016124: inc di
00016125: loop 0x160e6
00016127: dec bx
00016128: je 0x161a3
0001612A: cmp di, word ptr [bp - 0x38]
0001612D: jne 0x16142
0001612F: mov dx, word ptr [bp + 0xc]
00016132: mov ax, word ptr [bp + 0xa]
00016135: stc 
00016136: lcall 0xb08, 0x17e
0001613B: jae 0x16142
0001613D: mov word ptr [bp - 2], ax
00016140: jmp 0x161a8
00016142: cmp si, word ptr [bp - 0x36]
00016145: jne 0x1615a
00016147: mov dx, word ptr [bp - 8]
0001614A: mov ax, word ptr [bp - 0xa]
0001614D: clc 
0001614E: lcall 0xb08, 0x17e
00016153: jae 0x1615a
00016155: mov word ptr [bp - 2], ax
00016158: jmp 0x161a8
0001615A: add si, word ptr [bp - 0x1c]
0001615D: jb 0x1616a
0001615F: cmp word ptr [bp - 0x36], 0
00016163: je 0x1617d
00016165: cmp si, word ptr [bp - 0x36]
00016168: jb 0x1617d
0001616A: mov dx, word ptr [bp - 8]
0001616D: mov ax, word ptr [bp - 0xa]
00016170: clc 
00016171: lcall 0xb08, 0x17e
00016176: jae 0x1617d
00016178: mov word ptr [bp - 2], ax
0001617B: jmp 0x161a8
0001617D: add di, word ptr [bp - 0x1e]
00016180: jb 0x1618d
00016182: cmp word ptr [bp - 0x38], 0
00016186: je 0x161a0
00016188: cmp di, word ptr [bp - 0x38]
0001618B: jb 0x161a0
0001618D: mov dx, word ptr [bp + 0xc]
00016190: mov ax, word ptr [bp + 0xa]
00016193: stc 
00016194: lcall 0xb08, 0x17e
00016199: jae 0x161a0
0001619B: mov word ptr [bp - 2], ax
0001619E: jmp 0x161a8
000161A0: jmp 0x160de
000161A3: mov word ptr [bp - 2], 0
000161A8: lds si, ptr [bp - 0xa]
000161AB: mov word ptr [si + 0x28], 0
000161B0: mov word ptr [si + 0x2a], 4
000161B5: les di, ptr [bp + 0xa]
000161B8: mov word ptr es:[di + 0x28], 0
000161BE: mov word ptr es:[di + 0x2a], 4
000161C4: mov ax, word ptr [bp - 2]
000161C7: pop di
000161C8: pop si
000161C9: pop es
000161CA: pop ds
000161CB: mov sp, bp
000161CD: pop bp
000161CE: retf 0xc
000161D1: add byte ptr [di - 0x75], dl
000161D4: in al, dx
000161D5: sub sp, 0x5c
000161D8: push ds
000161D9: push es
000161DA: push si
000161DB: push di
000161DC: mov ax, 0x1ab5
000161DF: mov ds, ax
000161E1: mov word ptr [bp - 0x52], 0
000161E6: mov ax, word ptr [0x54d6]
000161E9: mov word ptr [bp - 0x5c], ax
000161EC: push dx
000161ED: mov dx, 0x40
000161F0: mov es, dx
000161F2: pop dx
000161F3: mov dx, word ptr es:[0x63]
000161F8: add dx, 6
000161FB: mov word ptr [bp - 0x5a], dx
000161FE: cmp byte ptr [0x6f50], 1
00016203: je 0x16209
00016205: push cs
00016206: call 0x16504
00016209: lcall 0x98e, 0x35e
0001620E: or ax, ax
00016210: jge 0x16218
00016212: mov word ptr [bp - 2], ax
00016215: jmp 0x164f7
00016218: mov word ptr [bp - 0xe], ax
0001621B: push ax
0001621C: lcall 0x98e, 0x12a
00016221: jae 0x1622b
00016223: mov word ptr [bp - 2], 0xfc19
00016228: jmp 0x164f7
0001622B: mov es, dx
0001622D: mov di, ax
0001622F: mov word ptr [bp - 0x36], dx
00016232: mov word ptr [bp - 0x38], ax
00016235: cmp word ptr [0x54d4], 1
0001623A: jne 0x16255
0001623C: cmp byte ptr es:[di], 9
00016240: je 0x16255
00016242: lcall 0x98e, 0x18a
00016247: cmp al, byte ptr es:[di + 0x16]
0001624B: je 0x16255
0001624D: mov word ptr [bp - 2], 0xfff9
00016252: jmp 0x164f7
00016255: lds si, ptr [bp + 0xc]
00016258: cmp word ptr [si], 0xca20
0001625C: je 0x16266
0001625E: mov word ptr [bp - 2], 0xffe4
00016263: jmp 0x164f7
00016266: lds si, ptr [si + 4]
00016269: mov al, byte ptr es:[di + 0x17]
0001626D: xor ah, ah
0001626F: mov word ptr [bp - 0x10], ax
00016272: cmp al, byte ptr [si + 0x13]
00016275: je 0x1627f
00016277: mov word ptr [bp - 2], 0xfffa
0001627C: jmp 0x164f7
0001627F: mov word ptr [bp - 4], 0
00016284: mov ax, word ptr [bp + 0xa]
00016287: or ax, ax
00016289: jge 0x16295
0001628B: neg ax
0001628D: add word ptr [bp - 4], ax
00016290: xor ax, ax
00016292: mov word ptr [bp + 0xa], ax
00016295: cmp ax, word ptr es:[di + 0x18]
00016299: jb 0x162a3
0001629B: mov word ptr [bp - 2], 0
000162A0: jmp 0x164f7
000162A3: mov ax, word ptr [si + 0xa]
000162A6: cmp word ptr [bp - 4], ax
000162A9: jbe 0x162b3
000162AB: mov word ptr [bp - 2], 0
000162B0: jmp 0x164f7
000162B3: sub ax, word ptr [bp - 4]
000162B6: inc ax
000162B7: mov bx, word ptr es:[di + 0x18]
000162BB: sub bx, word ptr [bp + 0xa]
000162BE: cmp ax, bx
000162C0: jbe 0x162c4
000162C2: mov ax, bx
000162C4: mov word ptr [bp - 0x14], ax
000162C7: mul word ptr [bp - 0x10]
000162CA: mov word ptr [bp - 0x16], ax
000162CD: mov bx, 8
000162D0: div bx
000162D2: or dx, dx
000162D4: je 0x162d7
000162D6: inc ax
000162D7: mov word ptr [bp - 0x1c], ax
000162DA: mov word ptr [bp - 0x1e], ax
000162DD: mov word ptr [bp - 6], 0
000162E2: mov ax, word ptr [bp + 8]
000162E5: or ax, ax
000162E7: jge 0x162f3
000162E9: neg ax
000162EB: add word ptr [bp - 6], ax
000162EE: xor ax, ax
000162F0: mov word ptr [bp + 8], ax
000162F3: cmp ax, word ptr es:[di + 0x1a]
000162F7: jb 0x16301
000162F9: mov word ptr [bp - 2], 0
000162FE: jmp 0x164f7
00016301: mov ax, word ptr [si + 0xc]
00016304: cmp word ptr [bp - 6], ax
00016307: jbe 0x16311
00016309: mov word ptr [bp - 2], 0
0001630E: jmp 0x164f7
00016311: sub ax, word ptr [bp - 6]
00016314: inc ax
00016315: mov bx, word ptr es:[di + 0x1a]
00016319: sub bx, word ptr [bp + 8]
0001631C: cmp ax, bx
0001631E: jbe 0x16322
00016320: mov ax, bx
00016322: mov word ptr [bp - 0x18], ax
00016325: mov bl, byte ptr [si + 0x12]
00016328: xor bh, bh
0001632A: mov word ptr [bp - 0x12], bx
0001632D: mul bx
0001632F: mov word ptr [bp - 0x1a], ax
00016332: les di, ptr [bp + 0xc]
00016335: mov ax, word ptr es:[di + 2]
00016339: mov word ptr [bp - 0xc], ax
0001633C: add di, 8
0001633F: mov ax, word ptr [si + 0x2c]
00016342: cmp ax, word ptr es:[di + 0x2c]
00016346: je 0x16350
00016348: mov word ptr [bp - 2], 0xffe5
0001634D: jmp 0x164f7
00016350: mov ax, word ptr [si + 0x2e]
00016353: cmp ax, word ptr es:[di + 0x2e]
00016357: je 0x16361
00016359: mov word ptr [bp - 2], 0xffe5
0001635E: jmp 0x164f7
00016361: mov word ptr [bp - 0x2a], 0xffff
00016366: mov word ptr [bp - 0x2c], 0
0001636B: cmp byte ptr [bp - 0x10], 8
0001636F: jne 0x16374
00016371: jmp 0x1644d
00016374: mov ax, word ptr [si + 0x16]
00016377: cmp ax, word ptr es:[di + 0x16]
0001637B: jne 0x1639e
0001637D: cmp ax, 0
00016380: je 0x1639e
00016382: mov bx, 0x8000
00016385: mov word ptr [si + 0x28], 0
0001638A: mov word ptr [si + 0x2a], 2
0001638F: mov word ptr es:[di + 0x28], 2
00016395: mov word ptr es:[di + 0x2a], 2
0001639B: mov word ptr [bp - 0x52], bx
0001639E: mov ax, word ptr [bp + 0xa]
000163A1: mul word ptr [bp - 0x10]
000163A4: mov cx, ax
000163A6: and cx, 7
000163A9: mov bx, 8
000163AC: sub bx, cx
000163AE: mov word ptr [bp - 0x2e], bx
000163B1: mov dl, 0xff
000163B3: shr dl, cl
000163B5: mov byte ptr [bp - 0x2a], dl
000163B8: add ax, word ptr [bp - 0x16]
000163BB: mov cx, ax
000163BD: and cx, 7
000163C0: mov dh, 0xff
000163C2: shr dh, cl
000163C4: not dh
000163C6: mov byte ptr [bp - 0x29], dh
000163C9: cmp bx, word ptr [bp - 0x16]
000163CC: jl 0x163df
000163CE: mov bx, word ptr [bp - 0x16]
000163D1: mov word ptr [bp - 0x2e], bx
000163D4: or dh, dh
000163D6: je 0x163df
000163D8: and byte ptr [bp - 0x2a], dh
000163DB: mov byte ptr [bp - 0x29], 0
000163DF: mov ax, word ptr [bp + 0xa]
000163E2: sub ax, word ptr [bp - 4]
000163E5: mul word ptr [bp - 0x10]
000163E8: and ax, 7
000163EB: mov word ptr [bp - 0x2c], ax
000163EE: mov word ptr [bp - 0x30], 1
000163F3: mov ax, word ptr [bp - 4]
000163F6: mul word ptr [bp - 0x10]
000163F9: and ax, 7
000163FC: mov bx, ax
000163FE: mov ax, word ptr [bp + 0xa]
00016401: mul word ptr [bp - 0x10]
00016404: and ax, 7
00016407: cmp bx, ax
00016409: jle 0x1640e
0001640B: inc word ptr [bp - 0x30]
0001640E: mov ax, word ptr [bp - 0x16]
00016411: sub ax, word ptr [bp - 0x2e]
00016414: mov bx, 8
00016417: xor dx, dx
00016419: div bx
0001641B: mov word ptr [bp - 0x32], ax
0001641E: or dx, dx
00016420: jne 0x16426
00016422: mov byte ptr [bp - 0x29], 0
00016426: mov word ptr [bp - 0x34], 0
0001642B: cmp dx, word ptr [bp - 0x2c]
0001642E: jbe 0x16433
00016430: inc word ptr [bp - 0x34]
00016433: mov ax, word ptr [bp - 0x30]
00016436: add ax, word ptr [bp - 0x32]
00016439: add ax, word ptr [bp - 0x34]
0001643C: mov word ptr [bp - 0x1c], ax
0001643F: mov ax, word ptr [bp - 0x32]
00016442: inc ax
00016443: cmp byte ptr [bp - 0x29], 0
00016447: je 0x1644a
00016449: inc ax
0001644A: mov word ptr [bp - 0x1e], ax
0001644D: mov ax, ds
0001644F: mov word ptr [bp - 0x3a], ax
00016452: mov word ptr [bp - 0x3c], si
00016455: push ds
00016456: push si
00016457: push word ptr [bp - 4]
0001645A: push word ptr [bp - 6]
0001645D: mov ax, 0
00016460: push ax
00016461: lcall 0xb08, 0xa
00016466: mov word ptr [bp - 0x46], dx
00016469: mov word ptr [bp - 0x48], ax
0001646C: or dx, dx
0001646E: jne 0x16475
00016470: mov word ptr [bp - 2], ax
00016473: jmp 0x164e1
00016475: mov ax, es
00016477: mov word ptr [bp - 0x3e], ax
0001647A: mov word ptr [bp - 0x40], di
0001647D: push es
0001647E: push di
0001647F: push word ptr [bp - 4]
00016482: push word ptr [bp - 6]
00016485: mov ax, 0
00016488: push ax
00016489: lcall 0xb08, 0xa
0001648E: mov word ptr [bp - 0x4a], dx
00016491: mov word ptr [bp - 0x4c], ax
00016494: or dx, dx
00016496: jne 0x1649d
00016498: mov word ptr [bp - 2], ax
0001649B: jmp 0x164e1
0001649D: les di, ptr [bp - 0x38]
000164A0: mov ax, word ptr [si + 0x14]
000164A3: sub ax, word ptr [bp - 0x1c]
000164A6: mov word ptr [bp - 0x20], ax
000164A9: mov ax, word ptr es:[di + 0x1c]
000164AD: sub ax, word ptr [bp - 0x1e]
000164B0: mov word ptr [bp - 0x22], ax
000164B3: lds si, ptr [bp - 0x48]
000164B6: mov byte ptr [bp - 0xa], 0
000164BA: push word ptr [bp - 0xe]
000164BD: lcall 0x98e, 0xa6
000164C2: or ax, ax
000164C4: jge 0x164cd
000164C6: mov word ptr [bp - 2], 0xfc19
000164CB: jmp 0x164f7
000164CD: cld 
000164CE: mov bx, ax
000164D0: shl bx, 1
000164D2: push ds
000164D3: mov ax, 0x1ab5
000164D6: mov ds, ax
000164D8: add bx, 0x6f0c
000164DC: mov bx, word ptr [bx]
000164DE: pop ds
000164DF: jmp bx
000164E1: mov word ptr [si + 0x28], 0
000164E6: mov word ptr [si + 0x2a], 4
000164EB: mov word ptr es:[di + 0x28], 0
000164F1: mov word ptr es:[di + 0x2a], 4
000164F7: mov ax, word ptr [bp - 2]
000164FA: pop di
000164FB: pop si
000164FC: pop es
000164FD: pop ds
000164FE: mov sp, bp
00016500: pop bp
00016501: retf 0xa
00016504: mov bx, 0x6f0c
00016507: mov word ptr [bx], 0x3b4
0001650B: add bx, 2
0001650E: mov word ptr [bx], 0x3b4
00016512: add bx, 2
00016515: mov word ptr [bx], 0x57d
00016519: add bx, 2
0001651C: mov word ptr [bx], 0x57d
00016520: add bx, 2
00016523: mov word ptr [bx], 0x57d
00016527: add bx, 2
0001652A: mov word ptr [bx], 0x57d
0001652E: add bx, 2
00016531: mov word ptr [bx], 0x57d
00016535: add bx, 2
00016538: mov word ptr [bx], 0x57d
0001653C: add bx, 2
0001653F: mov word ptr [bx], 0x78d
00016543: add bx, 2
00016546: mov word ptr [bx], 0x83b
0001654A: add bx, 2
0001654D: mov word ptr [bx], 0xa10
00016551: add bx, 2
00016554: mov word ptr [bx], 0x57d
00016558: add bx, 2
0001655B: mov word ptr [bx], 0xa10
0001655F: add bx, 2
00016562: mov word ptr [bx], 0xa10
00016566: add bx, 2
00016569: mov word ptr [bx], 0x57d
0001656D: add bx, 2
00016570: mov word ptr [bx], 0xa10
00016574: add bx, 2
00016577: mov word ptr [bx], 0xa10
0001657B: add bx, 2
0001657E: mov byte ptr [0x6f50], 1
00016583: retf 
00016584: mov bx, word ptr [bp + 0xa]
00016587: mov ax, word ptr [bp + 8]
0001658A: lcall es:[di + 0x26]
0001658E: mov di, bx
00016590: mov ax, word ptr [bp + 8]
00016593: and al, 1
00016595: mov byte ptr [bp - 9], al
00016598: mov ax, 0x2000
0001659B: sub ax, word ptr [bp - 0x1e]
0001659E: mov word ptr [bp - 8], ax
000165A1: shl word ptr [bp - 0x1a], 1
000165A4: mov cx, word ptr [bp - 0x2c]
000165A7: cmp word ptr [bp - 0x5c], 0
000165AB: je 0x165b5
000165AD: mov dx, word ptr [bp - 0x5a]
000165B0: in al, dx
000165B1: test al, 8
000165B3: je 0x165b0
000165B5: xor byte ptr [bp - 0xa], 1
000165B9: jne 0x165e9
000165BB: mov ax, ds
000165BD: mov word ptr [bp - 0x4a], ax
000165C0: mov word ptr [bp - 0x4c], si
000165C3: mov ax, word ptr [bp - 0x3a]
000165C6: mov word ptr [bp - 0x42], ax
000165C9: mov ax, word ptr [bp - 0x3c]
000165CC: mov word ptr [bp - 0x44], ax
000165CF: lds si, ptr [bp - 0x48]
000165D2: mov di, word ptr [bp - 0x38]
000165D5: mov ax, 0x47c
000165D8: mov word ptr [bp - 0x54], ax
000165DB: mov ax, 0x4b1
000165DE: mov word ptr [bp - 0x56], ax
000165E1: mov ax, 0x4ee
000165E4: mov word ptr [bp - 0x58], ax
000165E7: jmp 0x16615
000165E9: mov ax, ds
000165EB: mov word ptr [bp - 0x46], ax
000165EE: mov word ptr [bp - 0x48], si
000165F1: mov ax, word ptr [bp - 0x3e]
000165F4: mov word ptr [bp - 0x42], ax
000165F7: mov ax, word ptr [bp - 0x40]
000165FA: mov word ptr [bp - 0x44], ax
000165FD: lds si, ptr [bp - 0x4c]
00016600: mov word ptr [bp - 0x38], di
00016603: mov ax, 0x473
00016606: mov word ptr [bp - 0x54], ax
00016609: mov ax, 0x4ac
0001660C: mov word ptr [bp - 0x56], ax
0001660F: mov ax, 0x4e5
00016612: mov word ptr [bp - 0x58], ax
00016615: cmp byte ptr [bp - 0x30], 1
00016619: je 0x16636
0001661B: lodsb al, byte ptr [si]
0001661C: mov ch, al
0001661E: or si, si
00016620: jne 0x16636
00016622: mov dx, word ptr [bp - 0x42]
00016625: mov ax, word ptr [bp - 0x44]
00016628: clc 
00016629: lcall 0xb08, 0x17e
0001662E: jae 0x16636
00016630: mov word ptr [bp - 2], ax
00016633: jmp 0x16724
00016636: lodsb al, byte ptr [si]
00016637: mov ah, ch
00016639: mov ch, al
0001663B: ror al, cl
0001663D: mov bl, byte ptr [bp - 0x2a]
00016640: jmp word ptr [bp - 0x54]
00016643: not bl
00016645: or al, bl
00016647: and byte ptr es:[di], al
0001664A: jmp 0x16651
0001664C: and al, bl
0001664E: xor byte ptr es:[di], al
00016651: inc di
00016652: mov bx, word ptr [bp - 0x32]
00016655: or bx, bx
00016657: je 0x16688
00016659: cmp si, word ptr [bp - 0x52]
0001665C: jne 0x16672
0001665E: mov dx, word ptr [bp - 0x42]
00016661: mov ax, word ptr [bp - 0x44]
00016664: clc 
00016665: lcall 0xb08, 0x17e
0001666A: jae 0x16672
0001666C: mov word ptr [bp - 2], ax
0001666F: jmp 0x16724
00016672: lodsb al, byte ptr [si]
00016673: mov ah, ch
00016675: mov ch, al
00016677: ror ax, cl
00016679: jmp word ptr [bp - 0x56]
0001667C: and byte ptr es:[di], al
0001667F: jmp 0x16684
00016681: xor byte ptr es:[di], al
00016684: inc di
00016685: dec bx
00016686: jne 0x16659
00016688: mov bh, byte ptr [bp - 0x29]
0001668B: or bh, bh
0001668D: je 0x166c4
0001668F: cmp byte ptr [bp - 0x34], 0
00016693: je 0x166ae
00016695: cmp si, word ptr [bp - 0x52]
00016698: jne 0x166ad
0001669A: mov dx, word ptr [bp - 0x42]
0001669D: mov ax, word ptr [bp - 0x44]
000166A0: clc 
000166A1: lcall 0xb08, 0x17e
000166A6: jae 0x166ad
000166A8: mov word ptr [bp - 2], ax
000166AB: jmp 0x16724
000166AD: lodsb al, byte ptr [si]
000166AE: mov ah, ch
000166B0: ror ax, cl
000166B2: jmp word ptr [bp - 0x58]
000166B5: not bh
000166B7: or al, bh
000166B9: and byte ptr es:[di], al
000166BC: jmp 0x166c3
000166BE: and al, bh
000166C0: xor byte ptr es:[di], al
000166C3: inc di
000166C4: dec word ptr [bp - 0x1a]
000166C7: je 0x1671f
000166C9: cmp si, word ptr [bp - 0x52]
000166CC: jne 0x166e1
000166CE: mov dx, word ptr [bp - 0x42]
000166D1: mov ax, word ptr [bp - 0x44]
000166D4: clc 
000166D5: lcall 0xb08, 0x17e
000166DA: jae 0x166e1
000166DC: mov word ptr [bp - 2], ax
000166DF: jmp 0x16724
000166E1: add si, word ptr [bp - 0x20]
000166E4: jb 0x166f1
000166E6: cmp word ptr [bp - 0x52], 0
000166EA: je 0x16704
000166EC: cmp si, word ptr [bp - 0x52]
000166EF: jb 0x16704
000166F1: mov dx, word ptr [bp - 0x42]
000166F4: mov ax, word ptr [bp - 0x44]
000166F7: clc 
000166F8: lcall 0xb08, 0x17e
000166FD: jae 0x16704
000166FF: mov word ptr [bp - 2], ax
00016702: jmp 0x16724
00016704: cmp byte ptr [bp - 0xa], 1
00016708: je 0x1671c
0001670A: xor byte ptr [bp - 9], 1
0001670E: je 0x16715
00016710: add di, word ptr [bp - 8]
00016713: jmp 0x1671c
00016715: sub di, 0x1fb0
00016719: sub di, word ptr [bp - 0x1e]
0001671C: jmp 0x165b5
0001671F: mov word ptr [bp - 2], 0
00016724: lds si, ptr [bp - 0x3c]
00016727: mov word ptr [si + 0x28], 0
0001672C: mov word ptr [si + 0x2a], 4
00016731: les di, ptr [bp - 0x40]
00016734: mov word ptr es:[di + 0x28], 0
0001673A: mov word ptr es:[di + 0x2a], 4
00016740: mov ax, word ptr [bp - 2]
00016743: pop di
00016744: pop si
00016745: pop es
00016746: pop ds
00016747: mov sp, bp
00016749: pop bp
0001674A: retf 0xa
0001674D: mov al, 5
0001674F: mov ah, 8
00016751: mov dx, 0x3ce
00016754: out dx, ax
00016755: mov al, 7
00016757: mov ah, 0
00016759: mov dx, 0x3ce
0001675C: out dx, ax
0001675D: mov al, 8
0001675F: mov ah, 0xff
00016761: mov dx, 0x3ce
00016764: out dx, ax
00016765: mov word ptr [bp - 0x26], 0x10f
0001676A: cmp byte ptr [bp - 0x12], 1
0001676E: je 0x16775
00016770: mov word ptr [bp - 0x26], 0x801
00016775: mov ax, word ptr es:[di + 0x22]
00016779: mov dx, word ptr [bp + 6]
0001677C: mul dx
0001677E: push ax
0001677F: mov bx, word ptr [bp + 0xa]
00016782: mov ax, word ptr [bp + 8]
00016785: lcall es:[di + 0x26]
00016789: pop ax
0001678A: add ax, bx
0001678C: mov di, ax
0001678E: mov ax, word ptr [bp - 0x18]
00016791: add word ptr [bp - 0x1a], ax
00016794: mov byte ptr [bp - 0xa], 1
00016798: mov cx, word ptr [bp - 0x2c]
0001679B: cmp word ptr [bp - 0x5c], 0
0001679F: je 0x167a9
000167A1: mov dx, word ptr [bp - 0x5a]
000167A4: in al, dx
000167A5: test al, 8
000167A7: je 0x167a4
000167A9: cmp byte ptr [bp - 0xa], 1
000167AD: je 0x167fb
000167AF: test byte ptr [bp - 0x26], 1
000167B3: je 0x167cc
000167B5: mov ax, ds
000167B7: mov word ptr [bp - 0x4a], ax
000167BA: mov word ptr [bp - 0x4c], si
000167BD: mov ax, word ptr [bp - 0x3a]
000167C0: mov word ptr [bp - 0x42], ax
000167C3: mov ax, word ptr [bp - 0x3c]
000167C6: mov word ptr [bp - 0x44], ax
000167C9: lds si, ptr [bp - 0x48]
000167CC: mov di, word ptr [bp - 0x38]
000167CF: mov al, 2
000167D1: mov ah, byte ptr [bp - 0x26]
000167D4: mov dx, 0x3c4
000167D7: out dx, ax
000167D8: mov al, 3
000167DA: mov ah, 0x18
000167DC: mov dx, 0x3ce
000167DF: out dx, ax
000167E0: mov ax, word ptr [bp - 0x26]
000167E3: mov bl, 1
000167E5: cmp ah, 1
000167E8: je 0x16854
000167EA: shl al, 1
000167EC: dec bl
000167EE: cmp ah, al
000167F0: jae 0x167f6
000167F2: mov al, 1
000167F4: inc bl
000167F6: mov byte ptr [bp - 0x26], al
000167F9: jmp 0x16827
000167FB: mov ax, ds
000167FD: mov word ptr [bp - 0x46], ax
00016800: mov word ptr [bp - 0x48], si
00016803: mov ax, word ptr [bp - 0x3e]
00016806: mov word ptr [bp - 0x42], ax
00016809: mov ax, word ptr [bp - 0x40]
0001680C: mov word ptr [bp - 0x44], ax
0001680F: lds si, ptr [bp - 0x4c]
00016812: mov word ptr [bp - 0x38], di
00016815: mov al, 2
00016817: mov ah, 0xf
00016819: mov dx, 0x3c4
0001681C: out dx, ax
0001681D: mov al, 3
0001681F: mov ah, 8
00016821: mov dx, 0x3ce
00016824: out dx, ax
00016825: xor bl, bl
00016827: mov byte ptr [bp - 0xa], bl
0001682A: mov al, 8
0001682C: mov ah, byte ptr [bp - 0x2a]
0001682F: mov dx, 0x3ce
00016832: out dx, ax
00016833: cmp byte ptr [bp - 0x30], 1
00016837: je 0x16854
00016839: lodsb al, byte ptr [si]
0001683A: mov ch, al
0001683C: or si, si
0001683E: jne 0x16854
00016840: mov dx, word ptr [bp - 0x42]
00016843: mov ax, word ptr [bp - 0x44]
00016846: clc 
00016847: lcall 0xb08, 0x17e
0001684C: jae 0x16854
0001684E: mov word ptr [bp - 2], ax
00016851: jmp 0x16914
00016854: lodsb al, byte ptr [si]
00016855: mov ah, ch
00016857: mov ch, al
00016859: ror ax, cl
0001685B: and byte ptr es:[di], al
0001685E: inc di
0001685F: mov bx, word ptr [bp - 0x32]
00016862: or bx, bx
00016864: je 0x16895
00016866: mov al, 8
00016868: mov ah, 0xff
0001686A: mov dx, 0x3ce
0001686D: out dx, ax
0001686E: cmp si, word ptr [bp - 0x52]
00016871: jne 0x16887
00016873: mov dx, word ptr [bp - 0x42]
00016876: mov ax, word ptr [bp - 0x44]
00016879: clc 
0001687A: lcall 0xb08, 0x17e
0001687F: jae 0x16887
00016881: mov word ptr [bp - 2], ax
00016884: jmp 0x16914
00016887: lodsb al, byte ptr [si]
00016888: mov ah, ch
0001688A: mov ch, al
0001688C: ror ax, cl
0001688E: and byte ptr es:[di], al
00016891: inc di
00016892: dec bx
00016893: jne 0x1686e
00016895: mov ah, byte ptr [bp - 0x29]
00016898: or ah, ah
0001689A: je 0x168c9
0001689C: mov al, 8
0001689E: mov dx, 0x3ce
000168A1: out dx, ax
000168A2: cmp byte ptr [bp - 0x34], 0
000168A6: je 0x168c1
000168A8: cmp si, word ptr [bp - 0x52]
000168AB: jne 0x168c0
000168AD: mov dx, word ptr [bp - 0x42]
000168B0: mov ax, word ptr [bp - 0x44]
000168B3: clc 
000168B4: lcall 0xb08, 0x17e
000168B9: jae 0x168c0
000168BB: mov word ptr [bp - 2], ax
000168BE: jmp 0x16914
000168C0: lodsb al, byte ptr [si]
000168C1: mov ah, ch
000168C3: ror ax, cl
000168C5: and byte ptr es:[di], al
000168C8: inc di
000168C9: dec word ptr [bp - 0x1a]
000168CC: je 0x1690f
000168CE: cmp si, word ptr [bp - 0x52]
000168D1: jne 0x168e6
000168D3: mov dx, word ptr [bp - 0x42]
000168D6: mov ax, word ptr [bp - 0x44]
000168D9: clc 
000168DA: lcall 0xb08, 0x17e
000168DF: jae 0x168e6
000168E1: mov word ptr [bp - 2], ax
000168E4: jmp 0x16914
000168E6: add si, word ptr [bp - 0x20]
000168E9: jb 0x168f6
000168EB: cmp word ptr [bp - 0x52], 0
000168EF: je 0x16909
000168F1: cmp si, word ptr [bp - 0x52]
000168F4: jb 0x16909
000168F6: mov dx, word ptr [bp - 0x42]
000168F9: mov ax, word ptr [bp - 0x44]
000168FC: clc 
000168FD: lcall 0xb08, 0x17e
00016902: jae 0x16909
00016904: mov word ptr [bp - 2], ax
00016907: jmp 0x16914
00016909: add di, word ptr [bp - 0x22]
0001690C: jmp 0x167a9
0001690F: mov word ptr [bp - 2], 0
00016914: mov al, 5
00016916: mov ah, 0
00016918: mov dx, 0x3ce
0001691B: out dx, ax
0001691C: mov al, 8
0001691E: mov ah, 0xff
00016920: mov dx, 0x3ce
00016923: out dx, ax
00016924: mov al, 2
00016926: mov ah, 0xf
00016928: mov dx, 0x3c4
0001692B: out dx, ax
0001692C: mov al, 3
0001692E: mov ah, 0
00016930: mov dx, 0x3ce
00016933: out dx, ax
00016934: lds si, ptr [bp - 0x3c]
00016937: mov word ptr [si + 0x28], 0
0001693C: mov word ptr [si + 0x2a], 4
00016941: les di, ptr [bp - 0x40]
00016944: mov word ptr es:[di + 0x28], 0
0001694A: mov word ptr es:[di + 0x2a], 4
00016950: mov ax, word ptr [bp - 2]
00016953: pop di
00016954: pop si
00016955: pop es
00016956: pop ds
00016957: mov sp, bp
00016959: pop bp
0001695A: retf 0xa
0001695D: mov bx, word ptr [bp + 0xa]
00016960: mov ax, word ptr [bp + 8]
00016963: lcall es:[di + 0x26]
00016967: mov di, bx
00016969: mov bx, word ptr [bp - 0x1a]
0001696C: cmp word ptr [bp - 0x5c], 0
00016970: je 0x1697a
00016972: mov dx, word ptr [bp - 0x5a]
00016975: in al, dx
00016976: test al, 8
00016978: je 0x16975
0001697A: mov ah, byte ptr [bp - 0xc]
0001697D: mov cx, word ptr [bp - 0x1e]
00016980: jmp 0x1699b
00016982: or si, si
00016984: jne 0x1699b
00016986: push ax
00016987: mov dx, word ptr [bp - 0x3a]
0001698A: mov ax, word ptr [bp - 0x3c]
0001698D: clc 
0001698E: lcall 0xb08, 0x17e
00016993: mov word ptr [bp - 2], ax
00016996: pop ax
00016997: jae 0x1699b
00016999: jmp 0x169e2
0001699B: lodsb al, byte ptr [si]
0001699C: cmp al, ah
0001699E: je 0x169a3
000169A0: mov byte ptr es:[di], al
000169A3: inc di
000169A4: loop 0x16982
000169A6: dec bx
000169A7: je 0x169dd
000169A9: or si, si
000169AB: jne 0x169c0
000169AD: mov dx, word ptr [bp - 0x3a]
000169B0: mov ax, word ptr [bp - 0x3c]
000169B3: clc 
000169B4: lcall 0xb08, 0x17e
000169B9: jae 0x169c0
000169BB: mov word ptr [bp - 2], ax
000169BE: jmp 0x169e2
000169C0: add si, word ptr [bp - 0x20]
000169C3: jae 0x169d8
000169C5: mov dx, word ptr [bp - 0x3a]
000169C8: mov ax, word ptr [bp - 0x3c]
000169CB: clc 
000169CC: lcall 0xb08, 0x17e
000169D1: jae 0x169d8
000169D3: mov word ptr [bp - 2], ax
000169D6: jmp 0x169e2
000169D8: add di, word ptr [bp - 0x22]
000169DB: jmp 0x1697a
000169DD: mov word ptr [bp - 2], 0
000169E2: lds si, ptr [bp - 0x3c]
000169E5: mov word ptr [si + 0x28], 0
000169EA: mov word ptr [si + 0x2a], 4
000169EF: les di, ptr [bp - 0x40]
000169F2: mov word ptr es:[di + 0x28], 0
000169F8: mov word ptr es:[di + 0x2a], 4
000169FE: mov ax, word ptr [bp - 2]
00016A01: pop di
00016A02: pop si
00016A03: pop es
00016A04: pop ds
00016A05: mov sp, bp
00016A07: pop bp
00016A08: retf 0xa
00016A0B: mov ax, word ptr es:[di + 0x22]
00016A0F: mov dx, word ptr [bp + 6]
00016A12: mul dx
00016A14: push ax
00016A15: mov bx, word ptr [bp + 0xa]
00016A18: mov ax, word ptr [bp + 8]
00016A1B: lcall es:[di + 0x26]
00016A1F: pop ax
00016A20: add ax, bx
00016A22: mov di, ax
00016A24: mov ax, word ptr [bp + 8]
00016A27: and al, 3
00016A29: mov byte ptr [bp - 9], al
00016A2C: shl word ptr [bp - 0x1a], 1
00016A2F: mov cx, word ptr [bp - 0x2c]
00016A32: cmp word ptr [bp - 0x5c], 0
00016A36: je 0x16a40
00016A38: mov dx, word ptr [bp - 0x5a]
00016A3B: in al, dx
00016A3C: test al, 8
00016A3E: je 0x16a3b
00016A40: xor byte ptr [bp - 0xa], 1
00016A44: jne 0x16a74
00016A46: mov ax, ds
00016A48: mov word ptr [bp - 0x4a], ax
00016A4B: mov word ptr [bp - 0x4c], si
00016A4E: mov ax, word ptr [bp - 0x3a]
00016A51: mov word ptr [bp - 0x42], ax
00016A54: mov ax, word ptr [bp - 0x3c]
00016A57: mov word ptr [bp - 0x44], ax
00016A5A: lds si, ptr [bp - 0x48]
00016A5D: mov di, word ptr [bp - 0x38]
00016A60: mov ax, 0x907
00016A63: mov word ptr [bp - 0x54], ax
00016A66: mov ax, 0x93c
00016A69: mov word ptr [bp - 0x56], ax
00016A6C: mov ax, 0x979
00016A6F: mov word ptr [bp - 0x58], ax
00016A72: jmp 0x16aa0
00016A74: mov ax, ds
00016A76: mov word ptr [bp - 0x46], ax
00016A79: mov word ptr [bp - 0x48], si
00016A7C: mov ax, word ptr [bp - 0x3e]
00016A7F: mov word ptr [bp - 0x42], ax
00016A82: mov ax, word ptr [bp - 0x40]
00016A85: mov word ptr [bp - 0x44], ax
00016A88: lds si, ptr [bp - 0x4c]
00016A8B: mov word ptr [bp - 0x38], di
00016A8E: mov ax, 0x8fe
00016A91: mov word ptr [bp - 0x54], ax
00016A94: mov ax, 0x937
00016A97: mov word ptr [bp - 0x56], ax
00016A9A: mov ax, 0x970
00016A9D: mov word ptr [bp - 0x58], ax
00016AA0: cmp byte ptr [bp - 0x30], 1
00016AA4: je 0x16ac1
00016AA6: lodsb al, byte ptr [si]
00016AA7: mov ch, al
00016AA9: or si, si
00016AAB: jne 0x16ac1
00016AAD: mov dx, word ptr [bp - 0x42]
00016AB0: mov ax, word ptr [bp - 0x44]
00016AB3: clc 
00016AB4: lcall 0xb08, 0x17e
00016AB9: jae 0x16ac1
00016ABB: mov word ptr [bp - 2], ax
00016ABE: jmp 0x16bb7
00016AC1: lodsb al, byte ptr [si]
00016AC2: mov ah, ch
00016AC4: mov ch, al
00016AC6: ror al, cl
00016AC8: mov bl, byte ptr [bp - 0x2a]
00016ACB: jmp word ptr [bp - 0x54]
00016ACE: not bl
00016AD0: or al, bl
00016AD2: and byte ptr es:[di], al
00016AD5: jmp 0x16adc
00016AD7: and al, bl
00016AD9: xor byte ptr es:[di], al
00016ADC: inc di
00016ADD: mov bx, word ptr [bp - 0x32]
00016AE0: or bx, bx
00016AE2: je 0x16b13
00016AE4: cmp si, word ptr [bp - 0x52]
00016AE7: jne 0x16afd
00016AE9: mov dx, word ptr [bp - 0x42]
00016AEC: mov ax, word ptr [bp - 0x44]
00016AEF: clc 
00016AF0: lcall 0xb08, 0x17e
00016AF5: jae 0x16afd
00016AF7: mov word ptr [bp - 2], ax
00016AFA: jmp 0x16bb7
00016AFD: lodsb al, byte ptr [si]
00016AFE: mov ah, ch
00016B00: mov ch, al
00016B02: ror ax, cl
00016B04: jmp word ptr [bp - 0x56]
00016B07: and byte ptr es:[di], al
00016B0A: jmp 0x16b0f
00016B0C: xor byte ptr es:[di], al
00016B0F: inc di
00016B10: dec bx
00016B11: jne 0x16ae4
00016B13: mov bh, byte ptr [bp - 0x29]
00016B16: or bh, bh
00016B18: je 0x16b4f
00016B1A: cmp byte ptr [bp - 0x34], 0
00016B1E: je 0x16b39
00016B20: cmp si, word ptr [bp - 0x52]
00016B23: jne 0x16b38
00016B25: mov dx, word ptr [bp - 0x42]
00016B28: mov ax, word ptr [bp - 0x44]
00016B2B: clc 
00016B2C: lcall 0xb08, 0x17e
00016B31: jae 0x16b38
00016B33: mov word ptr [bp - 2], ax
00016B36: jmp 0x16bb7
00016B38: lodsb al, byte ptr [si]
00016B39: mov ah, ch
00016B3B: ror ax, cl
00016B3D: jmp word ptr [bp - 0x58]
00016B40: not bh
00016B42: or al, bh
00016B44: and byte ptr es:[di], al
00016B47: jmp 0x16b4e
00016B49: and al, bh
00016B4B: xor byte ptr es:[di], al
00016B4E: inc di
00016B4F: dec word ptr [bp - 0x1a]
00016B52: je 0x16bb2
00016B54: cmp si, word ptr [bp - 0x52]
00016B57: jne 0x16b6c
00016B59: mov dx, word ptr [bp - 0x42]
00016B5C: mov ax, word ptr [bp - 0x44]
00016B5F: clc 
00016B60: lcall 0xb08, 0x17e
00016B65: jae 0x16b6c
00016B67: mov word ptr [bp - 2], ax
00016B6A: jmp 0x16bb7
00016B6C: add si, word ptr [bp - 0x20]
00016B6F: jb 0x16b7c
00016B71: cmp word ptr [bp - 0x52], 0
00016B75: je 0x16b8f
00016B77: cmp si, word ptr [bp - 0x52]
00016B7A: jb 0x16b8f
00016B7C: mov dx, word ptr [bp - 0x42]
00016B7F: mov ax, word ptr [bp - 0x44]
00016B82: clc 
00016B83: lcall 0xb08, 0x17e
00016B88: jae 0x16b8f
00016B8A: mov word ptr [bp - 2], ax
00016B8D: jmp 0x16bb7
00016B8F: cmp byte ptr [bp - 0xa], 1
00016B93: je 0x16baf
00016B95: sub di, word ptr [bp - 0x1e]
00016B98: inc byte ptr [bp - 9]
00016B9B: cmp byte ptr [bp - 9], 4
00016B9F: jb 0x16bab
00016BA1: sub di, 0x5fa6
00016BA5: mov byte ptr [bp - 9], 0
00016BA9: jmp 0x16baf
00016BAB: add di, 0x2000
00016BAF: jmp 0x16a40
00016BB2: mov word ptr [bp - 2], 0
00016BB7: lds si, ptr [bp - 0x3c]
00016BBA: mov word ptr [si + 0x28], 0
00016BBF: mov word ptr [si + 0x2a], 4
00016BC4: les di, ptr [bp - 0x40]
00016BC7: mov word ptr es:[di + 0x28], 0
00016BCD: mov word ptr es:[di + 0x2a], 4
00016BD3: mov ax, word ptr [bp - 2]
00016BD6: pop di
00016BD7: pop si
00016BD8: pop es
00016BD9: pop ds
00016BDA: mov sp, bp
00016BDC: pop bp
00016BDD: retf 0xa
00016BE0: mov bx, word ptr [bp + 0xa]
00016BE3: mov ax, word ptr [bp + 8]
00016BE6: lcall es:[di + 0x26]
00016BEA: mov di, bx
00016BEC: mov byte ptr [bp - 0x24], dl
00016BEF: push word ptr [bp - 0xe]
00016BF2: push word ptr [bp - 0x24]
00016BF5: lcall 0xa36, 0xe
00016BFA: mov bx, word ptr [bp - 0x1a]
00016BFD: cmp word ptr [bp - 0x5c], 0
00016C01: je 0x16c0b
00016C03: mov dx, word ptr [bp - 0x5a]
00016C06: in al, dx
00016C07: test al, 8
00016C09: je 0x16c06
00016C0B: mov ah, byte ptr [bp - 0xc]
00016C0E: mov cx, word ptr [bp - 0x1e]
00016C11: jmp 0x16c40
00016C13: or si, si
00016C15: jne 0x16c2c
00016C17: push ax
00016C18: mov dx, word ptr [bp - 0x3a]
00016C1B: mov ax, word ptr [bp - 0x3c]
00016C1E: clc 
00016C1F: lcall 0xb08, 0x17e
00016C24: mov word ptr [bp - 2], ax
00016C27: pop ax
00016C28: jae 0x16c2c
00016C2A: jmp 0x16caa
00016C2C: or di, di
00016C2E: jne 0x16c40
00016C30: push ax
00016C31: inc byte ptr [bp - 0x24]
00016C34: push word ptr [bp - 0xe]
00016C37: push word ptr [bp - 0x24]
00016C3A: lcall 0xa36, 0x63
00016C3F: pop ax
00016C40: lodsb al, byte ptr [si]
00016C41: cmp al, ah
00016C43: je 0x16c48
00016C45: mov byte ptr es:[di], al
00016C48: inc di
00016C49: loop 0x16c13
00016C4B: dec bx
00016C4C: je 0x16ca5
00016C4E: or si, si
00016C50: jne 0x16c65
00016C52: mov dx, word ptr [bp - 0x3a]
00016C55: mov ax, word ptr [bp - 0x3c]
00016C58: clc 
00016C59: lcall 0xb08, 0x17e
00016C5E: jae 0x16c65
00016C60: mov word ptr [bp - 2], ax
00016C63: jmp 0x16caa
00016C65: add si, word ptr [bp - 0x20]
00016C68: jae 0x16c7d
00016C6A: mov dx, word ptr [bp - 0x3a]
00016C6D: mov ax, word ptr [bp - 0x3c]
00016C70: clc 
00016C71: lcall 0xb08, 0x17e
00016C76: jae 0x16c7d
00016C78: mov word ptr [bp - 2], ax
00016C7B: jmp 0x16caa
00016C7D: or di, di
00016C7F: jne 0x16c8f
00016C81: inc byte ptr [bp - 0x24]
00016C84: push word ptr [bp - 0xe]
00016C87: push word ptr [bp - 0x24]
00016C8A: lcall 0xa36, 0x63
00016C8F: add di, word ptr [bp - 0x22]
00016C92: jae 0x16ca2
00016C94: inc byte ptr [bp - 0x24]
00016C97: push word ptr [bp - 0xe]
00016C9A: push word ptr [bp - 0x24]
00016C9D: lcall 0xa36, 0x63
00016CA2: jmp 0x16c0b
00016CA5: mov word ptr [bp - 2], 0
00016CAA: push word ptr [bp - 0xe]
00016CAD: lcall 0xa36, 0x1a5
00016CB2: lds si, ptr [bp - 0x3c]
00016CB5: mov word ptr [si + 0x28], 0
00016CBA: mov word ptr [si + 0x2a], 4
00016CBF: les di, ptr [bp - 0x40]
00016CC2: mov word ptr es:[di + 0x28], 0
00016CC8: mov word ptr es:[di + 0x2a], 4
00016CCE: mov ax, word ptr [bp - 2]
00016CD1: pop di
00016CD2: pop si
00016CD3: pop es
00016CD4: pop ds
00016CD5: mov sp, bp
00016CD7: pop bp
00016CD8: retf 0xa
00016CDB: add byte ptr [di - 0x75], dl
00016CDE: in al, dx
00016CDF: sub sp, 2
00016CE2: push ds
00016CE3: push es
00016CE4: push si
00016CE5: push di
00016CE6: mov ax, 0x1ab5
00016CE9: mov ds, ax
00016CEB: les di, ptr [bp + 0xa]
00016CEE: mov word ptr es:[di], 2
00016CF3: les di, ptr [bp + 6]
00016CF6: mov word ptr es:[di], 3
00016CFB: mov word ptr [bp - 2], 0
00016D00: mov ax, word ptr [bp - 2]
00016D03: pop di
00016D04: pop si
00016D05: pop es
00016D06: pop ds
00016D07: mov sp, bp
00016D09: pop bp
00016D0A: retf 8
00016D0D: push bp
00016D0E: mov bp, sp
00016D10: sub sp, 2
00016D13: push ds
00016D14: push es
00016D15: push si
00016D16: push di
00016D17: mov ax, 0x1ab5
00016D1A: mov ds, ax
00016D1C: mov ax, word ptr [bp + 6]
00016D1F: cmp ax, 0
00016D22: jl 0x16d29
00016D24: cmp ax, 0xb
00016D27: jle 0x16d32
00016D29: mov word ptr [bp - 2], 0xf830
00016D2E: cdq 
00016D2F: stc 
00016D30: jmp 0x16d5a
00016D32: mov ax, 0x1ab5
00016D35: mov es, ax
00016D37: mov di, 0x6f52
00016D3A: mov ax, 0x18
00016D3D: mov bx, word ptr [bp + 6]
00016D40: mul bx
00016D42: add di, ax
00016D44: cmp byte ptr es:[di], bl
00016D47: je 0x16d52
00016D49: mov word ptr [bp - 2], 0xfc19
00016D4E: cdq 
00016D4F: stc 
00016D50: jmp 0x16d5a
00016D52: mov dx, es
00016D54: mov ax, di
00016D56: mov word ptr [bp - 2], ax
00016D59: clc 
00016D5A: mov ax, word ptr [bp - 2]
00016D5D: pop di
00016D5E: pop si
00016D5F: pop es
00016D60: pop ds
00016D61: mov sp, bp
00016D63: pop bp
00016D64: retf 2
00016D67: push bp
00016D68: mov bp, sp
00016D6A: sub sp, 2
00016D6D: push ds
00016D6E: push es
00016D6F: push si
00016D70: push di
00016D71: mov ax, 0x1ab5
00016D74: mov ds, ax
00016D76: mov ax, word ptr [bp + 6]
00016D79: cmp ax, 0
00016D7C: jl 0x16d83
00016D7E: cmp ax, 1
00016D81: jle 0x16d8c
00016D83: mov word ptr [bp - 2], 0xf824
00016D88: cdq 
00016D89: stc 
00016D8A: jmp 0x16db4
00016D8C: mov ax, 0x1ab5
00016D8F: mov es, ax
00016D91: mov di, 0x7072
00016D94: mov ax, 0x32
00016D97: mov bx, word ptr [bp + 6]
00016D9A: mul bx
00016D9C: add di, ax
00016D9E: cmp word ptr es:[di], bx
00016DA1: je 0x16dac
00016DA3: mov word ptr [bp - 2], 0xfc19
00016DA8: cdq 
00016DA9: stc 
00016DAA: jmp 0x16db4
00016DAC: mov dx, es
00016DAE: mov ax, di
00016DB0: mov word ptr [bp - 2], ax
00016DB3: clc 
00016DB4: mov ax, word ptr [bp - 2]
00016DB7: pop di
00016DB8: pop si
00016DB9: pop es
00016DBA: pop ds
00016DBB: mov sp, bp
00016DBD: pop bp
00016DBE: retf 2
00016DC1: push bp
00016DC2: mov bp, sp
00016DC4: sub sp, 2
00016DC7: push ds
00016DC8: push es
00016DC9: push si
00016DCA: push di
00016DCB: mov ax, 0x1ab5
00016DCE: mov ds, ax
00016DD0: mov word ptr [bp - 2], 0xf830
00016DD5: mov ax, word ptr [bp + 6]
00016DD8: cmp ax, 0
00016DDB: jl 0x16dea
00016DDD: cmp ax, 0xb
00016DE0: jg 0x16dea
00016DE2: mov word ptr [0x6f3f], ax
00016DE5: mov word ptr [bp - 2], 0
00016DEA: mov ax, word ptr [bp - 2]
00016DED: pop di
00016DEE: pop si
00016DEF: pop es
00016DF0: pop ds
00016DF1: mov sp, bp
00016DF3: pop bp
00016DF4: retf 2
00016DF7: push bp
00016DF8: mov bp, sp
00016DFA: sub sp, 2
00016DFD: push ds
00016DFE: push es
00016DFF: push si
00016E00: push di
00016E01: mov ax, 0x1ab5
00016E04: mov ds, ax
00016E06: mov ax, word ptr [0x6f3f]
00016E09: mov word ptr [bp - 2], ax
00016E0C: mov ax, word ptr [bp - 2]
00016E0F: pop di
00016E10: pop si
00016E11: pop es
00016E12: pop ds
00016E13: mov sp, bp
00016E15: pop bp
00016E16: retf 
00016E17: push bp
00016E18: mov bp, sp
00016E1A: sub sp, 2
00016E1D: push ds
00016E1E: push es
00016E1F: push si
00016E20: push di
00016E21: mov ax, 0x1ab5
00016E24: mov ds, ax
00016E26: mov word ptr [bp - 2], 0xf82f
00016E2B: mov ax, word ptr [bp + 0xa]
00016E2E: cmp ax, 1
00016E31: jl 0x16e64
00016E33: cmp ax, 0x400
00016E36: jg 0x16e64
00016E38: mov bx, word ptr [bp + 8]
00016E3B: cmp bx, 1
00016E3E: jl 0x16e64
00016E40: cmp bx, 0x400
00016E44: jg 0x16e64
00016E46: mov cx, word ptr [bp + 6]
00016E49: cmp cx, 1
00016E4C: jl 0x16e64
00016E4E: cmp cx, 0x400
00016E52: jg 0x16e64
00016E54: mov word ptr [0x6f41], ax
00016E57: mov word ptr [0x6f43], bx
00016E5B: mov word ptr [0x6f45], cx
00016E5F: mov word ptr [bp - 2], 0
00016E64: mov ax, word ptr [bp - 2]
00016E67: pop di
00016E68: pop si
00016E69: pop es
00016E6A: pop ds
00016E6B: mov sp, bp
00016E6D: pop bp
00016E6E: retf 6
00016E71: push bp
00016E72: mov bp, sp
00016E74: sub sp, 2
00016E77: push ds
00016E78: push es
00016E79: push si
00016E7A: push di
00016E7B: mov ax, 0x1ab5
00016E7E: mov ds, ax
00016E80: les di, ptr [bp + 0xe]
00016E83: mov ax, word ptr [0x6f41]
00016E86: stosw word ptr es:[di], ax
00016E87: les di, ptr [bp + 0xa]
00016E8A: mov ax, word ptr [0x6f43]
00016E8D: stosw word ptr es:[di], ax
00016E8E: les di, ptr [bp + 6]
00016E91: mov ax, word ptr [0x6f45]
00016E94: stosw word ptr es:[di], ax
00016E95: mov word ptr [bp - 2], 0
00016E9A: mov ax, word ptr [bp - 2]
00016E9D: pop di
00016E9E: pop si
00016E9F: pop es
00016EA0: pop ds
00016EA1: mov sp, bp
00016EA3: pop bp
00016EA4: retf 0xc
00016EA7: push bp
00016EA8: mov bp, sp
00016EAA: sub sp, 2
00016EAD: push ds
00016EAE: push es
00016EAF: push si
00016EB0: push di
00016EB1: mov ax, 0x1ab5
00016EB4: mov ds, ax
00016EB6: mov word ptr [bp - 2], 0xf82e
00016EBB: mov ax, word ptr [bp + 6]
00016EBE: mov dx, word ptr [bp + 8]
00016EC1: or dx, dx
00016EC3: jne 0x16ed6
00016EC5: cmp ax, 0x1388
00016EC8: jg 0x16ed6
00016ECA: mov word ptr [0x6f47], ax
00016ECD: mov word ptr [0x6f49], dx
00016ED1: mov word ptr [bp - 2], 0
00016ED6: mov ax, word ptr [bp - 2]
00016ED9: pop di
00016EDA: pop si
00016EDB: pop es
00016EDC: pop ds
00016EDD: mov sp, bp
00016EDF: pop bp
00016EE0: retf 4
00016EE3: push bp
00016EE4: mov bp, sp
00016EE6: sub sp, 2
00016EE9: push ds
00016EEA: push es
00016EEB: push si
00016EEC: push di
00016EED: mov ax, 0x1ab5
00016EF0: mov ds, ax
00016EF2: mov ax, word ptr [0x6f47]
00016EF5: mov dx, word ptr [0x6f49]
00016EF9: mov word ptr [bp - 2], ax
00016EFC: mov ax, word ptr [bp - 2]
00016EFF: pop di
00016F00: pop si
00016F01: pop es
00016F02: pop ds
00016F03: mov sp, bp
00016F05: pop bp
00016F06: retf 
00016F07: push bp
00016F08: mov bp, sp
00016F0A: sub sp, 2
00016F0D: push ds
00016F0E: push es
00016F0F: push si
00016F10: push di
00016F11: mov ax, 0x1ab5
00016F14: mov ds, ax
00016F16: mov ax, word ptr [bp + 6]
00016F19: cmp ax, 0
00016F1C: je 0x16f21
00016F1E: mov ax, 1
00016F21: mov word ptr [0x6f4b], ax
00016F24: mov word ptr [bp - 2], 0
00016F29: mov ax, word ptr [bp - 2]
00016F2C: pop di
00016F2D: pop si
00016F2E: pop es
00016F2F: pop ds
00016F30: mov sp, bp
00016F32: pop bp
00016F33: retf 2
00016F36: push bp
00016F37: mov bp, sp
00016F39: sub sp, 2
00016F3C: push ds
00016F3D: push es
00016F3E: push si
00016F3F: push di
00016F40: mov ax, 0x1ab5
00016F43: mov ds, ax
00016F45: mov ax, word ptr [0x6f4b]
00016F48: mov word ptr [bp - 2], ax
00016F4B: mov ax, word ptr [bp - 2]
00016F4E: pop di
00016F4F: pop si
00016F50: pop es
00016F51: pop ds
00016F52: mov sp, bp
00016F54: pop bp
00016F55: retf 
00016F56: push bp
00016F57: mov bp, sp
00016F59: sub sp, 2
00016F5C: push ds
00016F5D: push es
00016F5E: push si
00016F5F: push di
00016F60: mov ax, 0x1ab5
00016F63: mov ds, ax
00016F65: mov ax, word ptr [bp + 6]
00016F68: mov word ptr [0x6f4d], ax
00016F6B: mov word ptr [bp - 2], 0
00016F70: mov ax, word ptr [bp - 2]
00016F73: pop di
00016F74: pop si
00016F75: pop es
00016F76: pop ds
00016F77: mov sp, bp
00016F79: pop bp
00016F7A: retf 2
00016F7D: push bp
00016F7E: mov bp, sp
00016F80: sub sp, 2
00016F83: push ds
00016F84: push es
00016F85: push si
00016F86: push di
00016F87: mov ax, 0x1ab5
00016F8A: mov ds, ax
00016F8C: mov ax, word ptr [0x6f4d]
00016F8F: mov word ptr [bp - 2], ax
00016F92: mov ax, word ptr [bp - 2]
00016F95: pop di
00016F96: pop si
00016F97: pop es
00016F98: pop ds
00016F99: mov sp, bp
00016F9B: pop bp
00016F9C: retf 
00016F9D: add byte ptr [di - 0x75], dl
00016FA0: in al, dx
00016FA1: sub sp, 4
00016FA4: push ds
00016FA5: push es
00016FA6: push si
00016FA7: push di
00016FA8: mov ax, 0x1ab5
00016FAB: mov ds, ax
00016FAD: lds si, ptr [bp + 0xc]
00016FB0: mov ax, word ptr [si + 0x26]
00016FB3: sub ax, word ptr [si + 0x24]
00016FB6: inc ax
00016FB7: mov word ptr [bp - 4], ax
00016FBA: add si, word ptr [si + 0x48]
00016FBD: les di, ptr [bp + 6]
00016FC0: les di, ptr es:[di + 0xa4]
00016FC5: xor dx, dx
00016FC7: mov cx, word ptr [bp - 4]
00016FCA: mov ax, word ptr [si + 2]
00016FCD: sub ax, word ptr [si]
00016FCF: mov bx, ax
00016FD1: shr ax, 1
00016FD3: shr ax, 1
00016FD5: shr ax, 1
00016FD7: and bx, 7
00016FDA: je 0x16fdd
00016FDC: inc ax
00016FDD: shl ax, 1
00016FDF: shl ax, 1
00016FE1: shl ax, 1
00016FE3: add dx, ax
00016FE5: mov word ptr es:[di + 2], dx
00016FE9: inc si
00016FEA: inc si
00016FEB: inc di
00016FEC: inc di
00016FED: loop 0x16fca
00016FEF: les di, ptr [bp + 6]
00016FF2: mov word ptr es:[di + 0xa], dx
00016FF6: lds si, ptr [bp + 0xc]
00016FF9: add si, word ptr [si + 0x48]
00016FFC: les di, ptr es:[di + 0xa8]
00017001: inc si
00017002: inc si
00017003: mov cx, word ptr [bp - 4]
00017006: lodsw ax, word ptr [si]
00017007: sub ax, word ptr [si - 4]
0001700A: stosw word ptr es:[di], ax
0001700B: loop 0x17006
0001700D: mov word ptr [bp - 2], 0
00017012: mov ax, word ptr [bp - 2]
00017015: pop di
00017016: pop si
00017017: pop es
00017018: pop ds
00017019: mov sp, bp
0001701B: pop bp
0001701C: retf 0xa
0001701F: add byte ptr [di - 0x75], dl
00017022: in al, dx
00017023: sub sp, 2
00017026: push ds
00017027: push es
00017028: push si
00017029: push di
0001702A: mov ax, 0x1ab5
0001702D: mov ds, ax
0001702F: lds si, ptr [bp + 6]
00017032: mov ax, word ptr [si + 0x52]
00017035: or ax, ax
00017037: je 0x1706d
00017039: cmp ax, word ptr [si + 0x2a]
0001703C: jl 0x1706d
0001703E: cmp word ptr [si + 0x2a], 0
00017042: jl 0x1706d
00017044: cmp ax, word ptr [si + 0x2e]
00017047: jl 0x1706d
00017049: cmp word ptr [si + 0x2e], 0
0001704D: jl 0x1706d
0001704F: mov ax, word ptr [si + 0x2a]
00017052: add ax, word ptr [si + 0x2e]
00017055: cmp ax, word ptr [si + 0x52]
00017058: jg 0x1706d
0001705A: cmp word ptr [si + 0x34], 0
0001705E: je 0x1706d
00017060: mov ax, word ptr [si + 0x26]
00017063: cmp ax, word ptr [si + 0x24]
00017066: jl 0x1706d
00017068: cmp ax, 0x100
0001706B: jl 0x17074
0001706D: mov word ptr [bp - 2], 0xfc18
00017072: jmp 0x17079
00017074: mov word ptr [bp - 2], 0
00017079: mov ax, word ptr [bp - 2]
0001707C: pop di
0001707D: pop si
0001707E: pop es
0001707F: pop ds
00017080: mov sp, bp
00017082: pop bp
00017083: retf 4
00017086: push bp
00017087: mov bp, sp
00017089: sub sp, 0x2e
0001708C: push ds
0001708D: push es
0001708E: push si
0001708F: push di
00017090: mov ax, 0x1ab5
00017093: mov ds, ax
00017095: lds si, ptr [bp + 0xc]
00017098: mov word ptr [bp - 4], si
0001709B: mov ax, si
0001709D: add ax, word ptr [bp + 0xa]
000170A0: dec ax
000170A1: mov word ptr [bp - 6], ax
000170A4: push ds
000170A5: push si
000170A6: lcall 0x1542, 0
000170AB: or ax, ax
000170AD: je 0x170b5
000170AF: mov word ptr [bp - 2], ax
000170B2: jmp 0x1727f
000170B5: les di, ptr [bp + 6]
000170B8: mov ax, 0xca10
000170BB: mov word ptr es:[di], ax
000170BE: mov ax, 0
000170C1: mov word ptr es:[di + 2], ax
000170C5: mov ax, word ptr [si + 0x52]
000170C8: mov word ptr [bp - 0x1a], ax
000170CB: mov word ptr [bp - 0x1c], ax
000170CE: mov word ptr es:[di + 8], ax
000170D2: mov ax, word ptr [si + 0x50]
000170D5: mov word ptr [bp - 0x18], ax
000170D8: mov ax, word ptr [si + 0x2a]
000170DB: mov word ptr es:[di + 0xc], ax
000170DF: mov ax, word ptr [si + 0x2e]
000170E2: mov word ptr es:[di + 0xe], ax
000170E6: mov ah, 1
000170E8: mov al, 8
000170EA: mov word ptr es:[di + 0x10], ax
000170EE: mov word ptr es:[di + 0x12], 1
000170F4: mov word ptr es:[di + 0x14], 0
000170FA: mov word ptr es:[di + 0x16], 0
00017100: mov word ptr es:[di + 0x18], 0
00017106: mov word ptr es:[di + 0x1a], 0
0001710C: mov word ptr es:[di + 0x1c], 0
00017112: mov word ptr es:[di + 0x20], 0
00017118: mov ax, word ptr [si + 0x34]
0001711B: mov word ptr es:[di + 0x22], ax
0001711F: mov word ptr es:[di + 0x1e], ax
00017123: mov ax, word ptr [si + 0x48]
00017126: mov word ptr [bp - 0x28], ax
00017129: mov ax, word ptr [si + 0x4c]
0001712C: mov word ptr [bp - 0x26], ax
0001712F: mov ax, word ptr [si + 0x24]
00017132: mov word ptr [bp - 0x1e], ax
00017135: mov word ptr es:[di + 4], ax
00017139: mov ax, word ptr [si + 0x26]
0001713C: mov word ptr [bp - 0x20], ax
0001713F: mov word ptr es:[di + 6], ax
00017143: sub ax, word ptr [si + 0x24]
00017146: inc ax
00017147: mov word ptr [bp - 0x22], ax
0001714A: add si, word ptr [bp - 0x28]
0001714D: les di, ptr [bp + 6]
00017150: les di, ptr es:[di + 0xa4]
00017155: mov word ptr [bp - 0xc], es
00017158: mov word ptr [bp - 0xe], di
0001715B: cld 
0001715C: mov cx, word ptr [bp - 0x22]
0001715F: inc cx
00017160: rep movsw word ptr es:[di], word ptr [si]
00017162: lds si, ptr [bp + 0xc]
00017165: add si, word ptr [bp - 0x26]
00017168: push si
00017169: lcall 0x96b, 0xa0
0001716E: jae 0x17178
00017170: mov word ptr [bp - 2], 0xfffd
00017175: jmp 0x1727f
00017178: mov si, ax
0001717A: mov word ptr [bp - 0x10], ds
0001717D: mov word ptr [bp - 0x12], si
00017180: lds si, ptr [bp + 6]
00017183: lds si, ptr [si + 0xa4]
00017187: mov word ptr [bp - 0xc], ds
0001718A: mov word ptr [bp - 0xe], si
0001718D: les di, ptr [bp + 6]
00017190: add di, 0x24
00017193: mov word ptr [bp - 0x2a], es
00017196: mov word ptr [bp - 0x2c], di
00017199: push es
0001719A: push di
0001719B: xor ax, ax
0001719D: push ax
0001719E: mov ax, word ptr [bp - 0x1c]
000171A1: sub ax, word ptr [bp - 0x1a]
000171A4: push ax
000171A5: mov ax, 1
000171A8: push ax
000171A9: lcall 0xb08, 0xa
000171AE: or dx, dx
000171B0: jne 0x171b8
000171B2: mov word ptr [bp - 2], ax
000171B5: jmp 0x1727f
000171B8: mov word ptr [bp - 0x14], dx
000171BB: mov word ptr [bp - 0x16], ax
000171BE: les di, ptr [bp - 0x16]
000171C1: mov cx, word ptr [bp - 0x22]
000171C4: push cx
000171C5: mov ax, word ptr [si]
000171C7: and ax, 7
000171CA: mov word ptr [bp - 0x24], ax
000171CD: mov ax, word ptr [si]
000171CF: shr ax, 1
000171D1: shr ax, 1
000171D3: shr ax, 1
000171D5: mov word ptr [bp - 0x2e], ax
000171D8: mov ax, word ptr [si + 2]
000171DB: sub ax, word ptr [si]
000171DD: jne 0x171e2
000171DF: jmp 0x17263
000171E2: mov dx, ax
000171E4: shr ax, 1
000171E6: shr ax, 1
000171E8: shr ax, 1
000171EA: and dx, 7
000171ED: je 0x171f0
000171EF: inc ax
000171F0: mov cl, dl
000171F2: xor cl, 7
000171F5: inc cl
000171F7: and cl, 7
000171FA: mov ch, 0xff
000171FC: shl ch, cl
000171FE: xor cl, cl
00017200: or cx, word ptr [bp - 0x24]
00017203: mov bx, ax
00017205: cmp bx, 0
00017208: je 0x17263
0001720A: mov word ptr [bp - 0xc], ds
0001720D: mov word ptr [bp - 0xe], si
00017210: lds si, ptr [bp - 0x12]
00017213: add si, word ptr [bp - 0x2e]
00017216: dec bx
00017217: je 0x1723d
00017219: mov ah, byte ptr [si]
0001721B: mov al, byte ptr [si + 1]
0001721E: inc si
0001721F: shl ax, cl
00017221: mov byte ptr es:[di], ah
00017224: inc di
00017225: jne 0x1723a
00017227: stc 
00017228: mov dx, word ptr [bp - 0x2a]
0001722B: mov ax, word ptr [bp - 0x2c]
0001722E: lcall 0xb08, 0x17e
00017233: jae 0x1723a
00017235: mov word ptr [bp - 2], ax
00017238: jmp 0x1727f
0001723A: dec bx
0001723B: jne 0x17219
0001723D: mov ah, byte ptr [si]
0001723F: mov al, byte ptr [si + 1]
00017242: inc si
00017243: shl ax, cl
00017245: and ah, ch
00017247: mov byte ptr es:[di], ah
0001724A: inc di
0001724B: jne 0x17260
0001724D: stc 
0001724E: mov dx, word ptr [bp - 0x2a]
00017251: mov ax, word ptr [bp - 0x2c]
00017254: lcall 0xb08, 0x17e
00017259: jae 0x17260
0001725B: mov word ptr [bp - 2], ax
0001725E: jmp 0x1727f
00017260: lds si, ptr [bp - 0xe]
00017263: inc si
00017264: inc si
00017265: pop cx
00017266: dec cx
00017267: je 0x1726c
00017269: jmp 0x171c4
0001726C: lds si, ptr [bp - 0x12]
0001726F: add si, word ptr [bp - 0x18]
00017272: dec word ptr [bp - 0x1a]
00017275: je 0x1727a
00017277: jmp 0x17168
0001727A: mov word ptr [bp - 2], 0
0001727F: mov ax, word ptr [bp - 2]
00017282: pop di
00017283: pop si
00017284: pop es
00017285: pop ds
00017286: mov sp, bp
00017288: pop bp
00017289: retf 0xa
0001728C: push bp
0001728D: mov bp, sp
0001728F: sub sp, 2
00017292: push ds
00017293: push es
00017294: push si
00017295: push di
00017296: mov ax, 0x1ab5
00017299: mov ds, ax
0001729B: mov ax, word ptr [bp + 6]
0001729E: cmp ax, 1
000172A1: je 0x172a6
000172A3: mov ax, 0
000172A6: mov si, 0x71e4
000172A9: mov word ptr [si + 0x10], ax
000172AC: mov word ptr [bp - 2], 0
000172B1: mov ax, word ptr [bp - 2]
000172B4: pop di
000172B5: pop si
000172B6: pop es
000172B7: pop ds
000172B8: mov sp, bp
000172BA: pop bp
000172BB: retf 2
000172BE: push bp
000172BF: mov bp, sp
000172C1: sub sp, 2
000172C4: push ds
000172C5: push es
000172C6: push si
000172C7: push di
000172C8: mov ax, 0x1ab5
000172CB: mov ds, ax
000172CD: mov si, 0x71e4
000172D0: mov ax, word ptr [si + 0x10]
000172D3: mov word ptr [bp - 2], ax
000172D6: mov ax, word ptr [bp - 2]
000172D9: pop di
000172DA: pop si
000172DB: pop es
000172DC: pop ds
000172DD: mov sp, bp
000172DF: pop bp
000172E0: retf 
000172E1: push bp
000172E2: mov bp, sp
000172E4: sub sp, 2
000172E7: push ds
000172E8: push es
000172E9: push si
000172EA: push di
000172EB: mov ax, 0x1ab5
000172EE: mov ds, ax
000172F0: mov si, 0x71e4
000172F3: cmp word ptr [bp + 0xc], 0
000172F7: jge 0x17300
000172F9: mov word ptr [bp - 2], 0xffe5
000172FE: jmp 0x17348
00017300: cmp word ptr [bp + 0xa], 0
00017304: jge 0x1730d
00017306: mov word ptr [bp - 2], 0xffe5
0001730B: jmp 0x17348
0001730D: mov ax, word ptr [bp + 8]
00017310: cmp ax, word ptr [bp + 0xc]
00017313: jge 0x1731c
00017315: mov word ptr [bp - 2], 0xffe5
0001731A: jmp 0x17348
0001731C: mov ax, word ptr [bp + 6]
0001731F: cmp ax, word ptr [bp + 0xa]
00017322: jge 0x1732b
00017324: mov word ptr [bp - 2], 0xffe5
00017329: jmp 0x17348
0001732B: mov ax, word ptr [bp + 0xc]
0001732E: mov word ptr [si + 0x12], ax
00017331: mov ax, word ptr [bp + 0xa]
00017334: mov word ptr [si + 0x14], ax
00017337: mov ax, word ptr [bp + 8]
0001733A: mov word ptr [si + 0x16], ax
0001733D: mov ax, word ptr [bp + 6]
00017340: mov word ptr [si + 0x18], ax
00017343: mov word ptr [bp - 2], 0
00017348: mov ax, word ptr [bp - 2]
0001734B: pop di
0001734C: pop si
0001734D: pop es
0001734E: pop ds
0001734F: mov sp, bp
00017351: pop bp
00017352: retf 8
00017355: push bp
00017356: mov bp, sp
00017358: sub sp, 2
0001735B: push ds
0001735C: push es
0001735D: push si
0001735E: push di
0001735F: mov ax, 0x1ab5
00017362: mov ds, ax
00017364: mov si, 0x71e4
00017367: les di, ptr [bp + 0x12]
0001736A: mov ax, word ptr [si + 0x12]
0001736D: mov word ptr es:[di], ax
00017370: les di, ptr [bp + 0xe]
00017373: mov ax, word ptr [si + 0x14]
00017376: mov word ptr es:[di], ax
00017379: les di, ptr [bp + 0xa]
0001737C: mov ax, word ptr [si + 0x16]
0001737F: mov word ptr es:[di], ax
00017382: les di, ptr [bp + 6]
00017385: mov ax, word ptr [si + 0x18]
00017388: mov word ptr es:[di], ax
0001738B: mov word ptr [bp - 2], 0
00017390: mov ax, word ptr [bp - 2]
00017393: pop di
00017394: pop si
00017395: pop es
00017396: pop ds
00017397: mov sp, bp
00017399: pop bp
0001739A: retf 0x10
0001739D: push ds
0001739E: push si
0001739F: push ax
000173A0: mov ax, 0x1ab5
000173A3: mov ds, ax
000173A5: mov si, 0x71e4
000173A8: pop ax
000173A9: cmp ax, word ptr [si + 0x12]
000173AC: jl 0x173c0
000173AE: cmp bx, word ptr [si + 0x14]
000173B1: jl 0x173c0
000173B3: cmp ax, word ptr [si + 0x16]
000173B6: jg 0x173c0
000173B8: cmp bx, word ptr [si + 0x18]
000173BB: jg 0x173c0
000173BD: clc 
000173BE: jmp 0x173c1
000173C0: stc 
000173C1: pop si
000173C2: pop ds
000173C3: retf 
000173C4: push bp
000173C5: mov bp, sp
000173C7: sub sp, 2
000173CA: push ds
000173CB: push es
000173CC: push si
000173CD: push di
000173CE: mov ax, 0x1ab5
000173D1: mov ds, ax
000173D3: push word ptr [bp + 0xe]
000173D6: mov ax, 0x54e4
000173D9: push ds
000173DA: push ax
000173DB: push word ptr [bp + 0xc]
000173DE: push word ptr [bp + 0xa]
000173E1: push word ptr [bp + 8]
000173E4: push word ptr [bp + 6]
000173E7: lcall 0x15a7, 6
000173EC: mov word ptr [bp - 2], ax
000173EF: mov ax, word ptr [bp - 2]
000173F2: pop di
000173F3: pop si
000173F4: pop es
000173F5: pop ds
000173F6: mov sp, bp
000173F8: pop bp
000173F9: retf 0xa
000173FC: push bp
000173FD: mov bp, sp
000173FF: sub sp, 0x14
00017402: push ds
00017403: push es
00017404: push si
00017405: push di
00017406: mov ax, 0x1ab5
00017409: mov ds, ax
0001740B: lds si, ptr [bp + 6]
0001740E: mov ax, 0xca10
00017411: mov word ptr [si], ax
00017413: mov ax, 1
00017416: mov word ptr [si + 2], ax
00017419: mov word ptr [si + 0xa], 8
0001741E: mov ah, 1
00017420: mov al, 8
00017422: mov word ptr [si + 0x10], ax
00017425: mov word ptr [si + 0x12], 1
0001742A: mov word ptr [si + 0x14], 0
0001742F: mov word ptr [si + 0x16], 0
00017434: mov word ptr [si + 0x18], 0
00017439: mov word ptr [si + 0x1a], 0
0001743E: mov word ptr [si + 0x1c], 0
00017443: mov word ptr [si + 0x20], 0
00017448: mov word ptr [si + 0x22], 8
0001744D: mov word ptr [si + 0x1e], 8
00017452: cmp word ptr [bp + 0xa], 6
00017456: jne 0x1748b
00017458: mov word ptr [bp - 4], 0x10
0001745D: mov word ptr [bp - 0xe], 0x100
00017462: mov ax, word ptr [bp - 4]
00017465: mov word ptr [si + 8], ax
00017468: mov word ptr [si + 4], 0
0001746D: mov word ptr [si + 6], 0xff
00017472: mov word ptr [si + 0xc], 0xc
00017477: mov word ptr [si + 0xe], 4
0001747C: push bp
0001747D: mov bh, 6
0001747F: mov al, 0x30
00017481: mov ah, 0x11
00017483: int 0x10
00017485: mov di, bp
00017487: pop bp
00017488: jmp 0x17524
0001748B: cmp word ptr [bp + 0xa], 2
0001748F: jne 0x174c3
00017491: mov word ptr [bp - 4], 0xe
00017496: mov word ptr [bp - 0xe], 0x100
0001749B: mov ax, word ptr [bp - 4]
0001749E: mov word ptr [si + 8], ax
000174A1: mov word ptr [si + 4], 0
000174A6: mov word ptr [si + 6], 0xff
000174AB: mov word ptr [si + 0xc], 0xa
000174B0: mov word ptr [si + 0xe], 4
000174B5: push bp
000174B6: mov bh, 2
000174B8: mov al, 0x30
000174BA: mov ah, 0x11
000174BC: int 0x10
000174BE: mov di, bp
000174C0: pop bp
000174C1: jmp 0x17524
000174C3: mov word ptr [bp - 4], 8
000174C8: mov word ptr [bp - 0xe], 0x80
000174CD: mov ax, word ptr [bp - 4]
000174D0: mov word ptr [si + 8], ax
000174D3: mov word ptr [si + 4], 0
000174D8: mov word ptr [si + 6], 0x7f
000174DD: mov word ptr [si + 0xc], 6
000174E2: mov word ptr [si + 0xe], 2
000174E7: mov ax, 0x1ab5
000174EA: mov es, ax
000174EC: mov di, 0x43bf
000174EF: push es
000174F0: push di
000174F1: lcall 0xae3, 0
000174F6: cmp byte ptr es:[di], 3
000174FA: je 0x1750e
000174FC: cmp byte ptr es:[di], 5
00017500: je 0x1750e
00017502: push dx
00017503: mov dx, 0xf000
00017506: mov es, dx
00017508: pop dx
00017509: mov di, 0xfa6e
0001750C: jmp 0x17524
0001750E: mov word ptr [bp - 0xe], 0x100
00017513: mov word ptr [si + 6], 0xff
00017518: push bp
00017519: mov bh, 3
0001751B: mov al, 0x30
0001751D: mov ah, 0x11
0001751F: int 0x10
00017521: mov di, bp
00017523: pop bp
00017524: mov word ptr [bp - 6], es
00017527: mov word ptr [bp - 8], di
0001752A: add si, 0x24
0001752D: push word ptr [bp + 0xc]
00017530: push ds
00017531: push si
00017532: mov ax, 6
00017535: push ax
00017536: mov ax, 8
00017539: mov bx, word ptr [bp - 0xe]
0001753C: mul bx
0001753E: push ax
0001753F: push word ptr [bp - 4]
00017542: lcall 0x5e5, 0x1b0
00017547: or ax, ax
00017549: je 0x17551
0001754B: mov word ptr [bp - 2], ax
0001754E: jmp 0x17668
00017551: mov ax, word ptr [si + 0x14]
00017554: mov word ptr [bp - 0xa], ax
00017557: push ds
00017558: push si
00017559: xor ax, ax
0001755B: push ax
0001755C: lcall 0x95a, 6
00017561: or ax, ax
00017563: je 0x1756b
00017565: mov word ptr [bp - 2], ax
00017568: jmp 0x17668
0001756B: xor ax, ax
0001756D: push ax
0001756E: mov ax, 0x202
00017571: push ax
00017572: lcall 0x79e, 0xc
00017577: or dx, dx
00017579: jne 0x17583
0001757B: mov word ptr [bp - 2], 0xffe6
00017580: jmp 0x17656
00017583: lds si, ptr [bp + 6]
00017586: mov word ptr [si + 0xa6], dx
0001758A: mov word ptr [si + 0xa4], ax
0001758E: xor ax, ax
00017590: push ax
00017591: mov ax, 0x200
00017594: push ax
00017595: lcall 0x79e, 0xc
0001759A: or dx, dx
0001759C: jne 0x175a6
0001759E: mov word ptr [bp - 2], 0xffe6
000175A3: jmp 0x17646
000175A6: mov word ptr [si + 0xaa], dx
000175AA: mov word ptr [si + 0xa8], ax
000175AE: les di, ptr [bp + 6]
000175B1: add di, 0x24
000175B4: push es
000175B5: push di
000175B6: xor ax, ax
000175B8: push ax
000175B9: push ax
000175BA: mov ax, 1
000175BD: push ax
000175BE: lcall 0xb08, 0xa
000175C3: or dx, dx
000175C5: jne 0x175cc
000175C7: mov word ptr [bp - 2], ax
000175CA: jmp 0x17646
000175CC: mov es, dx
000175CE: mov di, ax
000175D0: lds si, ptr [bp - 8]
000175D3: mov ax, word ptr [bp - 4]
000175D6: mov word ptr [bp - 0xc], ax
000175D9: xor bx, bx
000175DB: mov ax, word ptr [bp - 0xe]
000175DE: mov word ptr [bp - 0x10], ax
000175E1: mov al, byte ptr [bx + si]
000175E3: mov byte ptr es:[di], al
000175E6: mov ax, word ptr [bp - 4]
000175E9: add bx, ax
000175EB: inc di
000175EC: jne 0x17603
000175EE: stc 
000175EF: mov dx, word ptr [bp - 0x12]
000175F2: mov ax, word ptr [bp - 0x14]
000175F5: lcall 0xb08, 0x17e
000175FA: jae 0x17603
000175FC: mov word ptr [bp - 2], 0xfc19
00017601: jmp 0x17636
00017603: dec word ptr [bp - 0x10]
00017606: jne 0x175e1
00017608: inc si
00017609: dec word ptr [bp - 0xc]
0001760C: jne 0x175d9
0001760E: lds si, ptr [bp + 6]
00017611: les di, ptr [si + 0xa8]
00017615: cld 
00017616: mov ax, 8
00017619: mov cx, 0x100
0001761C: rep stosw word ptr es:[di], ax
0001761E: les di, ptr [si + 0xa4]
00017622: xor ax, ax
00017624: mov cx, 0x101
00017627: mov word ptr es:[di], ax
0001762A: add ax, 8
0001762D: inc di
0001762E: inc di
0001762F: loop 0x17627
00017631: mov ax, 0
00017634: jmp 0x17665
00017636: lds si, ptr [bp + 6]
00017639: push word ptr [si + 0xaa]
0001763D: push word ptr [si + 0xa8]
00017641: lcall 0x79e, 0x5d
00017646: lds si, ptr [bp + 6]
00017649: push word ptr [si + 0xa6]
0001764D: push word ptr [si + 0xa4]
00017651: lcall 0x79e, 0x5d
00017656: lds si, ptr [bp + 6]
00017659: add si, 0x24
0001765C: push ds
0001765D: push si
0001765E: lcall 0x5e5, 0x2fa
00017663: jmp 0x17668
00017665: mov word ptr [bp - 2], ax
00017668: mov ax, word ptr [bp - 2]
0001766B: pop di
0001766C: pop si
0001766D: pop es
0001766E: pop ds
0001766F: mov sp, bp
00017671: pop bp
00017672: retf 8
00017675: add byte ptr [di - 0x75], dl
00017678: in al, dx
00017679: sub sp, 0xa
0001767C: push ds
0001767D: push es
0001767E: push si
0001767F: push di
00017680: mov ax, 0x1ab5
00017683: mov ds, ax
00017685: push word ptr [bp + 0x10]
00017688: push word ptr [bp + 0xe]
0001768B: push word ptr [bp + 0xc]
0001768E: push word ptr [bp + 0xa]
00017691: lcall 0x15bd, 0xa
00017696: or ax, ax
00017698: je 0x176a0
0001769A: mov word ptr [bp - 2], ax
0001769D: jmp 0x17787
000176A0: push word ptr [bp + 0x10]
000176A3: push word ptr [bp + 0xe]
000176A6: push word ptr [bp + 0xc]
000176A9: push word ptr [bp + 0xa]
000176AC: push ss
000176AD: lea ax, [bp - 8]
000176B0: push ax
000176B1: push ss
000176B2: lea ax, [bp - 0xa]
000176B5: push ax
000176B6: lcall 0x18c7, 8
000176BB: or ax, ax
000176BD: je 0x176c5
000176BF: mov word ptr [bp - 2], ax
000176C2: jmp 0x17787
000176C5: lds si, ptr [bp + 6]
000176C8: add si, 0x24
000176CB: push word ptr [bp + 0x12]
000176CE: push ds
000176CF: push si
000176D0: mov ax, 6
000176D3: push ax
000176D4: push word ptr [bp - 8]
000176D7: push word ptr [bp - 0xa]
000176DA: lcall 0x5e5, 0x1b0
000176DF: or ax, ax
000176E1: je 0x176e9
000176E3: mov word ptr [bp - 2], ax
000176E6: jmp 0x17787
000176E9: push ds
000176EA: push si
000176EB: xor ax, ax
000176ED: push ax
000176EE: lcall 0x95a, 6
000176F3: or ax, ax
000176F5: je 0x176fd
000176F7: mov word ptr [bp - 2], ax
000176FA: jmp 0x17787
000176FD: lds si, ptr [bp + 6]
00017700: xor ax, ax
00017702: push ax
00017703: mov ax, 0x202
00017706: push ax
00017707: lcall 0x79e, 0xc
0001770C: or dx, dx
0001770E: jne 0x17717
00017710: mov word ptr [bp - 2], 0xffe6
00017715: jmp 0x17778
00017717: mov word ptr [si + 0xa6], dx
0001771B: mov word ptr [si + 0xa4], ax
0001771F: xor ax, ax
00017721: push ax
00017722: mov ax, 0x200
00017725: push ax
00017726: lcall 0x79e, 0xc
0001772B: or dx, dx
0001772D: jne 0x17736
0001772F: mov word ptr [bp - 2], 0xffe6
00017734: jmp 0x1776b
00017736: mov word ptr [si + 0xaa], dx
0001773A: mov word ptr [si + 0xa8], ax
0001773E: mov ax, word ptr [bp - 8]
00017741: mov word ptr [si + 0xa], ax
00017744: push word ptr [bp + 0x10]
00017747: push word ptr [bp + 0xe]
0001774A: push word ptr [bp + 0xc]
0001774D: push word ptr [bp + 0xa]
00017750: push ds
00017751: push si
00017752: lcall 0x15c8, 0xe
00017757: or ax, ax
00017759: je 0x17784
0001775B: mov word ptr [bp - 2], ax
0001775E: push word ptr [si + 0xaa]
00017762: push word ptr [si + 0xa8]
00017766: lcall 0x79e, 0x5d
0001776B: push word ptr [si + 0xa6]
0001776F: push word ptr [si + 0xa4]
00017773: lcall 0x79e, 0x5d
00017778: push ds
00017779: add si, 0x24
0001777C: push si
0001777D: lcall 0x5e5, 0x2fa
00017782: jmp 0x17787
00017784: mov word ptr [bp - 2], ax
00017787: mov ax, word ptr [bp - 2]
0001778A: pop di
0001778B: pop si
0001778C: pop es
0001778D: pop ds
0001778E: mov sp, bp
00017790: pop bp
00017791: retf 0xe
00017794: push bp
00017795: mov bp, sp
00017797: sub sp, 2
0001779A: push ds
0001779B: push es
0001779C: push si
0001779D: push di
0001779E: mov ax, 0x1ab5
000177A1: mov ds, ax
000177A3: lds si, ptr [bp + 6]
000177A6: push word ptr [si + 0xaa]
000177AA: push word ptr [si + 0xa8]
000177AE: lcall 0x79e, 0x5d
000177B3: push word ptr [si + 0xa6]
000177B7: push word ptr [si + 0xa4]
000177BB: lcall 0x79e, 0x5d
000177C0: push ds
000177C1: add si, 0x24
000177C4: push si
000177C5: lcall 0x5e5, 0x2fa
000177CA: mov word ptr [bp - 2], ax
000177CD: mov ax, word ptr [bp - 2]
000177D0: pop di
000177D1: pop si
000177D2: pop es
000177D3: pop ds
000177D4: mov sp, bp
000177D6: pop bp
000177D7: retf 4
000177DA: push bp
000177DB: mov bp, sp
000177DD: sub sp, 4
000177E0: push ds
000177E1: push es
000177E2: push si
000177E3: push di
000177E4: mov ax, 0x1ab5
000177E7: mov ds, ax
000177E9: push word ptr [bp + 0xc]
000177EC: push word ptr [bp + 0xa]
000177EF: push word ptr [bp + 8]
000177F2: push word ptr [bp + 6]
000177F5: push ds
000177F6: mov si, 0x43bf
000177F9: push si
000177FA: lcall 0x80c, 0x56c
000177FF: or ax, ax
00017801: jge 0x17808
00017803: mov word ptr [bp - 2], ax
00017806: jmp 0x1783b
00017808: mov word ptr [bp - 4], ax
0001780B: mov si, 0x43bf
0001780E: mov bx, word ptr [bp - 4]
00017811: mov cx, 0x54
00017814: mov dx, si
00017816: mov ah, 0x3f
00017818: int 0x21
0001781A: cmp ax, 0x54
0001781D: je 0x17826
0001781F: mov word ptr [bp - 2], 0xfc18
00017824: jmp 0x17830
00017826: push ds
00017827: push si
00017828: lcall 0x1542, 0
0001782D: mov word ptr [bp - 2], ax
00017830: push word ptr [bp + 0xc]
00017833: push word ptr [bp + 0xa]
00017836: lcall 0x80c, 0x640
0001783B: mov ax, word ptr [bp - 2]
0001783E: pop di
0001783F: pop si
00017840: pop es
00017841: pop ds
00017842: mov sp, bp
00017844: pop bp
00017845: retf 8
00017848: push bp
00017849: mov bp, sp
0001784B: sub sp, 2
0001784E: push ds
0001784F: push es
00017850: push si
00017851: push di
00017852: mov ax, 0x1ab5
00017855: mov ds, ax
00017857: push word ptr [bp + 0x10]
0001785A: push word ptr [bp + 0xe]
0001785D: push word ptr [bp + 0xc]
00017860: push word ptr [bp + 0xa]
00017863: push cs
00017864: call 0x177da
00017867: or ax, ax
00017869: je 0x17870
0001786B: mov word ptr [bp - 2], ax
0001786E: jmp 0x17881
00017870: mov si, 0x43bf
00017873: les di, ptr [bp + 6]
00017876: cld 
00017877: mov cx, 0x54
0001787A: rep movsb byte ptr es:[di], byte ptr [si]
0001787C: mov word ptr [bp - 2], 0
00017881: mov ax, word ptr [bp - 2]
00017884: pop di
00017885: pop si
00017886: pop es
00017887: pop ds
00017888: mov sp, bp
0001788A: pop bp
0001788B: retf 0xc
0001788E: push bp
0001788F: mov bp, sp
00017891: sub sp, 0xa
00017894: push ds
00017895: push es
00017896: push si
00017897: push di
00017898: mov ax, 0x1ab5
0001789B: mov ds, ax
0001789D: push word ptr [bp + 0x10]
000178A0: push word ptr [bp + 0xe]
000178A3: push word ptr [bp + 0xc]
000178A6: push word ptr [bp + 0xa]
000178A9: push ds
000178AA: mov si, 0x43bf
000178AD: push si
000178AE: lcall 0x80c, 0x56c
000178B3: mov word ptr [bp - 0xa], ax
000178B6: or ax, ax
000178B8: jge 0x178c0
000178BA: mov word ptr [bp - 2], ax
000178BD: jmp 0x1795b
000178C0: push word ptr [bp - 0xa]
000178C3: push word ptr [si + 0x10]
000178C6: push word ptr [si + 0xe]
000178C9: mov ax, 0
000178CC: push ax
000178CD: push ss
000178CE: lea ax, [bp - 6]
000178D1: push ax
000178D2: push ss
000178D3: lea ax, [bp - 8]
000178D6: push ax
000178D7: lcall 0x96b, 0x166
000178DC: or ax, ax
000178DE: je 0x178e5
000178E0: mov word ptr [bp - 2], ax
000178E3: jmp 0x17950
000178E5: push word ptr [bp - 4]
000178E8: push word ptr [bp - 6]
000178EB: mov ax, word ptr [bp - 8]
000178EE: sub ax, 0xa
000178F1: push ax
000178F2: push word ptr [bp + 8]
000178F5: push word ptr [bp + 6]
000178F8: lcall 0x1548, 6
000178FD: or ax, ax
000178FF: je 0x17906
00017901: mov word ptr [bp - 2], ax
00017904: jmp 0x1794b
00017906: lcall 0x96b, 0x1c0
0001790B: push word ptr [bp - 0xa]
0001790E: push word ptr [si + 0x10]
00017911: push word ptr [si + 0xe]
00017914: mov ax, 0
00017917: push ax
00017918: push ss
00017919: lea ax, [bp - 6]
0001791C: push ax
0001791D: push ss
0001791E: lea ax, [bp - 8]
00017921: push ax
00017922: lcall 0x96b, 0x166
00017927: or ax, ax
00017929: je 0x17930
0001792B: mov word ptr [bp - 2], ax
0001792E: jmp 0x17950
00017930: push word ptr [bp - 4]
00017933: push word ptr [bp - 6]
00017936: mov ax, word ptr [bp - 8]
00017939: sub ax, 0xa
0001793C: push ax
0001793D: push word ptr [bp + 8]
00017940: push word ptr [bp + 6]
00017943: lcall 0x1539, 0xe
00017948: mov word ptr [bp - 2], ax
0001794B: lcall 0x96b, 0x1c0
00017950: push word ptr [bp + 0x10]
00017953: push word ptr [bp + 0xe]
00017956: lcall 0x80c, 0x640
0001795B: mov ax, word ptr [bp - 2]
0001795E: pop di
0001795F: pop si
00017960: pop es
00017961: pop ds
00017962: mov sp, bp
00017964: pop bp
00017965: retf 0xc
00017968: mov bx, word ptr [bp - 0x78]
0001796B: xor bh, bh
0001796D: mov word ptr [bp - 0x78], bx
00017970: sub bx, word ptr [bp - 0x3a]
00017973: shl bx, 1
00017975: lds si, ptr [bp - 0x60]
00017978: push ds
00017979: push si
0001797A: lds si, ptr [si + 0xa8]
0001797E: mov ax, word ptr [bx + si]
00017980: mov word ptr [bp - 0x24], ax
00017983: pop si
00017984: pop ds
00017985: push ds
00017986: push si
00017987: lds si, ptr [si + 0xa4]
0001798B: mov ax, word ptr [bx + si]
0001798D: mov word ptr [bp - 0x22], ax
00017990: pop si
00017991: pop ds
00017992: cmp word ptr [bp - 0x24], 0
00017996: jg 0x179a0
00017998: mov word ptr [bp - 2], 0xfc16
0001799D: jmp 0x17b75
000179A0: add si, 0x24
000179A3: mov word ptr [bp - 0x62], ds
000179A6: mov word ptr [bp - 0x64], si
000179A9: mov ax, word ptr [si + 0x14]
000179AC: mov word ptr [bp - 0x12], ax
000179AF: mov ax, 0x1ab5
000179B2: mov es, ax
000179B4: mov di, 0x71e4
000179B7: cmp word ptr es:[di + 4], 1
000179BC: jne 0x179cf
000179BE: mov ax, word ptr [bp + 8]
000179C1: mov word ptr [bp - 0x8a], ax
000179C5: mov ax, word ptr [bp + 6]
000179C8: mov word ptr [bp - 0x8c], ax
000179CC: jmp 0x17b6b
000179CF: mov ax, word ptr [bp - 0x24]
000179D2: mov word ptr [bp - 0x7a], ax
000179D5: mov word ptr [bp - 0x8e], ax
000179D9: mov ax, word ptr [bp - 0x50]
000179DC: mov word ptr [bp - 0x7c], ax
000179DF: mov word ptr [bp - 0x90], ax
000179E3: mov ax, word ptr [bp - 0x22]
000179E6: xor bx, bx
000179E8: cmp word ptr [bp - 0x48], 0
000179EC: je 0x17a3f
000179EE: cmp word ptr [bp - 0x48], 2
000179F2: je 0x17a2b
000179F4: mov ax, word ptr [bp - 0x24]
000179F7: mov word ptr [bp - 0x7c], ax
000179FA: mov word ptr [bp - 0x90], ax
000179FE: mov bx, word ptr [bp - 0x50]
00017A01: mov word ptr [bp - 0x7a], bx
00017A04: mov word ptr [bp - 0x8e], bx
00017A08: cmp word ptr [bp - 0x48], 1
00017A0C: je 0x17a17
00017A0E: cmp word ptr [bp - 0x48], 3
00017A12: je 0x17a3a
00017A14: jmp 0x17b75
00017A17: xor ax, ax
00017A19: mov bx, word ptr [bp - 0x22]
00017A1C: cmp word ptr [bp - 0x84], 1
00017A21: je 0x17a3f
00017A23: mov dx, word ptr [bp - 0x24]
00017A26: sub word ptr [bp + 6], dx
00017A29: jmp 0x17a3f
00017A2B: cmp word ptr [bp - 0x84], 1
00017A30: je 0x17a3f
00017A32: mov dx, word ptr [bp - 0x24]
00017A35: sub word ptr [bp + 8], dx
00017A38: jmp 0x17a3f
00017A3A: xor ax, ax
00017A3C: mov bx, word ptr [bp - 0x22]
00017A3F: mov word ptr [bp - 0x98], ax
00017A43: mov word ptr [bp - 0x9a], bx
00017A47: mov ax, word ptr [bp + 8]
00017A4A: mov word ptr [bp - 0x8a], ax
00017A4E: mov ax, word ptr [bp + 6]
00017A51: mov word ptr [bp - 0x8c], ax
00017A55: mov word ptr [bp - 0x9c], 0xff
00017A5B: cmp word ptr [bp - 0x92], 1
00017A60: je 0x17a65
00017A62: jmp 0x17afb
00017A65: mov ax, word ptr [bp + 8]
00017A68: cmp ax, word ptr es:[di + 0x16]
00017A6C: jle 0x17a71
00017A6E: jmp 0x17b75
00017A71: add ax, word ptr [bp - 0x7a]
00017A74: dec ax
00017A75: cmp ax, word ptr es:[di + 0x12]
00017A79: jge 0x17a7e
00017A7B: jmp 0x17b70
00017A7E: mov ax, word ptr [bp + 6]
00017A81: cmp ax, word ptr es:[di + 0x18]
00017A85: jle 0x17a8a
00017A87: jmp 0x17b70
00017A8A: add ax, word ptr [bp - 0x7c]
00017A8D: dec ax
00017A8E: cmp ax, word ptr es:[di + 0x14]
00017A92: jge 0x17a97
00017A94: jmp 0x17b70
00017A97: mov ax, word ptr es:[di + 0x12]
00017A9B: cmp word ptr [bp + 8], ax
00017A9E: jge 0x17ab9
00017AA0: sub ax, word ptr [bp + 8]
00017AA3: mov cx, ax
00017AA5: and ax, 0xf8
00017AA8: and cx, 7
00017AAB: ror word ptr [bp - 0x9c], cl
00017AAF: add word ptr [bp + 8], ax
00017AB2: add word ptr [bp - 0x98], ax
00017AB6: sub word ptr [bp - 0x7a], ax
00017AB9: mov ax, word ptr [bp + 8]
00017ABC: add ax, word ptr [bp - 0x7a]
00017ABF: dec ax
00017AC0: cmp ax, word ptr es:[di + 0x16]
00017AC4: jle 0x17acd
00017AC6: sub ax, word ptr es:[di + 0x16]
00017ACA: sub word ptr [bp - 0x7a], ax
00017ACD: mov ax, word ptr [bp + 6]
00017AD0: cmp ax, word ptr es:[di + 0x14]
00017AD4: jge 0x17ae7
00017AD6: mov ax, word ptr es:[di + 0x14]
00017ADA: sub ax, word ptr [bp + 6]
00017ADD: add word ptr [bp + 6], ax
00017AE0: add word ptr [bp - 0x9a], ax
00017AE4: sub word ptr [bp - 0x7c], ax
00017AE7: mov ax, word ptr [bp + 6]
00017AEA: add ax, word ptr [bp - 0x7c]
00017AED: dec ax
00017AEE: cmp ax, word ptr es:[di + 0x18]
00017AF2: jle 0x17afb
00017AF4: sub ax, word ptr es:[di + 0x18]
00017AF8: sub word ptr [bp - 0x7c], ax
00017AFB: push ds
00017AFC: push si
00017AFD: push word ptr [bp - 0x98]
00017B01: push word ptr [bp - 0x9a]
00017B05: mov ax, 0
00017B08: push ax
00017B09: lcall 0xb08, 0xa
00017B0E: or dx, dx
00017B10: jne 0x17b17
00017B12: mov word ptr [bp - 2], ax
00017B15: jmp 0x17b75
00017B17: mov ds, dx
00017B19: mov si, ax
00017B1B: xor dx, dx
00017B1D: mov ax, word ptr [bp - 0x7a]
00017B20: mov bx, 8
00017B23: div bx
00017B25: or dx, dx
00017B27: je 0x17b2a
00017B29: inc ax
00017B2A: mov word ptr [bp - 0xe], ax
00017B2D: mov ax, word ptr [bp - 0x7a]
00017B30: mov cl, 7
00017B32: xor cl, al
00017B34: inc cl
00017B36: and cl, 7
00017B39: mov ch, 0xff
00017B3B: shl ch, cl
00017B3D: mov byte ptr [bp - 9], ch
00017B40: les di, ptr [bp - 0x58]
00017B43: mov ax, word ptr es:[di + 0x1c]
00017B47: mov word ptr [bp - 0x10], ax
00017B4A: mov ax, word ptr [bp - 0x12]
00017B4D: sub ax, word ptr [bp - 0xe]
00017B50: mov word ptr [bp - 0x1c], ax
00017B53: mov ax, word ptr [bp - 0x7c]
00017B56: mov word ptr [bp - 0xc], ax
00017B59: mov ax, 0x1ab5
00017B5C: mov es, ax
00017B5E: mov di, 0x70d6
00017B61: mov bx, word ptr [bp - 0x54]
00017B64: shl bx, 1
00017B66: shl bx, 1
00017B68: ljmp es:[bx + di]
00017B6B: ljmp 0x189a:8
00017B70: mov word ptr [bp - 2], 0
00017B75: retf 
00017B76: mov ax, 0x1ab5
00017B79: mov ds, ax
00017B7B: mov bx, 0x70d6
00017B7E: mov word ptr [bx], 0
00017B82: mov word ptr [bx + 2], 0x1641
00017B87: add bx, 4
00017B8A: mov word ptr [bx], 0x77a
00017B8E: mov word ptr [bx + 2], 0x1641
00017B93: add bx, 4
00017B96: mov word ptr [bx], 0xa
00017B9A: mov word ptr [bx + 2], 0x160f
00017B9F: add bx, 4
00017BA2: mov word ptr [bx], 0xa
00017BA6: mov word ptr [bx + 2], 0x160f
00017BAB: add bx, 4
00017BAE: mov word ptr [bx], 0xa
00017BB2: mov word ptr [bx + 2], 0x160f
00017BB7: add bx, 4
00017BBA: mov word ptr [bx], 0xa
00017BBE: mov word ptr [bx + 2], 0x160f
00017BC3: add bx, 4
00017BC6: mov word ptr [bx], 0xa
00017BCA: mov word ptr [bx + 2], 0x160f
00017BCF: add bx, 4
00017BD2: mov word ptr [bx], 0xa
00017BD6: mov word ptr [bx + 2], 0x160f
00017BDB: add bx, 4
00017BDE: mov word ptr [bx], 6
00017BE2: mov word ptr [bx + 2], 0x1805
00017BE7: add bx, 4
00017BEA: mov word ptr [bx], 6
00017BEE: mov word ptr [bx + 2], 0x1705
00017BF3: add bx, 4
00017BF6: mov word ptr [bx], 0xa
00017BFA: mov word ptr [bx + 2], 0x181e
00017BFF: add bx, 4
00017C02: mov word ptr [bx], 0xa
00017C06: mov word ptr [bx + 2], 0x160f
00017C0B: add bx, 4
00017C0E: mov word ptr [bx], 0xa
00017C12: mov word ptr [bx + 2], 0x181e
00017C17: add bx, 4
00017C1A: mov word ptr [bx], 0xa
00017C1E: mov word ptr [bx + 2], 0x181e
00017C23: add bx, 4
00017C26: mov word ptr [bx], 0xa
00017C2A: mov word ptr [bx + 2], 0x160f
00017C2F: add bx, 4
00017C32: mov word ptr [bx], 0xa
00017C36: mov word ptr [bx + 2], 0x181e
00017C3B: add bx, 4
00017C3E: mov word ptr [bx], 0xa
00017C42: mov word ptr [bx + 2], 0x181e
00017C47: add bx, 4
00017C4A: mov byte ptr [0x712c], 1
00017C4F: retf 
00017C50: mov ax, 0x1ab5
00017C53: mov es, ax
00017C55: mov di, 0x71e4
00017C58: mov dx, word ptr es:[di + 0x1e]
00017C5C: mov word ptr [bp - 0x94], dx
00017C60: mov word ptr es:[di + 0x1e], 0
00017C66: mov dx, word ptr es:[di + 0x20]
00017C6A: mov word ptr [bp - 0x96], dx
00017C6E: mov word ptr es:[di + 0x20], 0
00017C74: push word ptr es:[0x712e]
00017C79: push word ptr es:[0x7130]
00017C7E: mov word ptr es:[0x712e], 1
00017C85: mov word ptr es:[0x7130], 1
00017C8C: mov ax, word ptr [bp - 0x8a]
00017C90: mov bx, word ptr [bp - 0x8c]
00017C94: mov dx, word ptr [bp - 0x48]
00017C97: cmp dx, 0
00017C9A: jne 0x17ca2
00017C9C: mov cx, 0x108
00017C9F: inc ax
00017CA0: jmp 0x17cc1
00017CA2: cmp dx, 1
00017CA5: jne 0x17cad
00017CA7: mov cx, 0x108
00017CAA: dec bx
00017CAB: jmp 0x17cc1
00017CAD: cmp dx, 2
00017CB0: jne 0x17cb8
00017CB2: mov cx, 0x101
00017CB5: dec ax
00017CB6: jmp 0x17cc1
00017CB8: cmp dx, 3
00017CBB: jne 0x17cdf
00017CBD: mov cx, 0x101
00017CC0: inc bx
00017CC1: mov word ptr [si + 0x18], 0x20
00017CC6: mov word ptr [si + 0x10], cx
00017CC9: push word ptr [bp - 0x78]
00017CCC: push ax
00017CCD: push bx
00017CCE: lcall 0x17b8, 0x342
00017CD3: mov dx, word ptr [bp - 0x46]
00017CD6: mov word ptr [si + 0x10], dx
00017CD9: mov dx, word ptr [bp - 0x2e]
00017CDC: mov word ptr [si + 0x18], dx
00017CDF: pop word ptr es:[0x7130]
00017CE4: pop word ptr es:[0x712e]
00017CE9: mov dx, word ptr [bp - 0x94]
00017CED: mov word ptr es:[di + 0x1e], dx
00017CF1: mov dx, word ptr [bp - 0x96]
00017CF5: mov word ptr es:[di + 0x20], dx
00017CF9: retf 
00017CFA: mov cx, word ptr [bp + 8]
00017CFD: cmp cx, 0
00017D00: jge 0x17d05
00017D02: add cx, 8
00017D05: mov ax, cx
00017D07: xor al, 7
00017D09: inc al
00017D0B: and al, 7
00017D0D: mov byte ptr [bp - 0xa], al
00017D10: les di, ptr [bp - 0x58]
00017D13: mov ax, word ptr es:[di + 0x22]
00017D17: mov bx, word ptr [bp - 0x5a]
00017D1A: mul bx
00017D1C: push ax
00017D1D: mov bx, cx
00017D1F: mov ax, word ptr [bp + 6]
00017D22: lcall es:[di + 0x26]
00017D26: pop ax
00017D27: add ax, bx
00017D29: mov di, ax
00017D2B: mov bx, word ptr [bp - 0x28]
00017D2E: mov cl, 3
00017D30: shl bx, cl
00017D32: mov al, 3
00017D34: mov ah, bl
00017D36: mov dx, 0x3ce
00017D39: out dx, ax
00017D3A: mov al, 5
00017D3C: mov ah, 0xa
00017D3E: mov dx, 0x3ce
00017D41: out dx, ax
00017D42: mov al, 7
00017D44: mov ah, 0
00017D46: mov dx, 0x3ce
00017D49: out dx, ax
00017D4A: mov al, 2
00017D4C: mov ah, 0xf
00017D4E: mov dx, 0x3c4
00017D51: out dx, ax
00017D52: cmp byte ptr [bp - 0xa2], 1
00017D57: jne 0x17d6f
00017D59: cmp word ptr [bp - 0x2a], 0
00017D5D: je 0x17d64
00017D5F: mov word ptr [bp - 0x2a], 0xf
00017D64: cmp word ptr [bp - 0x2c], 0
00017D68: je 0x17d6f
00017D6A: mov word ptr [bp - 0x2c], 0xf
00017D6F: mov cx, word ptr [bp - 0xa]
00017D72: cld 
00017D73: cmp word ptr [bp - 0xa], 0xff00
00017D78: jne 0x17db9
00017D7A: cmp word ptr [bp - 0x9c], 0xff
00017D80: jne 0x17db9
00017D82: mov cx, word ptr [bp - 0xe]
00017D85: mov bh, byte ptr [bp - 0x2a]
00017D88: mov bl, byte ptr [bp - 0x2c]
00017D8B: mov dx, 0x3ce
00017D8E: mov al, 8
00017D90: push di
00017D91: push cx
00017D92: mov ah, byte ptr [si]
00017D94: out dx, ax
00017D95: and byte ptr es:[di], bh
00017D98: test word ptr [bp - 0x2e], 0x20
00017D9D: jne 0x17da5
00017D9F: not ah
00017DA1: out dx, ax
00017DA2: and byte ptr es:[di], bl
00017DA5: inc si
00017DA6: inc di
00017DA7: loop 0x17d92
00017DA9: pop cx
00017DAA: pop di
00017DAB: add si, word ptr [bp - 0x1c]
00017DAE: add di, word ptr [bp - 0x10]
00017DB1: dec word ptr [bp - 0xc]
00017DB4: jne 0x17d90
00017DB6: jmp 0x17ee1
00017DB9: xor bh, bh
00017DBB: mov bl, byte ptr [bp - 0x9c]
00017DBF: mov al, ch
00017DC1: cwde 
00017DC2: cmp word ptr [bp - 0xe], 1
00017DC6: jne 0x17dd2
00017DC8: and bl, ch
00017DCA: mov ah, ch
00017DCC: and ah, byte ptr [bp - 0x9c]
00017DD0: xor al, al
00017DD2: push bx
00017DD3: shl ax, cl
00017DD5: shl bx, cl
00017DD7: mov byte ptr [bp - 0x1e], ah
00017DDA: mov byte ptr [bp - 0x20], al
00017DDD: mov byte ptr [bp - 0xa0], bh
00017DE1: pop bx
00017DE2: mov al, 0xff
00017DE4: cmp byte ptr [bp - 0xa0], 0
00017DE9: jne 0x17df1
00017DEB: mov bh, 0xff
00017DED: rol bx, cl
00017DEF: mov al, bl
00017DF1: mov byte ptr [bp - 0x9f], al
00017DF5: mov bx, word ptr [bp - 0xe]
00017DF8: mov dx, 0x3ce
00017DFB: mov al, 8
00017DFD: push di
00017DFE: push si
00017DFF: push bx
00017E00: lodsw ax, word ptr [si]
00017E01: dec si
00017E02: test cl, cl
00017E04: jne 0x17e0c
00017E06: dec bx
00017E07: jne 0x17e3b
00017E09: jmp 0x17e92
00017E0C: rol ax, cl
00017E0E: cmp word ptr [bp + 8], 0
00017E12: jl 0x17e3a
00017E14: push bx
00017E15: mov bh, byte ptr [bp - 0x2a]
00017E18: mov bl, byte ptr [bp - 0x2c]
00017E1B: push ax
00017E1C: mov al, 8
00017E1E: and ah, byte ptr [bp - 0xa0]
00017E22: out dx, ax
00017E23: and byte ptr es:[di], bh
00017E26: test word ptr [bp - 0x2e], 0x20
00017E2B: jne 0x17e37
00017E2D: not ah
00017E2F: and ah, byte ptr [bp - 0xa0]
00017E33: out dx, ax
00017E34: and byte ptr es:[di], bl
00017E37: pop ax
00017E38: pop bx
00017E39: inc di
00017E3A: dec bx
00017E3B: dec bx
00017E3C: jg 0x17e47
00017E3E: mov bl, byte ptr [bp - 0x9f]
00017E42: and byte ptr [bp - 0x1e], bl
00017E45: jmp 0x17e92
00017E47: push bx
00017E48: mov bh, byte ptr [bp - 0x2a]
00017E4B: mov bl, byte ptr [bp - 0x2c]
00017E4E: xchg al, ah
00017E50: and ah, byte ptr [bp - 0x9f]
00017E54: mov al, 8
00017E56: out dx, ax
00017E57: and byte ptr es:[di], bh
00017E5A: test word ptr [bp - 0x2e], 0x20
00017E5F: jne 0x17e89
00017E61: not ah
00017E63: and ah, byte ptr [bp - 0x9f]
00017E67: out dx, ax
00017E68: and byte ptr es:[di], bl
00017E6B: jmp 0x17e89
00017E6D: push bx
00017E6E: mov bh, byte ptr [bp - 0x2a]
00017E71: mov bl, byte ptr [bp - 0x2c]
00017E74: xchg al, ah
00017E76: mov al, 8
00017E78: out dx, ax
00017E79: and byte ptr es:[di], bh
00017E7C: test word ptr [bp - 0x2e], 0x20
00017E81: jne 0x17e89
00017E83: not ah
00017E85: out dx, ax
00017E86: and byte ptr es:[di], bl
00017E89: pop bx
00017E8A: inc di
00017E8B: lodsw ax, word ptr [si]
00017E8C: dec si
00017E8D: rol ax, cl
00017E8F: dec bx
00017E90: jne 0x17e6d
00017E92: mov bh, byte ptr [bp - 0x2a]
00017E95: mov bl, byte ptr [bp - 0x2c]
00017E98: push ax
00017E99: xchg al, ah
00017E9B: and ah, byte ptr [bp - 0x1e]
00017E9E: mov al, 8
00017EA0: out dx, ax
00017EA1: and byte ptr es:[di], bh
00017EA4: test word ptr [bp - 0x2e], 0x20
00017EA9: jne 0x17eb4
00017EAB: not ah
00017EAD: and ah, byte ptr [bp - 0x1e]
00017EB0: out dx, ax
00017EB1: and byte ptr es:[di], bl
00017EB4: pop ax
00017EB5: and ah, byte ptr [bp - 0x20]
00017EB8: mov al, 8
00017EBA: out dx, ax
00017EBB: and byte ptr es:[di + 1], bh
00017EBF: test word ptr [bp - 0x2e], 0x20
00017EC4: jne 0x17ed0
00017EC6: not ah
00017EC8: and ah, byte ptr [bp - 0x20]
00017ECB: out dx, ax
00017ECC: and byte ptr es:[di + 1], bl
00017ED0: pop bx
00017ED1: pop si
00017ED2: pop di
00017ED3: add si, word ptr [bp - 0x12]
00017ED6: add di, word ptr [bp - 0x10]
00017ED9: dec word ptr [bp - 0xc]
00017EDC: je 0x17ee1
00017EDE: jmp 0x17dfd
00017EE1: test word ptr [bp - 0x2e], 5
00017EE6: jne 0x17eea
00017EE8: jmp 0x17f04
00017EEA: lds si, ptr [bp - 0x60]
00017EED: test word ptr [bp - 0x2e], 4
00017EF2: je 0x17ef8
00017EF4: push cs
00017EF5: call 0x17f32
00017EF8: test word ptr [bp - 0x2e], 1
00017EFD: je 0x17f04
00017EFF: lcall 0x15d6, 0x2f0
00017F04: mov al, 2
00017F06: mov ah, 0xf
00017F08: mov dx, 0x3c4
00017F0B: out dx, ax
00017F0C: mov al, 8
00017F0E: mov ah, 0xff
00017F10: mov dx, 0x3ce
00017F13: out dx, ax
00017F14: mov al, 3
00017F16: mov ah, 0
00017F18: mov dx, 0x3ce
00017F1B: out dx, ax
00017F1C: mov al, 5
00017F1E: mov ah, 0
00017F20: mov dx, 0x3ce
00017F23: out dx, ax
00017F24: mov al, 7
00017F26: mov ah, 0xf
00017F28: mov dx, 0x3ce
00017F2B: out dx, ax
00017F2C: mov word ptr [bp - 2], 0
00017F31: retf 
00017F32: cmp word ptr [bp - 0x48], 0
00017F36: je 0x17f3b
00017F38: jmp 0x1800f
00017F3B: cmp word ptr [bp - 0x28], 0
00017F3F: je 0x17f44
00017F41: jmp 0x1800f
00017F44: mov ax, 0x1ab5
00017F47: mov es, ax
00017F49: mov di, 0x71e4
00017F4C: cmp word ptr es:[di + 0x10], 1
00017F51: jne 0x17f69
00017F53: mov ax, word ptr [bp - 0x8c]
00017F57: add ax, word ptr [bp - 0x30]
00017F5A: cmp ax, word ptr es:[di + 0x14]
00017F5E: jb 0x17f66
00017F60: cmp ax, word ptr es:[di + 0x18]
00017F64: jbe 0x17f69
00017F66: jmp 0x1800f
00017F69: les di, ptr [bp - 0x58]
00017F6C: mov ax, word ptr es:[di + 0x22]
00017F70: mov bx, word ptr [bp - 0x5a]
00017F73: mul bx
00017F75: push ax
00017F76: mov bx, word ptr [bp + 8]
00017F79: cmp bx, 0
00017F7C: jge 0x17f81
00017F7E: add bx, 8
00017F81: mov ax, word ptr [bp - 0x8c]
00017F85: add ax, word ptr [bp - 0x30]
00017F88: lcall es:[di + 0x26]
00017F8C: pop ax
00017F8D: add ax, bx
00017F8F: mov di, ax
00017F91: cmp word ptr [bp - 0xa], 0xff00
00017F96: jne 0x17fb6
00017F98: cmp word ptr [bp - 0x9c], 0xff
00017F9E: jne 0x17fb6
00017FA0: mov cx, word ptr [bp - 0xe]
00017FA3: mov bh, byte ptr [bp - 0x2a]
00017FA6: mov al, 8
00017FA8: mov ah, 0xff
00017FAA: mov dx, 0x3ce
00017FAD: out dx, ax
00017FAE: and byte ptr es:[di], bh
00017FB1: inc di
00017FB2: loop 0x17fae
00017FB4: jmp 0x1800f
00017FB6: mov cx, word ptr [bp - 0xe]
00017FB9: mov bx, word ptr [bp - 0xa]
00017FBC: mov bh, byte ptr [bp - 0x2a]
00017FBF: mov dx, 0x3ce
00017FC2: mov al, 8
00017FC4: mov ah, 0xff
00017FC6: test bl, bl
00017FC8: jne 0x17fcf
00017FCA: dec cx
00017FCB: jne 0x17fe1
00017FCD: jmp 0x18000
00017FCF: cmp word ptr [bp + 8], 0
00017FD3: jl 0x17fe0
00017FD5: and ah, byte ptr [bp - 0xa0]
00017FD9: out dx, ax
00017FDA: and byte ptr es:[di], bh
00017FDD: mov ah, 0xff
00017FDF: inc di
00017FE0: dec cx
00017FE1: dec cx
00017FE2: jg 0x17fed
00017FE4: mov ah, byte ptr [bp - 0x9f]
00017FE8: and byte ptr [bp - 0x1e], ah
00017FEB: jmp 0x18000
00017FED: mov ah, byte ptr [bp - 0x9f]
00017FF1: out dx, ax
00017FF2: and byte ptr es:[di], bh
00017FF5: mov ah, 0xff
00017FF7: out dx, ax
00017FF8: jmp 0x17ffd
00017FFA: and byte ptr es:[di], bh
00017FFD: inc di
00017FFE: loop 0x17ffa
00018000: mov ah, byte ptr [bp - 0x1e]
00018003: out dx, ax
00018004: and byte ptr es:[di], bh
00018007: mov ah, byte ptr [bp - 0x20]
0001800A: out dx, ax
0001800B: and byte ptr es:[di + 1], bh
0001800F: retf 
00018010: mov cx, word ptr [bp + 8]
00018013: shl cx, 1
00018015: and cl, 7
00018018: mov byte ptr [bp - 0xa], cl
0001801B: mov ax, word ptr [bp - 0x9c]
0001801F: mov bx, ax
00018021: xchg al, ah
00018023: xor dx, dx
00018025: mov cx, 8
00018028: shr al, 1
0001802A: rcr dx, 1
0001802C: sar dx, 1
0001802E: loop 0x18028
00018030: not dx
00018032: mov word ptr [bp - 0x9c], dx
00018036: mov al, byte ptr [bp - 9]
00018039: xor dx, dx
0001803B: mov cx, 8
0001803E: shr al, 1
00018040: rcr dx, 1
00018042: sar dx, 1
00018044: loop 0x1803e
00018046: mov word ptr [bp - 0xa0], dx
0001804A: not dx
0001804C: mov word ptr [bp - 0x9e], dx
00018050: cmp word ptr [bp - 0xe], 1
00018054: jne 0x18067
00018056: mov ax, word ptr [bp - 0x9c]
0001805A: and word ptr [bp - 0xa0], ax
0001805E: not ax
00018060: or word ptr [bp - 0x9e], ax
00018064: and byte ptr [bp - 9], bl
00018067: push ds
00018068: mov ax, 0x1ab5
0001806B: mov ds, ax
0001806D: mov bx, 0x7134
00018070: mov al, byte ptr [bp - 0x86]
00018074: xlatb 
00018075: mov ah, al
00018077: mov word ptr [bp - 0x2a], ax
0001807A: mov al, byte ptr [bp - 0x88]
0001807E: xlatb 
0001807F: mov ah, al
00018081: mov word ptr [bp - 0x2c], ax
00018084: pop ds
00018085: mov bx, 0x2000
00018088: mov ax, word ptr [bp + 6]
0001808B: test ax, 1
0001808E: je 0x18093
00018090: mov bx, 0xe050
00018093: mov word ptr [bp - 4], bx
00018096: les di, ptr [bp - 0x58]
00018099: mov bx, word ptr [bp + 8]
0001809C: mov ax, word ptr [bp + 6]
0001809F: lcall es:[di + 0x26]
000180A3: mov di, bx
000180A5: mov cx, word ptr [bp - 0xa]
000180A8: cld 
000180A9: mov ax, word ptr [bp - 0x28]
000180AC: cmp ax, 0
000180AF: je 0x180c4
000180B1: cmp ax, 3
000180B4: jne 0x180b9
000180B6: jmp 0x182db
000180B9: cmp ax, 1
000180BC: jne 0x180c1
000180BE: jmp 0x18407
000180C1: jmp 0x18533
000180C4: cmp cx, 0xff00
000180C8: jne 0x1812b
000180CA: cmp word ptr [bp - 0x9c], -1
000180CF: jne 0x1812b
000180D1: mov cx, word ptr [bp - 0xe]
000180D4: push di
000180D5: push cx
000180D6: mov al, byte ptr [si]
000180D8: xor dx, dx
000180DA: mov ah, 8
000180DC: shr al, 1
000180DE: rcr dx, 1
000180E0: sar dx, 1
000180E2: dec ah
000180E4: jne 0x180dc
000180E6: test word ptr [bp - 0x2e], 0x20
000180EB: je 0x18100
000180ED: mov ax, dx
000180EF: not dx
000180F1: xchg dl, dh
000180F3: and word ptr es:[di], dx
000180F6: and ax, word ptr [bp - 0x2a]
000180F9: xchg al, ah
000180FB: or word ptr es:[di], ax
000180FE: jmp 0x18111
00018100: mov ax, dx
00018102: and ax, word ptr [bp - 0x2a]
00018105: not dx
00018107: and dx, word ptr [bp - 0x2c]
0001810A: or ax, dx
0001810C: xchg al, ah
0001810E: mov word ptr es:[di], ax
00018111: inc si
00018112: inc di
00018113: inc di
00018114: loop 0x180d6
00018116: pop cx
00018117: pop di
00018118: add di, word ptr [bp - 4]
0001811B: xor word ptr [bp - 4], 0xc050
00018120: add si, word ptr [bp - 0x1c]
00018123: dec word ptr [bp - 0xc]
00018126: jne 0x180d4
00018128: jmp 0x18654
0001812B: mov bx, word ptr [bp - 0xe]
0001812E: push bx
0001812F: push di
00018130: dec bx
00018131: jne 0x18136
00018133: jmp 0x18240
00018136: mov al, byte ptr [si]
00018138: xor dx, dx
0001813A: mov ah, 8
0001813C: shr al, 1
0001813E: rcr dx, 1
00018140: sar dx, 1
00018142: dec ah
00018144: jne 0x1813c
00018146: test word ptr [bp - 0x2e], 0x20
0001814B: je 0x18189
0001814D: mov al, dh
0001814F: and al, byte ptr [bp - 0x9b]
00018153: xor ah, ah
00018155: ror ax, cl
00018157: not ax
00018159: and word ptr es:[di], ax
0001815C: mov al, dl
0001815E: and al, byte ptr [bp - 0x9c]
00018162: xor ah, ah
00018164: ror ax, cl
00018166: not ax
00018168: and word ptr es:[di + 1], ax
0001816C: and dx, word ptr [bp - 0x2a]
0001816F: and dx, word ptr [bp - 0x9c]
00018173: mov al, dh
00018175: xor ah, ah
00018177: ror ax, cl
00018179: or word ptr es:[di], ax
0001817C: mov al, dl
0001817E: xor ah, ah
00018180: ror ax, cl
00018182: or word ptr es:[di + 1], ax
00018186: jmp 0x1823a
00018189: xor ah, ah
0001818B: mov al, byte ptr [bp - 0x9b]
0001818F: not ax
00018191: ror ax, cl
00018193: and word ptr es:[di], ax
00018196: xor ah, ah
00018198: mov al, byte ptr [bp - 0x9c]
0001819C: not ax
0001819E: ror ax, cl
000181A0: and word ptr es:[di + 1], ax
000181A4: mov ax, dx
000181A6: and ax, word ptr [bp - 0x2a]
000181A9: not dx
000181AB: and dx, word ptr [bp - 0x2c]
000181AE: or dx, ax
000181B0: and dx, word ptr [bp - 0x9c]
000181B4: mov al, dh
000181B6: xor ah, ah
000181B8: ror ax, cl
000181BA: or word ptr es:[di], ax
000181BD: mov al, dl
000181BF: xor ah, ah
000181C1: ror ax, cl
000181C3: or word ptr es:[di + 1], ax
000181C7: jmp 0x1823a
000181C9: mov al, byte ptr [si]
000181CB: xor dx, dx
000181CD: mov ah, 8
000181CF: shr al, 1
000181D1: rcr dx, 1
000181D3: sar dx, 1
000181D5: dec ah
000181D7: jne 0x181cf
000181D9: test word ptr [bp - 0x2e], 0x20
000181DE: je 0x1820f
000181E0: mov al, dh
000181E2: xor ah, ah
000181E4: ror ax, cl
000181E6: not ax
000181E8: and word ptr es:[di], ax
000181EB: mov al, dl
000181ED: xor ah, ah
000181EF: ror ax, cl
000181F1: not ax
000181F3: and word ptr es:[di + 1], ax
000181F7: and dx, word ptr [bp - 0x2a]
000181FA: mov al, dh
000181FC: xor ah, ah
000181FE: ror ax, cl
00018200: or word ptr es:[di], ax
00018203: mov al, dl
00018205: xor ah, ah
00018207: ror ax, cl
00018209: or word ptr es:[di + 1], ax
0001820D: jmp 0x1823a
0001820F: mov ax, 0xff00
00018212: ror ax, cl
00018214: and word ptr es:[di], ax
00018217: and word ptr es:[di + 1], ax
0001821B: mov ax, dx
0001821D: and ax, word ptr [bp - 0x2a]
00018220: not dx
00018222: and dx, word ptr [bp - 0x2c]
00018225: or dx, ax
00018227: mov al, dh
00018229: xor ah, ah
0001822B: ror ax, cl
0001822D: or word ptr es:[di], ax
00018230: mov al, dl
00018232: xor ah, ah
00018234: ror ax, cl
00018236: or word ptr es:[di + 1], ax
0001823A: inc si
0001823B: inc di
0001823C: inc di
0001823D: dec bx
0001823E: jne 0x181c9
00018240: mov al, byte ptr [si]
00018242: and al, ch
00018244: xor dx, dx
00018246: mov ah, 8
00018248: shr al, 1
0001824A: rcr dx, 1
0001824C: sar dx, 1
0001824E: dec ah
00018250: jne 0x18248
00018252: test word ptr [bp - 0x2e], 0x20
00018257: je 0x18288
00018259: mov al, dh
0001825B: xor ah, ah
0001825D: ror ax, cl
0001825F: not ax
00018261: and word ptr es:[di], ax
00018264: mov al, dl
00018266: xor ah, ah
00018268: ror ax, cl
0001826A: not ax
0001826C: and word ptr es:[di + 1], ax
00018270: and dx, word ptr [bp - 0x2a]
00018273: mov al, dh
00018275: xor ah, ah
00018277: ror ax, cl
00018279: or word ptr es:[di], ax
0001827C: mov al, dl
0001827E: xor ah, ah
00018280: ror ax, cl
00018282: or word ptr es:[di + 1], ax
00018286: jmp 0x182c2
00018288: mov ah, 0xff
0001828A: mov al, byte ptr [bp - 0x9d]
0001828E: ror ax, cl
00018290: and word ptr es:[di], ax
00018293: mov ah, 0xff
00018295: mov al, byte ptr [bp - 0x9e]
00018299: ror ax, cl
0001829B: and word ptr es:[di + 1], ax
0001829F: mov ax, dx
000182A1: and ax, word ptr [bp - 0x2a]
000182A4: not dx
000182A6: and dx, word ptr [bp - 0x2c]
000182A9: or dx, ax
000182AB: and dx, word ptr [bp - 0xa0]
000182AF: mov al, dh
000182B1: xor ah, ah
000182B3: ror ax, cl
000182B5: or word ptr es:[di], ax
000182B8: mov al, dl
000182BA: xor ah, ah
000182BC: ror ax, cl
000182BE: or word ptr es:[di + 1], ax
000182C2: inc si
000182C3: add si, word ptr [bp - 0x1c]
000182C6: pop di
000182C7: add di, word ptr [bp - 4]
000182CA: xor word ptr [bp - 4], 0xc050
000182CF: pop bx
000182D0: dec word ptr [bp - 0xc]
000182D3: je 0x182d8
000182D5: jmp 0x1812e
000182D8: jmp 0x18654
000182DB: mov bx, word ptr [bp - 0xe]
000182DE: push bx
000182DF: push di
000182E0: dec bx
000182E1: jne 0x182e6
000182E3: jmp 0x18396
000182E6: mov al, byte ptr [si]
000182E8: xor dx, dx
000182EA: mov ah, 8
000182EC: shr al, 1
000182EE: rcr dx, 1
000182F0: sar dx, 1
000182F2: dec ah
000182F4: jne 0x182ec
000182F6: test word ptr [bp - 0x2e], 0x20
000182FB: je 0x1831d
000182FD: and dx, word ptr [bp - 0x2a]
00018300: mov al, dh
00018302: and al, byte ptr [bp - 0x9b]
00018306: xor ah, ah
00018308: ror ax, cl
0001830A: xor word ptr es:[di], ax
0001830D: mov al, dl
0001830F: and al, byte ptr [bp - 0x9c]
00018313: xor ah, ah
00018315: ror ax, cl
00018317: xor word ptr es:[di + 1], ax
0001831B: jmp 0x18390
0001831D: mov ax, dx
0001831F: and ax, word ptr [bp - 0x2a]
00018322: not dx
00018324: and dx, word ptr [bp - 0x2c]
00018327: or dx, ax
00018329: and dx, word ptr [bp - 0x9c]
0001832D: mov al, dh
0001832F: xor ah, ah
00018331: ror ax, cl
00018333: xor word ptr es:[di], ax
00018336: mov al, dl
00018338: xor ah, ah
0001833A: ror ax, cl
0001833C: xor word ptr es:[di + 1], ax
00018340: jmp 0x18390
00018342: mov al, byte ptr [si]
00018344: xor dx, dx
00018346: mov ah, 8
00018348: shr al, 1
0001834A: rcr dx, 1
0001834C: sar dx, 1
0001834E: dec ah
00018350: jne 0x18348
00018352: test word ptr [bp - 0x2e], 0x20
00018357: je 0x18371
00018359: and dx, word ptr [bp - 0x2a]
0001835C: mov al, dh
0001835E: xor ah, ah
00018360: ror ax, cl
00018362: xor word ptr es:[di], ax
00018365: mov al, dl
00018367: xor ah, ah
00018369: ror ax, cl
0001836B: xor word ptr es:[di + 1], ax
0001836F: jmp 0x18390
00018371: mov ax, dx
00018373: and ax, word ptr [bp - 0x2a]
00018376: not dx
00018378: and dx, word ptr [bp - 0x2c]
0001837B: or dx, ax
0001837D: mov al, dh
0001837F: xor ah, ah
00018381: ror ax, cl
00018383: xor word ptr es:[di], ax
00018386: mov al, dl
00018388: xor ah, ah
0001838A: ror ax, cl
0001838C: xor word ptr es:[di + 1], ax
00018390: inc si
00018391: inc di
00018392: inc di
00018393: dec bx
00018394: jne 0x18342
00018396: mov al, byte ptr [si]
00018398: and al, ch
0001839A: xor dx, dx
0001839C: mov ah, 8
0001839E: shr al, 1
000183A0: rcr dx, 1
000183A2: sar dx, 1
000183A4: dec ah
000183A6: jne 0x1839e
000183A8: test word ptr [bp - 0x2e], 0x20
000183AD: je 0x183c7
000183AF: and dx, word ptr [bp - 0x2a]
000183B2: mov al, dh
000183B4: xor ah, ah
000183B6: ror ax, cl
000183B8: xor word ptr es:[di], ax
000183BB: mov al, dl
000183BD: xor ah, ah
000183BF: ror ax, cl
000183C1: xor word ptr es:[di + 1], ax
000183C5: jmp 0x183ee
000183C7: mov ax, dx
000183C9: and ax, word ptr [bp - 0x2a]
000183CC: and ax, word ptr [bp - 0xa0]
000183D0: not dx
000183D2: and dx, word ptr [bp - 0x2c]
000183D5: and dx, word ptr [bp - 0xa0]
000183D9: or dx, ax
000183DB: mov al, dh
000183DD: xor ah, ah
000183DF: ror ax, cl
000183E1: xor word ptr es:[di], ax
000183E4: mov al, dl
000183E6: xor ah, ah
000183E8: ror ax, cl
000183EA: xor word ptr es:[di + 1], ax
000183EE: inc si
000183EF: add si, word ptr [bp - 0x1c]
000183F2: pop di
000183F3: add di, word ptr [bp - 4]
000183F6: xor word ptr [bp - 4], 0xc050
000183FB: pop bx
000183FC: dec word ptr [bp - 0xc]
000183FF: je 0x18404
00018401: jmp 0x182de
00018404: jmp 0x18654
00018407: mov bx, word ptr [bp - 0xe]
0001840A: not word ptr [bp - 0x9c]
0001840E: push bx
0001840F: push di
00018410: dec bx
00018411: jne 0x18416
00018413: jmp 0x184c2
00018416: mov al, byte ptr [si]
00018418: xor dx, dx
0001841A: mov ah, 8
0001841C: shr al, 1
0001841E: rcr dx, 1
00018420: sar dx, 1
00018422: dec ah
00018424: jne 0x1841c
00018426: test word ptr [bp - 0x2e], 0x20
0001842B: je 0x18449
0001842D: and dx, word ptr [bp - 0x2a]
00018430: or dx, word ptr [bp - 0x9c]
00018434: mov al, dh
00018436: mov ah, 0xff
00018438: ror ax, cl
0001843A: and word ptr es:[di], ax
0001843D: mov al, dl
0001843F: mov ah, 0xff
00018441: ror ax, cl
00018443: and word ptr es:[di + 1], ax
00018447: jmp 0x184bc
00018449: mov ax, dx
0001844B: and ax, word ptr [bp - 0x2a]
0001844E: not dx
00018450: and dx, word ptr [bp - 0x2c]
00018453: or dx, ax
00018455: or dx, word ptr [bp - 0x9c]
00018459: mov al, dh
0001845B: mov ah, 0xff
0001845D: ror ax, cl
0001845F: and word ptr es:[di], ax
00018462: mov al, dl
00018464: mov ah, 0xff
00018466: ror ax, cl
00018468: and word ptr es:[di + 1], ax
0001846C: jmp 0x184bc
0001846E: mov al, byte ptr [si]
00018470: xor dx, dx
00018472: mov ah, 8
00018474: shr al, 1
00018476: rcr dx, 1
00018478: sar dx, 1
0001847A: dec ah
0001847C: jne 0x18474
0001847E: test word ptr [bp - 0x2e], 0x20
00018483: je 0x1849d
00018485: and dx, word ptr [bp - 0x2a]
00018488: mov al, dh
0001848A: mov ah, 0xff
0001848C: ror ax, cl
0001848E: and word ptr es:[di], ax
00018491: mov al, dl
00018493: mov ah, 0xff
00018495: ror ax, cl
00018497: and word ptr es:[di + 1], ax
0001849B: jmp 0x184bc
0001849D: mov ax, dx
0001849F: and ax, word ptr [bp - 0x2a]
000184A2: not dx
000184A4: and dx, word ptr [bp - 0x2c]
000184A7: or dx, ax
000184A9: mov al, dh
000184AB: mov ah, 0xff
000184AD: ror ax, cl
000184AF: and word ptr es:[di], ax
000184B2: mov al, dl
000184B4: mov ah, 0xff
000184B6: ror ax, cl
000184B8: and word ptr es:[di + 1], ax
000184BC: inc si
000184BD: inc di
000184BE: inc di
000184BF: dec bx
000184C0: jne 0x1846e
000184C2: mov al, byte ptr [si]
000184C4: and al, ch
000184C6: xor dx, dx
000184C8: mov ah, 8
000184CA: shr al, 1
000184CC: rcr dx, 1
000184CE: sar dx, 1
000184D0: dec ah
000184D2: jne 0x184ca
000184D4: test word ptr [bp - 0x2e], 0x20
000184D9: je 0x184f7
000184DB: and dx, word ptr [bp - 0x2a]
000184DE: or dx, word ptr [bp - 0x9e]
000184E2: mov al, dh
000184E4: mov ah, 0xff
000184E6: ror ax, cl
000184E8: and word ptr es:[di], ax
000184EB: mov al, dl
000184ED: mov ah, 0xff
000184EF: ror ax, cl
000184F1: and word ptr es:[di + 1], ax
000184F5: jmp 0x1851a
000184F7: mov ax, dx
000184F9: and ax, word ptr [bp - 0x2a]
000184FC: not dx
000184FE: and dx, word ptr [bp - 0x2c]
00018501: or dx, ax
00018503: or dx, word ptr [bp - 0x9e]
00018507: mov al, dh
00018509: mov ah, 0xff
0001850B: ror ax, cl
0001850D: and word ptr es:[di], ax
00018510: mov al, dl
00018512: mov ah, 0xff
00018514: ror ax, cl
00018516: and word ptr es:[di + 1], ax
0001851A: inc si
0001851B: add si, word ptr [bp - 0x1c]
0001851E: pop di
0001851F: add di, word ptr [bp - 4]
00018522: xor word ptr [bp - 4], 0xc050
00018527: pop bx
00018528: dec word ptr [bp - 0xc]
0001852B: je 0x18530
0001852D: jmp 0x1840e
00018530: jmp 0x18654
00018533: mov bx, word ptr [bp - 0xe]
00018536: push bx
00018537: push di
00018538: dec bx
00018539: jne 0x1853e
0001853B: jmp 0x185ea
0001853E: mov al, byte ptr [si]
00018540: xor dx, dx
00018542: mov ah, 8
00018544: shr al, 1
00018546: rcr dx, 1
00018548: sar dx, 1
0001854A: dec ah
0001854C: jne 0x18544
0001854E: test word ptr [bp - 0x2e], 0x20
00018553: je 0x18571
00018555: and dx, word ptr [bp - 0x2a]
00018558: and dx, word ptr [bp - 0x9c]
0001855C: mov al, dh
0001855E: xor ah, ah
00018560: ror ax, cl
00018562: or word ptr es:[di], ax
00018565: mov al, dl
00018567: xor ah, ah
00018569: ror ax, cl
0001856B: or word ptr es:[di + 1], ax
0001856F: jmp 0x185e4
00018571: mov ax, dx
00018573: and ax, word ptr [bp - 0x2a]
00018576: not dx
00018578: and dx, word ptr [bp - 0x2c]
0001857B: or dx, ax
0001857D: and dx, word ptr [bp - 0x9c]
00018581: mov al, dh
00018583: xor ah, ah
00018585: ror ax, cl
00018587: or word ptr es:[di], ax
0001858A: mov al, dl
0001858C: xor ah, ah
0001858E: ror ax, cl
00018590: or word ptr es:[di + 1], ax
00018594: jmp 0x185e4
00018596: mov al, byte ptr [si]
00018598: xor dx, dx
0001859A: mov ah, 8
0001859C: shr al, 1
0001859E: rcr dx, 1
000185A0: sar dx, 1
000185A2: dec ah
000185A4: jne 0x1859c
000185A6: test word ptr [bp - 0x2e], 0x20
000185AB: je 0x185c5
000185AD: and dx, word ptr [bp - 0x2a]
000185B0: mov al, dh
000185B2: xor ah, ah
000185B4: ror ax, cl
000185B6: or word ptr es:[di], ax
000185B9: mov al, dl
000185BB: xor ah, ah
000185BD: ror ax, cl
000185BF: or word ptr es:[di + 1], ax
000185C3: jmp 0x185e4
000185C5: mov ax, dx
000185C7: and ax, word ptr [bp - 0x2a]
000185CA: not dx
000185CC: and dx, word ptr [bp - 0x2c]
000185CF: or dx, ax
000185D1: mov al, dh
000185D3: xor ah, ah
000185D5: ror ax, cl
000185D7: or word ptr es:[di], ax
000185DA: mov al, dl
000185DC: xor ah, ah
000185DE: ror ax, cl
000185E0: or word ptr es:[di + 1], ax
000185E4: inc si
000185E5: inc di
000185E6: inc di
000185E7: dec bx
000185E8: jne 0x18596
000185EA: mov al, byte ptr [si]
000185EC: and al, ch
000185EE: xor dx, dx
000185F0: mov ah, 8
000185F2: shr al, 1
000185F4: rcr dx, 1
000185F6: sar dx, 1
000185F8: dec ah
000185FA: jne 0x185f2
000185FC: test word ptr [bp - 0x2e], 0x20
00018601: je 0x1861b
00018603: and dx, word ptr [bp - 0x2a]
00018606: mov al, dh
00018608: xor ah, ah
0001860A: ror ax, cl
0001860C: or word ptr es:[di], ax
0001860F: mov al, dl
00018611: xor ah, ah
00018613: ror ax, cl
00018615: or word ptr es:[di + 1], ax
00018619: jmp 0x1863e
0001861B: mov ax, dx
0001861D: and ax, word ptr [bp - 0x2a]
00018620: not dx
00018622: and dx, word ptr [bp - 0x2c]
00018625: or dx, ax
00018627: and dx, word ptr [bp - 0xa0]
0001862B: mov al, dh
0001862D: xor ah, ah
0001862F: ror ax, cl
00018631: or word ptr es:[di], ax
00018634: mov al, dl
00018636: xor ah, ah
00018638: ror ax, cl
0001863A: or word ptr es:[di + 1], ax
0001863E: inc si
0001863F: add si, word ptr [bp - 0x1c]
00018642: pop di
00018643: add di, word ptr [bp - 4]
00018646: xor word ptr [bp - 4], 0xc050
0001864B: pop bx
0001864C: dec word ptr [bp - 0xc]
0001864F: je 0x18654
00018651: jmp 0x18536
00018654: test word ptr [bp - 0x2e], 5
00018659: jne 0x1865d
0001865B: jmp 0x18677
0001865D: lds si, ptr [bp - 0x60]
00018660: test word ptr [bp - 0x2e], 4
00018665: je 0x1866b
00018667: push cs
00018668: call 0x1867d
0001866B: test word ptr [bp - 0x2e], 1
00018670: je 0x18677
00018672: lcall 0x15d6, 0x2f0
00018677: mov word ptr [bp - 2], 0
0001867C: retf 
0001867D: cmp word ptr [bp - 0x48], 0
00018681: je 0x18686
00018683: jmp 0x18789
00018686: cmp word ptr [bp - 0x28], 0
0001868A: je 0x1868f
0001868C: jmp 0x18789
0001868F: mov ax, 0x1ab5
00018692: mov es, ax
00018694: mov di, 0x71e4
00018697: cmp word ptr es:[di + 0x10], 1
0001869C: jne 0x186b4
0001869E: mov ax, word ptr [bp - 0x8c]
000186A2: add ax, word ptr [bp - 0x30]
000186A5: cmp ax, word ptr es:[di + 0x14]
000186A9: jb 0x186b1
000186AB: cmp ax, word ptr es:[di + 0x18]
000186AF: jbe 0x186b4
000186B1: jmp 0x18789
000186B4: les di, ptr [bp - 0x58]
000186B7: mov bx, word ptr [bp + 8]
000186BA: mov ax, word ptr [bp - 0x8c]
000186BE: add ax, word ptr [bp - 0x30]
000186C1: lcall es:[di + 0x26]
000186C5: mov di, bx
000186C7: mov cx, word ptr [bp - 0xa]
000186CA: cld 
000186CB: cmp cx, 0xff00
000186CF: jne 0x186eb
000186D1: cmp word ptr [bp - 0x9c], -1
000186D6: jne 0x186eb
000186D8: mov cx, word ptr [bp - 0xe]
000186DB: mov ax, 0xffff
000186DE: and ax, word ptr [bp - 0x2a]
000186E1: mov word ptr es:[di], ax
000186E4: inc di
000186E5: inc di
000186E6: loop 0x186e1
000186E8: jmp 0x18789
000186EB: mov bx, word ptr [bp - 0xe]
000186EE: dec bx
000186EF: je 0x18755
000186F1: mov dx, 0xffff
000186F4: and dx, word ptr [bp - 0x2a]
000186F7: and dx, word ptr [bp - 0x9c]
000186FB: xor ah, ah
000186FD: mov al, byte ptr [bp - 0x9b]
00018701: not ax
00018703: ror ax, cl
00018705: and word ptr es:[di], ax
00018708: xor ah, ah
0001870A: mov al, byte ptr [bp - 0x9c]
0001870E: not ax
00018710: ror ax, cl
00018712: and word ptr es:[di + 1], ax
00018716: mov al, dh
00018718: xor ah, ah
0001871A: ror ax, cl
0001871C: or word ptr es:[di], ax
0001871F: mov al, dl
00018721: xor ah, ah
00018723: ror ax, cl
00018725: or word ptr es:[di + 1], ax
00018729: jmp 0x18750
0001872B: mov dx, 0xffff
0001872E: and dx, word ptr [bp - 0x2a]
00018731: mov ax, 0xff00
00018734: ror ax, cl
00018736: and word ptr es:[di], ax
00018739: and word ptr es:[di + 1], ax
0001873D: mov al, dh
0001873F: xor ah, ah
00018741: ror ax, cl
00018743: or word ptr es:[di], ax
00018746: mov al, dl
00018748: xor ah, ah
0001874A: ror ax, cl
0001874C: or word ptr es:[di + 1], ax
00018750: inc di
00018751: inc di
00018752: dec bx
00018753: jne 0x1872b
00018755: mov dx, 0xffff
00018758: and dx, word ptr [bp - 0x2a]
0001875B: and dx, word ptr [bp - 0xa0]
0001875F: mov ah, 0xff
00018761: mov al, byte ptr [bp - 0x9d]
00018765: ror ax, cl
00018767: and word ptr es:[di], ax
0001876A: mov ah, 0xff
0001876C: mov al, byte ptr [bp - 0x9e]
00018770: ror ax, cl
00018772: and word ptr es:[di + 1], ax
00018776: mov al, dh
00018778: xor ah, ah
0001877A: ror ax, cl
0001877C: or word ptr es:[di], ax
0001877F: mov al, dl
00018781: xor ah, ah
00018783: ror ax, cl
00018785: or word ptr es:[di + 1], ax
00018789: retf 
0001878A: mov cx, word ptr [bp + 8]
0001878D: cmp cx, 0
00018790: jge 0x18795
00018792: add cx, 8
00018795: push cx
00018796: and cl, 7
00018799: mov byte ptr [bp - 0xa], cl
0001879C: mov ax, word ptr [bp - 0x9c]
000187A0: mov bx, ax
000187A2: xchg al, ah
000187A4: ror ax, cl
000187A6: xchg al, ah
000187A8: mov word ptr [bp - 0xa0], ax
000187AC: mov al, byte ptr [bp - 0x9c]
000187B0: xor ah, ah
000187B2: ror ax, cl
000187B4: not ax
000187B6: mov word ptr [bp - 0x9c], ax
000187BA: mov al, byte ptr [bp - 9]
000187BD: xor ah, ah
000187BF: ror ax, cl
000187C1: not ax
000187C3: mov word ptr [bp - 0x9e], ax
000187C7: pop cx
000187C8: cmp word ptr [bp - 0xe], 1
000187CC: jne 0x187d9
000187CE: mov ax, word ptr [bp - 0x9c]
000187D2: or word ptr [bp - 0x9e], ax
000187D6: and byte ptr [bp - 9], bl
000187D9: mov word ptr [bp - 8], 0xffff
000187DE: cmp word ptr [bp - 0x2a], 0
000187E2: je 0x187ee
000187E4: mov word ptr [bp - 8], 0
000187E9: mov word ptr [bp - 0x2a], 0xffff
000187EE: les di, ptr [bp - 0x58]
000187F1: mov ax, word ptr es:[di + 0x22]
000187F5: mov bx, word ptr [bp - 0x5a]
000187F8: mul bx
000187FA: push ax
000187FB: mov bx, cx
000187FD: mov ax, word ptr [bp + 6]
00018800: lcall es:[di + 0x26]
00018804: pop ax
00018805: add ax, bx
00018807: mov di, ax
00018809: mov ax, word ptr [bp - 0x12]
0001880C: sub ax, word ptr [bp - 0xe]
0001880F: mov word ptr [bp - 0x1c], ax
00018812: mov bx, 0x2000
00018815: mov ax, word ptr [bp + 6]
00018818: test ax, 1
0001881B: je 0x18820
0001881D: mov bx, 0xe050
00018820: mov word ptr [bp - 4], bx
00018823: mov cx, word ptr [bp - 0xa]
00018826: cld 
00018827: cmp word ptr [bp - 0x28], 0
0001882B: jne 0x1887c
0001882D: cmp word ptr [bp - 0xa], 0xff00
00018832: jne 0x1887c
00018834: cmp word ptr [bp - 0x9c], 0xff00
0001883A: jne 0x1887c
0001883C: mov cx, word ptr [bp - 0xe]
0001883F: push di
00018840: push cx
00018841: test word ptr [bp - 0x2e], 0x20
00018846: je 0x1885b
00018848: mov al, byte ptr [si]
0001884A: mov ah, al
0001884C: not ah
0001884E: and byte ptr es:[di], ah
00018851: xor al, byte ptr [bp - 8]
00018854: and al, byte ptr [si]
00018856: or byte ptr es:[di], al
00018859: jmp 0x18863
0001885B: mov al, byte ptr [si]
0001885D: xor al, byte ptr [bp - 8]
00018860: mov byte ptr es:[di], al
00018863: inc si
00018864: inc di
00018865: loop 0x18841
00018867: pop cx
00018868: pop di
00018869: add di, word ptr [bp - 4]
0001886C: xor word ptr [bp - 4], 0xc050
00018871: add si, word ptr [bp - 0x1c]
00018874: dec word ptr [bp - 0xc]
00018877: jne 0x1883f
00018879: jmp 0x18b1b
0001887C: mov ax, word ptr [bp - 0x28]
0001887F: cmp ax, 0
00018882: je 0x18897
00018884: cmp ax, 3
00018887: jne 0x1888c
00018889: jmp 0x189e1
0001888C: cmp ax, 1
0001888F: jne 0x18894
00018891: jmp 0x18a4b
00018894: jmp 0x18ab6
00018897: mov dx, 0xff00
0001889A: ror dx, cl
0001889C: mov bx, word ptr [bp - 0xe]
0001889F: push bx
000188A0: push di
000188A1: dec bx
000188A2: jne 0x188a7
000188A4: jmp 0x1894a
000188A7: test word ptr [bp - 0x2e], 0x20
000188AC: je 0x188e6
000188AE: mov al, byte ptr [si]
000188B0: xor ah, ah
000188B2: ror ax, cl
000188B4: not ax
000188B6: or ax, word ptr [bp - 0x9c]
000188BA: cmp word ptr [bp + 8], 0
000188BE: jge 0x188c4
000188C0: xchg al, ah
000188C2: mov ah, 0xff
000188C4: and word ptr es:[di], ax
000188C7: mov al, byte ptr [si]
000188C9: xor al, byte ptr [bp - 8]
000188CC: and al, byte ptr [si]
000188CE: xor ah, ah
000188D0: ror ax, cl
000188D2: and ax, word ptr [bp - 0xa0]
000188D6: cmp word ptr [bp + 8], 0
000188DA: jge 0x188e1
000188DC: or byte ptr es:[di], ah
000188DF: jmp 0x18946
000188E1: or word ptr es:[di], ax
000188E4: jmp 0x18945
000188E6: mov ax, word ptr [bp - 0x9c]
000188EA: cmp word ptr [bp + 8], 0
000188EE: jge 0x188f4
000188F0: xchg al, ah
000188F2: mov ah, 0xff
000188F4: and word ptr es:[di], ax
000188F7: mov al, byte ptr [si]
000188F9: xor al, byte ptr [bp - 8]
000188FC: xor ah, ah
000188FE: ror ax, cl
00018900: and ax, word ptr [bp - 0xa0]
00018904: cmp word ptr [bp + 8], 0
00018908: jge 0x1890f
0001890A: or byte ptr es:[di], ah
0001890D: jmp 0x18946
0001890F: or word ptr es:[di], ax
00018912: jmp 0x18945
00018914: test word ptr [bp - 0x2e], 0x20
00018919: je 0x18936
0001891B: mov al, byte ptr [si]
0001891D: xor ah, ah
0001891F: ror ax, cl
00018921: not ax
00018923: and word ptr es:[di], ax
00018926: mov al, byte ptr [si]
00018928: xor al, byte ptr [bp - 8]
0001892B: and al, byte ptr [si]
0001892D: xor ah, ah
0001892F: ror ax, cl
00018931: or word ptr es:[di], ax
00018934: jmp 0x18945
00018936: and word ptr es:[di], dx
00018939: mov al, byte ptr [si]
0001893B: xor al, byte ptr [bp - 8]
0001893E: xor ah, ah
00018940: ror ax, cl
00018942: or word ptr es:[di], ax
00018945: inc di
00018946: inc si
00018947: dec bx
00018948: jne 0x18914
0001894A: test word ptr [bp - 0x2e], 0x20
0001894F: je 0x18992
00018951: mov al, byte ptr [si]
00018953: xor ah, ah
00018955: ror ax, cl
00018957: not ax
00018959: or ax, word ptr [bp - 0x9e]
0001895D: cmp word ptr [bp + 8], 0
00018961: jge 0x1896d
00018963: cmp word ptr [bp - 0xe], 1
00018967: jne 0x1896d
00018969: xchg al, ah
0001896B: mov ah, 0xff
0001896D: and word ptr es:[di], ax
00018970: mov al, byte ptr [si]
00018972: xor al, byte ptr [bp - 8]
00018975: and al, byte ptr [si]
00018977: xor ah, ah
00018979: and al, ch
0001897B: ror ax, cl
0001897D: cmp word ptr [bp + 8], 0
00018981: jge 0x1898d
00018983: cmp word ptr [bp - 0xe], 1
00018987: jne 0x1898d
00018989: xchg al, ah
0001898B: xor ah, ah
0001898D: or word ptr es:[di], ax
00018990: jmp 0x189c8
00018992: mov ax, word ptr [bp - 0x9e]
00018996: cmp word ptr [bp + 8], 0
0001899A: jge 0x189a6
0001899C: cmp word ptr [bp - 0xe], 1
000189A0: jne 0x189a6
000189A2: xchg al, ah
000189A4: mov ah, 0xff
000189A6: and word ptr es:[di], ax
000189A9: mov al, byte ptr [si]
000189AB: xor al, byte ptr [bp - 8]
000189AE: xor ah, ah
000189B0: and al, ch
000189B2: ror ax, cl
000189B4: cmp word ptr [bp + 8], 0
000189B8: jge 0x189c5
000189BA: cmp word ptr [bp - 0xe], 1
000189BE: jne 0x189c5
000189C0: or byte ptr es:[di], ah
000189C3: jmp 0x189c8
000189C5: or word ptr es:[di], ax
000189C8: inc si
000189C9: add si, word ptr [bp - 0x1c]
000189CC: pop di
000189CD: add di, word ptr [bp - 4]
000189D0: xor word ptr [bp - 4], 0xc050
000189D5: pop bx
000189D6: dec word ptr [bp - 0xc]
000189D9: je 0x189de
000189DB: jmp 0x1889f
000189DE: jmp 0x18b1b
000189E1: mov bx, word ptr [bp - 0xe]
000189E4: push bx
000189E5: push di
000189E6: dec bx
000189E7: je 0x18a14
000189E9: lodsb al, byte ptr [si]
000189EA: xor al, byte ptr [bp - 8]
000189ED: xor ah, ah
000189EF: ror ax, cl
000189F1: and ax, word ptr [bp - 0xa0]
000189F5: cmp word ptr [bp + 8], 0
000189F9: jge 0x18a00
000189FB: xor byte ptr es:[di], ah
000189FE: jmp 0x18a11
00018A00: xor word ptr es:[di], ax
00018A03: jmp 0x18a10
00018A05: lodsb al, byte ptr [si]
00018A06: xor al, byte ptr [bp - 8]
00018A09: xor ah, ah
00018A0B: ror ax, cl
00018A0D: xor word ptr es:[di], ax
00018A10: inc di
00018A11: dec bx
00018A12: jne 0x18a05
00018A14: lodsb al, byte ptr [si]
00018A15: and al, ch
00018A17: xor al, byte ptr [bp - 8]
00018A1A: xor ah, ah
00018A1C: and al, ch
00018A1E: ror ax, cl
00018A20: cmp word ptr [bp + 8], 0
00018A24: jge 0x18a31
00018A26: cmp word ptr [bp - 0xe], 1
00018A2A: jne 0x18a31
00018A2C: xor byte ptr es:[di], ah
00018A2F: jmp 0x18a34
00018A31: xor word ptr es:[di], ax
00018A34: add si, word ptr [bp - 0x1c]
00018A37: pop di
00018A38: add di, word ptr [bp - 4]
00018A3B: xor word ptr [bp - 4], 0xc050
00018A40: pop bx
00018A41: dec word ptr [bp - 0xc]
00018A44: je 0x18a48
00018A46: jmp 0x189e4
00018A48: jmp 0x18b1b
00018A4B: mov bx, word ptr [bp - 0xe]
00018A4E: push bx
00018A4F: push di
00018A50: dec bx
00018A51: je 0x18a7e
00018A53: lodsb al, byte ptr [si]
00018A54: xor al, byte ptr [bp - 8]
00018A57: mov ah, 0xff
00018A59: ror ax, cl
00018A5B: or ax, word ptr [bp - 0x9c]
00018A5F: cmp word ptr [bp + 8], 0
00018A63: jge 0x18a6a
00018A65: and byte ptr es:[di], ah
00018A68: jmp 0x18a7b
00018A6A: and word ptr es:[di], ax
00018A6D: jmp 0x18a7a
00018A6F: lodsb al, byte ptr [si]
00018A70: xor al, byte ptr [bp - 8]
00018A73: mov ah, 0xff
00018A75: ror ax, cl
00018A77: and word ptr es:[di], ax
00018A7A: inc di
00018A7B: dec bx
00018A7C: jne 0x18a6f
00018A7E: lodsb al, byte ptr [si]
00018A7F: xor al, byte ptr [bp - 8]
00018A82: mov ah, 0xff
00018A84: and al, ch
00018A86: ror ax, cl
00018A88: or ax, word ptr [bp - 0x9e]
00018A8C: cmp word ptr [bp + 8], 0
00018A90: jge 0x18a9d
00018A92: cmp word ptr [bp - 0xe], 1
00018A96: jne 0x18a9d
00018A98: and byte ptr es:[di], ah
00018A9B: jmp 0x18aa0
00018A9D: and word ptr es:[di], ax
00018AA0: add si, word ptr [bp - 0x1c]
00018AA3: pop di
00018AA4: add di, word ptr [bp - 4]
00018AA7: xor word ptr [bp - 4], 0xc050
00018AAC: pop bx
00018AAD: dec word ptr [bp - 0xc]
00018AB0: je 0x18ab4
00018AB2: jmp 0x18a4e
00018AB4: jmp 0x18b1b
00018AB6: mov bx, word ptr [bp - 0xe]
00018AB9: push bx
00018ABA: push di
00018ABB: dec bx
00018ABC: je 0x18ae9
00018ABE: lodsb al, byte ptr [si]
00018ABF: xor al, byte ptr [bp - 8]
00018AC2: xor ah, ah
00018AC4: ror ax, cl
00018AC6: and ax, word ptr [bp - 0xa0]
00018ACA: cmp word ptr [bp + 8], 0
00018ACE: jge 0x18ad5
00018AD0: or byte ptr es:[di], ah
00018AD3: jmp 0x18ae6
00018AD5: or word ptr es:[di], ax
00018AD8: jmp 0x18ae5
00018ADA: lodsb al, byte ptr [si]
00018ADB: xor al, byte ptr [bp - 8]
00018ADE: xor ah, ah
00018AE0: ror ax, cl
00018AE2: or word ptr es:[di], ax
00018AE5: inc di
00018AE6: dec bx
00018AE7: jne 0x18ada
00018AE9: lodsb al, byte ptr [si]
00018AEA: xor al, byte ptr [bp - 8]
00018AED: xor ah, ah
00018AEF: and al, ch
00018AF1: ror ax, cl
00018AF3: cmp word ptr [bp + 8], 0
00018AF7: jge 0x18b04
00018AF9: cmp word ptr [bp - 0xe], 1
00018AFD: jne 0x18b04
00018AFF: or byte ptr es:[di], ah
00018B02: jmp 0x18b07
00018B04: or word ptr es:[di], ax
00018B07: add si, word ptr [bp - 0x1c]
00018B0A: pop di
00018B0B: add di, word ptr [bp - 4]
00018B0E: xor word ptr [bp - 4], 0xc050
00018B13: pop bx
00018B14: dec word ptr [bp - 0xc]
00018B17: je 0x18b1b
00018B19: jmp 0x18ab9
00018B1B: test word ptr [bp - 0x2e], 5
00018B20: jne 0x18b24
00018B22: jmp 0x18b3e
00018B24: lds si, ptr [bp - 0x60]
00018B27: test word ptr [bp - 0x2e], 4
00018B2C: je 0x18b32
00018B2E: push cs
00018B2F: call 0x18b44
00018B32: test word ptr [bp - 0x2e], 1
00018B37: je 0x18b3e
00018B39: lcall 0x15d6, 0x2f0
00018B3E: mov word ptr [bp - 2], 0
00018B43: retf 
00018B44: cmp word ptr [bp - 0x48], 0
00018B48: je 0x18b4d
00018B4A: jmp 0x18c55
00018B4D: cmp word ptr [bp - 0x28], 0
00018B51: je 0x18b56
00018B53: jmp 0x18c55
00018B56: mov ax, 0x1ab5
00018B59: mov es, ax
00018B5B: mov di, 0x71e4
00018B5E: cmp word ptr es:[di + 0x10], 1
00018B63: jne 0x18b7b
00018B65: mov ax, word ptr [bp - 0x8c]
00018B69: add ax, word ptr [bp - 0x30]
00018B6C: cmp ax, word ptr es:[di + 0x14]
00018B70: jb 0x18b78
00018B72: cmp ax, word ptr es:[di + 0x18]
00018B76: jbe 0x18b7b
00018B78: jmp 0x18c55
00018B7B: les di, ptr [bp - 0x58]
00018B7E: mov ax, word ptr es:[di + 0x22]
00018B82: mov bx, word ptr [bp - 0x5a]
00018B85: mul bx
00018B87: push ax
00018B88: mov bx, word ptr [bp + 8]
00018B8B: cmp bx, 0
00018B8E: jge 0x18b93
00018B90: add bx, 8
00018B93: mov ax, word ptr [bp - 0x8c]
00018B97: add ax, word ptr [bp - 0x30]
00018B9A: lcall es:[di + 0x26]
00018B9E: pop ax
00018B9F: add ax, bx
00018BA1: mov di, ax
00018BA3: mov cx, word ptr [bp - 0xa]
00018BA6: cld 
00018BA7: cmp word ptr [bp - 0xa], 0xff00
00018BAC: jne 0x18bce
00018BAE: cmp word ptr [bp - 0x9c], 0xff00
00018BB4: jne 0x18bce
00018BB6: mov cx, word ptr [bp - 0xe]
00018BB9: mov al, 0xff
00018BBB: mov ah, al
00018BBD: not ah
00018BBF: and byte ptr es:[di], ah
00018BC2: xor al, byte ptr [bp - 8]
00018BC5: or byte ptr es:[di], al
00018BC8: inc di
00018BC9: loop 0x18bb9
00018BCB: jmp 0x18c55
00018BCE: mov bx, word ptr [bp - 0xe]
00018BD1: mov cx, word ptr [bp - 0xa]
00018BD4: mov dx, 0xff00
00018BD7: ror dx, cl
00018BD9: dec bx
00018BDA: jne 0x18bde
00018BDC: jmp 0x18c1f
00018BDE: mov ax, word ptr [bp - 0x9c]
00018BE2: cmp word ptr [bp + 8], 0
00018BE6: jge 0x18bec
00018BE8: xchg al, ah
00018BEA: mov ah, 0xff
00018BEC: and word ptr es:[di], ax
00018BEF: mov al, 0xff
00018BF1: xor al, byte ptr [bp - 8]
00018BF4: xor ah, ah
00018BF6: ror ax, cl
00018BF8: and ax, word ptr [bp - 0xa0]
00018BFC: cmp word ptr [bp + 8], 0
00018C00: jge 0x18c07
00018C02: or byte ptr es:[di], ah
00018C05: jmp 0x18c1c
00018C07: or word ptr es:[di], ax
00018C0A: jmp 0x18c1b
00018C0C: and word ptr es:[di], dx
00018C0F: mov al, 0xff
00018C11: xor al, byte ptr [bp - 8]
00018C14: xor ah, ah
00018C16: ror ax, cl
00018C18: or word ptr es:[di], ax
00018C1B: inc di
00018C1C: dec bx
00018C1D: jne 0x18c0c
00018C1F: mov ax, word ptr [bp - 0x9e]
00018C23: cmp word ptr [bp + 8], 0
00018C27: jge 0x18c33
00018C29: cmp word ptr [bp - 0xe], 1
00018C2D: jne 0x18c33
00018C2F: xchg al, ah
00018C31: mov ah, 0xff
00018C33: and word ptr es:[di], ax
00018C36: mov al, 0xff
00018C38: xor al, byte ptr [bp - 8]
00018C3B: xor ah, ah
00018C3D: and al, ch
00018C3F: ror ax, cl
00018C41: cmp word ptr [bp + 8], 0
00018C45: jge 0x18c52
00018C47: cmp word ptr [bp - 0xe], 1
00018C4B: jne 0x18c52
00018C4D: or byte ptr es:[di], ah
00018C50: jmp 0x18c55
00018C52: or word ptr es:[di], ax
00018C55: retf 
00018C56: mov cx, word ptr [bp + 8]
00018C59: cmp cx, 0
00018C5C: jge 0x18c61
00018C5E: add cx, 8
00018C61: push cx
00018C62: and cl, 7
00018C65: mov byte ptr [bp - 0xa], cl
00018C68: mov ax, word ptr [bp - 0x9c]
00018C6C: mov bx, ax
00018C6E: xchg al, ah
00018C70: ror ax, cl
00018C72: xchg al, ah
00018C74: mov word ptr [bp - 0xa0], ax
00018C78: mov al, byte ptr [bp - 0x9c]
00018C7C: xor ah, ah
00018C7E: ror ax, cl
00018C80: not ax
00018C82: mov word ptr [bp - 0x9c], ax
00018C86: mov al, byte ptr [bp - 9]
00018C89: xor ah, ah
00018C8B: ror ax, cl
00018C8D: not ax
00018C8F: mov word ptr [bp - 0x9e], ax
00018C93: pop cx
00018C94: cmp word ptr [bp - 0xe], 1
00018C98: jne 0x18ca5
00018C9A: mov ax, word ptr [bp - 0x9c]
00018C9E: or word ptr [bp - 0x9e], ax
00018CA2: and byte ptr [bp - 9], bl
00018CA5: mov word ptr [bp - 8], 0xffff
00018CAA: cmp word ptr [bp - 0x2a], 0
00018CAE: je 0x18cba
00018CB0: mov word ptr [bp - 8], 0
00018CB5: mov word ptr [bp - 0x2a], 0xffff
00018CBA: les di, ptr [bp - 0x58]
00018CBD: mov ax, word ptr es:[di + 0x22]
00018CC1: mov bx, word ptr [bp - 0x5a]
00018CC4: mul bx
00018CC6: push ax
00018CC7: mov bx, cx
00018CC9: mov ax, word ptr [bp + 6]
00018CCC: lcall es:[di + 0x26]
00018CD0: pop ax
00018CD1: add ax, bx
00018CD3: mov di, ax
00018CD5: mov ax, word ptr [bp - 0x12]
00018CD8: sub ax, word ptr [bp - 0xe]
00018CDB: mov word ptr [bp - 0x1c], ax
00018CDE: mov ax, word ptr [bp + 6]
00018CE1: and al, 3
00018CE3: mov byte ptr [bp - 6], 4
00018CE7: sub byte ptr [bp - 6], al
00018CEA: mov cx, word ptr [bp - 0xa]
00018CED: cld 
00018CEE: cmp word ptr [bp - 0x28], 0
00018CF2: jne 0x18d4c
00018CF4: cmp word ptr [bp - 0xa], 0xff00
00018CF9: jne 0x18d4c
00018CFB: cmp word ptr [bp - 0x9c], 0xff00
00018D01: jne 0x18d4c
00018D03: mov cx, word ptr [bp - 0xe]
00018D06: push di
00018D07: push cx
00018D08: test word ptr [bp - 0x2e], 0x20
00018D0D: je 0x18d22
00018D0F: mov al, byte ptr [si]
00018D11: mov ah, al
00018D13: not ah
00018D15: and byte ptr es:[di], ah
00018D18: xor al, byte ptr [bp - 8]
00018D1B: and al, byte ptr [si]
00018D1D: or byte ptr es:[di], al
00018D20: jmp 0x18d2a
00018D22: mov al, byte ptr [si]
00018D24: xor al, byte ptr [bp - 8]
00018D27: mov byte ptr es:[di], al
00018D2A: inc si
00018D2B: inc di
00018D2C: loop 0x18d08
00018D2E: pop cx
00018D2F: pop di
00018D30: add si, word ptr [bp - 0x1c]
00018D33: add di, 0x2000
00018D37: dec byte ptr [bp - 6]
00018D3A: jne 0x18d44
00018D3C: sub di, 0x7fa6
00018D40: mov byte ptr [bp - 6], 4
00018D44: dec word ptr [bp - 0xc]
00018D47: jne 0x18d06
00018D49: jmp 0x1900f
00018D4C: mov ax, word ptr [bp - 0x28]
00018D4F: cmp ax, 0
00018D52: je 0x18d67
00018D54: cmp ax, 3
00018D57: jne 0x18d5c
00018D59: jmp 0x18eba
00018D5C: cmp ax, 1
00018D5F: jne 0x18d64
00018D61: jmp 0x18f2d
00018D64: jmp 0x18fa1
00018D67: mov dx, 0xff00
00018D6A: ror dx, cl
00018D6C: mov bx, word ptr [bp - 0xe]
00018D6F: push bx
00018D70: push di
00018D71: dec bx
00018D72: jne 0x18d77
00018D74: jmp 0x18e1a
00018D77: test word ptr [bp - 0x2e], 0x20
00018D7C: je 0x18db6
00018D7E: mov al, byte ptr [si]
00018D80: xor ah, ah
00018D82: ror ax, cl
00018D84: not ax
00018D86: or ax, word ptr [bp - 0x9c]
00018D8A: cmp word ptr [bp + 8], 0
00018D8E: jge 0x18d94
00018D90: xchg al, ah
00018D92: mov ah, 0xff
00018D94: and word ptr es:[di], ax
00018D97: mov al, byte ptr [si]
00018D99: xor al, byte ptr [bp - 8]
00018D9C: and al, byte ptr [si]
00018D9E: xor ah, ah
00018DA0: ror ax, cl
00018DA2: and ax, word ptr [bp - 0xa0]
00018DA6: cmp word ptr [bp + 8], 0
00018DAA: jge 0x18db1
00018DAC: or byte ptr es:[di], ah
00018DAF: jmp 0x18e16
00018DB1: or word ptr es:[di], ax
00018DB4: jmp 0x18e15
00018DB6: mov ax, word ptr [bp - 0x9c]
00018DBA: cmp word ptr [bp + 8], 0
00018DBE: jge 0x18dc4
00018DC0: xchg al, ah
00018DC2: mov ah, 0xff
00018DC4: and word ptr es:[di], ax
00018DC7: mov al, byte ptr [si]
00018DC9: xor al, byte ptr [bp - 8]
00018DCC: xor ah, ah
00018DCE: ror ax, cl
00018DD0: and ax, word ptr [bp - 0xa0]
00018DD4: cmp word ptr [bp + 8], 0
00018DD8: jge 0x18ddf
00018DDA: or byte ptr es:[di], ah
00018DDD: jmp 0x18e16
00018DDF: or word ptr es:[di], ax
00018DE2: jmp 0x18e15
00018DE4: test word ptr [bp - 0x2e], 0x20
00018DE9: je 0x18e06
00018DEB: mov al, byte ptr [si]
00018DED: xor ah, ah
00018DEF: ror ax, cl
00018DF1: not ax
00018DF3: and word ptr es:[di], ax
00018DF6: mov al, byte ptr [si]
00018DF8: xor al, byte ptr [bp - 8]
00018DFB: and al, byte ptr [si]
00018DFD: xor ah, ah
00018DFF: ror ax, cl
00018E01: or word ptr es:[di], ax
00018E04: jmp 0x18e15
00018E06: and word ptr es:[di], dx
00018E09: mov al, byte ptr [si]
00018E0B: xor al, byte ptr [bp - 8]
00018E0E: xor ah, ah
00018E10: ror ax, cl
00018E12: or word ptr es:[di], ax
00018E15: inc di
00018E16: inc si
00018E17: dec bx
00018E18: jne 0x18de4
00018E1A: test word ptr [bp - 0x2e], 0x20
00018E1F: je 0x18e62
00018E21: mov al, byte ptr [si]
00018E23: xor ah, ah
00018E25: ror ax, cl
00018E27: not ax
00018E29: or ax, word ptr [bp - 0x9e]
00018E2D: cmp word ptr [bp + 8], 0
00018E31: jge 0x18e3d
00018E33: cmp word ptr [bp - 0xe], 1
00018E37: jne 0x18e3d
00018E39: xchg al, ah
00018E3B: mov ah, 0xff
00018E3D: and word ptr es:[di], ax
00018E40: mov al, byte ptr [si]
00018E42: xor al, byte ptr [bp - 8]
00018E45: and al, byte ptr [si]
00018E47: xor ah, ah
00018E49: and al, ch
00018E4B: ror ax, cl
00018E4D: cmp word ptr [bp + 8], 0
00018E51: jge 0x18e5d
00018E53: cmp word ptr [bp - 0xe], 1
00018E57: jne 0x18e5d
00018E59: xchg al, ah
00018E5B: xor ah, ah
00018E5D: or word ptr es:[di], ax
00018E60: jmp 0x18e98
00018E62: mov ax, word ptr [bp - 0x9e]
00018E66: cmp word ptr [bp + 8], 0
00018E6A: jge 0x18e76
00018E6C: cmp word ptr [bp - 0xe], 1
00018E70: jne 0x18e76
00018E72: xchg al, ah
00018E74: mov ah, 0xff
00018E76: and word ptr es:[di], ax
00018E79: mov al, byte ptr [si]
00018E7B: xor al, byte ptr [bp - 8]
00018E7E: xor ah, ah
00018E80: and al, ch
00018E82: ror ax, cl
00018E84: cmp word ptr [bp + 8], 0
00018E88: jge 0x18e95
00018E8A: cmp word ptr [bp - 0xe], 1
00018E8E: jne 0x18e95
00018E90: or byte ptr es:[di], ah
00018E93: jmp 0x18e98
00018E95: or word ptr es:[di], ax
00018E98: inc si
00018E99: add si, word ptr [bp - 0x1c]
00018E9C: pop di
00018E9D: add di, 0x2000
00018EA1: dec byte ptr [bp - 6]
00018EA4: jne 0x18eae
00018EA6: sub di, 0x7fa6
00018EAA: mov byte ptr [bp - 6], 4
00018EAE: pop bx
00018EAF: dec word ptr [bp - 0xc]
00018EB2: je 0x18eb7
00018EB4: jmp 0x18d6f
00018EB7: jmp 0x1900f
00018EBA: mov bx, word ptr [bp - 0xe]
00018EBD: push bx
00018EBE: push di
00018EBF: dec bx
00018EC0: je 0x18eed
00018EC2: lodsb al, byte ptr [si]
00018EC3: xor al, byte ptr [bp - 8]
00018EC6: xor ah, ah
00018EC8: ror ax, cl
00018ECA: and ax, word ptr [bp - 0xa0]
00018ECE: cmp word ptr [bp + 8], 0
00018ED2: jge 0x18ed9
00018ED4: xor byte ptr es:[di], ah
00018ED7: jmp 0x18eea
00018ED9: xor word ptr es:[di], ax
00018EDC: jmp 0x18ee9
00018EDE: lodsb al, byte ptr [si]
00018EDF: xor al, byte ptr [bp - 8]
00018EE2: xor ah, ah
00018EE4: ror ax, cl
00018EE6: xor word ptr es:[di], ax
00018EE9: inc di
00018EEA: dec bx
00018EEB: jne 0x18ede
00018EED: lodsb al, byte ptr [si]
00018EEE: and al, ch
00018EF0: xor al, byte ptr [bp - 8]
00018EF3: xor ah, ah
00018EF5: and al, ch
00018EF7: ror ax, cl
00018EF9: cmp word ptr [bp + 8], 0
00018EFD: jge 0x18f0a
00018EFF: cmp word ptr [bp - 0xe], 1
00018F03: jne 0x18f0a
00018F05: xor byte ptr es:[di], ah
00018F08: jmp 0x18f0d
00018F0A: xor word ptr es:[di], ax
00018F0D: add si, word ptr [bp - 0x1c]
00018F10: pop di
00018F11: add di, 0x2000
00018F15: dec byte ptr [bp - 6]
00018F18: jne 0x18f22
00018F1A: sub di, 0x7fa6
00018F1E: mov byte ptr [bp - 6], 4
00018F22: pop bx
00018F23: dec word ptr [bp - 0xc]
00018F26: je 0x18f2a
00018F28: jmp 0x18ebd
00018F2A: jmp 0x1900f
00018F2D: mov bx, word ptr [bp - 0xe]
00018F30: push bx
00018F31: push di
00018F32: dec bx
00018F33: je 0x18f60
00018F35: lodsb al, byte ptr [si]
00018F36: xor al, byte ptr [bp - 8]
00018F39: mov ah, 0xff
00018F3B: ror ax, cl
00018F3D: or ax, word ptr [bp - 0x9c]
00018F41: cmp word ptr [bp + 8], 0
00018F45: jge 0x18f4c
00018F47: and byte ptr es:[di], ah
00018F4A: jmp 0x18f5d
00018F4C: and word ptr es:[di], ax
00018F4F: jmp 0x18f5c
00018F51: lodsb al, byte ptr [si]
00018F52: xor al, byte ptr [bp - 8]
00018F55: mov ah, 0xff
00018F57: ror ax, cl
00018F59: and word ptr es:[di], ax
00018F5C: inc di
00018F5D: dec bx
00018F5E: jne 0x18f51
00018F60: lodsb al, byte ptr [si]
00018F61: xor al, byte ptr [bp - 8]
00018F64: mov ah, 0xff
00018F66: and al, ch
00018F68: ror ax, cl
00018F6A: or ax, word ptr [bp - 0x9e]
00018F6E: cmp word ptr [bp + 8], 0
00018F72: jge 0x18f7f
00018F74: cmp word ptr [bp - 0xe], 1
00018F78: jne 0x18f7f
00018F7A: and byte ptr es:[di], ah
00018F7D: jmp 0x18f82
00018F7F: and word ptr es:[di], ax
00018F82: add si, word ptr [bp - 0x1c]
00018F85: pop di
00018F86: add di, 0x2000
00018F8A: dec byte ptr [bp - 6]
00018F8D: jne 0x18f97
00018F8F: sub di, 0x7fa6
00018F93: mov byte ptr [bp - 6], 4
00018F97: pop bx
00018F98: dec word ptr [bp - 0xc]
00018F9B: je 0x18f9f
00018F9D: jmp 0x18f30
00018F9F: jmp 0x1900f
00018FA1: mov bx, word ptr [bp - 0xe]
00018FA4: push bx
00018FA5: push di
00018FA6: dec bx
00018FA7: je 0x18fd4
00018FA9: lodsb al, byte ptr [si]
00018FAA: xor al, byte ptr [bp - 8]
00018FAD: xor ah, ah
00018FAF: ror ax, cl
00018FB1: and ax, word ptr [bp - 0xa0]
00018FB5: cmp word ptr [bp + 8], 0
00018FB9: jge 0x18fc0
00018FBB: or byte ptr es:[di], ah
00018FBE: jmp 0x18fd1
00018FC0: or word ptr es:[di], ax
00018FC3: jmp 0x18fd0
00018FC5: lodsb al, byte ptr [si]
00018FC6: xor al, byte ptr [bp - 8]
00018FC9: xor ah, ah
00018FCB: ror ax, cl
00018FCD: or word ptr es:[di], ax
00018FD0: inc di
00018FD1: dec bx
00018FD2: jne 0x18fc5
00018FD4: lodsb al, byte ptr [si]
00018FD5: xor al, byte ptr [bp - 8]
00018FD8: xor ah, ah
00018FDA: and al, ch
00018FDC: ror ax, cl
00018FDE: cmp word ptr [bp + 8], 0
00018FE2: jge 0x18fef
00018FE4: cmp word ptr [bp - 0xe], 1
00018FE8: jne 0x18fef
00018FEA: or byte ptr es:[di], ah
00018FED: jmp 0x18ff2
00018FEF: or word ptr es:[di], ax
00018FF2: add si, word ptr [bp - 0x1c]
00018FF5: pop di
00018FF6: add di, 0x2000
00018FFA: dec byte ptr [bp - 6]
00018FFD: jne 0x19007
00018FFF: sub di, 0x7fa6
00019003: mov byte ptr [bp - 6], 4
00019007: pop bx
00019008: dec word ptr [bp - 0xc]
0001900B: je 0x1900f
0001900D: jmp 0x18fa4
0001900F: test word ptr [bp - 0x2e], 5
00019014: jne 0x19018
00019016: jmp 0x19032
00019018: lds si, ptr [bp - 0x60]
0001901B: test word ptr [bp - 0x2e], 4
00019020: je 0x19026
00019022: push cs
00019023: call 0x19038
00019026: test word ptr [bp - 0x2e], 1
0001902B: je 0x19032
0001902D: lcall 0x15d6, 0x2f0
00019032: mov word ptr [bp - 2], 0
00019037: retf 
00019038: cmp word ptr [bp - 0x48], 0
0001903C: je 0x19041
0001903E: jmp 0x19149
00019041: cmp word ptr [bp - 0x28], 0
00019045: je 0x1904a
00019047: jmp 0x19149
0001904A: mov ax, 0x1ab5
0001904D: mov es, ax
0001904F: mov di, 0x71e4
00019052: cmp word ptr es:[di + 0x10], 1
00019057: jne 0x1906f
00019059: mov ax, word ptr [bp - 0x8c]
0001905D: add ax, word ptr [bp - 0x30]
00019060: cmp ax, word ptr es:[di + 0x14]
00019064: jb 0x1906c
00019066: cmp ax, word ptr es:[di + 0x18]
0001906A: jbe 0x1906f
0001906C: jmp 0x19149
0001906F: les di, ptr [bp - 0x58]
00019072: mov ax, word ptr es:[di + 0x22]
00019076: mov bx, word ptr [bp - 0x5a]
00019079: mul bx
0001907B: push ax
0001907C: mov bx, word ptr [bp + 8]
0001907F: cmp bx, 0
00019082: jge 0x19087
00019084: add bx, 8
00019087: mov ax, word ptr [bp - 0x8c]
0001908B: add ax, word ptr [bp - 0x30]
0001908E: lcall es:[di + 0x26]
00019092: pop ax
00019093: add ax, bx
00019095: mov di, ax
00019097: mov cx, word ptr [bp - 0xa]
0001909A: cld 
0001909B: cmp word ptr [bp - 0xa], 0xff00
000190A0: jne 0x190c2
000190A2: cmp word ptr [bp - 0x9c], 0xff00
000190A8: jne 0x190c2
000190AA: mov cx, word ptr [bp - 0xe]
000190AD: mov al, 0xff
000190AF: mov ah, al
000190B1: not ah
000190B3: and byte ptr es:[di], ah
000190B6: xor al, byte ptr [bp - 8]
000190B9: or byte ptr es:[di], al
000190BC: inc di
000190BD: loop 0x190ad
000190BF: jmp 0x19149
000190C2: mov bx, word ptr [bp - 0xe]
000190C5: mov cx, word ptr [bp - 0xa]
000190C8: mov dx, 0xff00
000190CB: ror dx, cl
000190CD: dec bx
000190CE: jne 0x190d2
000190D0: jmp 0x19113
000190D2: mov ax, word ptr [bp - 0x9c]
000190D6: cmp word ptr [bp + 8], 0
000190DA: jge 0x190e0
000190DC: xchg al, ah
000190DE: mov ah, 0xff
000190E0: and word ptr es:[di], ax
000190E3: mov al, 0xff
000190E5: xor al, byte ptr [bp - 8]
000190E8: xor ah, ah
000190EA: ror ax, cl
000190EC: and ax, word ptr [bp - 0xa0]
000190F0: cmp word ptr [bp + 8], 0
000190F4: jge 0x190fb
000190F6: or byte ptr es:[di], ah
000190F9: jmp 0x19110
000190FB: or word ptr es:[di], ax
000190FE: jmp 0x1910f
00019100: and word ptr es:[di], dx
00019103: mov al, 0xff
00019105: xor al, byte ptr [bp - 8]
00019108: xor ah, ah
0001910A: ror ax, cl
0001910C: or word ptr es:[di], ax
0001910F: inc di
00019110: dec bx
00019111: jne 0x19100
00019113: mov ax, word ptr [bp - 0x9e]
00019117: cmp word ptr [bp + 8], 0
0001911B: jge 0x19127
0001911D: cmp word ptr [bp - 0xe], 1
00019121: jne 0x19127
00019123: xchg al, ah
00019125: mov ah, 0xff
00019127: and word ptr es:[di], ax
0001912A: mov al, 0xff
0001912C: xor al, byte ptr [bp - 8]
0001912F: xor ah, ah
00019131: and al, ch
00019133: ror ax, cl
00019135: cmp word ptr [bp + 8], 0
00019139: jge 0x19146
0001913B: cmp word ptr [bp - 0xe], 1
0001913F: jne 0x19146
00019141: or byte ptr es:[di], ah
00019144: jmp 0x19149
00019146: or word ptr es:[di], ax
00019149: retf 
0001914A: push bp
0001914B: mov bp, sp
0001914D: sub sp, 0xe
00019150: push ds
00019151: push es
00019152: push si
00019153: push di
00019154: mov ax, 0x1ab5
00019157: mov ds, ax
00019159: push ss
0001915A: lea ax, [bp - 6]
0001915D: push ax
0001915E: push ss
0001915F: lea ax, [bp - 8]
00019162: push ax
00019163: lcall 0x96b, 0x66
00019168: or ax, ax
0001916A: je 0x19172
0001916C: mov word ptr [bp - 2], ax
0001916F: jmp 0x192be
00019172: lds si, ptr [bp + 6]
00019175: mov ax, 0x1ab5
00019178: mov es, ax
0001917A: mov di, 0x7138
0001917D: mov ax, word ptr [si + 8]
00019180: mov word ptr es:[di + 8], ax
00019184: mov word ptr [bp - 0xc], ax
00019187: mov ax, word ptr [si + 0xc]
0001918A: mov word ptr es:[di + 0xc], ax
0001918E: mov ax, word ptr [si + 0xe]
00019191: mov word ptr es:[di + 0xe], ax
00019195: mov ax, word ptr [si + 0x12]
00019198: mov word ptr es:[di + 0x12], ax
0001919C: mov ax, word ptr [si + 0x12]
0001919F: mov word ptr es:[di + 0x12], ax
000191A3: mov ax, word ptr [si + 0x14]
000191A6: mov word ptr es:[di + 0x14], ax
000191AA: mov ax, word ptr [si + 0x16]
000191AD: mov word ptr es:[di + 0x16], ax
000191B1: mov ax, word ptr [si + 0x18]
000191B4: mov word ptr es:[di + 0x18], ax
000191B8: mov ax, word ptr [si + 0x1a]
000191BB: mov word ptr es:[di + 0x1a], ax
000191BF: mov ax, word ptr [si + 0x1c]
000191C2: mov word ptr es:[di + 0x1c], ax
000191C6: mov ax, word ptr [si + 0x20]
000191C9: mov word ptr es:[di + 0x20], ax
000191CD: mov ax, word ptr [si + 0x1e]
000191D0: mov word ptr es:[di + 0x1e], ax
000191D4: mov word ptr es:[di + 0xa], ax
000191D8: mov word ptr [bp - 0xa], ax
000191DB: test word ptr [si + 0x18], 0x10
000191E0: je 0x191ef
000191E2: cmp ax, 0
000191E5: jne 0x19224
000191E7: mov word ptr [bp - 2], 0
000191EC: jmp 0x192be
000191EF: mov ax, word ptr [si + 0x20]
000191F2: mov word ptr [bp - 0xa], ax
000191F5: cmp ax, 0
000191F8: jne 0x19202
000191FA: mov word ptr [bp - 2], 0
000191FF: jmp 0x192be
00019202: mov word ptr [bp - 0xe], 0
00019207: cmp word ptr [si + 0x16], 0
0001920B: je 0x19224
0001920D: cmp word ptr [si + 0x16], 2
00019211: je 0x19224
00019213: mov ax, word ptr [bp - 0xa]
00019216: mov bx, word ptr [bp - 0xc]
00019219: mov word ptr [bp - 0xa], bx
0001921C: mov word ptr [bp - 0xc], ax
0001921F: mov word ptr [bp - 0xe], 1
00019224: mov ax, 6
00019227: push ax
00019228: push word ptr [bp - 0xa]
0001922B: push word ptr [bp - 0xc]
0001922E: lcall 0xb08, 0x2e7
00019233: cmp ax, word ptr [bp - 8]
00019236: jb 0x1923f
00019238: mov word ptr [bp - 2], 0xfffe
0001923D: jmp 0x192be
0001923F: mov ax, 0x402
00019242: mov ax, word ptr [bp - 4]
00019245: mov word ptr es:[di + 0xa6], ax
0001924A: mov word ptr es:[di + 0xaa], ax
0001924F: mov ax, word ptr [bp - 6]
00019252: add ax, 0x402
00019255: inc ax
00019256: mov word ptr es:[di + 0xa4], ax
0001925B: inc ax
0001925C: inc ax
0001925D: mov word ptr es:[di + 0xa8], ax
00019262: lds si, ptr es:[di + 0xa4]
00019267: mov word ptr [si], 0
0001926B: lds si, ptr es:[di + 0xa8]
00019270: mov bx, word ptr [bp - 0xa]
00019273: cmp word ptr [bp - 0xe], 0
00019277: je 0x1927c
00019279: mov bx, word ptr [bp - 0xc]
0001927C: mov word ptr [si], bx
0001927E: add di, 0x24
00019281: mov bx, 0
00019284: push bx
00019285: push es
00019286: push di
00019287: push word ptr [bp - 4]
0001928A: inc ax
0001928B: inc ax
0001928C: push ax
0001928D: mov ax, 6
00019290: push ax
00019291: push word ptr [bp - 0xa]
00019294: push word ptr [bp - 0xc]
00019297: lcall 0x5e5, 6
0001929C: or ax, ax
0001929E: je 0x192a5
000192A0: mov word ptr [bp - 2], ax
000192A3: jmp 0x192be
000192A5: push es
000192A6: push di
000192A7: mov ax, 0
000192AA: push ax
000192AB: lcall 0x95a, 6
000192B0: or ax, ax
000192B2: je 0x192b9
000192B4: mov word ptr [bp - 2], ax
000192B7: jmp 0x192be
000192B9: mov word ptr [bp - 2], 0
000192BE: mov ax, word ptr [bp - 2]
000192C1: pop di
000192C2: pop si
000192C3: pop es
000192C4: pop ds
000192C5: mov sp, bp
000192C7: pop bp
000192C8: retf 4
000192CB: push bp
000192CC: mov bp, sp
000192CE: sub sp, 0x18
000192D1: push ds
000192D2: push es
000192D3: push si
000192D4: push di
000192D5: mov ax, 0x1ab5
000192D8: mov ds, ax
000192DA: cmp word ptr [bp + 0xa], 0
000192DE: jne 0x192f2
000192E0: mov ax, word ptr [bp + 8]
000192E3: mov word ptr [bp - 8], ax
000192E6: mov word ptr [bp - 0xc], 0x27c
000192EB: mov word ptr [bp - 0xe], 0x30c
000192F0: jmp 0x19342
000192F2: cmp word ptr [bp + 0xa], 1
000192F6: jne 0x1930a
000192F8: mov ax, word ptr [bp + 6]
000192FB: mov word ptr [bp - 8], ax
000192FE: mov word ptr [bp - 0xc], 0x284
00019303: mov word ptr [bp - 0xe], 0x311
00019308: jmp 0x19342
0001930A: cmp word ptr [bp + 0xa], 2
0001930E: jne 0x19322
00019310: mov ax, word ptr [bp + 8]
00019313: mov word ptr [bp - 8], ax
00019316: mov word ptr [bp - 0xc], 0x28c
0001931B: mov word ptr [bp - 0xe], 0x313
00019320: jmp 0x19342
00019322: cmp word ptr [bp + 0xa], 3
00019326: je 0x19330
00019328: mov word ptr [bp - 2], 0xfc15
0001932D: jmp 0x1946b
00019330: mov ax, word ptr [bp + 6]
00019333: mov word ptr [bp - 8], ax
00019336: mov word ptr [bp - 0xc], 0x294
0001933B: mov word ptr [bp - 0xe], 0x315
00019340: jmp 0x19342
00019342: push ss
00019343: lea ax, [bp - 6]
00019346: push ax
00019347: lcall 0x185d, 0x46
0001934C: or ax, ax
0001934E: je 0x19356
00019350: mov word ptr [bp - 2], ax
00019353: jmp 0x1946b
00019356: mov ax, 0x1ab5
00019359: mov ds, ax
0001935B: push ds
0001935C: mov ax, 0x7138
0001935F: push ax
00019360: lcall 0x185d, 4
00019365: or ax, ax
00019367: je 0x1936f
00019369: mov word ptr [bp - 2], ax
0001936C: jmp 0x1946b
0001936F: lds si, ptr [bp + 0x10]
00019372: mov ax, word ptr [si]
00019374: mov word ptr [bp - 0x10], ax
00019377: lds si, ptr [bp + 0xc]
0001937A: mov ax, word ptr [si]
0001937C: mov word ptr [bp - 0x12], ax
0001937F: lds si, ptr [bp - 6]
00019382: mov ax, word ptr [si + 8]
00019385: mov word ptr [bp - 0xa], ax
00019388: mov ax, 0x1ab5
0001938B: mov es, ax
0001938D: mov di, 0x7138
00019390: test word ptr [si + 0x18], 0x10
00019395: je 0x193a7
00019397: mov bx, word ptr [si + 0x1e]
0001939A: sub bx, word ptr [bp - 8]
0001939D: les di, ptr es:[di + 0xa8]
000193A2: mov word ptr es:[di], bx
000193A5: jmp 0x193aa
000193A7: mov bx, word ptr [si + 0x20]
000193AA: mov word ptr [bp - 8], bx
000193AD: cmp word ptr [bp + 0xa], 0
000193B1: je 0x193b9
000193B3: cmp word ptr [bp + 0xa], 2
000193B7: je 0x193b9
000193B9: jmp word ptr [bp - 0xc]
000193BC: mov bx, word ptr [bp + 8]
000193BF: add word ptr [bp - 0x10], bx
000193C2: jmp 0x193dc
000193C4: mov bx, word ptr [bp - 8]
000193C7: sub word ptr [bp - 0x12], bx
000193CA: jmp 0x193dc
000193CC: mov bx, word ptr [bp - 8]
000193CF: sub word ptr [bp - 0x10], bx
000193D2: jmp 0x193dc
000193D4: mov bx, word ptr [bp + 6]
000193D7: add word ptr [bp - 0x12], bx
000193DA: jmp 0x193dc
000193DC: cmp word ptr [bp - 8], 0
000193E0: je 0x19438
000193E2: mov word ptr [bp - 0x18], 0
000193E7: mov ax, 0x1ab5
000193EA: mov ds, ax
000193EC: mov si, 0x71e4
000193EF: mov ax, word ptr [si + 0x1e]
000193F2: mov word ptr [bp - 0x14], ax
000193F5: mov word ptr [si + 0x1e], 0
000193FA: mov ax, word ptr [si + 0x20]
000193FD: mov word ptr [bp - 0x16], ax
00019400: mov word ptr [si + 0x20], 0
00019405: cmp word ptr [0x7132], 1
0001940A: jne 0x19417
0001940C: mov word ptr [bp - 0x18], 1
00019411: mov word ptr [0x7132], 0
00019417: mov ax, 1
0001941A: push ax
0001941B: push word ptr [bp - 0x10]
0001941E: push word ptr [bp - 0x12]
00019421: lcall 0x17b8, 0x342
00019426: mov ax, word ptr [bp - 0x18]
00019429: mov word ptr [0x7132], ax
0001942C: mov ax, word ptr [bp - 0x14]
0001942F: mov word ptr [si + 0x1e], ax
00019432: mov ax, word ptr [bp - 0x16]
00019435: mov word ptr [si + 0x20], ax
00019438: push word ptr [bp - 4]
0001943B: push word ptr [bp - 6]
0001943E: lcall 0x185d, 4
00019443: mov ax, word ptr [bp - 0x10]
00019446: mov bx, word ptr [bp - 0x12]
00019449: jmp word ptr [bp - 0xe]
0001944C: add ax, word ptr [bp - 8]
0001944F: jmp 0x1945a
00019451: jmp 0x1945a
00019453: jmp 0x1945a
00019455: add bx, word ptr [bp - 8]
00019458: jmp 0x1945a
0001945A: les di, ptr [bp + 0x10]
0001945D: mov word ptr es:[di], ax
00019460: les di, ptr [bp + 0xc]
00019463: mov word ptr es:[di], bx
00019466: mov word ptr [bp - 2], 0
0001946B: mov ax, word ptr [bp - 2]
0001946E: pop di
0001946F: pop si
00019470: pop es
00019471: pop ds
00019472: mov sp, bp
00019474: pop bp
00019475: retf 0xe
00019478: push bp
00019479: mov bp, sp
0001947B: sub sp, 4
0001947E: push ds
0001947F: push es
00019480: push si
00019481: push di
00019482: mov ax, 0x1ab5
00019485: mov ds, ax
00019487: mov si, 0x71e4
0001948A: mov ax, word ptr [bp + 0xc]
0001948D: mov bx, word ptr [bp + 0xa]
00019490: cmp word ptr [si + 0x10], 1
00019494: jne 0x1949d
00019496: lcall 0x1568, 0x11d
0001949B: jb 0x194c8
0001949D: mov si, 0x71e4
000194A0: cmp word ptr [si + 4], 1
000194A4: je 0x194ad
000194A6: mov word ptr [bp - 2], 0xfffa
000194AB: jmp 0x194c8
000194AD: mov dx, word ptr [si + 0xa]
000194B0: mov si, 0x720a
000194B3: push ax
000194B4: push bx
000194B5: push word ptr [bp + 8]
000194B8: push word ptr [bp + 6]
000194BB: mov ax, 8
000194BE: mul dx
000194C0: add si, ax
000194C2: lcall [si + 4]
000194C5: mov word ptr [bp - 2], ax
000194C8: mov ax, word ptr [bp - 2]
000194CB: pop di
000194CC: pop si
000194CD: pop es
000194CE: pop ds
000194CF: mov sp, bp
000194D1: pop bp
000194D2: retf 8
000194D5: push bp
000194D6: mov bp, sp
000194D8: sub sp, 4
000194DB: push ds
000194DC: push es
000194DD: push si
000194DE: push di
000194DF: mov ax, 0x1ab5
000194E2: mov ds, ax
000194E4: mov si, 0x71e4
000194E7: push word ptr [si + 8]
000194EA: push word ptr [si + 6]
000194ED: push word ptr [bp + 0xc]
000194F0: push word ptr [bp + 0xa]
000194F3: mov ax, 1
000194F6: push ax
000194F7: lcall 0xb08, 0xa
000194FC: or dx, dx
000194FE: jne 0x19505
00019500: mov word ptr [bp - 2], ax
00019503: jmp 0x19557
00019505: mov es, dx
00019507: mov di, ax
00019509: mov cx, word ptr [bp + 0xc]
0001950C: and cl, 7
0001950F: xor cl, 7
00019512: mov ah, 1
00019514: mov al, byte ptr [bp + 8]
00019517: and al, 1
00019519: shl ax, cl
0001951B: mov dx, word ptr [bp + 6]
0001951E: cmp dl, 0
00019521: je 0x1954a
00019523: cmp dl, 3
00019526: je 0x19541
00019528: cmp dl, 1
0001952B: je 0x19536
0001952D: test al, al
0001952F: je 0x19552
00019531: or byte ptr es:[di], al
00019534: jmp 0x19552
00019536: test al, al
00019538: jne 0x19552
0001953A: not ah
0001953C: and byte ptr es:[di], ah
0001953F: jmp 0x19552
00019541: test al, al
00019543: je 0x19552
00019545: xor byte ptr es:[di], al
00019548: jmp 0x19552
0001954A: not ah
0001954C: and byte ptr es:[di], ah
0001954F: or byte ptr es:[di], al
00019552: mov word ptr [bp - 2], 0
00019557: mov ax, word ptr [bp - 2]
0001955A: pop di
0001955B: pop si
0001955C: pop es
0001955D: pop ds
0001955E: mov sp, bp
00019560: pop bp
00019561: retf 8
00019564: push bp
00019565: mov bp, sp
00019567: sub sp, 4
0001956A: push ds
0001956B: push es
0001956C: push si
0001956D: push di
0001956E: mov ax, 0x1ab5
00019571: mov ds, ax
00019573: mov si, 0x71e4
00019576: push word ptr [si + 8]
00019579: push word ptr [si + 6]
0001957C: push word ptr [bp + 0xc]
0001957F: push word ptr [bp + 0xa]
00019582: mov ax, 1
00019585: push ax
00019586: lcall 0xb08, 0xa
0001958B: or dx, dx
0001958D: jne 0x19594
0001958F: mov word ptr [bp - 2], ax
00019592: jmp 0x195dc
00019594: mov es, dx
00019596: mov di, ax
00019598: mov ah, 3
0001959A: mov cx, word ptr [bp + 0xc]
0001959D: and cl, ah
0001959F: xor cl, ah
000195A1: shl cl, 1
000195A3: mov al, byte ptr [bp + 8]
000195A6: and al, ah
000195A8: shl ax, cl
000195AA: mov dx, word ptr [bp + 6]
000195AD: cmp dl, 0
000195B0: je 0x195cf
000195B2: cmp dl, 3
000195B5: je 0x195ca
000195B7: cmp dl, 1
000195BA: je 0x195c1
000195BC: or byte ptr es:[di], al
000195BF: jmp 0x195d7
000195C1: not ah
000195C3: or al, ah
000195C5: and byte ptr es:[di], al
000195C8: jmp 0x195d7
000195CA: xor byte ptr es:[di], al
000195CD: jmp 0x195d7
000195CF: not ah
000195D1: and byte ptr es:[di], ah
000195D4: or byte ptr es:[di], al
000195D7: mov word ptr [bp - 2], 0
000195DC: mov ax, word ptr [bp - 2]
000195DF: pop di
000195E0: pop si
000195E1: pop es
000195E2: pop ds
000195E3: mov sp, bp
000195E5: pop bp
000195E6: retf 8
000195E9: push bp
000195EA: mov bp, sp
000195EC: sub sp, 4
000195EF: push ds
000195F0: push es
000195F1: push si
000195F2: push di
000195F3: mov ax, 0x1ab5
000195F6: mov ds, ax
000195F8: mov si, 0x71e4
000195FB: push word ptr [si + 8]
000195FE: push word ptr [si + 6]
00019601: push word ptr [bp + 0xc]
00019604: push word ptr [bp + 0xa]
00019607: mov ax, 1
0001960A: push ax
0001960B: lcall 0xb08, 0xa
00019610: or dx, dx
00019612: jne 0x1961a
00019614: mov word ptr [bp - 2], ax
00019617: jmp 0x19711
0001961A: mov es, dx
0001961C: mov di, ax
0001961E: mov cx, word ptr [bp + 0xc]
00019621: and cl, 7
00019624: xor cl, 7
00019627: mov dx, word ptr [bp + 6]
0001962A: lds si, ptr [si + 6]
0001962D: mov word ptr [bp - 4], si
00019630: mov si, word ptr [si + 0x14]
00019633: mov ah, 1
00019635: mov al, byte ptr [bp + 8]
00019638: and al, 1
0001963A: shl ax, cl
0001963C: cmp dl, 0
0001963F: jne 0x19644
00019641: jmp 0x196e0
00019644: cmp dl, 3
00019647: jne 0x1964b
00019649: jmp 0x196b1
0001964B: cmp dl, 1
0001964E: je 0x19681
00019650: test al, al
00019652: jne 0x19657
00019654: jmp 0x1970c
00019657: mov bh, 4
00019659: mov bl, byte ptr [bp + 8]
0001965C: or byte ptr es:[di], al
0001965F: dec bh
00019661: je 0x1967e
00019663: shr bl, 1
00019665: mov al, bl
00019667: and al, 1
00019669: shl al, cl
0001966B: add di, si
0001966D: jae 0x1965c
0001966F: push ax
00019670: mov ax, word ptr [bp - 4]
00019673: mov dx, ds
00019675: stc 
00019676: lcall 0xb08, 0x17e
0001967B: pop ax
0001967C: jmp 0x1965c
0001967E: jmp 0x1970c
00019681: cmp al, 0xf
00019683: jne 0x19688
00019685: jmp 0x1970c
00019688: mov bh, 4
0001968A: mov bl, byte ptr [bp + 8]
0001968D: and byte ptr es:[di], al
00019690: dec bh
00019692: je 0x196af
00019694: shr bl, 1
00019696: mov al, bl
00019698: and al, 1
0001969A: shl al, cl
0001969C: add di, si
0001969E: jae 0x1968d
000196A0: push ax
000196A1: mov ax, word ptr [bp - 4]
000196A4: mov dx, ds
000196A6: stc 
000196A7: lcall 0xb08, 0x17e
000196AC: pop ax
000196AD: jmp 0x1968d
000196AF: jmp 0x1970c
000196B1: test al, al
000196B3: jne 0x196b7
000196B5: jmp 0x1970c
000196B7: mov bh, 4
000196B9: mov bl, byte ptr [bp + 8]
000196BC: xor byte ptr es:[di], al
000196BF: dec bh
000196C1: je 0x196de
000196C3: shr bl, 1
000196C5: mov al, bl
000196C7: and al, 1
000196C9: shl al, cl
000196CB: add di, si
000196CD: jae 0x196bc
000196CF: push ax
000196D0: mov ax, word ptr [bp - 4]
000196D3: mov dx, ds
000196D5: stc 
000196D6: lcall 0xb08, 0x17e
000196DB: pop ax
000196DC: jmp 0x196bc
000196DE: jmp 0x1970c
000196E0: not ah
000196E2: mov bh, 4
000196E4: mov bl, byte ptr [bp + 8]
000196E7: and byte ptr es:[di], ah
000196EA: or byte ptr es:[di], al
000196ED: dec bh
000196EF: je 0x1970c
000196F1: shr bl, 1
000196F3: mov al, bl
000196F5: and al, 1
000196F7: shl al, cl
000196F9: add di, si
000196FB: jae 0x196e7
000196FD: push ax
000196FE: mov ax, word ptr [bp - 4]
00019701: mov dx, ds
00019703: stc 
00019704: lcall 0xb08, 0x17e
00019709: pop ax
0001970A: jmp 0x196e7
0001970C: mov word ptr [bp - 2], 0
00019711: mov ax, word ptr [bp - 2]
00019714: pop di
00019715: pop si
00019716: pop es
00019717: pop ds
00019718: mov sp, bp
0001971A: pop bp
0001971B: retf 8
0001971E: push bp
0001971F: mov bp, sp
00019721: sub sp, 4
00019724: push ds
00019725: push es
00019726: push si
00019727: push di
00019728: mov ax, 0x1ab5
0001972B: mov ds, ax
0001972D: mov si, 0x71e4
00019730: push word ptr [si + 8]
00019733: push word ptr [si + 6]
00019736: push word ptr [bp + 0xc]
00019739: push word ptr [bp + 0xa]
0001973C: mov ax, 1
0001973F: push ax
00019740: lcall 0xb08, 0xa
00019745: or dx, dx
00019747: jne 0x1974e
00019749: mov word ptr [bp - 2], ax
0001974C: jmp 0x1977e
0001974E: mov es, dx
00019750: mov di, ax
00019752: mov al, byte ptr [bp + 8]
00019755: mov dx, word ptr [bp + 6]
00019758: cmp dl, 0
0001975B: je 0x19776
0001975D: cmp dl, 3
00019760: je 0x19771
00019762: cmp dl, 1
00019765: je 0x1976c
00019767: or byte ptr es:[di], al
0001976A: jmp 0x19779
0001976C: and byte ptr es:[di], al
0001976F: jmp 0x19779
00019771: xor byte ptr es:[di], al
00019774: jmp 0x19779
00019776: mov byte ptr es:[di], al
00019779: mov word ptr [bp - 2], 0
0001977E: mov ax, word ptr [bp - 2]
00019781: pop di
00019782: pop si
00019783: pop es
00019784: pop ds
00019785: mov sp, bp
00019787: pop bp
00019788: retf 8
0001978B: add byte ptr [di - 0x75], dl
0001978E: in al, dx
0001978F: sub sp, 2
00019792: push ds
00019793: push es
00019794: push si
00019795: push di
00019796: mov ax, 0x1ab5
00019799: mov ds, ax
0001979B: mov ax, word ptr [bp + 8]
0001979E: mov word ptr [0x712e], ax
000197A1: mov bx, word ptr [bp + 6]
000197A4: mov word ptr [0x7130], bx
000197A8: mov word ptr [0x7132], 1
000197AE: cmp ax, 1
000197B1: jne 0x197be
000197B3: cmp bx, 1
000197B6: jne 0x197be
000197B8: mov word ptr [0x7132], 0
000197BE: mov word ptr [bp - 2], 0
000197C3: mov ax, word ptr [bp - 2]
000197C6: pop di
000197C7: pop si
000197C8: pop es
000197C9: pop ds
000197CA: mov sp, bp
000197CC: pop bp
000197CD: retf 4
000197D0: push bp
000197D1: mov bp, sp
000197D3: sub sp, 0x82
000197D7: push ds
000197D8: push es
000197D9: push si
000197DA: push di
000197DB: mov ax, 0x1ab5
000197DE: mov ds, ax
000197E0: push ds
000197E1: cld 
000197E2: push dx
000197E3: mov dx, word ptr [bp + 0xc]
000197E6: mov ds, dx
000197E8: pop dx
000197E9: push dx
000197EA: mov dx, ss
000197EC: mov es, dx
000197EE: pop dx
000197EF: mov si, word ptr [bp + 0xa]
000197F2: mov di, bp
000197F4: sub di, 0x82
000197F8: mov word ptr [bp + 0xc], es
000197FB: mov word ptr [bp + 0xa], di
000197FE: movsb byte ptr es:[di], byte ptr [si]
000197FF: cmp byte ptr [si - 1], 0
00019803: jne 0x197fe
00019805: pop ds
00019806: push ss
00019807: lea ax, [bp - 0x82]
0001980B: push ax
0001980C: push word ptr [bp + 8]
0001980F: push word ptr [bp + 6]
00019812: push cs
00019813: call 0x19831
00019816: or ax, ax
00019818: je 0x1981f
0001981A: mov word ptr [bp - 2], ax
0001981D: jmp 0x19824
0001981F: mov word ptr [bp - 2], 0
00019824: mov ax, word ptr [bp - 2]
00019827: pop di
00019828: pop si
00019829: pop es
0001982A: pop ds
0001982B: mov sp, bp
0001982D: pop bp
0001982E: retf 8
00019831: push bp
00019832: mov bp, sp
00019834: sub sp, 0xa2
00019838: push ds
00019839: push es
0001983A: push si
0001983B: push di
0001983C: mov ax, 0x1ab5
0001983F: mov ds, ax
00019841: cmp byte ptr [0x712c], 1
00019846: je 0x1984d
00019848: lcall 0x15d6, 0x216
0001984D: cmp word ptr [0x7132], 1
00019852: jne 0x19866
00019854: mov ax, word ptr [0x712e]
00019857: mul word ptr [bp + 8]
0001985A: mov word ptr [bp + 8], ax
0001985D: mov ax, word ptr [0x7130]
00019860: mul word ptr [bp + 6]
00019863: mov word ptr [bp + 6], ax
00019866: lcall 0x98e, 0x35e
0001986B: cmp ax, 0
0001986E: jge 0x1989d
00019870: cmp ax, 0x28
00019873: jle 0x1987d
00019875: mov word ptr [bp - 2], 0xfffa
0001987A: jmp 0x19ab5
0001987D: mov ax, 0x1ab5
00019880: mov es, ax
00019882: mov di, 0x71e4
00019885: cmp word ptr es:[di + 4], 1
0001988A: je 0x19894
0001988C: mov word ptr [bp - 2], 0xfffa
00019891: jmp 0x19ab5
00019894: xor ax, ax
00019896: lcall 0x98e, 0x249
0001989B: xor ax, ax
0001989D: mov word ptr [bp - 0x54], ax
000198A0: push ax
000198A1: lcall 0x98e, 0x12a
000198A6: jae 0x198b0
000198A8: mov word ptr [bp - 2], 0xfc19
000198AD: jmp 0x19ab5
000198B0: mov word ptr [bp - 0x56], dx
000198B3: mov word ptr [bp - 0x58], ax
000198B6: mov ax, word ptr [bp - 0x54]
000198B9: push ax
000198BA: lcall 0x98e, 0xa6
000198BF: or ax, ax
000198C1: jge 0x198cb
000198C3: mov word ptr [bp - 2], 0xfc19
000198C8: jmp 0x19ab5
000198CB: mov word ptr [bp - 0x54], ax
000198CE: les di, ptr [bp - 0x58]
000198D1: push ss
000198D2: lea ax, [bp - 0x60]
000198D5: push ax
000198D6: lcall 0x185d, 0x46
000198DB: or ax, ax
000198DD: je 0x198e5
000198DF: mov word ptr [bp - 2], ax
000198E2: jmp 0x19ab5
000198E5: lds si, ptr [bp - 0x60]
000198E8: mov ax, word ptr [si + 0x10]
000198EB: mov word ptr [bp - 0x46], ax
000198EE: mov ax, word ptr [si + 0x16]
000198F1: mov word ptr [bp - 0x48], ax
000198F4: mov ax, word ptr [si + 0xc]
000198F7: mov word ptr [bp - 0x3e], ax
000198FA: mov ax, word ptr [si + 0xe]
000198FD: mov word ptr [bp - 0x40], ax
00019900: mov ax, word ptr [si + 0x1e]
00019903: mov word ptr [bp - 0x32], ax
00019906: mov ax, word ptr [si + 0x20]
00019909: mov word ptr [bp - 0x34], ax
0001990C: mov ax, word ptr [si + 0x22]
0001990F: mov word ptr [bp - 0x36], ax
00019912: mov ax, word ptr [si + 4]
00019915: mov word ptr [bp - 0x3a], ax
00019918: mov ax, word ptr [si + 6]
0001991B: mov word ptr [bp - 0x3c], ax
0001991E: mov ax, word ptr [si + 8]
00019921: mov word ptr [bp - 0x50], ax
00019924: xor ah, ah
00019926: mov al, byte ptr es:[di + 0x1e]
0001992A: mov word ptr [bp - 0xa2], ax
0001992E: mov ax, word ptr [si + 0x12]
00019931: mov word ptr [bp - 0x2a], ax
00019934: mov word ptr [bp - 0x86], ax
00019938: mov ax, word ptr [si + 0x14]
0001993B: mov word ptr [bp - 0x2c], ax
0001993E: mov word ptr [bp - 0x88], ax
00019942: mov ax, word ptr [si + 0x18]
00019945: mov word ptr [bp - 0x2e], ax
00019948: mov ax, word ptr [si + 0x1a]
0001994B: mov word ptr [bp - 0x28], ax
0001994E: mov ax, word ptr [si + 0xa]
00019951: mov word ptr [bp - 0x52], ax
00019954: mov ax, word ptr [si + 8]
00019957: mov word ptr [bp - 0x50], ax
0001995A: sub ax, word ptr [si + 0xe]
0001995D: add ax, word ptr [si + 0x1c]
00019960: mov word ptr [bp - 0x30], ax
00019963: test word ptr [si + 0x18], 0x10
00019968: jne 0x1996f
0001996A: mov word ptr [bp - 0x32], 0
0001996F: mov ax, 0x1ab5
00019972: mov es, ax
00019974: mov di, 0x71e4
00019977: mov ax, word ptr es:[di + 0xc]
0001997B: mov word ptr [bp - 0x5a], ax
0001997E: mov ax, word ptr es:[di + 0x10]
00019982: mov word ptr [bp - 0x92], ax
00019986: cmp word ptr es:[di + 0x1e], 0
0001998B: je 0x19994
0001998D: mov ax, word ptr es:[di + 0x1e]
00019991: add word ptr [bp + 8], ax
00019994: cmp word ptr es:[di + 0x20], 0
00019999: je 0x199a2
0001999B: mov ax, word ptr es:[di + 0x20]
0001999F: add word ptr [bp + 6], ax
000199A2: push ss
000199A3: lea ax, [bp - 0x4c]
000199A6: push ax
000199A7: push ss
000199A8: lea ax, [bp - 0x4e]
000199AB: push ax
000199AC: lcall 0x96b, 0x66
000199B1: or ax, ax
000199B3: je 0x199bb
000199B5: mov word ptr [bp - 2], ax
000199B8: jmp 0x19ab5
000199BB: lds si, ptr [bp - 0x60]
000199BE: lds si, ptr [si + 0xa8]
000199C2: push si
000199C3: les di, ptr [bp - 0x4c]
000199C6: mov cx, 0x200
000199C9: rep movsb byte ptr es:[di], byte ptr [si]
000199CB: pop si
000199CC: les di, ptr [bp + 0xa]
000199CF: cld 
000199D0: mov al, 0
000199D2: mov cx, 0x80
000199D5: repne scasb al, byte ptr es:[di]
000199D7: sub di, word ptr [bp + 0xa]
000199DA: dec di
000199DB: cmp di, 0
000199DE: ja 0x199e8
000199E0: mov word ptr [bp - 2], 0
000199E5: jmp 0x19ab5
000199E8: mov word ptr [bp - 0x42], di
000199EB: mov word ptr [bp - 0x84], di
000199EF: mov word ptr [bp - 0x44], 0
000199F4: les di, ptr [bp + 0xa]
000199F7: mov cx, word ptr [bp - 0x42]
000199FA: mov al, byte ptr es:[di]
000199FD: xor ah, ah
000199FF: cmp ax, word ptr [bp - 0x3a]
00019A02: jb 0x19a28
00019A04: cmp ax, word ptr [bp - 0x3c]
00019A07: ja 0x19a28
00019A09: mov ax, word ptr [bp - 0x32]
00019A0C: cmp ax, 0
00019A0F: jne 0x19a25
00019A11: mov bl, byte ptr es:[di]
00019A14: xor bh, bh
00019A16: sub bx, word ptr [bp - 0x3a]
00019A19: shl bx, 1
00019A1B: mov ax, word ptr [bx + si]
00019A1D: cmp cx, 1
00019A20: je 0x19a25
00019A22: add ax, word ptr [bp - 0x34]
00019A25: add word ptr [bp - 0x44], ax
00019A28: inc di
00019A29: loop 0x199fa
00019A2B: mov ax, word ptr [bp - 0x42]
00019A2E: cmp ax, 1
00019A31: jbe 0x19a47
00019A33: push word ptr [bp - 0x5e]
00019A36: push word ptr [bp - 0x60]
00019A39: lcall 0x1754, 0xa
00019A3E: or ax, ax
00019A40: je 0x19a47
00019A42: mov word ptr [bp - 2], ax
00019A45: jmp 0x19ab5
00019A47: push cs
00019A48: call 0x19b03
00019A4B: les di, ptr [bp + 0xa]
00019A4E: mov al, byte ptr es:[di]
00019A51: xor ah, ah
00019A53: mov word ptr [bp - 0x78], ax
00019A56: push word ptr [bp - 0x78]
00019A59: lcall 0x1865, 0x1cd
00019A5E: cmp ax, 0
00019A61: jle 0x19aaa
00019A63: push ds
00019A64: push si
00019A65: push es
00019A66: push di
00019A67: lcall 0x15d6, 8
00019A6C: pop di
00019A6D: pop es
00019A6E: pop si
00019A6F: pop ds
00019A70: cmp ax, 0
00019A73: je 0x19a7a
00019A75: cmp ax, 0xfc16
00019A78: je 0x19a7a
00019A7A: cmp word ptr [bp - 0x42], 1
00019A7E: jbe 0x19aaa
00019A80: push ss
00019A81: lea ax, [bp - 0x8a]
00019A85: push ax
00019A86: push ss
00019A87: lea ax, [bp - 0x8c]
00019A8B: push ax
00019A8C: push word ptr [bp - 0x48]
00019A8F: push word ptr [bp - 0x8e]
00019A93: push word ptr [bp - 0x90]
00019A97: lcall 0x1754, 0x18b
00019A9C: mov ax, word ptr [bp - 0x8a]
00019AA0: mov word ptr [bp + 8], ax
00019AA3: mov ax, word ptr [bp - 0x8c]
00019AA7: mov word ptr [bp + 6], ax
00019AAA: inc di
00019AAB: dec word ptr [bp - 0x42]
00019AAE: jne 0x19a4e
00019AB0: mov word ptr [bp - 2], 0
00019AB5: mov ax, word ptr [bp - 2]
00019AB8: pop di
00019AB9: pop si
00019ABA: pop es
00019ABB: pop ds
00019ABC: mov sp, bp
00019ABE: pop bp
00019ABF: retf 8
00019AC2: push bp
00019AC3: mov bp, sp
00019AC5: sub sp, 4
00019AC8: push ds
00019AC9: push es
00019ACA: push si
00019ACB: push di
00019ACC: mov ax, 0x1ab5
00019ACF: mov ds, ax
00019AD1: mov al, byte ptr [bp + 0xa]
00019AD4: mov ah, 0
00019AD6: mov word ptr [bp - 4], ax
00019AD9: push ss
00019ADA: lea ax, [bp - 4]
00019ADD: push ax
00019ADE: push word ptr [bp + 8]
00019AE1: push word ptr [bp + 6]
00019AE4: push cs
00019AE5: call 0x19831
00019AE8: or ax, ax
00019AEA: je 0x19af1
00019AEC: mov word ptr [bp - 2], ax
00019AEF: jmp 0x19af6
00019AF1: mov word ptr [bp - 2], 0
00019AF6: mov ax, word ptr [bp - 2]
00019AF9: pop di
00019AFA: pop si
00019AFB: pop es
00019AFC: pop ds
00019AFD: mov sp, bp
00019AFF: pop bp
00019B00: retf 6
00019B03: mov bx, word ptr [bp - 0x46]
00019B06: cmp word ptr [bp - 0x48], 0
00019B0A: je 0x19b0e
00019B0C: jmp 0x19b5c
00019B0E: cmp bx, 0x108
00019B12: jne 0x19b16
00019B14: jmp 0x19b59
00019B16: cmp bh, 2
00019B19: jne 0x19b25
00019B1B: mov ax, word ptr [bp - 0x44]
00019B1E: shr ax, 1
00019B20: sub word ptr [bp + 8], ax
00019B23: jmp 0x19b32
00019B25: cmp bh, 4
00019B28: jne 0x19b32
00019B2A: mov ax, word ptr [bp - 0x44]
00019B2D: sub word ptr [bp + 8], ax
00019B30: jmp 0x19b32
00019B32: cmp bl, 1
00019B35: jne 0x19b3f
00019B37: mov ax, word ptr [bp - 0x50]
00019B3A: sub word ptr [bp + 6], ax
00019B3D: jmp 0x19b59
00019B3F: cmp bl, 2
00019B42: jne 0x19b4c
00019B44: mov ax, word ptr [bp - 0x3e]
00019B47: sub word ptr [bp + 6], ax
00019B4A: jmp 0x19b59
00019B4C: cmp bl, 4
00019B4F: jne 0x19b59
00019B51: mov ax, word ptr [bp - 0x50]
00019B54: shr ax, 1
00019B56: sub word ptr [bp + 6], ax
00019B59: jmp 0x19c55
00019B5C: cmp word ptr [bp - 0x48], 1
00019B60: jne 0x19baf
00019B62: cmp bx, 0x108
00019B66: jne 0x19b6a
00019B68: jmp 0x19bac
00019B6A: cmp bh, 2
00019B6D: jne 0x19b79
00019B6F: mov ax, word ptr [bp - 0x44]
00019B72: shr ax, 1
00019B74: add word ptr [bp + 6], ax
00019B77: jmp 0x19b84
00019B79: cmp bh, 4
00019B7C: jne 0x19b84
00019B7E: mov ax, word ptr [bp - 0x44]
00019B81: add word ptr [bp + 6], ax
00019B84: cmp bl, 1
00019B87: jne 0x19b92
00019B89: mov ax, word ptr [bp - 0x50]
00019B8C: dec ax
00019B8D: sub word ptr [bp + 8], ax
00019B90: jmp 0x19bac
00019B92: cmp bl, 2
00019B95: jne 0x19b9f
00019B97: mov ax, word ptr [bp - 0x3e]
00019B9A: sub word ptr [bp + 8], ax
00019B9D: jmp 0x19bac
00019B9F: cmp bl, 4
00019BA2: jne 0x19bac
00019BA4: mov ax, word ptr [bp - 0x50]
00019BA7: shr ax, 1
00019BA9: sub word ptr [bp + 8], ax
00019BAC: jmp 0x19c55
00019BAF: cmp word ptr [bp - 0x48], 2
00019BB3: jne 0x19c02
00019BB5: cmp bx, 0x101
00019BB9: jne 0x19bbd
00019BBB: jmp 0x19c00
00019BBD: cmp bh, 2
00019BC0: jne 0x19bcc
00019BC2: mov ax, word ptr [bp - 0x44]
00019BC5: shr ax, 1
00019BC7: add word ptr [bp + 8], ax
00019BCA: jmp 0x19bd9
00019BCC: cmp bh, 4
00019BCF: jne 0x19bd9
00019BD1: mov ax, word ptr [bp - 0x44]
00019BD4: add word ptr [bp + 8], ax
00019BD7: jmp 0x19bd9
00019BD9: cmp bl, 8
00019BDC: jne 0x19be6
00019BDE: mov ax, word ptr [bp - 0x50]
00019BE1: sub word ptr [bp + 6], ax
00019BE4: jmp 0x19c00
00019BE6: cmp bl, 2
00019BE9: jne 0x19bf3
00019BEB: mov ax, word ptr [bp - 0x40]
00019BEE: sub word ptr [bp + 6], ax
00019BF1: jmp 0x19c00
00019BF3: cmp bl, 4
00019BF6: jne 0x19c00
00019BF8: mov ax, word ptr [bp - 0x50]
00019BFB: shr ax, 1
00019BFD: sub word ptr [bp + 6], ax
00019C00: jmp 0x19c55
00019C02: cmp word ptr [bp - 0x48], 3
00019C06: jne 0x19c55
00019C08: cmp bx, 0x101
00019C0C: jne 0x19c10
00019C0E: jmp 0x19c53
00019C10: cmp bh, 2
00019C13: jne 0x19c1f
00019C15: mov ax, word ptr [bp - 0x44]
00019C18: shr ax, 1
00019C1A: sub word ptr [bp + 6], ax
00019C1D: jmp 0x19c2c
00019C1F: cmp bh, 4
00019C22: jne 0x19c2c
00019C24: mov ax, word ptr [bp - 0x44]
00019C27: sub word ptr [bp + 6], ax
00019C2A: jmp 0x19c2c
00019C2C: cmp bl, 8
00019C2F: jne 0x19c39
00019C31: mov ax, word ptr [bp - 0x50]
00019C34: sub word ptr [bp + 8], ax
00019C37: jmp 0x19c53
00019C39: cmp bl, 2
00019C3C: jne 0x19c46
00019C3E: mov ax, word ptr [bp - 0x40]
00019C41: sub word ptr [bp + 8], ax
00019C44: jmp 0x19c53
00019C46: cmp bl, 4
00019C49: jne 0x19c55
00019C4B: mov ax, word ptr [bp - 0x50]
00019C4E: shr ax, 1
00019C50: sub word ptr [bp + 8], ax
00019C53: jmp 0x19c55
00019C55: retf 
00019C56: les di, ptr [bp - 0x58]
00019C59: mov bx, word ptr [bp + 8]
00019C5C: mov ax, word ptr [bp + 6]
00019C5F: lcall es:[di + 0x26]
00019C63: mov di, bx
00019C65: mov bx, word ptr [bp - 0x10]
00019C68: sub bx, word ptr [bp - 0x7a]
00019C6B: mov word ptr [bp - 0x1c], bx
00019C6E: mov dx, word ptr [bp - 0x12]
00019C71: sub dx, word ptr [bp - 0xe]
00019C74: mov bx, word ptr [bp - 0x9c]
00019C78: cld 
00019C79: mov ax, word ptr [bp - 0x28]
00019C7C: cmp ax, 0
00019C7F: jne 0x19c88
00019C81: mov word ptr [bp - 0x5c], 0x94
00019C86: jmp 0x19ca7
00019C88: cmp ax, 3
00019C8B: jne 0x19c94
00019C8D: mov word ptr [bp - 0x5c], 0x85
00019C92: jmp 0x19ca7
00019C94: cmp ax, 1
00019C97: jne 0x19ca0
00019C99: mov word ptr [bp - 0x5c], 0x8a
00019C9E: jmp 0x19ca7
00019CA0: mov word ptr [bp - 0x5c], 0x8f
00019CA5: jmp 0x19ca7
00019CA7: mov cx, word ptr [bp - 0x7a]
00019CAA: mov bh, bl
00019CAC: push cx
00019CAD: cmp cx, 8
00019CB0: jbe 0x19cb5
00019CB2: mov cx, 8
00019CB5: lodsb al, byte ptr [si]
00019CB6: mov ah, al
00019CB8: mov al, byte ptr [bp - 0x2a]
00019CBB: stc 
00019CBC: rcl bh, 1
00019CBE: jb 0x19cc4
00019CC0: shl ah, 1
00019CC2: jmp 0x19ce7
00019CC4: shl ah, 1
00019CC6: jb 0x19cd2
00019CC8: test word ptr [bp - 0x2e], 0x20
00019CCD: jne 0x19ce7
00019CCF: mov al, byte ptr [bp - 0x2c]
00019CD2: jmp word ptr [bp - 0x5c]
00019CD5: xor byte ptr es:[di], al
00019CD8: jmp 0x19ce7
00019CDA: and byte ptr es:[di], al
00019CDD: jmp 0x19ce7
00019CDF: or byte ptr es:[di], al
00019CE2: jmp 0x19ce7
00019CE4: mov byte ptr es:[di], al
00019CE7: inc di
00019CE8: loop 0x19cb8
00019CEA: pop cx
00019CEB: cmp cx, 8
00019CEE: jbe 0x19cf5
00019CF0: sub cx, 8
00019CF3: jmp 0x19cac
00019CF5: add si, dx
00019CF7: jae 0x19d10
00019CF9: push ax
00019CFA: push dx
00019CFB: clc 
00019CFC: mov dx, word ptr [bp - 0x62]
00019CFF: mov ax, word ptr [bp - 0x64]
00019D02: lcall 0xb08, 0x17e
00019D07: pop dx
00019D08: pop ax
00019D09: jae 0x19d10
00019D0B: mov word ptr [bp - 2], ax
00019D0E: jmp 0x19d40
00019D10: add di, word ptr [bp - 0x1c]
00019D13: dec word ptr [bp - 0xc]
00019D16: jne 0x19ca7
00019D18: test word ptr [bp - 0x2e], 5
00019D1D: jne 0x19d21
00019D1F: jmp 0x19d3b
00019D21: lds si, ptr [bp - 0x60]
00019D24: test word ptr [bp - 0x2e], 4
00019D29: je 0x19d2f
00019D2B: push cs
00019D2C: call 0x19d41
00019D2F: test word ptr [bp - 0x2e], 1
00019D34: je 0x19d3b
00019D36: lcall 0x15d6, 0x2f0
00019D3B: mov word ptr [bp - 2], 0
00019D40: retf 
00019D41: cmp word ptr [bp - 0x48], 0
00019D45: je 0x19d4a
00019D47: jmp 0x19de9
00019D4A: mov ax, 0x1ab5
00019D4D: mov es, ax
00019D4F: mov di, 0x71e4
00019D52: cmp word ptr es:[di + 0x10], 1
00019D57: jne 0x19d6e
00019D59: mov ax, word ptr [bp - 0x8c]
00019D5D: add ax, word ptr [bp - 0x30]
00019D60: cmp ax, word ptr es:[di + 0x14]
00019D64: jb 0x19d6c
00019D66: cmp ax, word ptr es:[di + 0x18]
00019D6A: jbe 0x19d6e
00019D6C: jmp 0x19de9
00019D6E: les di, ptr [bp - 0x58]
00019D71: mov bx, word ptr [bp + 8]
00019D74: mov ax, word ptr [bp - 0x8c]
00019D78: add ax, word ptr [bp - 0x30]
00019D7B: lcall es:[di + 0x26]
00019D7F: mov di, bx
00019D81: mov bx, word ptr [bp - 0x10]
00019D84: sub bx, word ptr [bp - 0x7a]
00019D87: mov word ptr [bp - 0x1c], bx
00019D8A: mov dx, word ptr [bp - 0x12]
00019D8D: sub dx, word ptr [bp - 0xe]
00019D90: mov bx, word ptr [bp - 0x9c]
00019D94: cld 
00019D95: mov ax, word ptr [bp - 0x28]
00019D98: cmp ax, 0
00019D9B: jne 0x19da4
00019D9D: mov word ptr [bp - 0x5c], 0x193
00019DA2: jmp 0x19dc1
00019DA4: cmp ax, 3
00019DA7: jne 0x19db0
00019DA9: mov word ptr [bp - 0x5c], 0x184
00019DAE: jmp 0x19dc1
00019DB0: cmp ax, 1
00019DB3: jne 0x19dbc
00019DB5: mov word ptr [bp - 0x5c], 0x189
00019DBA: jmp 0x19dc1
00019DBC: mov word ptr [bp - 0x5c], 0x18e
00019DC1: mov cx, word ptr [bp - 0x7a]
00019DC4: mov bh, bl
00019DC6: mov cx, word ptr [bp - 0x7a]
00019DC9: mov al, byte ptr [bp - 0x2a]
00019DCC: stc 
00019DCD: rcl bh, 1
00019DCF: jae 0x19de6
00019DD1: jmp word ptr [bp - 0x5c]
00019DD4: xor byte ptr es:[di], al
00019DD7: jmp 0x19de6
00019DD9: and byte ptr es:[di], al
00019DDC: jmp 0x19de6
00019DDE: or byte ptr es:[di], al
00019DE1: jmp 0x19de6
00019DE3: mov byte ptr es:[di], al
00019DE6: inc di
00019DE7: loop 0x19dcc
00019DE9: retf 
00019DEA: les di, ptr [bp - 0x58]
00019DED: mov bx, word ptr [bp + 8]
00019DF0: mov ax, word ptr [bp + 6]
00019DF3: lcall es:[di + 0x26]
00019DF7: mov di, bx
00019DF9: mov byte ptr [bp - 0x14], dl
00019DFC: push word ptr [bp - 2]
00019DFF: push word ptr [bp - 0x14]
00019E02: lcall 0xa36, 0xe
00019E07: mov bx, word ptr [bp - 0x10]
00019E0A: sub bx, word ptr [bp - 0x7a]
00019E0D: mov word ptr [bp - 0x1c], bx
00019E10: mov dx, word ptr [bp - 0x12]
00019E13: sub dx, word ptr [bp - 0xe]
00019E16: mov bx, word ptr [bp - 0x9c]
00019E1A: cld 
00019E1B: mov ax, word ptr [bp - 0x28]
00019E1E: cmp ax, 0
00019E21: jne 0x19e2a
00019E23: mov word ptr [bp - 0x5c], 0x97
00019E28: jmp 0x19e49
00019E2A: cmp ax, 3
00019E2D: jne 0x19e36
00019E2F: mov word ptr [bp - 0x5c], 0x9c
00019E34: jmp 0x19e49
00019E36: cmp ax, 1
00019E39: jne 0x19e42
00019E3B: mov word ptr [bp - 0x5c], 0xa1
00019E40: jmp 0x19e49
00019E42: mov word ptr [bp - 0x5c], 0xa6
00019E47: jmp 0x19e49
00019E49: mov cx, word ptr [bp - 0x7a]
00019E4C: mov bh, bl
00019E4E: push cx
00019E4F: cmp cx, 8
00019E52: jbe 0x19e57
00019E54: mov cx, 8
00019E57: lodsb al, byte ptr [si]
00019E58: mov ah, al
00019E5A: mov al, byte ptr [bp - 0x2a]
00019E5D: stc 
00019E5E: rcl bh, 1
00019E60: jb 0x19e66
00019E62: shl ah, 1
00019E64: jmp 0x19e8b
00019E66: shl ah, 1
00019E68: jb 0x19e74
00019E6A: test word ptr [bp - 0x2e], 0x20
00019E6F: jne 0x19e8b
00019E71: mov al, byte ptr [bp - 0x2c]
00019E74: jmp word ptr [bp - 0x5c]
00019E77: mov byte ptr es:[di], al
00019E7A: jmp 0x19e8b
00019E7C: xor byte ptr es:[di], al
00019E7F: jmp 0x19e8b
00019E81: and byte ptr es:[di], al
00019E84: jmp 0x19e8b
00019E86: or byte ptr es:[di], al
00019E89: jmp 0x19e8b
00019E8B: inc di
00019E8C: jne 0x19e9c
00019E8E: inc byte ptr [bp - 0x14]
00019E91: push word ptr [bp - 2]
00019E94: push word ptr [bp - 0x14]
00019E97: lcall 0xa36, 0x63
00019E9C: loop 0x19e5a
00019E9E: pop cx
00019E9F: cmp cx, 8
00019EA2: jbe 0x19ea9
00019EA4: sub cx, 8
00019EA7: jmp 0x19e4e
00019EA9: add si, dx
00019EAB: jae 0x19ec4
00019EAD: push ax
00019EAE: push dx
00019EAF: clc 
00019EB0: mov dx, word ptr [bp - 0x62]
00019EB3: mov ax, word ptr [bp - 0x64]
00019EB6: lcall 0xb08, 0x17e
00019EBB: pop dx
00019EBC: pop ax
00019EBD: jae 0x19ec4
00019EBF: mov word ptr [bp - 2], ax
00019EC2: jmp 0x19f11
00019EC4: add di, word ptr [bp - 0x1c]
00019EC7: jae 0x19ed7
00019EC9: inc byte ptr [bp - 0x14]
00019ECC: push word ptr [bp - 2]
00019ECF: push word ptr [bp - 0x14]
00019ED2: lcall 0xa36, 0x63
00019ED7: dec word ptr [bp - 0xc]
00019EDA: je 0x19edf
00019EDC: jmp 0x19e49
00019EDF: test word ptr [bp - 0x2e], 5
00019EE4: jne 0x19ee8
00019EE6: jmp 0x19f04
00019EE8: lds si, ptr [bp - 0x60]
00019EEB: test word ptr [bp - 0x2e], 4
00019EF0: je 0x19ef6
00019EF2: push cs
00019EF3: call 0x19f12
00019EF6: test word ptr [bp - 0x2e], 1
00019EFB: je 0x19f04
00019EFD: lcall 0x15d6, 0x2f0
00019F02: jmp 0x19f0c
00019F04: push word ptr [bp - 2]
00019F07: lcall 0xa36, 0x1a5
00019F0C: mov word ptr [bp - 2], 0
00019F11: retf 
00019F12: cmp word ptr [bp - 0x48], 0
00019F16: je 0x19f49
00019F18: jmp 0x19fe1
00019F1B: cmp word ptr [bp - 0x28], 0
00019F1F: je 0x19f24
00019F21: jmp 0x19fe1
00019F24: mov ax, 0x1ab5
00019F27: mov es, ax
00019F29: mov di, 0x71e4
00019F2C: cmp word ptr es:[di + 0x10], 1
00019F31: jne 0x19f49
00019F33: mov ax, word ptr [bp - 0x8c]
00019F37: add ax, word ptr [bp - 0x30]
00019F3A: cmp ax, word ptr es:[di + 0x14]
00019F3E: jb 0x19f46
00019F40: cmp ax, word ptr es:[di + 0x18]
00019F44: jbe 0x19f49
00019F46: jmp 0x19fe1
00019F49: les di, ptr [bp - 0x58]
00019F4C: mov bx, word ptr [bp + 8]
00019F4F: mov ax, word ptr [bp + 6]
00019F52: add ax, word ptr [bp - 0x30]
00019F55: lcall es:[di + 0x26]
00019F59: mov di, bx
00019F5B: mov byte ptr [bp - 0x14], dl
00019F5E: push word ptr [bp - 2]
00019F61: push word ptr [bp - 0x14]
00019F64: lcall 0xa36, 0xe
00019F69: mov bx, word ptr [bp - 0x10]
00019F6C: sub bx, word ptr [bp - 0x7a]
00019F6F: mov word ptr [bp - 0x1c], bx
00019F72: mov dx, word ptr [bp - 0x12]
00019F75: sub dx, word ptr [bp - 0xe]
00019F78: mov bx, word ptr [bp - 0x9c]
00019F7C: cld 
00019F7D: mov ax, word ptr [bp - 0x28]
00019F80: cmp ax, 0
00019F83: jne 0x19f8c
00019F85: mov word ptr [bp - 0x5c], 0x1eb
00019F8A: jmp 0x19fa9
00019F8C: cmp ax, 3
00019F8F: jne 0x19f98
00019F91: mov word ptr [bp - 0x5c], 0x1dc
00019F96: jmp 0x19fa9
00019F98: cmp ax, 1
00019F9B: jne 0x19fa4
00019F9D: mov word ptr [bp - 0x5c], 0x1e1
00019FA2: jmp 0x19fa9
00019FA4: mov word ptr [bp - 0x5c], 0x1e6
00019FA9: mov cx, word ptr [bp - 0x7a]
00019FAC: mov bh, bl
00019FAE: mov cx, word ptr [bp - 0x7a]
00019FB1: mov al, byte ptr [bp - 0x2a]
00019FB4: stc 
00019FB5: rcl bh, 1
00019FB7: jae 0x19fce
00019FB9: jmp word ptr [bp - 0x5c]
00019FBC: xor byte ptr es:[di], al
00019FBF: jmp 0x19fce
00019FC1: and byte ptr es:[di], al
00019FC4: jmp 0x19fce
00019FC6: or byte ptr es:[di], al
00019FC9: jmp 0x19fce
00019FCB: mov byte ptr es:[di], al
00019FCE: inc di
00019FCF: jne 0x19fdf
00019FD1: inc byte ptr [bp - 0x14]
00019FD4: push word ptr [bp - 2]
00019FD7: push word ptr [bp - 0x14]
00019FDA: lcall 0xa36, 0x63
00019FDF: loop 0x19fb4
00019FE1: retf 
00019FE2: push bp
00019FE3: mov bp, sp
00019FE5: sub sp, 6
00019FE8: push ds
00019FE9: push es
00019FEA: push si
00019FEB: push di
00019FEC: mov ax, 0x1ab5
00019FEF: mov ds, ax
00019FF1: push ss
00019FF2: lea ax, [bp - 6]
00019FF5: push ax
00019FF6: lcall 0x185d, 0x46
00019FFB: or ax, ax
00019FFD: je 0x1a004
00019FFF: mov word ptr [bp - 2], ax
0001A002: jmp 0x1a01a
0001A004: les di, ptr [bp - 6]
0001A007: mov ax, word ptr [bp + 8]
0001A00A: mov word ptr es:[di + 0x12], ax
0001A00E: mov ax, word ptr [bp + 6]
0001A011: mov word ptr es:[di + 0x14], ax
0001A015: mov word ptr [bp - 2], 0
0001A01A: mov ax, word ptr [bp - 2]
0001A01D: pop di
0001A01E: pop si
0001A01F: pop es
0001A020: pop ds
0001A021: mov sp, bp
0001A023: pop bp
0001A024: retf 4
0001A027: push bp
0001A028: mov bp, sp
0001A02A: sub sp, 6
0001A02D: push ds
0001A02E: push es
0001A02F: push si
0001A030: push di
0001A031: mov ax, 0x1ab5
0001A034: mov ds, ax
0001A036: push ss
0001A037: lea ax, [bp - 6]
0001A03A: push ax
0001A03B: lcall 0x185d, 0x46
0001A040: or ax, ax
0001A042: je 0x1a049
0001A044: mov word ptr [bp - 2], ax
0001A047: jmp 0x1a05f
0001A049: les di, ptr [bp - 6]
0001A04C: mov ax, word ptr [bp + 8]
0001A04F: mov bx, word ptr [bp + 6]
0001A052: xchg al, ah
0001A054: or ax, bx
0001A056: mov word ptr es:[di + 0x10], ax
0001A05A: mov word ptr [bp - 2], 0
0001A05F: mov ax, word ptr [bp - 2]
0001A062: pop di
0001A063: pop si
0001A064: pop es
0001A065: pop ds
0001A066: mov sp, bp
0001A068: pop bp
0001A069: retf 4
0001A06C: push bp
0001A06D: mov bp, sp
0001A06F: sub sp, 6
0001A072: push ds
0001A073: push es
0001A074: push si
0001A075: push di
0001A076: mov ax, 0x1ab5
0001A079: mov ds, ax
0001A07B: push ss
0001A07C: lea ax, [bp - 6]
0001A07F: push ax
0001A080: lcall 0x185d, 0x46
0001A085: or ax, ax
0001A087: je 0x1a08e
0001A089: mov word ptr [bp - 2], ax
0001A08C: jmp 0x1a09d
0001A08E: les di, ptr [bp - 6]
0001A091: mov ax, word ptr [bp + 6]
0001A094: mov word ptr es:[di + 0x18], ax
0001A098: mov word ptr [bp - 2], 0
0001A09D: mov ax, word ptr [bp - 2]
0001A0A0: pop di
0001A0A1: pop si
0001A0A2: pop es
0001A0A3: pop ds
0001A0A4: mov sp, bp
0001A0A6: pop bp
0001A0A7: retf 2
0001A0AA: push bp
0001A0AB: mov bp, sp
0001A0AD: sub sp, 6
0001A0B0: push ds
0001A0B1: push es
0001A0B2: push si
0001A0B3: push di
0001A0B4: mov ax, 0x1ab5
0001A0B7: mov ds, ax
0001A0B9: push ss
0001A0BA: lea ax, [bp - 6]
0001A0BD: push ax
0001A0BE: lcall 0x185d, 0x46
0001A0C3: or ax, ax
0001A0C5: je 0x1a0cc
0001A0C7: mov word ptr [bp - 2], ax
0001A0CA: jmp 0x1a0db
0001A0CC: les di, ptr [bp - 6]
0001A0CF: mov ax, word ptr [bp + 6]
0001A0D2: mov word ptr es:[di + 0x1e], ax
0001A0D6: mov word ptr [bp - 2], 0
0001A0DB: mov ax, word ptr [bp - 2]
0001A0DE: pop di
0001A0DF: pop si
0001A0E0: pop es
0001A0E1: pop ds
0001A0E2: mov sp, bp
0001A0E4: pop bp
0001A0E5: retf 2
0001A0E8: push bp
0001A0E9: mov bp, sp
0001A0EB: sub sp, 6
0001A0EE: push ds
0001A0EF: push es
0001A0F0: push si
0001A0F1: push di
0001A0F2: mov ax, 0x1ab5
0001A0F5: mov ds, ax
0001A0F7: push ss
0001A0F8: lea ax, [bp - 6]
0001A0FB: push ax
0001A0FC: lcall 0x185d, 0x46
0001A101: or ax, ax
0001A103: je 0x1a10a
0001A105: mov word ptr [bp - 2], ax
0001A108: jmp 0x1a119
0001A10A: les di, ptr [bp - 6]
0001A10D: mov ax, word ptr [bp + 6]
0001A110: mov word ptr es:[di + 0x20], ax
0001A114: mov word ptr [bp - 2], 0
0001A119: mov ax, word ptr [bp - 2]
0001A11C: pop di
0001A11D: pop si
0001A11E: pop es
0001A11F: pop ds
0001A120: mov sp, bp
0001A122: pop bp
0001A123: retf 2
0001A126: push bp
0001A127: mov bp, sp
0001A129: sub sp, 6
0001A12C: push ds
0001A12D: push es
0001A12E: push si
0001A12F: push di
0001A130: mov ax, 0x1ab5
0001A133: mov ds, ax
0001A135: push ss
0001A136: lea ax, [bp - 6]
0001A139: push ax
0001A13A: lcall 0x185d, 0x46
0001A13F: or ax, ax
0001A141: je 0x1a148
0001A143: mov word ptr [bp - 2], ax
0001A146: jmp 0x1a157
0001A148: les di, ptr [bp - 6]
0001A14B: mov ax, word ptr [bp + 6]
0001A14E: mov word ptr es:[di + 0x1c], ax
0001A152: mov word ptr [bp - 2], 0
0001A157: mov ax, word ptr [bp - 2]
0001A15A: pop di
0001A15B: pop si
0001A15C: pop es
0001A15D: pop ds
0001A15E: mov sp, bp
0001A160: pop bp
0001A161: retf 2
0001A164: push bp
0001A165: mov bp, sp
0001A167: sub sp, 6
0001A16A: push ds
0001A16B: push es
0001A16C: push si
0001A16D: push di
0001A16E: mov ax, 0x1ab5
0001A171: mov ds, ax
0001A173: push ss
0001A174: lea ax, [bp - 6]
0001A177: push ax
0001A178: lcall 0x185d, 0x46
0001A17D: or ax, ax
0001A17F: je 0x1a186
0001A181: mov word ptr [bp - 2], ax
0001A184: jmp 0x1a195
0001A186: les di, ptr [bp - 6]
0001A189: mov ax, word ptr [bp + 6]
0001A18C: mov word ptr es:[di + 0x1a], ax
0001A190: mov word ptr [bp - 2], 0
0001A195: mov ax, word ptr [bp - 2]
0001A198: pop di
0001A199: pop si
0001A19A: pop es
0001A19B: pop ds
0001A19C: mov sp, bp
0001A19E: pop bp
0001A19F: retf 2
0001A1A2: push bp
0001A1A3: mov bp, sp
0001A1A5: sub sp, 2
0001A1A8: push ds
0001A1A9: push es
0001A1AA: push si
0001A1AB: push di
0001A1AC: mov ax, 0x1ab5
0001A1AF: mov ds, ax
0001A1B1: les di, ptr [bp + 0xa]
0001A1B4: mov word ptr es:[di], 2
0001A1B9: les di, ptr [bp + 6]
0001A1BC: mov word ptr es:[di], 3
0001A1C1: mov word ptr [bp - 2], 0
0001A1C6: mov ax, word ptr [bp - 2]
0001A1C9: pop di
0001A1CA: pop si
0001A1CB: pop es
0001A1CC: pop ds
0001A1CD: mov sp, bp
0001A1CF: pop bp
0001A1D0: retf 8
0001A1D3: add byte ptr [di - 0x75], dl
0001A1D6: in al, dx
0001A1D7: sub sp, 2
0001A1DA: push ds
0001A1DB: push es
0001A1DC: push si
0001A1DD: push di
0001A1DE: mov ax, 0x1ab5
0001A1E1: mov ds, ax
0001A1E3: lds si, ptr [bp + 6]
0001A1E6: cmp word ptr [si], 0xca10
0001A1EA: je 0x1a1f3
0001A1EC: mov word ptr [bp - 2], 0xfc17
0001A1F1: jmp 0x1a209
0001A1F3: mov ax, 0x1ab5
0001A1F6: mov es, ax
0001A1F8: mov di, 0x71e4
0001A1FB: mov ax, ds
0001A1FD: mov word ptr es:[di + 2], ax
0001A201: mov word ptr es:[di], si
0001A204: mov word ptr [bp - 2], 0
0001A209: mov ax, word ptr [bp - 2]
0001A20C: pop di
0001A20D: pop si
0001A20E: pop es
0001A20F: pop ds
0001A210: mov sp, bp
0001A212: pop bp
0001A213: retf 4
0001A216: push bp
0001A217: mov bp, sp
0001A219: sub sp, 2
0001A21C: push ds
0001A21D: push es
0001A21E: push si
0001A21F: push di
0001A220: mov ax, 0x1ab5
0001A223: mov ds, ax
0001A225: mov ax, 0x1ab5
0001A228: mov ds, ax
0001A22A: mov si, 0x71e4
0001A22D: les di, ptr [si]
0001A22F: cmp word ptr es:[di], 0xca10
0001A234: je 0x1a23d
0001A236: mov word ptr [bp - 2], 0xfc17
0001A23B: jmp 0x1a251
0001A23D: les di, ptr [bp + 6]
0001A240: mov ax, word ptr [si]
0001A242: mov word ptr es:[di], ax
0001A245: mov ax, word ptr [si + 2]
0001A248: mov word ptr es:[di + 2], ax
0001A24C: mov word ptr [bp - 2], 0
0001A251: mov ax, word ptr [bp - 2]
0001A254: pop di
0001A255: pop si
0001A256: pop es
0001A257: pop ds
0001A258: mov sp, bp
0001A25A: pop bp
0001A25B: retf 4
0001A25E: push bp
0001A25F: mov bp, sp
0001A261: sub sp, 2
0001A264: push ds
0001A265: push es
0001A266: push si
0001A267: push di
0001A268: mov ax, 0x1ab5
0001A26B: mov ds, ax
0001A26D: les di, ptr [bp + 6]
0001A270: cld 
0001A271: mov al, 0
0001A273: mov cx, 0x80
0001A276: repne scasb al, byte ptr es:[di]
0001A278: sub di, word ptr [bp + 6]
0001A27B: dec di
0001A27C: mov word ptr [bp - 2], di
0001A27F: mov ax, word ptr [bp - 2]
0001A282: pop di
0001A283: pop si
0001A284: pop es
0001A285: pop ds
0001A286: mov sp, bp
0001A288: pop bp
0001A289: retf 4
0001A28C: push bp
0001A28D: mov bp, sp
0001A28F: sub sp, 0x82
0001A293: push ds
0001A294: push es
0001A295: push si
0001A296: push di
0001A297: mov ax, 0x1ab5
0001A29A: mov ds, ax
0001A29C: push ds
0001A29D: cld 
0001A29E: push dx
0001A29F: mov dx, word ptr [bp + 8]
0001A2A2: mov ds, dx
0001A2A4: pop dx
0001A2A5: push dx
0001A2A6: mov dx, ss
0001A2A8: mov es, dx
0001A2AA: pop dx
0001A2AB: mov si, word ptr [bp + 6]
0001A2AE: mov di, bp
0001A2B0: sub di, 0x82
0001A2B4: mov word ptr [bp + 8], es
0001A2B7: mov word ptr [bp + 6], di
0001A2BA: movsb byte ptr es:[di], byte ptr [si]
0001A2BB: cmp byte ptr [si - 1], 0
0001A2BF: jne 0x1a2ba
0001A2C1: pop ds
0001A2C2: mov ax, word ptr [bp + 8]
0001A2C5: push ax
0001A2C6: mov ax, word ptr [bp + 6]
0001A2C9: push ax
0001A2CA: push cs
0001A2CB: call 0x1a25e
0001A2CE: mov word ptr [bp - 2], ax
0001A2D1: mov ax, word ptr [bp - 2]
0001A2D4: pop di
0001A2D5: pop si
0001A2D6: pop es
0001A2D7: pop ds
0001A2D8: mov sp, bp
0001A2DA: pop bp
0001A2DB: retf 4
0001A2DE: push bp
0001A2DF: mov bp, sp
0001A2E1: sub sp, 0x16
0001A2E4: push ds
0001A2E5: push es
0001A2E6: push si
0001A2E7: push di
0001A2E8: mov ax, 0x1ab5
0001A2EB: mov ds, ax
0001A2ED: push ss
0001A2EE: lea ax, [bp - 0x16]
0001A2F1: push ax
0001A2F2: lcall 0x185d, 0x46
0001A2F7: or ax, ax
0001A2F9: je 0x1a301
0001A2FB: mov word ptr [bp - 2], ax
0001A2FE: jmp 0x1a3b5
0001A301: lds si, ptr [bp - 0x16]
0001A304: mov ax, word ptr [si + 4]
0001A307: mov word ptr [bp - 4], ax
0001A30A: mov ax, word ptr [si + 6]
0001A30D: mov word ptr [bp - 6], ax
0001A310: mov ax, word ptr [si + 0x20]
0001A313: mov word ptr [bp - 0xa], ax
0001A316: mov word ptr [bp - 8], 0
0001A31B: test word ptr [si + 0x18], 0x10
0001A320: je 0x1a328
0001A322: mov ax, word ptr [si + 0x1e]
0001A325: mov word ptr [bp - 8], ax
0001A328: push ss
0001A329: lea ax, [bp - 0x10]
0001A32C: push ax
0001A32D: push ss
0001A32E: lea ax, [bp - 0x12]
0001A331: push ax
0001A332: lcall 0x96b, 0x66
0001A337: or ax, ax
0001A339: je 0x1a340
0001A33B: mov word ptr [bp - 2], ax
0001A33E: jmp 0x1a3b5
0001A340: lds si, ptr [bp + 6]
0001A343: les di, ptr [bp - 0x10]
0001A346: push di
0001A347: cld 
0001A348: mov cx, 0x200
0001A34B: rep movsb byte ptr es:[di], byte ptr [si]
0001A34D: pop di
0001A34E: mov ax, word ptr [bp + 8]
0001A351: push ax
0001A352: mov ax, word ptr [bp + 6]
0001A355: push ax
0001A356: push cs
0001A357: call 0x1a25e
0001A35A: cmp ax, 0
0001A35D: ja 0x1a366
0001A35F: mov word ptr [bp - 2], 0
0001A364: jmp 0x1a3b5
0001A366: mov word ptr [bp - 0xc], ax
0001A369: mov word ptr [bp - 2], 0
0001A36E: lds si, ptr [si + 0xa8]
0001A372: les di, ptr [bp + 6]
0001A375: mov cx, word ptr [bp - 0xc]
0001A378: lds si, ptr [bp - 0x16]
0001A37B: lds si, ptr [si + 0xa8]
0001A37F: mov al, byte ptr es:[di]
0001A382: xor ah, ah
0001A384: cmp ax, word ptr [bp - 4]
0001A387: jb 0x1a3b2
0001A389: cmp ax, word ptr [bp - 6]
0001A38C: ja 0x1a3b2
0001A38E: mov ax, word ptr [bp - 8]
0001A391: cmp ax, 0
0001A394: jne 0x1a3af
0001A396: mov bl, byte ptr es:[di]
0001A399: xor bh, bh
0001A39B: sub bx, word ptr [bp - 4]
0001A39E: shl bx, 1
0001A3A0: mov ax, word ptr [bx + si]
0001A3A2: cmp cx, 1
0001A3A5: je 0x1a3af
0001A3A7: cmp ax, 0
0001A3AA: jle 0x1a3b2
0001A3AC: add ax, word ptr [bp - 0xa]
0001A3AF: add word ptr [bp - 2], ax
0001A3B2: inc di
0001A3B3: loop 0x1a37f
0001A3B5: mov ax, word ptr [bp - 2]
0001A3B8: pop di
0001A3B9: pop si
0001A3BA: pop es
0001A3BB: pop ds
0001A3BC: mov sp, bp
0001A3BE: pop bp
0001A3BF: retf 4
0001A3C2: push bp
0001A3C3: mov bp, sp
0001A3C5: sub sp, 0x82
0001A3C9: push ds
0001A3CA: push es
0001A3CB: push si
0001A3CC: push di
0001A3CD: mov ax, 0x1ab5
0001A3D0: mov ds, ax
0001A3D2: push ds
0001A3D3: cld 
0001A3D4: push dx
0001A3D5: mov dx, word ptr [bp + 8]
0001A3D8: mov ds, dx
0001A3DA: pop dx
0001A3DB: push dx
0001A3DC: mov dx, ss
0001A3DE: mov es, dx
0001A3E0: pop dx
0001A3E1: mov si, word ptr [bp + 6]
0001A3E4: mov di, bp
0001A3E6: sub di, 0x82
0001A3EA: mov word ptr [bp + 8], es
0001A3ED: mov word ptr [bp + 6], di
0001A3F0: movsb byte ptr es:[di], byte ptr [si]
0001A3F1: cmp byte ptr [si - 1], 0
0001A3F5: jne 0x1a3f0
0001A3F7: pop ds
0001A3F8: push ss
0001A3F9: lea ax, [bp - 0x82]
0001A3FD: push ax
0001A3FE: push cs
0001A3FF: call 0x1a2de
0001A402: or ax, ax
0001A404: je 0x1a40b
0001A406: mov word ptr [bp - 2], ax
0001A409: jmp 0x1a410
0001A40B: mov word ptr [bp - 2], 0
0001A410: mov ax, word ptr [bp - 2]
0001A413: pop di
0001A414: pop si
0001A415: pop es
0001A416: pop ds
0001A417: mov sp, bp
0001A419: pop bp
0001A41A: retf 4
0001A41D: push bp
0001A41E: mov bp, sp
0001A420: sub sp, 6
0001A423: push ds
0001A424: push es
0001A425: push si
0001A426: push di
0001A427: mov ax, 0x1ab5
0001A42A: mov ds, ax
0001A42C: push ss
0001A42D: lea ax, [bp - 6]
0001A430: push ax
0001A431: lcall 0x185d, 0x46
0001A436: or ax, ax
0001A438: je 0x1a43f
0001A43A: mov word ptr [bp - 2], ax
0001A43D: jmp 0x1a466
0001A43F: lds si, ptr [bp - 6]
0001A442: mov bl, byte ptr [bp + 6]
0001A445: xor bh, bh
0001A447: cmp bx, word ptr [si + 4]
0001A44A: jb 0x1a451
0001A44C: cmp bx, word ptr [si + 6]
0001A44F: jbe 0x1a458
0001A451: mov word ptr [bp - 2], 0xfc16
0001A456: jmp 0x1a466
0001A458: sub bx, word ptr [si + 4]
0001A45B: shl bx, 1
0001A45D: lds si, ptr [si + 0xa8]
0001A461: mov ax, word ptr [bx + si]
0001A463: mov word ptr [bp - 2], ax
0001A466: mov ax, word ptr [bp - 2]
0001A469: pop di
0001A46A: pop si
0001A46B: pop es
0001A46C: pop ds
0001A46D: mov sp, bp
0001A46F: pop bp
0001A470: retf 2
0001A473: push bp
0001A474: mov bp, sp
0001A476: sub sp, 6
0001A479: push ds
0001A47A: push es
0001A47B: push si
0001A47C: push di
0001A47D: mov ax, 0x1ab5
0001A480: mov ds, ax
0001A482: push ss
0001A483: lea ax, [bp - 6]
0001A486: push ax
0001A487: lcall 0x185d, 0x46
0001A48C: or ax, ax
0001A48E: je 0x1a495
0001A490: mov word ptr [bp - 2], ax
0001A493: jmp 0x1a49e
0001A495: lds si, ptr [bp - 6]
0001A498: mov ax, word ptr [si + 8]
0001A49B: mov word ptr [bp - 2], ax
0001A49E: mov ax, word ptr [bp - 2]
0001A4A1: pop di
0001A4A2: pop si
0001A4A3: pop es
0001A4A4: pop ds
0001A4A5: mov sp, bp
0001A4A7: pop bp
0001A4A8: retf 
0001A4A9: add byte ptr [di - 0x75], dl
0001A4AC: in al, dx
0001A4AD: sub sp, 2
0001A4B0: push ds
0001A4B1: push es
0001A4B2: push si
0001A4B3: push di
0001A4B4: mov ax, 0x1ab5
0001A4B7: mov ds, ax
0001A4B9: mov si, 0x71e4
0001A4BC: les di, ptr [bp + 6]
0001A4BF: mov ax, word ptr [si + 6]
0001A4C2: mov word ptr es:[di], ax
0001A4C5: mov ax, word ptr [si + 8]
0001A4C8: mov word ptr es:[di + 2], ax
0001A4CC: mov word ptr [bp - 2], 0
0001A4D1: mov ax, word ptr [bp - 2]
0001A4D4: pop di
0001A4D5: pop si
0001A4D6: pop es
0001A4D7: pop ds
0001A4D8: mov sp, bp
0001A4DA: pop bp
0001A4DB: retf 4
0001A4DE: push bp
0001A4DF: mov bp, sp
0001A4E1: sub sp, 2
0001A4E4: push ds
0001A4E5: push es
0001A4E6: push si
0001A4E7: push di
0001A4E8: mov ax, 0x1ab5
0001A4EB: mov ds, ax
0001A4ED: mov ax, 0x1ab5
0001A4F0: mov es, ax
0001A4F2: mov di, 0x71e4
0001A4F5: lds si, ptr [bp + 6]
0001A4F8: cmp word ptr [si], 0xca00
0001A4FC: je 0x1a505
0001A4FE: mov word ptr [bp - 2], 0xffe4
0001A503: jmp 0x1a52e
0001A505: mov al, byte ptr [si + 0x12]
0001A508: mov bl, byte ptr [si + 0x13]
0001A50B: mul bl
0001A50D: cmp ax, 2
0001A510: jbe 0x1a51a
0001A512: shr ax, 1
0001A514: cmp ax, 4
0001A517: je 0x1a51a
0001A519: inc ax
0001A51A: dec ax
0001A51B: mov word ptr es:[di + 0xa], ax
0001A51F: mov ax, ds
0001A521: mov word ptr es:[di + 8], ax
0001A525: mov word ptr es:[di + 6], si
0001A529: mov word ptr [bp - 2], 0
0001A52E: mov ax, word ptr [bp - 2]
0001A531: pop di
0001A532: pop si
0001A533: pop es
0001A534: pop ds
0001A535: mov sp, bp
0001A537: pop bp
0001A538: retf 4
0001A53B: push bp
0001A53C: mov bp, sp
0001A53E: sub sp, 2
0001A541: push ds
0001A542: push es
0001A543: push si
0001A544: push di
0001A545: mov ax, 0x1ab5
0001A548: mov ds, ax
0001A54A: mov si, 0x71e4
0001A54D: mov ax, word ptr [si + 4]
0001A550: mov word ptr [bp - 2], ax
0001A553: mov ax, word ptr [bp - 2]
0001A556: pop di
0001A557: pop si
0001A558: pop es
0001A559: pop ds
0001A55A: mov sp, bp
0001A55C: pop bp
0001A55D: retf 
0001A55E: push bp
0001A55F: mov bp, sp
0001A561: sub sp, 2
0001A564: push ds
0001A565: push es
0001A566: push si
0001A567: push di
0001A568: mov ax, 0x1ab5
0001A56B: mov ds, ax
0001A56D: mov si, 0x71e4
0001A570: mov ax, word ptr [bp + 6]
0001A573: cmp ax, 1
0001A576: je 0x1a582
0001A578: mov word ptr [si + 4], 0
0001A57D: mov word ptr [bp - 2], 0
0001A582: les di, ptr [si + 6]
0001A585: cmp word ptr es:[di], 0xca00
0001A58A: je 0x1a593
0001A58C: mov word ptr [bp - 2], 0xffe4
0001A591: jmp 0x1a59b
0001A593: mov word ptr [si + 4], ax
0001A596: mov word ptr [bp - 2], 0
0001A59B: mov ax, word ptr [bp - 2]
0001A59E: pop di
0001A59F: pop si
0001A5A0: pop es
0001A5A1: pop ds
0001A5A2: mov sp, bp
0001A5A4: pop bp
0001A5A5: retf 2
0001A5A8: mov word ptr [bp - 0x66], 0
0001A5AD: mov word ptr [bp - 0x70], 0
0001A5B2: push ss
0001A5B3: lea ax, [bp - 0x6e]
0001A5B6: push ax
0001A5B7: lcall 0x188a, 0xa
0001A5BC: lds si, ptr [bp - 0x64]
0001A5BF: les di, ptr [bp - 0x6e]
0001A5C2: mov ax, word ptr [si + 0x16]
0001A5C5: cmp ax, word ptr es:[di + 0x16]
0001A5C9: jne 0x1a5ef
0001A5CB: cmp ax, 0
0001A5CE: je 0x1a5ef
0001A5D0: mov bx, 0x8000
0001A5D3: mov word ptr [si + 0x28], 0
0001A5D8: mov word ptr [si + 0x2a], 2
0001A5DD: mov word ptr [bp - 0x66], bx
0001A5E0: mov word ptr es:[di + 0x28], 2
0001A5E6: mov word ptr es:[di + 0x2a], 2
0001A5EC: mov word ptr [bp - 0x70], bx
0001A5EF: mov ax, word ptr [bp - 0x24]
0001A5F2: mov word ptr [bp - 0x7a], ax
0001A5F5: mov word ptr [bp - 0x8e], ax
0001A5F9: mov ax, word ptr [bp - 0x50]
0001A5FC: mov word ptr [bp - 0x7c], ax
0001A5FF: mov word ptr [bp - 0x90], ax
0001A603: mov ax, word ptr [bp - 0x22]
0001A606: xor bx, bx
0001A608: cmp word ptr [bp - 0x48], 0
0001A60C: je 0x1a65f
0001A60E: cmp word ptr [bp - 0x48], 2
0001A612: je 0x1a64b
0001A614: mov ax, word ptr [bp - 0x24]
0001A617: mov word ptr [bp - 0x7c], ax
0001A61A: mov word ptr [bp - 0x90], ax
0001A61E: mov bx, word ptr [bp - 0x50]
0001A621: mov word ptr [bp - 0x7a], bx
0001A624: mov word ptr [bp - 0x8e], bx
0001A628: cmp word ptr [bp - 0x48], 1
0001A62C: je 0x1a637
0001A62E: cmp word ptr [bp - 0x48], 3
0001A632: je 0x1a65a
0001A634: jmp 0x1a76d
0001A637: xor ax, ax
0001A639: mov bx, word ptr [bp - 0x22]
0001A63C: cmp word ptr [bp - 0x84], 1
0001A641: je 0x1a65f
0001A643: mov dx, word ptr [bp - 0x24]
0001A646: sub word ptr [bp + 6], dx
0001A649: jmp 0x1a65f
0001A64B: cmp word ptr [bp - 0x84], 1
0001A650: je 0x1a65f
0001A652: mov dx, word ptr [bp - 0x24]
0001A655: sub word ptr [bp + 8], dx
0001A658: jmp 0x1a65f
0001A65A: xor ax, ax
0001A65C: mov bx, word ptr [bp - 0x22]
0001A65F: push ds
0001A660: push si
0001A661: push ax
0001A662: push bx
0001A663: mov ax, 0
0001A666: push ax
0001A667: lcall 0xb08, 0xa
0001A66C: or dx, dx
0001A66E: jne 0x1a676
0001A670: mov word ptr [bp - 2], ax
0001A673: jmp 0x1a76d
0001A676: mov ds, dx
0001A678: mov si, ax
0001A67A: les di, ptr [bp - 0x6e]
0001A67D: mov ax, word ptr es:[di + 0x14]
0001A681: mov word ptr [bp - 0x10], ax
0001A684: mov ax, word ptr [bp - 0x7a]
0001A687: mov bx, ax
0001A689: shr ax, 1
0001A68B: shr ax, 1
0001A68D: shr ax, 1
0001A68F: mov word ptr [bp - 0xe], ax
0001A692: shl ax, 1
0001A694: shl ax, 1
0001A696: shl ax, 1
0001A698: cmp ax, bx
0001A69A: je 0x1a69f
0001A69C: inc word ptr [bp - 0xe]
0001A69F: mov ax, word ptr [bp - 0x7c]
0001A6A2: mov word ptr [bp - 0xc], ax
0001A6A5: mov dx, word ptr [bp - 0x12]
0001A6A8: sub dx, word ptr [bp - 0xe]
0001A6AB: mov ax, word ptr [bp + 8]
0001A6AE: mov word ptr [bp - 0x72], ax
0001A6B1: mov word ptr [bp - 0x8a], ax
0001A6B5: mov ax, word ptr [bp + 6]
0001A6B8: mov word ptr [bp - 0x74], ax
0001A6BB: mov word ptr [bp - 0x8c], ax
0001A6BF: cld 
0001A6C0: mov cx, word ptr [bp - 0x7a]
0001A6C3: push cx
0001A6C4: cmp cx, 8
0001A6C7: jbe 0x1a6cc
0001A6C9: mov cx, 8
0001A6CC: xor ax, ax
0001A6CE: lodsb al, byte ptr [si]
0001A6CF: mov word ptr [bp - 0x76], ax
0001A6D2: xor bx, bx
0001A6D4: mov bl, byte ptr [bp - 0x2a]
0001A6D7: mov ax, word ptr [bp - 0x76]
0001A6DA: shl al, 1
0001A6DC: mov word ptr [bp - 0x76], ax
0001A6DF: jb 0x1a6eb
0001A6E1: test word ptr [bp - 0x2e], 0x20
0001A6E6: jne 0x1a6fe
0001A6E8: mov bl, byte ptr [bp - 0x2c]
0001A6EB: push cx
0001A6EC: push dx
0001A6ED: push word ptr [bp - 0x72]
0001A6F0: push word ptr [bp - 0x74]
0001A6F3: push bx
0001A6F4: push word ptr [bp - 0x28]
0001A6F7: lcall 0x1787, 8
0001A6FC: pop dx
0001A6FD: pop cx
0001A6FE: inc word ptr [bp - 0x72]
0001A701: loop 0x1a6d2
0001A703: pop cx
0001A704: cmp cx, 8
0001A707: jbe 0x1a70e
0001A709: sub cx, 8
0001A70C: jmp 0x1a6c3
0001A70E: add si, dx
0001A710: jb 0x1a71d
0001A712: cmp word ptr [bp - 0x66], 0
0001A716: je 0x1a732
0001A718: cmp si, word ptr [bp - 0x66]
0001A71B: jb 0x1a732
0001A71D: push dx
0001A71E: clc 
0001A71F: mov dx, word ptr [bp - 0x62]
0001A722: mov ax, word ptr [bp - 0x64]
0001A725: lcall 0xb08, 0x17e
0001A72A: pop dx
0001A72B: jae 0x1a732
0001A72D: mov word ptr [bp - 2], ax
0001A730: jmp 0x1a76d
0001A732: inc word ptr [bp - 0x74]
0001A735: mov ax, word ptr [bp + 8]
0001A738: mov word ptr [bp - 0x72], ax
0001A73B: dec word ptr [bp - 0xc]
0001A73E: je 0x1a743
0001A740: jmp 0x1a6c0
0001A743: test word ptr [bp - 0x2e], 5
0001A748: jne 0x1a74c
0001A74A: jmp 0x1a768
0001A74C: lds si, ptr [bp - 0x60]
0001A74F: test word ptr [bp - 0x2e], 4
0001A754: jne 0x1a758
0001A756: jmp 0x1a75c
0001A758: push cs
0001A759: call 0x1a78a
0001A75C: test word ptr [bp - 0x2e], 1
0001A761: je 0x1a768
0001A763: lcall 0x15d6, 0x2f0
0001A768: mov word ptr [bp - 2], 0
0001A76D: lds si, ptr [bp - 0x64]
0001A770: les di, ptr [bp - 0x6e]
0001A773: mov word ptr [si + 0x28], 0
0001A778: mov word ptr [si + 0x2a], 4
0001A77D: mov word ptr es:[di + 0x28], 0
0001A783: mov word ptr es:[di + 0x2a], 4
0001A789: retf 
0001A78A: cmp word ptr [bp - 0x48], 0
0001A78E: jne 0x1a7b2
0001A790: mov ax, word ptr [bp + 8]
0001A793: mov bx, word ptr [bp + 6]
0001A796: add bx, word ptr [bp - 0x30]
0001A799: mov cx, word ptr [bp - 0x7a]
0001A79C: push ax
0001A79D: push bx
0001A79E: push cx
0001A79F: push ax
0001A7A0: push bx
0001A7A1: push word ptr [bp - 0x2a]
0001A7A4: push word ptr [bp - 0x28]
0001A7A7: lcall 0x1787, 8
0001A7AC: pop cx
0001A7AD: pop bx
0001A7AE: pop ax
0001A7AF: inc ax
0001A7B0: loop 0x1a79c
0001A7B2: retf 
0001A7B3: add byte ptr [di - 0x75], dl
0001A7B6: in al, dx
0001A7B7: sub sp, 2
0001A7BA: push ds
0001A7BB: push es
0001A7BC: push si
0001A7BD: push di
0001A7BE: mov ax, 0x1ab5
0001A7C1: mov ds, ax
0001A7C3: mov si, 0x71e4
0001A7C6: les di, ptr [bp + 0x12]
0001A7C9: mov ax, word ptr [si + 0x1e]
0001A7CC: mov word ptr es:[di], ax
0001A7CF: les di, ptr [bp + 0xe]
0001A7D2: mov ax, word ptr [si + 0x20]
0001A7D5: mov word ptr es:[di], ax
0001A7D8: les di, ptr [bp + 0xa]
0001A7DB: mov ax, word ptr [si + 0x22]
0001A7DE: mov word ptr es:[di], ax
0001A7E1: les di, ptr [bp + 6]
0001A7E4: mov ax, word ptr [si + 0x24]
0001A7E7: mov word ptr es:[di], ax
0001A7EA: mov word ptr [bp - 2], 0
0001A7EF: mov ax, word ptr [bp - 2]
0001A7F2: pop di
0001A7F3: pop si
0001A7F4: pop es
0001A7F5: pop ds
0001A7F6: mov sp, bp
0001A7F8: pop bp
0001A7F9: retf 0x10
0001A7FC: push bp
0001A7FD: mov bp, sp
0001A7FF: sub sp, 2
0001A802: push ds
0001A803: push es
0001A804: push si
0001A805: push di
0001A806: mov ax, 0x1ab5
0001A809: mov ds, ax
0001A80B: mov si, 0x71e4
0001A80E: cmp word ptr [bp + 0xc], 0
0001A812: jge 0x1a81b
0001A814: mov word ptr [bp - 2], 0xffe5
0001A819: jmp 0x1a86b
0001A81B: cmp word ptr [bp + 0xa], 0
0001A81F: jge 0x1a828
0001A821: mov word ptr [bp - 2], 0xffe5
0001A826: jmp 0x1a86b
0001A828: mov ax, word ptr [bp + 8]
0001A82B: cmp ax, word ptr [bp + 0xc]
0001A82E: jge 0x1a837
0001A830: mov word ptr [bp - 2], 0xffe5
0001A835: jmp 0x1a86b
0001A837: mov ax, word ptr [bp + 6]
0001A83A: cmp ax, word ptr [bp + 0xa]
0001A83D: jge 0x1a846
0001A83F: mov word ptr [bp - 2], 0xffe5
0001A844: jmp 0x1a86b
0001A846: mov ax, word ptr [bp + 0xc]
0001A849: mov word ptr [si + 0x1e], ax
0001A84C: mov ax, word ptr [bp + 0xa]
0001A84F: mov word ptr [si + 0x20], ax
0001A852: mov ax, word ptr [bp + 8]
0001A855: mov word ptr [si + 0x22], ax
0001A858: mov ax, word ptr [bp + 6]
0001A85B: mov word ptr [si + 0x24], ax
0001A85E: xor ax, ax
0001A860: mov word ptr [si + 0x1a], ax
0001A863: mov word ptr [si + 0x1c], ax
0001A866: mov word ptr [bp - 2], 0
0001A86B: mov ax, word ptr [bp - 2]
0001A86E: pop di
0001A86F: pop si
0001A870: pop es
0001A871: pop ds
0001A872: mov sp, bp
0001A874: pop bp
0001A875: retf 8
0001A878: push bp
0001A879: mov bp, sp
0001A87B: sub sp, 0x90
0001A87F: push ds
0001A880: push es
0001A881: push si
0001A882: push di
0001A883: mov ax, 0x1ab5
0001A886: mov ds, ax
0001A888: push word ptr [bp + 0x14]
0001A88B: push word ptr [bp + 0x12]
0001A88E: push word ptr [bp + 0x10]
0001A891: push word ptr [bp + 0xe]
0001A894: push ds
0001A895: mov si, 0x43bf
0001A898: push si
0001A899: lcall 0x80c, 0x56c
0001A89E: or ax, ax
0001A8A0: jge 0x1a8a8
0001A8A2: mov word ptr [bp - 2], ax
0001A8A5: jmp 0x1a935
0001A8A8: mov word ptr [bp - 4], ax
0001A8AB: push ax
0001A8AC: push word ptr [si + 0x10]
0001A8AF: push word ptr [si + 0xe]
0001A8B2: mov ax, 0
0001A8B5: push ax
0001A8B6: push ss
0001A8B7: lea ax, [bp - 0xe]
0001A8BA: push ax
0001A8BB: push ss
0001A8BC: lea ax, [bp - 0x10]
0001A8BF: push ax
0001A8C0: lcall 0x96b, 0x166
0001A8C5: or ax, ax
0001A8C7: je 0x1a8ce
0001A8C9: mov word ptr [bp - 2], ax
0001A8CC: jmp 0x1a935
0001A8CE: lds si, ptr [bp - 0xe]
0001A8D1: mov ax, word ptr [si + 0x24]
0001A8D4: mov word ptr [bp - 6], ax
0001A8D7: mov ax, word ptr [si + 0x26]
0001A8DA: mov word ptr [bp - 8], ax
0001A8DD: mov ax, word ptr [si + 0x52]
0001A8E0: les di, ptr [bp + 6]
0001A8E3: mov word ptr es:[di], ax
0001A8E6: add si, word ptr [si + 0x48]
0001A8E9: jae 0x1a8f2
0001A8EB: mov word ptr [bp - 2], 0xfc18
0001A8F0: jmp 0x1a92a
0001A8F2: mov cx, word ptr [bp - 8]
0001A8F5: sub cx, word ptr [bp - 6]
0001A8F8: inc cx
0001A8F9: xor dx, dx
0001A8FB: mov ax, word ptr [si + 2]
0001A8FE: sub ax, word ptr [si]
0001A900: mov bx, ax
0001A902: shr ax, 1
0001A904: shr ax, 1
0001A906: shr ax, 1
0001A908: and bx, 7
0001A90B: je 0x1a90e
0001A90D: inc ax
0001A90E: shl ax, 1
0001A910: shl ax, 1
0001A912: shl ax, 1
0001A914: add dx, ax
0001A916: inc si
0001A917: inc si
0001A918: loop 0x1a8fb
0001A91A: les di, ptr [bp + 0xa]
0001A91D: mov word ptr es:[di], dx
0001A920: mov word ptr [bp - 2], 0
0001A925: lcall 0x96b, 0x1c0
0001A92A: push word ptr [bp + 0x14]
0001A92D: push word ptr [bp + 0x12]
0001A930: lcall 0x80c, 0x640
0001A935: mov ax, word ptr [bp - 2]
0001A938: pop di
0001A939: pop si
0001A93A: pop es
0001A93B: pop ds
0001A93C: mov sp, bp
0001A93E: pop bp
0001A93F: retf 0x10
0001A942: push bp
0001A943: mov bp, sp
0001A945: sub sp, 2
0001A948: push ds
0001A949: push es
0001A94A: push si
0001A94B: push di
0001A94C: mov ax, 0x1ab5
0001A94F: mov ds, ax
0001A951: mov ax, 0x54e4
0001A954: push ds
0001A955: push ax
0001A956: push word ptr [bp + 0x10]
0001A959: push word ptr [bp + 0xe]
0001A95C: push word ptr [bp + 0xc]
0001A95F: push word ptr [bp + 0xa]
0001A962: push word ptr [bp + 8]
0001A965: push word ptr [bp + 6]
0001A968: push cs
0001A969: call 0x1a878
0001A96C: mov word ptr [bp - 2], ax
0001A96F: mov ax, word ptr [bp - 2]
0001A972: pop di
0001A973: pop si
0001A974: pop es
0001A975: pop ds
0001A976: mov sp, bp
0001A978: pop bp
0001A979: retf 0xc
0001A97C: push bp
0001A97D: mov bp, sp
0001A97F: sub sp, 6
0001A982: push ds
0001A983: push es
0001A984: push si
0001A985: push di
0001A986: mov ax, 0x1ab5
0001A989: mov ds, ax
0001A98B: push word ptr [bp + 0xc]
0001A98E: push word ptr [bp + 0xa]
0001A991: push word ptr [bp + 8]
0001A994: push word ptr [bp + 6]
0001A997: push ss
0001A998: lea ax, [bp - 4]
0001A99B: push ax
0001A99C: push ss
0001A99D: lea ax, [bp - 6]
0001A9A0: push ax
0001A9A1: push cs
0001A9A2: call 0x1a878
0001A9A5: or ax, ax
0001A9A7: je 0x1a9ab
0001A9A9: jmp 0x1a9cc
0001A9AB: mov ax, 6
0001A9AE: push ax
0001A9AF: push word ptr [bp - 4]
0001A9B2: push word ptr [bp - 6]
0001A9B5: lcall 0xb08, 0x2e7
0001A9BA: test dx, 0x8000
0001A9BE: jne 0x1a9cc
0001A9C0: mov bx, 0x202
0001A9C3: add bx, 0x200
0001A9C7: add ax, bx
0001A9C9: adc dx, 0
0001A9CC: mov word ptr [bp - 2], ax
0001A9CF: mov ax, word ptr [bp - 2]
0001A9D2: pop di
0001A9D3: pop si
0001A9D4: pop es
0001A9D5: pop ds
0001A9D6: mov sp, bp
0001A9D8: pop bp
0001A9D9: retf 8
0001A9DC: push bp
0001A9DD: mov bp, sp
0001A9DF: sub sp, 2
0001A9E2: push ds
0001A9E3: push es
0001A9E4: push si
0001A9E5: push di
0001A9E6: mov ax, 0x1ab5
0001A9E9: mov ds, ax
0001A9EB: mov ax, 0x54e4
0001A9EE: push ds
0001A9EF: push ax
0001A9F0: push word ptr [bp + 8]
0001A9F3: push word ptr [bp + 6]
0001A9F6: push cs
0001A9F7: call 0x1a97c
0001A9FA: mov word ptr [bp - 2], ax
0001A9FD: mov ax, word ptr [bp - 2]
0001AA00: pop di
0001AA01: pop si
0001AA02: pop es
0001AA03: pop ds
0001AA04: mov sp, bp
0001AA06: pop bp
0001AA07: retf 4
0001AA0A: push bp
0001AA0B: mov bp, sp
0001AA0D: sub sp, 2
0001AA10: push ds
0001AA11: push es
0001AA12: push si
0001AA13: push di
0001AA14: mov ax, 0x1ab5
0001AA17: mov ds, ax
0001AA19: lds si, ptr [bp + 0x16]
0001AA1C: mov word ptr [si], 0xca10
0001AA20: mov word ptr [si + 2], 0
0001AA25: mov word ptr [si + 4], 0
0001AA2A: mov word ptr [si + 6], 0
0001AA2F: mov word ptr [si + 8], 0
0001AA34: mov word ptr [si + 0xa], 0
0001AA39: mov word ptr [si + 0xc], 0
0001AA3E: mov word ptr [si + 0xe], 0
0001AA43: mov ax, 9
0001AA46: mov word ptr [si + 0x10], ax
0001AA49: mov word ptr [si + 0x12], 1
0001AA4E: mov word ptr [si + 0x14], 0
0001AA53: mov word ptr [si + 0x16], 0
0001AA58: mov word ptr [si + 0x18], 0
0001AA5D: mov word ptr [si + 0x1a], 0
0001AA62: mov word ptr [si + 0x1c], 0
0001AA67: mov word ptr [si + 0x1e], 0
0001AA6C: mov word ptr [si + 0x20], 0
0001AA71: mov word ptr [si + 0x22], 0
0001AA76: mov ax, word ptr [bp + 0xc]
0001AA79: mov word ptr [si + 0xa6], ax
0001AA7D: mov ax, word ptr [bp + 0xa]
0001AA80: mov word ptr [si + 0xa4], ax
0001AA84: mov ax, word ptr [bp + 8]
0001AA87: mov word ptr [si + 0xaa], ax
0001AA8B: mov ax, word ptr [bp + 6]
0001AA8E: mov word ptr [si + 0xa8], ax
0001AA92: add si, 0x24
0001AA95: push word ptr [bp + 0x1a]
0001AA98: push ds
0001AA99: push si
0001AA9A: push word ptr [bp + 0x14]
0001AA9D: push word ptr [bp + 0x12]
0001AAA0: mov ax, 6
0001AAA3: push ax
0001AAA4: push word ptr [bp + 0x10]
0001AAA7: push word ptr [bp + 0xe]
0001AAAA: lcall 0x5e5, 6
0001AAAF: mov word ptr [bp - 2], ax
0001AAB2: mov ax, word ptr [bp - 2]
0001AAB5: pop di
0001AAB6: pop si
0001AAB7: pop es
0001AAB8: pop ds
0001AAB9: mov sp, bp
0001AABB: pop bp
0001AABC: retf 0x16
0001AABF: add byte ptr [di - 0x75], dl
0001AAC2: in al, dx
0001AAC3: sub sp, 0xa6
0001AAC7: push ds
0001AAC8: push es
0001AAC9: push si
0001AACA: push di
0001AACB: mov ax, 0x1ab5
0001AACE: mov ds, ax
0001AAD0: push ds
0001AAD1: cld 
0001AAD2: push dx
0001AAD3: mov dx, word ptr [bp + 0x10]
0001AAD6: mov ds, dx
0001AAD8: pop dx
0001AAD9: push dx
0001AADA: mov dx, ss
0001AADC: mov es, dx
0001AADE: pop dx
0001AADF: mov si, word ptr [bp + 0xe]
0001AAE2: mov di, bp
0001AAE4: sub di, 0xa6
0001AAE8: mov word ptr [bp + 0x10], es
0001AAEB: mov word ptr [bp + 0xe], di
0001AAEE: movsb byte ptr es:[di], byte ptr [si]
0001AAEF: cmp byte ptr [si - 1], 0
0001AAF3: jne 0x1aaee
0001AAF5: pop ds
0001AAF6: lds si, ptr [bp + 0xa]
0001AAF9: mov ax, word ptr [si]
0001AAFB: mov word ptr [bp - 0x1c], ax
0001AAFE: lds si, ptr [bp + 6]
0001AB01: mov ax, word ptr [si]
0001AB03: mov word ptr [bp - 0x1e], ax
0001AB06: les di, ptr [bp + 0xe]
0001AB09: mov dx, di
0001AB0B: cld 
0001AB0C: mov al, 0
0001AB0E: mov cx, 0x80
0001AB11: repne scasb al, byte ptr es:[di]
0001AB13: sub di, dx
0001AB15: dec di
0001AB16: mov word ptr [bp - 0xe], di
0001AB19: cmp word ptr [bp - 0xe], 0x80
0001AB1E: jb 0x1ab28
0001AB20: mov word ptr [bp - 2], 0xfc13
0001AB25: jmp 0x1abd5
0001AB28: cmp word ptr [bp - 0xe], 0
0001AB2C: ja 0x1ab30
0001AB2E: jmp 0x1abae
0001AB30: push ss
0001AB31: lea ax, [bp - 6]
0001AB34: push ax
0001AB35: lcall 0x185d, 0x46
0001AB3A: or ax, ax
0001AB3C: je 0x1ab44
0001AB3E: mov word ptr [bp - 2], ax
0001AB41: jmp 0x1abd5
0001AB44: lds si, ptr [bp - 6]
0001AB47: cmp word ptr [si + 0x16], 0
0001AB4B: je 0x1ab55
0001AB4D: mov word ptr [bp - 2], 0xfc15
0001AB52: jmp 0x1abd5
0001AB55: mov ax, word ptr [si + 0x10]
0001AB58: mov word ptr [bp - 8], ax
0001AB5B: mov ax, 9
0001AB5E: mov word ptr [si + 0x10], ax
0001AB61: mov ax, word ptr [si + 0x1a]
0001AB64: mov word ptr [bp - 0xa], ax
0001AB67: mov ax, 0
0001AB6A: mov word ptr [si + 0x1a], ax
0001AB6D: mov ax, word ptr [si + 8]
0001AB70: mov word ptr [bp - 0x20], ax
0001AB73: mov ax, 0x1ab5
0001AB76: mov ds, ax
0001AB78: mov si, 0x71e4
0001AB7B: mov ax, word ptr [si + 0x1e]
0001AB7E: mov word ptr [bp - 0x10], ax
0001AB81: mov ax, word ptr [si + 0x20]
0001AB84: mov word ptr [bp - 0x12], ax
0001AB87: mov ax, word ptr [si + 0x22]
0001AB8A: mov word ptr [bp - 0x14], ax
0001AB8D: sub ax, word ptr [si + 0x1e]
0001AB90: inc ax
0001AB91: mov word ptr [bp - 0x18], ax
0001AB94: mov ax, word ptr [si + 0x24]
0001AB97: mov word ptr [bp - 0x16], ax
0001AB9A: sub ax, word ptr [si + 0x20]
0001AB9D: inc ax
0001AB9E: mov word ptr [bp - 0x1a], ax
0001ABA1: push cs
0001ABA2: call 0x1abe3
0001ABA5: or ax, ax
0001ABA7: je 0x1abae
0001ABA9: mov word ptr [bp - 2], ax
0001ABAC: jmp 0x1abc6
0001ABAE: lds si, ptr [bp + 0xa]
0001ABB1: mov ax, word ptr [bp - 0x1c]
0001ABB4: add ax, word ptr [bp - 0x24]
0001ABB7: mov word ptr [si], ax
0001ABB9: lds si, ptr [bp + 6]
0001ABBC: mov ax, word ptr [bp - 0x1e]
0001ABBF: mov word ptr [si], ax
0001ABC1: mov word ptr [bp - 2], 0
0001ABC6: lds si, ptr [bp - 6]
0001ABC9: mov ax, word ptr [bp - 8]
0001ABCC: mov word ptr [si + 0x10], ax
0001ABCF: mov ax, word ptr [bp - 0xa]
0001ABD2: mov word ptr [si + 0x1a], ax
0001ABD5: cld 
0001ABD6: mov ax, word ptr [bp - 2]
0001ABD9: pop di
0001ABDA: pop si
0001ABDB: pop es
0001ABDC: pop ds
0001ABDD: mov sp, bp
0001ABDF: pop bp
0001ABE0: retf 0xc
0001ABE3: lds si, ptr [bp + 0xe]
0001ABE6: les di, ptr [bp + 0xe]
0001ABE9: mov cx, word ptr [bp - 0xe]
0001ABEC: cld 
0001ABED: mov al, 0x20
0001ABEF: repne scasb al, byte ptr es:[di]
0001ABF1: or cx, cx
0001ABF3: je 0x1ac01
0001ABF5: mov al, byte ptr es:[di - 1]
0001ABF9: mov byte ptr [bp - 0xc], al
0001ABFC: mov byte ptr es:[di - 1], 0
0001AC01: push ds
0001AC02: push si
0001AC03: lcall 0x1865, 0x8e
0001AC08: mov word ptr [bp - 0x24], ax
0001AC0B: cmp byte ptr es:[di - 1], 0
0001AC10: jne 0x1ac19
0001AC12: mov al, byte ptr [bp - 0xc]
0001AC15: mov byte ptr es:[di - 1], al
0001AC19: mov ax, word ptr [bp - 0x24]
0001AC1C: add ax, word ptr [bp - 0x1c]
0001AC1F: cmp ax, word ptr [bp - 0x18]
0001AC22: jle 0x1ac3b
0001AC24: cmp word ptr [bp - 0x1c], 0
0001AC28: jne 0x1ac2d
0001AC2A: jmp 0x1ad0b
0001AC2D: mov word ptr [bp - 0x1c], 0
0001AC32: mov ax, word ptr [bp - 0x1e]
0001AC35: add ax, word ptr [bp - 0x20]
0001AC38: mov word ptr [bp - 0x1e], ax
0001AC3B: mov ax, 0x1ab5
0001AC3E: mov ds, ax
0001AC40: mov si, 0x43bf
0001AC43: les di, ptr [bp + 0xe]
0001AC46: add di, word ptr [bp - 0xe]
0001AC49: xor bx, bx
0001AC4B: mov cx, word ptr [bp - 0xe]
0001AC4E: mov byte ptr [bx + si], cl
0001AC50: inc bx
0001AC51: std 
0001AC52: mov al, 0x20
0001AC54: repne scasb al, byte ptr es:[di]
0001AC56: or cl, cl
0001AC58: je 0x1ac61
0001AC5A: mov byte ptr [bx + si], cl
0001AC5C: inc byte ptr [bx + si]
0001AC5E: inc bx
0001AC5F: jmp 0x1ac51
0001AC61: mov word ptr [bp - 0x26], bx
0001AC64: mov byte ptr [bx + si], cl
0001AC66: mov word ptr [bp - 0x22], 0
0001AC6B: xor bx, bx
0001AC6D: mov ax, word ptr [bp - 0x22]
0001AC70: cmp ax, word ptr [bp - 0xe]
0001AC73: jl 0x1ac78
0001AC75: jmp 0x1ad0b
0001AC78: mov word ptr [bp - 0x24], 0
0001AC7D: mov ax, word ptr [bp - 0x1e]
0001AC80: add ax, word ptr [bp - 0x20]
0001AC83: cmp ax, word ptr [bp - 0x1a]
0001AC86: jle 0x1ac8b
0001AC88: jmp 0x1ad0b
0001AC8B: push bx
0001AC8C: mov bl, byte ptr [bx + si]
0001AC8E: xor bh, bh
0001AC90: mov dl, byte ptr es:[bx + di]
0001AC93: mov byte ptr [bp - 0xc], dl
0001AC96: mov byte ptr es:[bx + di], 0
0001AC9A: push bx
0001AC9B: push es
0001AC9C: mov ax, di
0001AC9E: add ax, word ptr [bp - 0x22]
0001ACA1: push ax
0001ACA2: lcall 0x1865, 0x8e
0001ACA7: mov word ptr [bp - 0x24], ax
0001ACAA: pop bx
0001ACAB: mov dl, byte ptr [bp - 0xc]
0001ACAE: mov byte ptr es:[bx + di], dl
0001ACB1: pop bx
0001ACB2: add ax, word ptr [bp - 0x1c]
0001ACB5: cmp ax, word ptr [bp - 0x18]
0001ACB8: jle 0x1acc4
0001ACBA: cmp bx, word ptr [bp - 0x26]
0001ACBD: jne 0x1acc1
0001ACBF: jmp 0x1ad0b
0001ACC1: inc bx
0001ACC2: jmp 0x1ac78
0001ACC4: inc bx
0001ACC5: mov bl, byte ptr [bx + si - 1]
0001ACC8: mov dl, byte ptr es:[bx + di]
0001ACCB: mov byte ptr [bp - 0xc], dl
0001ACCE: mov byte ptr es:[bx + di], 0
0001ACD2: push bx
0001ACD3: push es
0001ACD4: mov ax, di
0001ACD6: add ax, word ptr [bp - 0x22]
0001ACD9: push ax
0001ACDA: push word ptr [bp - 0x1c]
0001ACDD: push word ptr [bp - 0x1e]
0001ACE0: lcall 0x17b8, 0xb1
0001ACE5: pop bx
0001ACE6: mov dl, byte ptr [bp - 0xc]
0001ACE9: mov byte ptr es:[bx + di], dl
0001ACEC: mov word ptr [bp - 0x22], bx
0001ACEF: inc word ptr [bp - 0x22]
0001ACF2: mov ax, word ptr [bp - 0x22]
0001ACF5: cmp ax, word ptr [bp - 0xe]
0001ACF8: jae 0x1ad0b
0001ACFA: mov word ptr [bp - 0x1c], 0
0001ACFF: mov ax, word ptr [bp - 0x1e]
0001AD02: add ax, word ptr [bp - 0x20]
0001AD05: mov word ptr [bp - 0x1e], ax
0001AD08: jmp 0x1ac6b
0001AD0B: mov ax, 0
0001AD0E: retf 
0001AD0F: cmpsb byte ptr [si], byte ptr es:[di]
0001AD10: sbb word ptr [di + 0x501a], si
0001AD14: inc cx
0001AD15: push sp
0001AD16: dec ax
0001AD17: cmp ax, 0
0001AD1A: push bp
0001AD1B: mov bp, sp
0001AD1D: sub sp, 0x14
0001AD20: push ds
0001AD21: mov ds, word ptr cs:[0xf]
0001AD26: push si
0001AD27: push di
0001AD28: cld 
0001AD29: cmp word ptr [0xa0], 0
0001AD2E: jne 0x1ad33
0001AD30: jmp 0x1ae3f
0001AD33: call 0x1aecb
0001AD36: jae 0x1ad64
0001AD38: mov ax, word ptr [bp + 6]
0001AD3B: or ax, word ptr [bp + 8]
0001AD3E: jne 0x1ad4a
0001AD40: mov word ptr [bp + 6], 0x4a8
0001AD45: mov word ptr [bp + 8], 0x19b2
0001AD4A: call 0x1aebf
0001AD4D: jae 0x1ad64
0001AD4F: call 0x1af10
0001AD52: jae 0x1ad64
0001AD54: mov ax, 0xfffe
0001AD57: jmp 0x1ae41
0001AD5A: mov ah, 0x3e
0001AD5C: int 0x21
0001AD5E: mov ax, 0xffff
0001AD61: jmp 0x1ae41
0001AD64: mov bx, ax
0001AD66: mov word ptr [0xb8], bx
0001AD6A: mov cx, 0x14
0001AD6D: call 0x1af95
0001AD70: mov cx, 0xfffd
0001AD73: jb 0x1ad5a
0001AD75: xor ax, ax
0001AD77: xor dx, dx
0001AD79: cmp word ptr [bp - 0x14], 0x5a4d
0001AD7E: je 0x1ad85
0001AD80: mov cx, 0xfffc
0001AD83: jmp 0x1ad5a
0001AD85: mov ax, word ptr [bp - 0x10]
0001AD88: mov cx, word ptr [bp - 0x12]
0001AD8B: jcxz 0x1ad8e
0001AD8D: dec ax
0001AD8E: mov dx, 0x200
0001AD91: mul dx
0001AD93: add ax, cx
0001AD95: add ax, 0xf
0001AD98: adc dx, 0
0001AD9B: and ax, 0xfff0
0001AD9E: push dx
0001AD9F: push ax
0001ADA0: mov cx, dx
0001ADA2: mov dx, ax
0001ADA4: mov ax, 0x4200
0001ADA7: int 0x21
0001ADA9: mov cx, 0x10
0001ADAC: call 0x1af95
0001ADAF: pop ax
0001ADB0: pop dx
0001ADB1: mov cx, 0xfffd
0001ADB4: jb 0x1ad5a
0001ADB6: add ax, 0x10
0001ADB9: adc dx, 0
0001ADBC: cmp word ptr [bp - 0x14], 0x4246
0001ADC1: mov cx, 0xfffc
0001ADC4: je 0x1adc8
0001ADC6: jmp 0x1ad5a
0001ADC8: cmp word ptr [bp - 0x12], 0x564f
0001ADCD: je 0x1add7
0001ADCF: add ax, word ptr [bp - 0x10]
0001ADD2: adc dx, word ptr [bp - 0xe]
0001ADD5: jmp 0x1ad9e
0001ADD7: mov word ptr [0xa4], ax
0001ADDA: mov word ptr [0xa6], dx
0001ADDE: mov es, word ptr cs:[0x11]
0001ADE3: mov ax, word ptr [bp - 0x10]
0001ADE6: mov word ptr es:[0x722a], ax
0001ADEA: mov ax, word ptr [bp - 0xe]
0001ADED: mov word ptr es:[0x722c], ax
0001ADF1: mov ah, 0x3e
0001ADF3: int 0x21
0001ADF5: mov word ptr [0xb8], 0
0001ADFB: nop 
0001ADFC: push cs
0001ADFD: call 0x1ae4a
0001AE00: mov ax, word ptr [bp + 0xc]
0001AE03: inc ax
0001AE04: mov word ptr [0xb4], ax
0001AE07: mov word ptr [0xb0], ax
0001AE0A: mov bx, word ptr [bp + 0xa]
0001AE0D: mov word ptr [0xb6], bx
0001AE11: call 0x1afa5
0001AE14: mov bx, word ptr [0xb6]
0001AE18: sub bx, word ptr [0xb4]
0001AE1C: cmp bx, word ptr [0xaa]
0001AE20: jae 0x1ae28
0001AE22: mov cx, 0xfffb
0001AE25: jmp 0x1ad5a
0001AE28: shr bx, 1
0001AE2A: shr bx, 1
0001AE2C: mov word ptr [0xa8], bx
0001AE30: call 0x1b025
0001AE33: jae 0x1ae3f
0001AE35: mov bx, word ptr [0xb8]
0001AE39: mov cx, 0xffff
0001AE3C: jmp 0x1ae41
0001AE3E: nop 
0001AE3F: xor ax, ax
0001AE41: pop di
0001AE42: pop si
0001AE43: pop ds
0001AE44: mov sp, bp
0001AE46: pop bp
0001AE47: retf 8
0001AE4A: push bp
0001AE4B: mov bp, sp
0001AE4D: push ds
0001AE4E: mov ds, word ptr cs:[0xf]
0001AE53: mov al, byte ptr [0xa1]
0001AE56: mov ah, 0x35
0001AE58: int 0x21
0001AE5A: push es
0001AE5B: push bx
0001AE5C: push ds
0001AE5D: mov al, byte ptr [0xa1]
0001AE60: mov dx, word ptr [2]
0001AE64: mov ds, word ptr [4]
0001AE68: mov ah, 0x25
0001AE6A: int 0x21
0001AE6C: pop ds
0001AE6D: pop word ptr [2]
0001AE71: pop word ptr [4]
0001AE75: cmp word ptr [0xb8], 0
0001AE7A: je 0x1ae8c
0001AE7C: mov bx, word ptr [0xb8]
0001AE80: mov ah, 0x3e
0001AE82: int 0x21
0001AE84: mov word ptr [0xb8], 0
0001AE8A: jmp 0x1ae9a
0001AE8C: lea dx, [0x1c]
0001AE90: mov ah, 0x3d
0001AE92: mov al, byte ptr [6]
0001AE95: int 0x21
0001AE97: mov word ptr [0xb8], ax
0001AE9A: pop ds
0001AE9B: pop bp
0001AE9C: retf 
0001AE9D: push bp
0001AE9E: mov bp, sp
0001AEA0: push ds
0001AEA1: mov ds, word ptr cs:[0xf]
0001AEA6: cmp word ptr [0xb8], 0
0001AEAB: je 0x1aeb2
0001AEAD: nop 
0001AEAE: push cs
0001AEAF: call 0x1ae4a
0001AEB2: push cs
0001AEB3: call word ptr [0x14]
0001AEB7: push cs
0001AEB8: call word ptr [0x12]
0001AEBC: pop ds
0001AEBD: pop bp
0001AEBE: retf 
0001AEBF: push ds
0001AEC0: lea di, [0x1c]
0001AEC4: push ds
0001AEC5: pop es
0001AEC6: call 0x1af6d
0001AEC9: pop ds
0001AECA: ret 
0001AECB: mov ah, 0x30
0001AECD: int 0x21
0001AECF: cmp al, 3
0001AED1: jb 0x1af0f
0001AED3: mov byte ptr [6], 0x20
0001AED8: push ds
0001AED9: mov ax, 0x1ab5
0001AEDC: mov ds, ax
0001AEDE: mov ds, word ptr [0x77]
0001AEE2: xor si, si
0001AEE4: cld 
0001AEE5: lodsb al, byte ptr [si]
0001AEE6: or al, al
0001AEE8: jne 0x1aee5
0001AEEA: lodsb al, byte ptr [si]
0001AEEB: or al, al
0001AEED: jne 0x1aee5
0001AEEF: lodsw ax, word ptr [si]
0001AEF0: lea di, [0x1c]
0001AEF4: mov ax, 0x19a6
0001AEF7: mov es, ax
0001AEF9: mov bx, di
0001AEFB: lodsb al, byte ptr [si]
0001AEFC: stosb byte ptr es:[di], al
0001AEFD: or al, al
0001AEFF: je 0x1af09
0001AF01: cmp al, 0x5c
0001AF03: jne 0x1aefb
0001AF05: mov bx, di
0001AF07: jmp 0x1aefb
0001AF09: mov di, bx
0001AF0B: call 0x1af6d
0001AF0E: pop ds
0001AF0F: ret 
0001AF10: push ds
0001AF11: mov ax, 0x1ab5
0001AF14: mov ds, ax
0001AF16: mov ds, word ptr [0x77]
0001AF1A: xor si, si
0001AF1C: mov di, 0x13
0001AF1F: push cs
0001AF20: pop es
0001AF21: mov cx, 5
0001AF24: cld 
0001AF25: repe cmpsb byte ptr [si], byte ptr es:[di]
0001AF27: je 0x1af36
0001AF29: dec si
0001AF2A: lodsb al, byte ptr [si]
0001AF2B: or al, al
0001AF2D: jne 0x1af2a
0001AF2F: cmp al, byte ptr [si]
0001AF31: jne 0x1af1c
0001AF33: pop ds
0001AF34: stc 
0001AF35: ret 
0001AF36: cmp byte ptr [si], 0
0001AF39: je 0x1af33
0001AF3B: lea di, [0x1c]
0001AF3F: mov ax, 0x19a6
0001AF42: mov es, ax
0001AF44: xor al, al
0001AF46: mov ah, al
0001AF48: lodsb al, byte ptr [si]
0001AF49: or al, al
0001AF4B: je 0x1af54
0001AF4D: cmp al, 0x3b
0001AF4F: je 0x1af55
0001AF51: stosb byte ptr es:[di], al
0001AF52: jmp 0x1af46
0001AF54: dec si
0001AF55: cmp ah, 0x3a
0001AF58: je 0x1af62
0001AF5A: cmp ah, 0x5c
0001AF5D: je 0x1af62
0001AF5F: mov al, 0x5c
0001AF61: stosb byte ptr es:[di], al
0001AF62: push ds
0001AF63: push si
0001AF64: call 0x1af6d
0001AF67: pop si
0001AF68: pop ds
0001AF69: jb 0x1af36
0001AF6B: pop ds
0001AF6C: ret 
0001AF6D: lds si, ptr [bp + 6]
0001AF70: mov ax, ds
0001AF72: or ax, si
0001AF74: je 0x1af84
0001AF76: mov cx, 0xc
0001AF79: lodsb al, byte ptr [si]
0001AF7A: stosb byte ptr es:[di], al
0001AF7B: or al, al
0001AF7D: je 0x1af84
0001AF7F: loop 0x1af79
0001AF81: sub al, al
0001AF83: stosb byte ptr es:[di], al
0001AF84: lea dx, [0x1c]
0001AF88: mov ax, 0x19a6
0001AF8B: mov ds, ax
0001AF8D: mov ah, 0x3d
0001AF8F: mov al, byte ptr [6]
0001AF92: int 0x21
0001AF94: ret 
0001AF95: push ds
0001AF96: lea dx, [bp - 0x14]
0001AF99: push ss
0001AF9A: pop ds
0001AF9B: mov ah, 0x3f
0001AF9D: int 0x21
0001AF9F: pop ds
0001AFA0: jb 0x1afa4
0001AFA2: cmp ax, cx
0001AFA4: ret 
0001AFA5: mov ax, 0x1ab5
0001AFA8: mov es, ax
0001AFAA: mov ax, word ptr es:[0x7b]
0001AFAE: add ax, 0x10
0001AFB1: mov word ptr cs:[0x18], ax
0001AFB5: mov ax, 0x19b0
0001AFB8: mov es, ax
0001AFBA: xor bx, bx
0001AFBC: xor di, di
0001AFBE: lea si, [0xc0]
0001AFC2: test word ptr [si + 4], 2
0001AFC7: je 0x1afcf
0001AFC9: cmp word ptr [si + 2], 0
0001AFCD: jne 0x1afd2
0001AFCF: jmp 0x1b010
0001AFD1: nop 
0001AFD2: mov ax, word ptr [si]
0001AFD4: push es
0001AFD5: mov word ptr es:[0x12], ax
0001AFD9: mov es, ax
0001AFDB: cmp byte ptr es:[0x1a], 0xff
0001AFE1: jne 0x1afee
0001AFE3: pop es
0001AFE4: mov word ptr es:[0x12], 0
0001AFEB: jmp 0x1b010
0001AFED: nop 
0001AFEE: pop ax
0001AFEF: mov word ptr es:[0x18], 0x4d0
0001AFF6: mov ax, word ptr [0xa4]
0001AFF9: mov dx, word ptr [0xa6]
0001AFFD: add word ptr es:[4], ax
0001B002: adc word ptr es:[6], dx
0001B007: call 0x1b4b7
0001B00A: cmp bx, dx
0001B00C: jae 0x1b010
0001B00E: xchg dx, bx
0001B010: add si, 8
0001B013: cmp si, 0x568
0001B017: jae 0x1b01b
0001B019: jmp 0x1afc2
0001B01B: xor ax, ax
0001B01D: add bx, 2
0001B020: mov word ptr [0xaa], bx
0001B024: ret 
0001B025: mov cx, word ptr [0xb2]
0001B029: mov word ptr [0xbc], cx
0001B02D: mov bx, cx
0001B02F: mov si, word ptr [0xb4]
0001B033: mov di, word ptr [0xb6]
0001B037: push ds
0001B038: mov ds, cx
0001B03A: mov cx, word ptr [0x12]
0001B03E: jcxz 0x1b06e
0001B040: mov es, cx
0001B042: mov ax, word ptr es:[4]
0001B046: mov dx, word ptr es:[6]
0001B04B: sub ax, word ptr [4]
0001B04F: sbb dx, word ptr [6]
0001B053: mov cx, 0x10
0001B056: div cx
0001B058: add ax, si
0001B05A: cmp ax, di
0001B05C: ja 0x1b06e
0001B05E: mov word ptr [0x10], si
0001B062: mov si, ax
0001B064: mov cx, es
0001B066: mov word ptr [0x1c], cx
0001B06A: mov bx, ds
0001B06C: jmp 0x1b038
0001B06E: mov ds, bx
0001B070: mov word ptr [0x1c], 0
0001B076: pop ds
0001B077: mov word ptr [0xb0], si
0001B07B: mov ax, word ptr [0xb4]
0001B07E: sub si, ax
0001B080: jne 0x1b085
0001B082: jmp 0x1b0e3
0001B084: nop 
0001B085: mov cl, 4
0001B087: rol si, cl
0001B089: mov di, si
0001B08B: and di, 0xf
0001B08E: and si, 0xfff0
0001B091: mov es, word ptr [0xbc]
0001B095: mov dx, word ptr es:[4]
0001B09A: mov cx, word ptr es:[6]
0001B09F: call 0x1b0f2
0001B0A2: jb 0x1b0e4
0001B0A4: mov ax, word ptr [0xbc]
0001B0A7: push ds
0001B0A8: mov es, ax
0001B0AA: mov cx, word ptr es:[0xa]
0001B0AF: jcxz 0x1b0b4
0001B0B1: call 0x1b12b
0001B0B4: cmp word ptr es:[0xc], 0
0001B0BA: je 0x1b0bf
0001B0BC: call 0x1b39d
0001B0BF: mov ax, word ptr es:[0x10]
0001B0C3: dec ax
0001B0C4: mov ds, ax
0001B0C6: mov word ptr [0xe], es
0001B0CA: push es
0001B0CB: mov ax, 0xffff
0001B0CE: mov bx, ax
0001B0D0: mov ds, word ptr cs:[0xf]
0001B0D5: lcall [0x16]
0001B0D9: pop es
0001B0DA: mov ax, word ptr es:[0x1c]
0001B0DE: or ax, ax
0001B0E0: jne 0x1b0a8
0001B0E2: pop ds
0001B0E3: clc 
0001B0E4: ret 
0001B0E5: mov cl, 4
0001B0E7: shr ax, cl
0001B0E9: ror dx, cl
0001B0EB: and dx, 0xf000
0001B0EF: or ax, dx
0001B0F1: ret 
0001B0F2: push ax
0001B0F3: mov bx, word ptr [0xb8]
0001B0F7: mov ax, 0x4200
0001B0FA: int 0x21
0001B0FC: pop ax
0001B0FD: push ds
0001B0FE: mov ds, ax
0001B100: jmp 0x1b109
0001B102: mov ax, ds
0001B104: add ax, 0xfff
0001B107: mov ds, ax
0001B109: mov cx, 0xfff0
0001B10C: or di, di
0001B10E: jne 0x1b112
0001B110: mov cx, si
0001B112: xor dx, dx
0001B114: mov ah, 0x3f
0001B116: int 0x21
0001B118: jb 0x1b129
0001B11A: cmp ax, cx
0001B11C: jb 0x1b129
0001B11E: sub si, ax
0001B120: sbb di, 0
0001B123: mov ax, si
0001B125: or ax, di
0001B127: jne 0x1b102
0001B129: pop ds
0001B12A: ret 
0001B12B: push ds
0001B12C: push es
0001B12D: mov ax, word ptr es:[8]
0001B131: mov si, ax
0001B133: and si, 0xf
0001B136: shr ax, 1
0001B138: shr ax, 1
0001B13A: shr ax, 1
0001B13C: shr ax, 1
0001B13E: mov dx, word ptr es:[0x10]
0001B143: add ax, dx
0001B145: mov ds, ax
0001B147: mov es, dx
0001B149: shr cx, 1
0001B14B: cld 
0001B14C: lodsw ax, word ptr [si]
0001B14D: mov bx, ax
0001B14F: mov di, word ptr es:[bx]
0001B152: push ds
0001B153: mov ax, 0x19b2
0001B156: mov ds, ax
0001B158: mov ax, di
0001B15A: and di, 0xfff8
0001B15D: mov dx, word ptr [di]
0001B15F: mov word ptr es:[bx], dx
0001B162: test ax, 1
0001B165: je 0x1b16a
0001B167: call 0x1b170
0001B16A: pop ds
0001B16B: loop 0x1b14c
0001B16D: pop es
0001B16E: pop ds
0001B16F: ret 
0001B170: push cx
0001B171: mov ds, dx
0001B173: mov ah, byte ptr es:[bx - 1]
0001B177: mov al, ah
0001B179: and ax, 0xf807
0001B17C: cmp ah, 0xb8
0001B17F: jne 0x1b1cc
0001B181: mov cx, ax
0001B183: mov ah, byte ptr es:[bx + 2]
0001B187: mov al, ah
0001B189: and ax, 0xf807
0001B18C: cmp ah, 0x50
0001B18F: jne 0x1b1cc
0001B191: cmp al, cl
0001B193: jne 0x1b1cc
0001B195: mov dx, ax
0001B197: mov ah, byte ptr es:[bx + 3]
0001B19B: mov al, ah
0001B19D: and ax, 0xf807
0001B1A0: cmp cx, ax
0001B1A2: jne 0x1b1cc
0001B1A4: mov ah, byte ptr es:[bx + 6]
0001B1A8: mov al, ah
0001B1AA: and ax, 0xf807
0001B1AD: cmp ax, dx
0001B1AF: jne 0x1b1cc
0001B1B1: mov di, 0x20
0001B1B4: mov cx, word ptr [0xc]
0001B1B8: mov ax, word ptr es:[bx + 4]
0001B1BC: cmp ax, word ptr [di + 2]
0001B1BF: je 0x1b1c8
0001B1C1: add di, 5
0001B1C4: loop 0x1b1bc
0001B1C6: jmp 0x1b1ce
0001B1C8: mov word ptr es:[bx + 4], di
0001B1CC: pop cx
0001B1CD: ret 
0001B1CE: pop cx
0001B1CF: ret 
0001B1D0: mov si, word ptr es:[8]
0001B1D5: xor di, di
0001B1D7: add si, word ptr es:[0xa]
0001B1DC: adc di, 0
0001B1DF: mov dx, word ptr es:[4]
0001B1E4: mov cx, word ptr es:[6]
0001B1E9: mov ax, word ptr es:[0x10]
0001B1ED: call 0x1b0f2
0001B1F0: jb 0x1b1fd
0001B1F2: mov cx, word ptr es:[0xa]
0001B1F7: jcxz 0x1b1fc
0001B1F9: call 0x1b12b
0001B1FC: clc 
0001B1FD: ret 
0001B1FE: push bp
0001B1FF: mov bp, sp
0001B201: test bp, 1
0001B205: je 0x1b20c
0001B207: ljmp 0:0xd87
0001B20C: push ax
0001B20D: push bx
0001B20E: push cx
0001B20F: push dx
0001B210: push si
0001B211: push di
0001B212: push ds
0001B213: push es
0001B214: mov ax, 0x19a6
0001B217: mov ds, ax
0001B219: sti 
0001B21A: les bx, ptr [bp + 2]
0001B21D: push word ptr es:[bx]
0001B220: sub word ptr [bp + 2], 2
0001B224: jne 0x1b22b
0001B226: call 0x1b2ae
0001B229: jmp 0x1b243
0001B22B: add bp, 6
0001B22E: mov ax, word ptr [bp]
0001B231: xchg word ptr [bp - 6], ax
0001B234: mov word ptr [bp], ax
0001B237: call 0x1b2ae
0001B23A: mov ax, word ptr [bp]
0001B23D: xchg word ptr [bp - 6], ax
0001B240: mov word ptr [bp], ax
0001B243: pop bx
0001B244: mov al, byte ptr es:[0x1a]
0001B248: and al, 8
0001B24A: and byte ptr es:[0x1a], 0xf7
0001B250: cwde 
0001B251: mov ds, word ptr cs:[0xf]
0001B256: lcall [0x16]
0001B25A: pop es
0001B25B: pop ds
0001B25C: pop di
0001B25D: pop si
0001B25E: pop dx
0001B25F: pop cx
0001B260: pop bx
0001B261: pop ax
0001B262: pop bp
0001B263: iret 
0001B264: push es
0001B265: inc word ptr [0xba]
0001B269: call 0x1b4b7
0001B26C: jmp 0x1b29c
0001B26E: popf 
0001B26F: push dx
0001B270: jae 0x1b275
0001B272: call 0x1b341
0001B275: mov es, word ptr [0xbc]
0001B279: mov ax, word ptr es:[0x1c]
0001B27D: mov word ptr [0xbc], ax
0001B280: cmp byte ptr es:[0x1b], 0
0001B286: jne 0x1b290
0001B288: call 0x1b329
0001B28B: call 0x1b4ab
0001B28E: jmp 0x1b29b
0001B290: dec byte ptr es:[0x1b]
0001B295: call 0x1b3ee
0001B298: call 0x1b43f
0001B29B: pop dx
0001B29C: call 0x1b48f
0001B29F: pushf 
0001B2A0: cmp dx, ax
0001B2A2: ja 0x1b26e
0001B2A4: popf 
0001B2A5: pop es
0001B2A6: mov ax, word ptr [0xb0]
0001B2A9: mov word ptr es:[0x10], ax
0001B2AD: ret 
0001B2AE: inc word ptr [0xac]
0001B2B2: cmp word ptr es:[0x10], 0
0001B2B8: je 0x1b2c9
0001B2BA: mov byte ptr es:[0x1b], 1
0001B2C0: or byte ptr es:[0x1a], 4
0001B2C6: jmp 0x1b2e5
0001B2C8: nop 
0001B2C9: or byte ptr es:[0x1a], 8
0001B2CF: call 0x1b264
0001B2D2: push ds
0001B2D3: dec ax
0001B2D4: mov ds, ax
0001B2D6: mov word ptr [0xe], es
0001B2DA: pop ds
0001B2DB: call word ptr es:[0x18]
0001B2E0: jb 0x1b324
0001B2E2: call 0x1b43f
0001B2E5: call 0x1b37c
0001B2E8: mov al, byte ptr es:[0x1a]
0001B2EC: and al, 3
0001B2EE: add byte ptr es:[0x1b], al
0001B2F3: push es
0001B2F4: call 0x1b48f
0001B2F7: mov es, word ptr [0xbc]
0001B2FB: mov cx, word ptr es:[0x1c]
0001B300: jcxz 0x1b322
0001B302: cmp ax, word ptr [0xa8]
0001B306: jae 0x1b322
0001B308: push cx
0001B309: push ax
0001B30A: cmp byte ptr es:[0x1b], 0
0001B310: je 0x1b316
0001B312: xor ax, ax
0001B314: jmp 0x1b31c
0001B316: call 0x1b3bb
0001B319: call 0x1b4ab
0001B31C: pop cx
0001B31D: pop es
0001B31E: add ax, cx
0001B320: jmp 0x1b2fb
0001B322: pop es
0001B323: ret 
0001B324: ljmp 0:0xd87
0001B329: call 0x1b3bb
0001B32C: cmp word ptr es:[0x18], 0x4d0
0001B333: jne 0x1b339
0001B335: call word ptr [0x10]
0001B339: mov word ptr es:[0x10], 0
0001B340: ret 
0001B341: mov ax, word ptr [0xbc]
0001B344: xor cx, cx
0001B346: inc cx
0001B347: push ax
0001B348: mov es, ax
0001B34A: mov ax, word ptr es:[0x1c]
0001B34E: or ax, ax
0001B350: jne 0x1b346
0001B352: mov word ptr [0xbc], ax
0001B355: mov ax, word ptr [0xb6]
0001B358: mov word ptr [0xb0], ax
0001B35B: pop es
0001B35C: push cx
0001B35D: mov ax, word ptr [0xbc]
0001B360: mov word ptr es:[0x1c], ax
0001B364: mov word ptr [0xbc], es
0001B368: call 0x1b4ab
0001B36B: sub word ptr [0xb0], ax
0001B36F: call 0x1b3ee
0001B372: pop cx
0001B373: loop 0x1b35b
0001B375: mov ax, word ptr [0xb4]
0001B378: mov word ptr [0xb0], ax
0001B37B: ret 
0001B37C: cmp word ptr es:[0xc], 0
0001B382: jne 0x1b385
0001B384: ret 
0001B385: cmp byte ptr es:[0x20], 0xea
0001B38B: je 0x1b3ba
0001B38D: mov cx, word ptr es:[2]
0001B392: jcxz 0x1b39d
0001B394: mov ax, word ptr es:[0x10]
0001B398: mov dx, es
0001B39A: call 0x1b45d
0001B39D: mov bx, word ptr es:[0x10]
0001B3A2: mov cx, word ptr es:[0xc]
0001B3A7: mov di, 0x20
0001B3AA: cld 
0001B3AB: mov dx, word ptr es:[di + 2]
0001B3AF: mov al, 0xea
0001B3B1: stosb byte ptr es:[di], al
0001B3B2: mov ax, dx
0001B3B4: stosw word ptr es:[di], ax
0001B3B5: mov ax, bx
0001B3B7: stosw word ptr es:[di], ax
0001B3B8: loop 0x1b3ab
0001B3BA: ret 
0001B3BB: cmp byte ptr es:[0x20], 0xcd
0001B3C1: je 0x1b3ed
0001B3C3: mov ax, es
0001B3C5: mov dx, word ptr es:[0x10]
0001B3CA: xor cx, cx
0001B3CC: call 0x1b45d
0001B3CF: mov word ptr es:[2], cx
0001B3D4: mov cx, word ptr es:[0xc]
0001B3D9: mov di, 0x20
0001B3DC: cld 
0001B3DD: mov dx, word ptr es:[di + 1]
0001B3E1: mov ax, word ptr [0xa0]
0001B3E4: stosw word ptr es:[di], ax
0001B3E5: mov ax, dx
0001B3E7: stosw word ptr es:[di], ax
0001B3E8: xor al, al
0001B3EA: stosb byte ptr es:[di], al
0001B3EB: loop 0x1b3dd
0001B3ED: ret 
0001B3EE: mov ax, word ptr [0xb0]
0001B3F1: mov dx, word ptr es:[0x10]
0001B3F6: mov word ptr es:[0x10], ax
0001B3FA: mov cx, word ptr es:[8]
0001B3FF: inc cx
0001B400: shr cx, 1
0001B402: xor si, si
0001B404: cld 
0001B405: cmp ax, dx
0001B407: jb 0x1b40f
0001B409: mov si, cx
0001B40B: dec si
0001B40C: shl si, 1
0001B40E: std 
0001B40F: mov di, si
0001B411: push ds
0001B412: push es
0001B413: mov ds, dx
0001B415: mov es, ax
0001B417: rep movsw word ptr es:[di], word ptr [si]
0001B419: cld 
0001B41A: dec ax
0001B41B: mov ds, ax
0001B41D: pop es
0001B41E: mov word ptr [0xe], es
0001B422: inc ax
0001B423: pop ds
0001B424: cmp byte ptr es:[0x20], 0xcd
0001B42A: je 0x1b43e
0001B42C: call 0x1b469
0001B42F: mov cx, word ptr es:[0xc]
0001B434: mov di, 0x23
0001B437: cld 
0001B438: stosw word ptr es:[di], ax
0001B439: add di, 3
0001B43C: loop 0x1b438
0001B43E: ret 
0001B43F: call 0x1b4ab
0001B442: add word ptr [0xb0], ax
0001B446: push ds
0001B447: mov ax, 0x19b0
0001B44A: mov ds, ax
0001B44C: mov ax, word ptr [0x1c]
0001B44F: or ax, ax
0001B451: jne 0x1b44a
0001B453: mov word ptr [0x1c], es
0001B457: mov word ptr es:[0x1c], ax
0001B45B: pop ds
0001B45C: ret 
0001B45D: call 0x1b469
0001B460: or bx, bx
0001B462: je 0x1b468
0001B464: xchg word ptr ss:[bx + 2], cx
0001B468: ret 
0001B469: xor bx, bx
0001B46B: push cx
0001B46C: push bp
0001B46D: jmp 0x1b473
0001B46F: shl cx, 1
0001B471: mov bp, cx
0001B473: mov cx, word ptr [bp]
0001B476: shr cx, 1
0001B478: je 0x1b48c
0001B47A: jb 0x1b46f
0001B47C: cmp dx, word ptr [bp + 4]
0001B47F: jne 0x1b46f
0001B481: mov word ptr [bp + 4], ax
0001B484: or bx, bx
0001B486: jne 0x1b46f
0001B488: mov bx, bp
0001B48A: jmp 0x1b46f
0001B48C: pop bp
0001B48D: pop cx
0001B48E: ret 
0001B48F: mov ax, word ptr [0xbc]
0001B492: or ax, ax
0001B494: je 0x1b4a2
0001B496: mov es, ax
0001B498: mov ax, word ptr es:[0x10]
0001B49C: sub ax, word ptr [0xb0]
0001B4A0: jae 0x1b4aa
0001B4A2: mov ax, word ptr [0xb6]
0001B4A5: sub ax, word ptr [0xb0]
0001B4A9: stc 
0001B4AA: ret 
0001B4AB: mov ax, word ptr es:[8]
0001B4AF: add ax, 0x11
0001B4B2: mov cl, 4
0001B4B4: shr ax, cl
0001B4B6: ret 
0001B4B7: mov cl, 4
0001B4B9: mov ax, word ptr es:[8]
0001B4BD: add ax, 0x11
0001B4C0: shr ax, cl
0001B4C2: mov dx, word ptr es:[0xa]
0001B4C7: add dx, 0xf
0001B4CA: shr dx, cl
0001B4CC: add dx, ax
0001B4CE: ret 
0001B4CF: push ds
0001B4D0: push es
0001B4D1: mov ds, word ptr cs:[0xf]
0001B4D6: cmp ax, word ptr [0xb4]
0001B4DA: jb 0x1b4ff
0001B4DC: cmp ax, word ptr [0xb6]
0001B4E0: jae 0x1b4ff
0001B4E2: dec ax
0001B4E3: mov es, ax
0001B4E5: mov es, word ptr es:[0xe]
0001B4EA: inc ax
0001B4EB: mov bx, word ptr [0xa0]
0001B4EF: cmp bx, word ptr es:[0]
0001B4F4: jne 0x1b4ff
0001B4F6: cmp ax, word ptr es:[0x10]
0001B4FB: mov ax, es
0001B4FD: je 0x1b502
0001B4FF: xor ax, ax
0001B501: stc 
0001B502: pop es
0001B503: pop ds
0001B504: retf 
0001B505: push bp
0001B506: mov bp, sp
0001B508: sub sp, 2
0001B50B: mov byte ptr [bp - 2], 0
0001B50F: push ds
0001B510: mov ds, word ptr cs:[0xf]
0001B515: push si
0001B516: push di
0001B517: mov bx, bp
0001B519: mov ax, word ptr [0xa0]
0001B51C: mov dx, word ptr [0xb4]
0001B520: jmp 0x1b526
0001B522: shl si, 1
0001B524: mov bx, si
0001B526: cmp bx, cx
0001B528: jae 0x1b554
0001B52A: mov si, word ptr ss:[bx]
0001B52D: shr si, 1
0001B52F: je 0x1b554
0001B531: jb 0x1b522
0001B533: mov di, word ptr ss:[bx + 4]
0001B537: cmp di, dx
0001B539: jae 0x1b522
0001B53B: mov es, di
0001B53D: mov di, word ptr ss:[bx + 2]
0001B541: or di, di
0001B543: jne 0x1b522
0001B545: cmp word ptr es:[di], ax
0001B548: jne 0x1b522
0001B54A: mov byte ptr [bp - 2], 1
0001B54E: mov word ptr es:[di + 2], di
0001B552: jmp 0x1b522
0001B554: cmp byte ptr [bp - 2], 1
0001B558: je 0x1b561
0001B55A: jmp 0x1b596
0001B55C: nop 
0001B55D: shl si, 1
0001B55F: mov bx, si
0001B561: mov si, word ptr ss:[bx]
0001B564: shr si, 1
0001B566: je 0x1b596
0001B568: jb 0x1b55d
0001B56A: mov di, word ptr ss:[bx + 4]
0001B56E: cmp di, dx
0001B570: jae 0x1b55d
0001B572: mov es, di
0001B574: mov di, word ptr ss:[bx + 2]
0001B578: or di, di
0001B57A: je 0x1b55d
0001B57C: cmp word ptr es:[0], ax
0001B581: jne 0x1b55d
0001B583: cmp word ptr es:[2], 0
0001B589: jne 0x1b55d
0001B58B: xchg word ptr es:[2], di
0001B590: mov word ptr ss:[bx + 2], di
0001B594: jmp 0x1b55d
0001B596: pop di
0001B597: pop si
0001B598: pop ds
0001B599: mov sp, bp
0001B59B: pop bp
0001B59C: retf 
0001B59D: push bp
0001B59E: mov bp, sp
0001B5A0: push ds
0001B5A1: mov ds, word ptr cs:[0xf]
0001B5A6: mov es, word ptr [bp + 8]
0001B5A9: mov cx, word ptr [0xa0]
0001B5AD: cmp cx, word ptr es:[0]
0001B5B2: jne 0x1b5f2
0001B5B4: cmp word ptr es:[0x10], 0
0001B5BA: je 0x1b5c4
0001B5BC: cmp byte ptr es:[0x20], 0xcd
0001B5C2: jne 0x1b5eb
0001B5C4: mov word ptr [bp + 8], 0
0001B5C9: push si
0001B5CA: push di
0001B5CB: call 0x1b2ae
0001B5CE: pop di
0001B5CF: pop si
0001B5D0: mov bx, word ptr [bp + 6]
0001B5D3: push es
0001B5D4: mov al, byte ptr es:[0x1a]
0001B5D8: and al, 8
0001B5DA: and byte ptr es:[0x1a], 0xf7
0001B5E0: cwde 
0001B5E1: mov ds, word ptr cs:[0xf]
0001B5E6: lcall [0x16]
0001B5EA: pop es
0001B5EB: mov ax, word ptr es:[0x10]
0001B5EF: mov word ptr [bp + 8], ax
0001B5F2: pop ds
0001B5F3: pop bp
0001B5F4: retf 
0001B5F5: push ds
0001B5F6: push si
0001B5F7: push di
0001B5F8: mov ax, 0x19a6
0001B5FB: mov ds, ax
0001B5FD: call 0x1afa5
0001B600: mov bx, word ptr [0xaa]
0001B604: mov ax, 0x1ab5
0001B607: mov ds, ax
0001B609: mov ax, 0x1ab5
0001B60C: mov es, ax
0001B60E: cmp bx, word ptr es:[0x722e]
0001B613: jae 0x1b61c
0001B615: mov bx, word ptr es:[0x722e]
0001B61A: jmp 0x1b61e
0001B61C: shl bx, 1
0001B61E: inc bx
0001B61F: push bx
0001B620: mov ax, 0x10
0001B623: mul bx
0001B625: push dx
0001B626: push ax
0001B627: lcall 0, 0x270c
0001B62C: pop bx
0001B62D: pop bx
0001B62E: pop bx
0001B62F: mov cx, ax
0001B631: or cx, dx
0001B633: jcxz 0x1b64b
0001B635: inc dx
0001B636: add bx, dx
0001B638: push dx
0001B639: push bx
0001B63A: xor ax, ax
0001B63C: push ax
0001B63D: push ax
0001B63E: nop 
0001B63F: push cs
0001B640: call 0x1ad1a
0001B643: or ax, ax
0001B645: jne 0x1b64b
0001B647: pop di
0001B648: pop si
0001B649: pop ds
0001B64A: retf 
0001B64B: ljmp 0:0x27a
0001B650: ret 
0001B651: retf 
0001B652: add byte ptr [bx + si], al
0001B654: add byte ptr [bx + si], al
0001B656: add byte ptr [bx + si], al
0001B658: add byte ptr [bx + si], al
0001B65A: add byte ptr [bx + si], al
0001B65C: add byte ptr [bx + si], al
0001B65E: add byte ptr [bx + si], al
0001B660: add byte ptr [bx + si], al
0001B662: inc byte ptr [si]
0001B664: adc byte ptr [bx + di], bl
0001B666: add byte ptr [bx + si], al
0001B668: add byte ptr [bx + si], al
0001B66A: add byte ptr [bx + si], al
0001B66C: add byte ptr [bx + si], al
0001B66E: add byte ptr [bx + si], al
0001B670: push ax
0001B671: or word ptr [bx + di + 9], dx
0001B674: push cx
0001B675: or word ptr [si + 0xd], sp
0001B679: add byte ptr [0], cl
0001B67D: add byte ptr [bx + si], al
0001B67F: add byte ptr [bx + si], al
0001B681: add byte ptr [bx + si], al
0001B683: add byte ptr [bx + si], al
0001B685: add byte ptr [bx + si], al
0001B687: add byte ptr [bx + si], al
0001B689: add byte ptr [bx + si], al
0001B68B: add byte ptr [bx + si], al
0001B68D: add byte ptr [bx + si], al
0001B68F: add byte ptr [bx + si], al
0001B691: add byte ptr [bx + si], al
0001B693: add byte ptr [bx + si], al
0001B695: add byte ptr [bx + si], al
0001B697: add byte ptr [bx + si], al
0001B699: add byte ptr [bx + si], al
0001B69B: add byte ptr [bx + si], al
0001B69D: add byte ptr [bx + si], al
0001B69F: add byte ptr [bx + si], al
0001B6A1: add byte ptr [bx + si], al
0001B6A3: add byte ptr [bx + si], al
0001B6A5: add byte ptr [bx + si], al
0001B6A7: add byte ptr [bx + si], al
0001B6A9: add byte ptr [bx + si], al
0001B6AB: add byte ptr [bx + si], al
0001B6AD: add byte ptr [bx + si], al
0001B6AF: add byte ptr [bx + si], al
0001B6B1: add byte ptr [bx + si], al
0001B6B3: add byte ptr [bx + si], al
0001B6B5: add byte ptr [bx + si], al
0001B6B7: add byte ptr [bx + si], al
0001B6B9: add byte ptr [bx + si], al
0001B6BB: add byte ptr [bx + si], al
0001B6BD: add byte ptr [bx + si], al
0001B6BF: add byte ptr [bx + si], al
0001B6C1: add byte ptr [bx + si], al
0001B6C3: add byte ptr [bx + si], al
0001B6C5: add byte ptr [bx + si], al
0001B6C7: add byte ptr [bx + si], al
0001B6C9: add byte ptr [bx + si], al
0001B6CB: add byte ptr [bx + si], al
0001B6CD: add byte ptr [bx + si], al
0001B6CF: add byte ptr [bx + si], al
0001B6D1: add byte ptr [bx + si], al
0001B6D3: add byte ptr [bx + si], al
0001B6D5: add byte ptr [bx + si], al
0001B6D7: add byte ptr [bx + si], al
0001B6D9: add byte ptr [bx + si], al
0001B6DB: add byte ptr [bx + si], al
0001B6DD: add byte ptr [bx + si], al
0001B6DF: add byte ptr [bx + si], al
0001B6E1: add byte ptr [bx + si], al
0001B6E3: add byte ptr [bx + si], al
0001B6E5: add byte ptr [bx + si], al
0001B6E7: add byte ptr [bx + si], al
0001B6E9: add byte ptr [bx + si], al
0001B6EB: add byte ptr [bx + si], al
0001B6ED: add byte ptr [bx + si], al
0001B6EF: add byte ptr [bx + si], al
0001B6F1: add byte ptr [bx + si], al
0001B6F3: add byte ptr [bx + si], al
0001B6F5: add byte ptr [bx + si], al
0001B6F7: add byte ptr [bx + si], al
0001B6F9: add byte ptr [bx + si], al
0001B6FB: add byte ptr [bx + si], al
0001B6FD: add byte ptr [bx + si], al
0001B6FF: add ch, cl
0001B701: aas 
0001B702: add byte ptr [bx + si], al
0001B704: add byte ptr [bx + si], al
0001B706: add byte ptr [bx + si], al
0001B708: add byte ptr [bx + si], al
0001B70A: add byte ptr [bx + si], al
0001B70C: add byte ptr [bx + si], al
0001B70E: add byte ptr [bx + si], al
0001B710: add byte ptr [bx + si], al
0001B712: add byte ptr [bx + si], al
0001B714: add byte ptr [bx + si], al
0001B716: add byte ptr [bx + si], al
0001B718: add byte ptr [bx + si], al
0001B71A: add byte ptr [bx + si], al
0001B71C: add byte ptr [bx + si], al
0001B71E: add byte ptr [bx + si], al
0001B720: add byte ptr [bx + si], al
0001B722: push 0x14e
0001B725: add byte ptr [bx + si], al
0001B727: add dh, ah
0001B729: add al, 0xef
0001B72B: add ax, word ptr [bx + di]
0001B72D: add byte ptr [bx + si], cl
0001B72F: add byte ptr [si], ah
0001B731: add ax, 0x260
0001B734: add word ptr [bx + si], ax
0001B736: str word ptr [bp + si + 5]
0001B73A: jl 0x1b73e
0001B73C: add word ptr [bx + si], ax
0001B73E: add byte ptr [bx + si], al
0001B740: jno 0x1b747
0001B742: inc si
0001B743: pop es
0001B744: add word ptr [bx + si], ax
0001B746: or al, 0
0001B748: in ax, 5
0001B74A: mov cl, 3
0001B74C: add word ptr [bx + si], ax
0001B74E: push es
0001B74F: add byte ptr [bx + si], ah
0001B751: push es
0001B752: inc bp
0001B753: add ax, 1
0001B756: add al, byte ptr [bx + si]
0001B758: je 0x1b760
0001B75A: cli 
0001B75B: add ax, 1
0001B75E: push es
0001B75F: add bl, dl
0001B761: push es
0001B762: jnp 0x1b768
0001B764: add word ptr [bx + si], ax
0001B766: or al, byte ptr [bx + si]
0001B768: sbb al, byte ptr [bx]
0001B76A: dec sp
0001B76B: or byte ptr [bx + di], al
0001B76D: add byte ptr [si], cl
0001B76F: add byte ptr [bp + 0x4f07], bl
0001B773: add word ptr [bx + di], ax
0001B775: add byte ptr [si], cl
0001B777: add byte ptr [bp + di + 0x1907], dh
0001B77B: add al, 1
0001B77D: add byte ptr [bx + si], al
0001B77F: add ah, dh
0001B781: pop es
0001B782: mov ax, 0x100
0001B785: add byte ptr [bp + si], cl
0001B787: add bh, bh
0001B789: pop es
0001B78A: fld qword ptr [bx + si]
0001B78C: add word ptr [bx + si], ax
0001B78E: or byte ptr [bx + si], al
0001B790: or al, 8
0001B792: nop 
0001B793: pop es
0001B794: add word ptr [bx + si], ax
0001B796: push cs
0001B797: add byte ptr [di - 0x5cf8], al
0001B79B: add word ptr [bx + di], ax
0001B79D: add byte ptr [bx + si], al
0001B79F: add byte ptr [bx + 0x2508], bl
0001B7A3: or byte ptr [bx + di], al
0001B7A5: add byte ptr [si], al
0001B7A7: add byte ptr [bx + di], ah
0001B7A9: or word ptr [bp + 0x103], dx
0001B7AD: add byte ptr [0x5a00], al
0001B7B1: or word ptr [bx], dx
0001B7B3: add word ptr [bx + di], ax
0001B7B5: add byte ptr [0x6b00], al
0001B7B9: or word ptr [bp + di], di
0001B7BB: add al, byte ptr [bx + di]
0001B7BD: add byte ptr [bx + si], cl
0001B7BF: add byte ptr [bp - 0x65f7], cl
0001B7C3: add ax, 1
0001B7C6: or al, 0
0001B7C8: out 9, ax
0001B7CA: jb 0x1b7d0
0001B7CC: add word ptr [bx + si], ax
0001B7CE: or al, byte ptr [bx + si]
0001B7D0: or cl, byte ptr cs:[di + 0x100]
0001B7D5: add byte ptr [bp + si], al
0001B7D7: add byte ptr [0xce0a], dh
0001B7DB: add word ptr [bx + di], ax
0001B7DD: add byte ptr [0x5200], cl
0001B7E1: or dl, byte ptr [bx + si]
0001B7E3: or word ptr [bx + di], ax
0001B7E5: add byte ptr [0xe300], cl
0001B7E9: or bl, byte ptr [bp + si + 2]
0001B7EC: add word ptr [bx + si], ax
0001B7EE: add byte ptr [bx + si], al
0001B7F0: or byte ptr [bp + di], cl
0001B7F2: retf 
0001B7F3: add ax, word ptr [bx + di]
0001B7F5: add byte ptr [bp + si], cl
0001B7F7: add byte ptr [si + 0xb], al
0001B7FA: adc al, byte ptr [di]
0001B7FC: add word ptr [bx + si], ax
0001B7FE: or al, 0
0001B800: xchg bp, ax
0001B801: or sp, word ptr [bx]
0001B803: add al, 1
0001B805: add byte ptr [bp + si], al
0001B807: add bh, dl
0001B809: or bx, word ptr [bp + di + 9]
0001B80C: add word ptr [bx + si], ax
0001B80E: or byte ptr [bx + si], al
0001B810: insb byte ptr es:[di], dx
0001B811: or al, 8
0001B813: add al, 1
0001B815: add byte ptr [si], cl
0001B817: add byte ptr [si - 0x44f4], ch
0001B81B: or word ptr [bx + di], ax
0001B81D: add byte ptr [bx + si], cl
0001B81F: add byte ptr [bx + 0xd], al
0001B822: jg 0x1b829
0001B824: add word ptr [bx + si], ax
0001B826: or al, 0
0001B828: lahf 
0001B829: or ax, 0x14d6
0001B82C: add word ptr [bx + si], ax
0001B82E: add byte ptr [bx + si], al
0001B830: in al, dx
0001B831: push cs
0001B832: test al, 0xf
0001B834: add word ptr [bx + si], ax
0001B836: push es
0001B837: add dh, ah
; Segment DATA
